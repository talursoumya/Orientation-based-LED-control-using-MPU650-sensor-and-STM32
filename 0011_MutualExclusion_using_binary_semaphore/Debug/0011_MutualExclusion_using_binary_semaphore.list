
0011_MutualExclusion_using_binary_semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08007e30  08007e30  00008e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008004  08008004  0000a064  2**0
                  CONTENTS
  4 .ARM          00000008  08008004  08008004  00009004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800800c  0800800c  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800800c  0800800c  0000900c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008010  08008010  00009010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08008014  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a064  2**0
                  CONTENTS
 10 .bss          00014724  20000064  20000064  0000a064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014788  20014788  0000a064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017748  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035ce  00000000  00000000  000217dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  00024db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c1  00000000  00000000  00026350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024442  00000000  00000000  00027411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019319  00000000  00000000  0004b853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db295  00000000  00000000  00064b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013fe01  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005fe8  00000000  00000000  0013fe44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000e8  00000000  00000000  00145e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e18 	.word	0x08007e18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08007e18 	.word	0x08007e18

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001306c 	.word	0x2001306c

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96a 	b.w	800060c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	460c      	mov	r4, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14e      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035c:	4694      	mov	ip, r2
 800035e:	458c      	cmp	ip, r1
 8000360:	4686      	mov	lr, r0
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	d962      	bls.n	800042e <__udivmoddi4+0xde>
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0320 	rsb	r3, r2, #32
 800036e:	4091      	lsls	r1, r2
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	fa0c fc02 	lsl.w	ip, ip, r2
 8000378:	4319      	orrs	r1, r3
 800037a:	fa00 fe02 	lsl.w	lr, r0, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f f68c 	uxth.w	r6, ip
 8000386:	fbb1 f4f7 	udiv	r4, r1, r7
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb07 1114 	mls	r1, r7, r4, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb04 f106 	mul.w	r1, r4, r6
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003a6:	f080 8112 	bcs.w	80005ce <__udivmoddi4+0x27e>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 810f 	bls.w	80005ce <__udivmoddi4+0x27e>
 80003b0:	3c02      	subs	r4, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a59      	subs	r1, r3, r1
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80003be:	fb07 1110 	mls	r1, r7, r0, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb00 f606 	mul.w	r6, r0, r6
 80003ca:	429e      	cmp	r6, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x94>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d6:	f080 80fc 	bcs.w	80005d2 <__udivmoddi4+0x282>
 80003da:	429e      	cmp	r6, r3
 80003dc:	f240 80f9 	bls.w	80005d2 <__udivmoddi4+0x282>
 80003e0:	4463      	add	r3, ip
 80003e2:	3802      	subs	r0, #2
 80003e4:	1b9b      	subs	r3, r3, r6
 80003e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ea:	2100      	movs	r1, #0
 80003ec:	b11d      	cbz	r5, 80003f6 <__udivmoddi4+0xa6>
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	e9c5 3200 	strd	r3, r2, [r5]
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d905      	bls.n	800040a <__udivmoddi4+0xba>
 80003fe:	b10d      	cbz	r5, 8000404 <__udivmoddi4+0xb4>
 8000400:	e9c5 0100 	strd	r0, r1, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	4608      	mov	r0, r1
 8000408:	e7f5      	b.n	80003f6 <__udivmoddi4+0xa6>
 800040a:	fab3 f183 	clz	r1, r3
 800040e:	2900      	cmp	r1, #0
 8000410:	d146      	bne.n	80004a0 <__udivmoddi4+0x150>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xcc>
 8000416:	4290      	cmp	r0, r2
 8000418:	f0c0 80f0 	bcc.w	80005fc <__udivmoddi4+0x2ac>
 800041c:	1a86      	subs	r6, r0, r2
 800041e:	eb64 0303 	sbc.w	r3, r4, r3
 8000422:	2001      	movs	r0, #1
 8000424:	2d00      	cmp	r5, #0
 8000426:	d0e6      	beq.n	80003f6 <__udivmoddi4+0xa6>
 8000428:	e9c5 6300 	strd	r6, r3, [r5]
 800042c:	e7e3      	b.n	80003f6 <__udivmoddi4+0xa6>
 800042e:	2a00      	cmp	r2, #0
 8000430:	f040 8090 	bne.w	8000554 <__udivmoddi4+0x204>
 8000434:	eba1 040c 	sub.w	r4, r1, ip
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	2101      	movs	r1, #1
 8000442:	fbb4 f6f8 	udiv	r6, r4, r8
 8000446:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044a:	fb08 4416 	mls	r4, r8, r6, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb07 f006 	mul.w	r0, r7, r6
 8000456:	4298      	cmp	r0, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x11c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x11a>
 8000464:	4298      	cmp	r0, r3
 8000466:	f200 80cd 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 800046a:	4626      	mov	r6, r4
 800046c:	1a1c      	subs	r4, r3, r0
 800046e:	fa1f f38e 	uxth.w	r3, lr
 8000472:	fbb4 f0f8 	udiv	r0, r4, r8
 8000476:	fb08 4410 	mls	r4, r8, r0, r4
 800047a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047e:	fb00 f707 	mul.w	r7, r0, r7
 8000482:	429f      	cmp	r7, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x148>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x146>
 8000490:	429f      	cmp	r7, r3
 8000492:	f200 80b0 	bhi.w	80005f6 <__udivmoddi4+0x2a6>
 8000496:	4620      	mov	r0, r4
 8000498:	1bdb      	subs	r3, r3, r7
 800049a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0x9c>
 80004a0:	f1c1 0620 	rsb	r6, r1, #32
 80004a4:	408b      	lsls	r3, r1
 80004a6:	fa22 f706 	lsr.w	r7, r2, r6
 80004aa:	431f      	orrs	r7, r3
 80004ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b0:	fa04 f301 	lsl.w	r3, r4, r1
 80004b4:	ea43 030c 	orr.w	r3, r3, ip
 80004b8:	40f4      	lsrs	r4, r6
 80004ba:	fa00 f801 	lsl.w	r8, r0, r1
 80004be:	0c38      	lsrs	r0, r7, #16
 80004c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c4:	fbb4 fef0 	udiv	lr, r4, r0
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	fb00 441e 	mls	r4, r0, lr, r4
 80004d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d4:	fb0e f90c 	mul.w	r9, lr, ip
 80004d8:	45a1      	cmp	r9, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	d90a      	bls.n	80004f6 <__udivmoddi4+0x1a6>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004e6:	f080 8084 	bcs.w	80005f2 <__udivmoddi4+0x2a2>
 80004ea:	45a1      	cmp	r9, r4
 80004ec:	f240 8081 	bls.w	80005f2 <__udivmoddi4+0x2a2>
 80004f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	eba4 0409 	sub.w	r4, r4, r9
 80004fa:	fa1f f983 	uxth.w	r9, r3
 80004fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000502:	fb00 4413 	mls	r4, r0, r3, r4
 8000506:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800050a:	fb03 fc0c 	mul.w	ip, r3, ip
 800050e:	45a4      	cmp	ip, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x1d2>
 8000512:	193c      	adds	r4, r7, r4
 8000514:	f103 30ff 	add.w	r0, r3, #4294967295
 8000518:	d267      	bcs.n	80005ea <__udivmoddi4+0x29a>
 800051a:	45a4      	cmp	ip, r4
 800051c:	d965      	bls.n	80005ea <__udivmoddi4+0x29a>
 800051e:	3b02      	subs	r3, #2
 8000520:	443c      	add	r4, r7
 8000522:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000526:	fba0 9302 	umull	r9, r3, r0, r2
 800052a:	eba4 040c 	sub.w	r4, r4, ip
 800052e:	429c      	cmp	r4, r3
 8000530:	46ce      	mov	lr, r9
 8000532:	469c      	mov	ip, r3
 8000534:	d351      	bcc.n	80005da <__udivmoddi4+0x28a>
 8000536:	d04e      	beq.n	80005d6 <__udivmoddi4+0x286>
 8000538:	b155      	cbz	r5, 8000550 <__udivmoddi4+0x200>
 800053a:	ebb8 030e 	subs.w	r3, r8, lr
 800053e:	eb64 040c 	sbc.w	r4, r4, ip
 8000542:	fa04 f606 	lsl.w	r6, r4, r6
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431e      	orrs	r6, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	e9c5 6400 	strd	r6, r4, [r5]
 8000550:	2100      	movs	r1, #0
 8000552:	e750      	b.n	80003f6 <__udivmoddi4+0xa6>
 8000554:	f1c2 0320 	rsb	r3, r2, #32
 8000558:	fa20 f103 	lsr.w	r1, r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa24 f303 	lsr.w	r3, r4, r3
 8000564:	4094      	lsls	r4, r2
 8000566:	430c      	orrs	r4, r1
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000570:	fa1f f78c 	uxth.w	r7, ip
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3110 	mls	r1, r8, r0, r3
 800057c:	0c23      	lsrs	r3, r4, #16
 800057e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000582:	fb00 f107 	mul.w	r1, r0, r7
 8000586:	4299      	cmp	r1, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x24c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000592:	d22c      	bcs.n	80005ee <__udivmoddi4+0x29e>
 8000594:	4299      	cmp	r1, r3
 8000596:	d92a      	bls.n	80005ee <__udivmoddi4+0x29e>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1a5b      	subs	r3, r3, r1
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a4:	fb08 3311 	mls	r3, r8, r1, r3
 80005a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ac:	fb01 f307 	mul.w	r3, r1, r7
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x276>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005bc:	d213      	bcs.n	80005e6 <__udivmoddi4+0x296>
 80005be:	42a3      	cmp	r3, r4
 80005c0:	d911      	bls.n	80005e6 <__udivmoddi4+0x296>
 80005c2:	3902      	subs	r1, #2
 80005c4:	4464      	add	r4, ip
 80005c6:	1ae4      	subs	r4, r4, r3
 80005c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005cc:	e739      	b.n	8000442 <__udivmoddi4+0xf2>
 80005ce:	4604      	mov	r4, r0
 80005d0:	e6f0      	b.n	80003b4 <__udivmoddi4+0x64>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e706      	b.n	80003e4 <__udivmoddi4+0x94>
 80005d6:	45c8      	cmp	r8, r9
 80005d8:	d2ae      	bcs.n	8000538 <__udivmoddi4+0x1e8>
 80005da:	ebb9 0e02 	subs.w	lr, r9, r2
 80005de:	eb63 0c07 	sbc.w	ip, r3, r7
 80005e2:	3801      	subs	r0, #1
 80005e4:	e7a8      	b.n	8000538 <__udivmoddi4+0x1e8>
 80005e6:	4631      	mov	r1, r6
 80005e8:	e7ed      	b.n	80005c6 <__udivmoddi4+0x276>
 80005ea:	4603      	mov	r3, r0
 80005ec:	e799      	b.n	8000522 <__udivmoddi4+0x1d2>
 80005ee:	4630      	mov	r0, r6
 80005f0:	e7d4      	b.n	800059c <__udivmoddi4+0x24c>
 80005f2:	46d6      	mov	lr, sl
 80005f4:	e77f      	b.n	80004f6 <__udivmoddi4+0x1a6>
 80005f6:	4463      	add	r3, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e74d      	b.n	8000498 <__udivmoddi4+0x148>
 80005fc:	4606      	mov	r6, r0
 80005fe:	4623      	mov	r3, r4
 8000600:	4608      	mov	r0, r1
 8000602:	e70f      	b.n	8000424 <__udivmoddi4+0xd4>
 8000604:	3e02      	subs	r6, #2
 8000606:	4463      	add	r3, ip
 8000608:	e730      	b.n	800046c <__udivmoddi4+0x11c>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	DWT->CTRL |= (1 << 0);//Enable CYCCNT in DWT_CTRL.
 8000616:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <main+0xb8>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a2b      	ldr	r2, [pc, #172]	@ (80006c8 <main+0xb8>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fc5b 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f861 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f8f3 	bl	8000814 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062e:	f000 f8c7 	bl	80007c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Start Recording
  	SEGGER_SYSVIEW_Conf();
 8000632:	f005 f9e5 	bl	8005a00 <SEGGER_SYSVIEW_Conf>
  	//SEGGER_SYSVIEW_Start();

	sprintf(usr_msg,"Demo of Mutual exclusion using binary semaphore\r\n");
 8000636:	4925      	ldr	r1, [pc, #148]	@ (80006cc <main+0xbc>)
 8000638:	4825      	ldr	r0, [pc, #148]	@ (80006d0 <main+0xc0>)
 800063a:	f006 ff3d 	bl	80074b8 <siprintf>
	printmsg(usr_msg);
 800063e:	4824      	ldr	r0, [pc, #144]	@ (80006d0 <main+0xc0>)
 8000640:	f000 fa9a 	bl	8000b78 <printmsg>


	//Creating a binary semaphore
		vSemaphoreCreateBinary(xBinarySemaphore);
 8000644:	2203      	movs	r2, #3
 8000646:	2100      	movs	r1, #0
 8000648:	2001      	movs	r0, #1
 800064a:	f002 fbb7 	bl	8002dbc <xQueueGenericCreate>
 800064e:	4603      	mov	r3, r0
 8000650:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <main+0xc4>)
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <main+0xc4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d006      	beq.n	800066a <main+0x5a>
 800065c:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <main+0xc4>)
 800065e:	6818      	ldr	r0, [r3, #0]
 8000660:	2300      	movs	r3, #0
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	f002 fc35 	bl	8002ed4 <xQueueGenericSend>

		 if(xBinarySemaphore != NULL)
 800066a:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <main+0xc4>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d01f      	beq.n	80006b2 <main+0xa2>
		 {
				/* Create one of the two tasks. */
				xTaskCreate(	vTask1,		/* Pointer to the function that implements the task. */
 8000672:	2300      	movs	r3, #0
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000680:	4915      	ldr	r1, [pc, #84]	@ (80006d8 <main+0xc8>)
 8000682:	4816      	ldr	r0, [pc, #88]	@ (80006dc <main+0xcc>)
 8000684:	f003 f9f4 	bl	8003a70 <xTaskCreate>
								NULL,		/* We are not using the task parameter. */
								1,			/* This task will run at priority 1. */
								NULL );		/* We are not using the task handle. */

				/* Create the other task in exactly the same way. */
				xTaskCreate( vTask2, "Task 2", 500, NULL, 1, NULL );
 8000688:	2300      	movs	r3, #0
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	2301      	movs	r3, #1
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2300      	movs	r3, #0
 8000692:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000696:	4912      	ldr	r1, [pc, #72]	@ (80006e0 <main+0xd0>)
 8000698:	4812      	ldr	r0, [pc, #72]	@ (80006e4 <main+0xd4>)
 800069a:	f003 f9e9 	bl	8003a70 <xTaskCreate>

				//makes sema available for the first time
				xSemaphoreGive(xBinarySemaphore);
 800069e:	4b0d      	ldr	r3, [pc, #52]	@ (80006d4 <main+0xc4>)
 80006a0:	6818      	ldr	r0, [r3, #0]
 80006a2:	2300      	movs	r3, #0
 80006a4:	2200      	movs	r2, #0
 80006a6:	2100      	movs	r1, #0
 80006a8:	f002 fc14 	bl	8002ed4 <xQueueGenericSend>

				/* Start the scheduler so our tasks start executing. */
				vTaskStartScheduler();
 80006ac:	f003 fb7e 	bl	8003dac <vTaskStartScheduler>
 80006b0:	e007      	b.n	80006c2 <main+0xb2>
		 }else
		 {
			 sprintf(usr_msg,"binary semaphore creation failed\r\n");
 80006b2:	490d      	ldr	r1, [pc, #52]	@ (80006e8 <main+0xd8>)
 80006b4:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <main+0xc0>)
 80006b6:	f006 feff 	bl	80074b8 <siprintf>
			 printmsg(usr_msg);
 80006ba:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <main+0xc0>)
 80006bc:	f000 fa5c 	bl	8000b78 <printmsg>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	e7fd      	b.n	80006c2 <main+0xb2>
 80006c6:	bf00      	nop
 80006c8:	e0001000 	.word	0xe0001000
 80006cc:	08007e30 	.word	0x08007e30
 80006d0:	200000c8 	.word	0x200000c8
 80006d4:	200001c4 	.word	0x200001c4
 80006d8:	08007e64 	.word	0x08007e64
 80006dc:	08000ad1 	.word	0x08000ad1
 80006e0:	08007e6c 	.word	0x08007e6c
 80006e4:	08000b25 	.word	0x08000b25
 80006e8:	08007e74 	.word	0x08007e74

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	@ 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2230      	movs	r2, #48	@ 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f006 ff0c 	bl	8007518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b28      	ldr	r3, [pc, #160]	@ (80007b8 <SystemClock_Config+0xcc>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	4a27      	ldr	r2, [pc, #156]	@ (80007b8 <SystemClock_Config+0xcc>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000720:	4b25      	ldr	r3, [pc, #148]	@ (80007b8 <SystemClock_Config+0xcc>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <SystemClock_Config+0xd0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a21      	ldr	r2, [pc, #132]	@ (80007bc <SystemClock_Config+0xd0>)
 8000736:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <SystemClock_Config+0xd0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2310      	movs	r3, #16
 8000752:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000758:	2300      	movs	r3, #0
 800075a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800075c:	2308      	movs	r3, #8
 800075e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000760:	2350      	movs	r3, #80	@ 0x50
 8000762:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000768:	2307      	movs	r3, #7
 800076a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fe8d 	bl	8001490 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800077c:	f000 fa24 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2302      	movs	r3, #2
 8000786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000796:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2102      	movs	r1, #2
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 f8ee 	bl	8001980 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007aa:	f000 fa0d 	bl	8000bc8 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	@ 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <MX_USART2_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007f8:	f001 fdb6 	bl	8002368 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f000 f9e1 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000080 	.word	0x20000080
 8000810:	40004400 	.word	0x40004400

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	@ 0x30
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	4ba2      	ldr	r3, [pc, #648]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4aa1      	ldr	r2, [pc, #644]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000834:	f043 0310 	orr.w	r3, r3, #16
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b9f      	ldr	r3, [pc, #636]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0310 	and.w	r3, r3, #16
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	4b9b      	ldr	r3, [pc, #620]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a9a      	ldr	r2, [pc, #616]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b98      	ldr	r3, [pc, #608]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b94      	ldr	r3, [pc, #592]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a93      	ldr	r2, [pc, #588]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b91      	ldr	r3, [pc, #580]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b8d      	ldr	r3, [pc, #564]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a8c      	ldr	r2, [pc, #560]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b8a      	ldr	r3, [pc, #552]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b86      	ldr	r3, [pc, #536]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a85      	ldr	r2, [pc, #532]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b83      	ldr	r3, [pc, #524]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b7f      	ldr	r3, [pc, #508]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a7e      	ldr	r2, [pc, #504]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b7c      	ldr	r3, [pc, #496]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2108      	movs	r1, #8
 80008d6:	4879      	ldr	r0, [pc, #484]	@ (8000abc <MX_GPIO_Init+0x2a8>)
 80008d8:	f000 fdc0 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	4877      	ldr	r0, [pc, #476]	@ (8000ac0 <MX_GPIO_Init+0x2ac>)
 80008e2:	f000 fdbb 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e6:	2200      	movs	r2, #0
 80008e8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008ec:	4875      	ldr	r0, [pc, #468]	@ (8000ac4 <MX_GPIO_Init+0x2b0>)
 80008ee:	f000 fdb5 	bl	800145c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008f2:	2308      	movs	r3, #8
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	486c      	ldr	r0, [pc, #432]	@ (8000abc <MX_GPIO_Init+0x2a8>)
 800090a:	f000 fc0b 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800090e:	2301      	movs	r3, #1
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4866      	ldr	r0, [pc, #408]	@ (8000ac0 <MX_GPIO_Init+0x2ac>)
 8000926:	f000 fbfd 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800092a:	2308      	movs	r3, #8
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093a:	2305      	movs	r3, #5
 800093c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	485e      	ldr	r0, [pc, #376]	@ (8000ac0 <MX_GPIO_Init+0x2ac>)
 8000946:	f000 fbed 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094a:	2301      	movs	r3, #1
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	485a      	ldr	r0, [pc, #360]	@ (8000ac8 <MX_GPIO_Init+0x2b4>)
 8000960:	f000 fbe0 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000964:	2310      	movs	r3, #16
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000974:	2306      	movs	r3, #6
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4852      	ldr	r0, [pc, #328]	@ (8000ac8 <MX_GPIO_Init+0x2b4>)
 8000980:	f000 fbd0 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000984:	23e0      	movs	r3, #224	@ 0xe0
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000994:	2305      	movs	r3, #5
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	484a      	ldr	r0, [pc, #296]	@ (8000ac8 <MX_GPIO_Init+0x2b4>)
 80009a0:	f000 fbc0 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009a4:	2304      	movs	r3, #4
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4845      	ldr	r0, [pc, #276]	@ (8000acc <MX_GPIO_Init+0x2b8>)
 80009b8:	f000 fbb4 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ce:	2305      	movs	r3, #5
 80009d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	483c      	ldr	r0, [pc, #240]	@ (8000acc <MX_GPIO_Init+0x2b8>)
 80009da:	f000 fba3 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009de:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009e2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4833      	ldr	r0, [pc, #204]	@ (8000ac4 <MX_GPIO_Init+0x2b0>)
 80009f8:	f000 fb94 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009fc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a0e:	2306      	movs	r3, #6
 8000a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4829      	ldr	r0, [pc, #164]	@ (8000ac0 <MX_GPIO_Init+0x2ac>)
 8000a1a:	f000 fb83 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4825      	ldr	r0, [pc, #148]	@ (8000ac8 <MX_GPIO_Init+0x2b4>)
 8000a34:	f000 fb76 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a38:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a4a:	230a      	movs	r3, #10
 8000a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	481c      	ldr	r0, [pc, #112]	@ (8000ac8 <MX_GPIO_Init+0x2b4>)
 8000a56:	f000 fb65 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a5a:	2320      	movs	r3, #32
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4815      	ldr	r0, [pc, #84]	@ (8000ac4 <MX_GPIO_Init+0x2b0>)
 8000a6e:	f000 fb59 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a72:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a78:	2312      	movs	r3, #18
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a84:	2304      	movs	r3, #4
 8000a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480f      	ldr	r0, [pc, #60]	@ (8000acc <MX_GPIO_Init+0x2b8>)
 8000a90:	f000 fb48 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a98:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4804      	ldr	r0, [pc, #16]	@ (8000abc <MX_GPIO_Init+0x2a8>)
 8000aaa:	f000 fb3b 	bl	8001124 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aae:	bf00      	nop
 8000ab0:	3730      	adds	r7, #48	@ 0x30
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020400 	.word	0x40020400

08000ad0 <vTask1>:

/* USER CODE BEGIN 4 */

void vTask1( void *pvParameters )
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	const char *pcTaskName = "Task 1 is running\r\n";
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <vTask1+0x44>)
 8000ada:	60fb      	str	r3, [r7, #12]
	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{

		//before printing , lets own the semaphore or take the semaphore */
		xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
 8000adc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <vTask1+0x48>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f002 fcf5 	bl	80034d4 <xQueueSemaphoreTake>

		/* Print out the name of this task. */
		sprintf( usr_msg,"%s",pcTaskName);
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	490b      	ldr	r1, [pc, #44]	@ (8000b1c <vTask1+0x4c>)
 8000aee:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <vTask1+0x50>)
 8000af0:	f006 fce2 	bl	80074b8 <siprintf>
		printmsg(usr_msg);
 8000af4:	480a      	ldr	r0, [pc, #40]	@ (8000b20 <vTask1+0x50>)
 8000af6:	f000 f83f 	bl	8000b78 <printmsg>

		//give the semaphore here. give operation increases the bin sema value back to 1
		xSemaphoreGive(xBinarySemaphore);
 8000afa:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <vTask1+0x48>)
 8000afc:	6818      	ldr	r0, [r3, #0]
 8000afe:	2300      	movs	r3, #0
 8000b00:	2200      	movs	r2, #0
 8000b02:	2100      	movs	r1, #0
 8000b04:	f002 f9e6 	bl	8002ed4 <xQueueGenericSend>

		/*Now this task will be blocked for 500ticks */
		vTaskDelay( pdMS_TO_TICKS(500) );
 8000b08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b0c:	f003 f914 	bl	8003d38 <vTaskDelay>
		xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
 8000b10:	bf00      	nop
 8000b12:	e7e3      	b.n	8000adc <vTask1+0xc>
 8000b14:	08007e98 	.word	0x08007e98
 8000b18:	200001c4 	.word	0x200001c4
 8000b1c:	08007eac 	.word	0x08007eac
 8000b20:	200000c8 	.word	0x200000c8

08000b24 <vTask2>:
	}
}

void vTask2( void *pvParameters )
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

	const char *pcTaskName = "Task 2 is running\r\n";
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <vTask2+0x44>)
 8000b2e:	60fb      	str	r3, [r7, #12]
	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{

		//before printing , lets own the semaphore or take the semaphore */
		xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
 8000b30:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <vTask2+0x48>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f04f 31ff 	mov.w	r1, #4294967295
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f002 fccb 	bl	80034d4 <xQueueSemaphoreTake>

		/* Print out the name of this task. */
		sprintf( usr_msg,"%s",pcTaskName);
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	490b      	ldr	r1, [pc, #44]	@ (8000b70 <vTask2+0x4c>)
 8000b42:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <vTask2+0x50>)
 8000b44:	f006 fcb8 	bl	80074b8 <siprintf>
		printmsg(usr_msg);
 8000b48:	480a      	ldr	r0, [pc, #40]	@ (8000b74 <vTask2+0x50>)
 8000b4a:	f000 f815 	bl	8000b78 <printmsg>

		//give the semaphore here. give operation increases the bin sema value back to 1
		xSemaphoreGive(xBinarySemaphore);
 8000b4e:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <vTask2+0x48>)
 8000b50:	6818      	ldr	r0, [r3, #0]
 8000b52:	2300      	movs	r3, #0
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	f002 f9bc 	bl	8002ed4 <xQueueGenericSend>

		/*Now this task will be blocked for 500ticks */
		vTaskDelay( pdMS_TO_TICKS(500));
 8000b5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b60:	f003 f8ea 	bl	8003d38 <vTaskDelay>
		xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
 8000b64:	bf00      	nop
 8000b66:	e7e3      	b.n	8000b30 <vTask2+0xc>
 8000b68:	08007eb0 	.word	0x08007eb0
 8000b6c:	200001c4 	.word	0x200001c4
 8000b70:	08007eac 	.word	0x08007eac
 8000b74:	200000c8 	.word	0x200000c8

08000b78 <printmsg>:
	}
}


void printmsg(char *msg)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fb6f 	bl	8000264 <strlen>
 8000b86:	4603      	mov	r3, r0
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	4803      	ldr	r0, [pc, #12]	@ (8000ba0 <printmsg+0x28>)
 8000b92:	f001 fc39 	bl	8002408 <HAL_UART_Transmit>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000080 	.word	0x20000080

08000ba4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d101      	bne.n	8000bba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bb6:	f000 f9b3 	bl	8000f20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40001000 	.word	0x40001000

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <Error_Handler+0x8>

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	4a08      	ldr	r2, [pc, #32]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a19      	ldr	r2, [pc, #100]	@ (8000ca8 <HAL_UART_MspInit+0x84>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12b      	bne.n	8000c9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <HAL_UART_MspInit+0x88>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	4a17      	ldr	r2, [pc, #92]	@ (8000cac <HAL_UART_MspInit+0x88>)
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c56:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <HAL_UART_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <HAL_UART_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a10      	ldr	r2, [pc, #64]	@ (8000cac <HAL_UART_MspInit+0x88>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c7e:	230c      	movs	r3, #12
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c8e:	2307      	movs	r3, #7
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <HAL_UART_MspInit+0x8c>)
 8000c9a:	f000 fa43 	bl	8001124 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	@ 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40004400 	.word	0x40004400
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08e      	sub	sp, #56	@ 0x38
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4b33      	ldr	r3, [pc, #204]	@ (8000d98 <HAL_InitTick+0xe4>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ccc:	4a32      	ldr	r2, [pc, #200]	@ (8000d98 <HAL_InitTick+0xe4>)
 8000cce:	f043 0310 	orr.w	r3, r3, #16
 8000cd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd4:	4b30      	ldr	r3, [pc, #192]	@ (8000d98 <HAL_InitTick+0xe4>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd8:	f003 0310 	and.w	r3, r3, #16
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ce0:	f107 0210 	add.w	r2, r7, #16
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4611      	mov	r1, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 f868 	bl	8001dc0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d103      	bne.n	8000d02 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cfa:	f001 f839 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 8000cfe:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d00:	e004      	b.n	8000d0c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d02:	f001 f835 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 8000d06:	4603      	mov	r3, r0
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d0e:	4a23      	ldr	r2, [pc, #140]	@ (8000d9c <HAL_InitTick+0xe8>)
 8000d10:	fba2 2303 	umull	r2, r3, r2, r3
 8000d14:	0c9b      	lsrs	r3, r3, #18
 8000d16:	3b01      	subs	r3, #1
 8000d18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	@ (8000da0 <HAL_InitTick+0xec>)
 8000d1c:	4a21      	ldr	r2, [pc, #132]	@ (8000da4 <HAL_InitTick+0xf0>)
 8000d1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <HAL_InitTick+0xec>)
 8000d22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d26:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d28:	4a1d      	ldr	r2, [pc, #116]	@ (8000da0 <HAL_InitTick+0xec>)
 8000d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d2c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000da0 <HAL_InitTick+0xec>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <HAL_InitTick+0xec>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <HAL_InitTick+0xec>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d40:	4817      	ldr	r0, [pc, #92]	@ (8000da0 <HAL_InitTick+0xec>)
 8000d42:	f001 f86f 	bl	8001e24 <HAL_TIM_Base_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d11b      	bne.n	8000d8c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d54:	4812      	ldr	r0, [pc, #72]	@ (8000da0 <HAL_InitTick+0xec>)
 8000d56:	f001 f8bf 	bl	8001ed8 <HAL_TIM_Base_Start_IT>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d111      	bne.n	8000d8c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d68:	2036      	movs	r0, #54	@ 0x36
 8000d6a:	f000 f9cd 	bl	8001108 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d808      	bhi.n	8000d86 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	2036      	movs	r0, #54	@ 0x36
 8000d7a:	f000 f9a9 	bl	80010d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <HAL_InitTick+0xf4>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	e002      	b.n	8000d8c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3738      	adds	r7, #56	@ 0x38
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	431bde83 	.word	0x431bde83
 8000da0:	200001c8 	.word	0x200001c8
 8000da4:	40001000 	.word	0x40001000
 8000da8:	20000004 	.word	0x20000004

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <NMI_Handler+0x4>

08000db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000de8:	4802      	ldr	r0, [pc, #8]	@ (8000df4 <TIM6_DAC_IRQHandler+0x10>)
 8000dea:	f001 f8e5 	bl	8001fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200001c8 	.word	0x200001c8

08000df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e00:	4a14      	ldr	r2, [pc, #80]	@ (8000e54 <_sbrk+0x5c>)
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <_sbrk+0x60>)
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e0c:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e14:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <_sbrk+0x64>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	@ (8000e60 <_sbrk+0x68>)
 8000e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1a:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d207      	bcs.n	8000e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e28:	f006 fb7e 	bl	8007528 <__errno>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	220c      	movs	r2, #12
 8000e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	e009      	b.n	8000e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e38:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	@ (8000e5c <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	4a05      	ldr	r2, [pc, #20]	@ (8000e5c <_sbrk+0x64>)
 8000e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20020000 	.word	0x20020000
 8000e58:	00000400 	.word	0x00000400
 8000e5c:	20000210 	.word	0x20000210
 8000e60:	20014788 	.word	0x20014788

08000e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <SystemInit+0x20>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e6e:	4a05      	ldr	r2, [pc, #20]	@ (8000e84 <SystemInit+0x20>)
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e8c:	f7ff ffea 	bl	8000e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e90:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e92:	490d      	ldr	r1, [pc, #52]	@ (8000ec8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f006 fb3d 	bl	8007534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eba:	f7ff fba9 	bl	8000610 <main>
  bx  lr    
 8000ebe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ecc:	08008014 	.word	0x08008014
  ldr r2, =_sbss
 8000ed0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000ed4:	20014788 	.word	0x20014788

08000ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC_IRQHandler>
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f1c <HAL_Init+0x40>)
 8000ee6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eec:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <HAL_Init+0x40>)
 8000ef2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <HAL_Init+0x40>)
 8000efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f8d8 	bl	80010ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f7ff fed2 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fe60 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023c00 	.word	0x40023c00

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000214 	.word	0x20000214

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000214 	.word	0x20000214

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	@ (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	@ (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	@ (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	@ 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	@ 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff4c 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e2:	f7ff ff61 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 80010e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	68b9      	ldr	r1, [r7, #8]
 80010ec:	6978      	ldr	r0, [r7, #20]
 80010ee:	f7ff ffb1 	bl	8001054 <NVIC_EncodePriority>
 80010f2:	4602      	mov	r2, r0
 80010f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff80 	bl	8001000 <__NVIC_SetPriority>
}
 8001100:	bf00      	nop
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff54 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	@ 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e16b      	b.n	8001418 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 815a 	bne.w	8001412 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d005      	beq.n	8001176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	2b02      	cmp	r3, #2
 8001174:	d130      	bne.n	80011d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 0201 	and.w	r2, r3, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d017      	beq.n	8001214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d123      	bne.n	8001268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	69b9      	ldr	r1, [r7, #24]
 8001264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0203 	and.w	r2, r3, #3
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80b4 	beq.w	8001412 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b60      	ldr	r3, [pc, #384]	@ (8001430 <HAL_GPIO_Init+0x30c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	4a5f      	ldr	r2, [pc, #380]	@ (8001430 <HAL_GPIO_Init+0x30c>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001430 <HAL_GPIO_Init+0x30c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001434 <HAL_GPIO_Init+0x310>)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a52      	ldr	r2, [pc, #328]	@ (8001438 <HAL_GPIO_Init+0x314>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d02b      	beq.n	800134a <HAL_GPIO_Init+0x226>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a51      	ldr	r2, [pc, #324]	@ (800143c <HAL_GPIO_Init+0x318>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d025      	beq.n	8001346 <HAL_GPIO_Init+0x222>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a50      	ldr	r2, [pc, #320]	@ (8001440 <HAL_GPIO_Init+0x31c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d01f      	beq.n	8001342 <HAL_GPIO_Init+0x21e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4f      	ldr	r2, [pc, #316]	@ (8001444 <HAL_GPIO_Init+0x320>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x21a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4e      	ldr	r2, [pc, #312]	@ (8001448 <HAL_GPIO_Init+0x324>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x216>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4d      	ldr	r2, [pc, #308]	@ (800144c <HAL_GPIO_Init+0x328>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x212>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4c      	ldr	r2, [pc, #304]	@ (8001450 <HAL_GPIO_Init+0x32c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x20e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4b      	ldr	r2, [pc, #300]	@ (8001454 <HAL_GPIO_Init+0x330>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x20a>
 800132a:	2307      	movs	r3, #7
 800132c:	e00e      	b.n	800134c <HAL_GPIO_Init+0x228>
 800132e:	2308      	movs	r3, #8
 8001330:	e00c      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001332:	2306      	movs	r3, #6
 8001334:	e00a      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001336:	2305      	movs	r3, #5
 8001338:	e008      	b.n	800134c <HAL_GPIO_Init+0x228>
 800133a:	2304      	movs	r3, #4
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x228>
 800133e:	2303      	movs	r3, #3
 8001340:	e004      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001342:	2302      	movs	r3, #2
 8001344:	e002      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x228>
 800134a:	2300      	movs	r3, #0
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	f002 0203 	and.w	r2, r2, #3
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	4093      	lsls	r3, r2
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800135c:	4935      	ldr	r1, [pc, #212]	@ (8001434 <HAL_GPIO_Init+0x310>)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136a:	4b3b      	ldr	r3, [pc, #236]	@ (8001458 <HAL_GPIO_Init+0x334>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138e:	4a32      	ldr	r2, [pc, #200]	@ (8001458 <HAL_GPIO_Init+0x334>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001394:	4b30      	ldr	r3, [pc, #192]	@ (8001458 <HAL_GPIO_Init+0x334>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b8:	4a27      	ldr	r2, [pc, #156]	@ (8001458 <HAL_GPIO_Init+0x334>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013be:	4b26      	ldr	r3, [pc, #152]	@ (8001458 <HAL_GPIO_Init+0x334>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001458 <HAL_GPIO_Init+0x334>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <HAL_GPIO_Init+0x334>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800140c:	4a12      	ldr	r2, [pc, #72]	@ (8001458 <HAL_GPIO_Init+0x334>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	f67f ae90 	bls.w	8001140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3724      	adds	r7, #36	@ 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40013800 	.word	0x40013800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400
 8001440:	40020800 	.word	0x40020800
 8001444:	40020c00 	.word	0x40020c00
 8001448:	40021000 	.word	0x40021000
 800144c:	40021400 	.word	0x40021400
 8001450:	40021800 	.word	0x40021800
 8001454:	40021c00 	.word	0x40021c00
 8001458:	40013c00 	.word	0x40013c00

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
 8001468:	4613      	mov	r3, r2
 800146a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800146c:	787b      	ldrb	r3, [r7, #1]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001478:	e003      	b.n	8001482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	041a      	lsls	r2, r3, #16
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	619a      	str	r2, [r3, #24]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e267      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d075      	beq.n	800159a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014ae:	4b88      	ldr	r3, [pc, #544]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d00c      	beq.n	80014d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ba:	4b85      	ldr	r3, [pc, #532]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d112      	bne.n	80014ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014c6:	4b82      	ldr	r3, [pc, #520]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014d2:	d10b      	bne.n	80014ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	4b7e      	ldr	r3, [pc, #504]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d05b      	beq.n	8001598 <HAL_RCC_OscConfig+0x108>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d157      	bne.n	8001598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e242      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014f4:	d106      	bne.n	8001504 <HAL_RCC_OscConfig+0x74>
 80014f6:	4b76      	ldr	r3, [pc, #472]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a75      	ldr	r2, [pc, #468]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 80014fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e01d      	b.n	8001540 <HAL_RCC_OscConfig+0xb0>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0x98>
 800150e:	4b70      	ldr	r3, [pc, #448]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a6f      	ldr	r2, [pc, #444]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 8001514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b6d      	ldr	r3, [pc, #436]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a6c      	ldr	r2, [pc, #432]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e00b      	b.n	8001540 <HAL_RCC_OscConfig+0xb0>
 8001528:	4b69      	ldr	r3, [pc, #420]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a68      	ldr	r2, [pc, #416]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 800152e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b66      	ldr	r3, [pc, #408]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a65      	ldr	r2, [pc, #404]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 800153a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800153e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d013      	beq.n	8001570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fcfe 	bl	8000f48 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff fcfa 	bl	8000f48 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	@ 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e207      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001562:	4b5b      	ldr	r3, [pc, #364]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0xc0>
 800156e:	e014      	b.n	800159a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fcea 	bl	8000f48 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fce6 	bl	8000f48 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	@ 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e1f3      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158a:	4b51      	ldr	r3, [pc, #324]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0xe8>
 8001596:	e000      	b.n	800159a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d063      	beq.n	800166e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015a6:	4b4a      	ldr	r3, [pc, #296]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00b      	beq.n	80015ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015b2:	4b47      	ldr	r3, [pc, #284]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d11c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015be:	4b44      	ldr	r3, [pc, #272]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d116      	bne.n	80015f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ca:	4b41      	ldr	r3, [pc, #260]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d005      	beq.n	80015e2 <HAL_RCC_OscConfig+0x152>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d001      	beq.n	80015e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e1c7      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e2:	4b3b      	ldr	r3, [pc, #236]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4937      	ldr	r1, [pc, #220]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f6:	e03a      	b.n	800166e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d020      	beq.n	8001642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001600:	4b34      	ldr	r3, [pc, #208]	@ (80016d4 <HAL_RCC_OscConfig+0x244>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001606:	f7ff fc9f 	bl	8000f48 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160e:	f7ff fc9b 	bl	8000f48 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e1a8      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001620:	4b2b      	ldr	r3, [pc, #172]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162c:	4b28      	ldr	r3, [pc, #160]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4925      	ldr	r1, [pc, #148]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 800163c:	4313      	orrs	r3, r2
 800163e:	600b      	str	r3, [r1, #0]
 8001640:	e015      	b.n	800166e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001642:	4b24      	ldr	r3, [pc, #144]	@ (80016d4 <HAL_RCC_OscConfig+0x244>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff fc7e 	bl	8000f48 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001650:	f7ff fc7a 	bl	8000f48 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e187      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001662:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d036      	beq.n	80016e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d016      	beq.n	80016b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <HAL_RCC_OscConfig+0x248>)
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001688:	f7ff fc5e 	bl	8000f48 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001690:	f7ff fc5a 	bl	8000f48 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e167      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a2:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <HAL_RCC_OscConfig+0x240>)
 80016a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x200>
 80016ae:	e01b      	b.n	80016e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b0:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <HAL_RCC_OscConfig+0x248>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b6:	f7ff fc47 	bl	8000f48 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	e00e      	b.n	80016dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016be:	f7ff fc43 	bl	8000f48 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d907      	bls.n	80016dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e150      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
 80016d0:	40023800 	.word	0x40023800
 80016d4:	42470000 	.word	0x42470000
 80016d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016dc:	4b88      	ldr	r3, [pc, #544]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 80016de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1ea      	bne.n	80016be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 8097 	beq.w	8001824 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fa:	4b81      	ldr	r3, [pc, #516]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10f      	bne.n	8001726 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	4b7d      	ldr	r3, [pc, #500]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	4a7c      	ldr	r2, [pc, #496]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	@ 0x40
 8001716:	4b7a      	ldr	r3, [pc, #488]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001722:	2301      	movs	r3, #1
 8001724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001726:	4b77      	ldr	r3, [pc, #476]	@ (8001904 <HAL_RCC_OscConfig+0x474>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172e:	2b00      	cmp	r3, #0
 8001730:	d118      	bne.n	8001764 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001732:	4b74      	ldr	r3, [pc, #464]	@ (8001904 <HAL_RCC_OscConfig+0x474>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a73      	ldr	r2, [pc, #460]	@ (8001904 <HAL_RCC_OscConfig+0x474>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173e:	f7ff fc03 	bl	8000f48 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001746:	f7ff fbff 	bl	8000f48 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e10c      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	4b6a      	ldr	r3, [pc, #424]	@ (8001904 <HAL_RCC_OscConfig+0x474>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d106      	bne.n	800177a <HAL_RCC_OscConfig+0x2ea>
 800176c:	4b64      	ldr	r3, [pc, #400]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001770:	4a63      	ldr	r2, [pc, #396]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6713      	str	r3, [r2, #112]	@ 0x70
 8001778:	e01c      	b.n	80017b4 <HAL_RCC_OscConfig+0x324>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b05      	cmp	r3, #5
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x30c>
 8001782:	4b5f      	ldr	r3, [pc, #380]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 8001784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001786:	4a5e      	ldr	r2, [pc, #376]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	6713      	str	r3, [r2, #112]	@ 0x70
 800178e:	4b5c      	ldr	r3, [pc, #368]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 8001790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001792:	4a5b      	ldr	r2, [pc, #364]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6713      	str	r3, [r2, #112]	@ 0x70
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0x324>
 800179c:	4b58      	ldr	r3, [pc, #352]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a0:	4a57      	ldr	r2, [pc, #348]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 80017a2:	f023 0301 	bic.w	r3, r3, #1
 80017a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017a8:	4b55      	ldr	r3, [pc, #340]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ac:	4a54      	ldr	r2, [pc, #336]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 80017ae:	f023 0304 	bic.w	r3, r3, #4
 80017b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d015      	beq.n	80017e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017bc:	f7ff fbc4 	bl	8000f48 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c2:	e00a      	b.n	80017da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c4:	f7ff fbc0 	bl	8000f48 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e0cb      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017da:	4b49      	ldr	r3, [pc, #292]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 80017dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0ee      	beq.n	80017c4 <HAL_RCC_OscConfig+0x334>
 80017e6:	e014      	b.n	8001812 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7ff fbae 	bl	8000f48 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f0:	f7ff fbaa 	bl	8000f48 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e0b5      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001806:	4b3e      	ldr	r3, [pc, #248]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 8001808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1ee      	bne.n	80017f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001812:	7dfb      	ldrb	r3, [r7, #23]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d105      	bne.n	8001824 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001818:	4b39      	ldr	r3, [pc, #228]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	4a38      	ldr	r2, [pc, #224]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 800181e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001822:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 80a1 	beq.w	8001970 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800182e:	4b34      	ldr	r3, [pc, #208]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b08      	cmp	r3, #8
 8001838:	d05c      	beq.n	80018f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d141      	bne.n	80018c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001842:	4b31      	ldr	r3, [pc, #196]	@ (8001908 <HAL_RCC_OscConfig+0x478>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fb7e 	bl	8000f48 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff fb7a 	bl	8000f48 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e087      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001862:	4b27      	ldr	r3, [pc, #156]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69da      	ldr	r2, [r3, #28]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	019b      	lsls	r3, r3, #6
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001884:	085b      	lsrs	r3, r3, #1
 8001886:	3b01      	subs	r3, #1
 8001888:	041b      	lsls	r3, r3, #16
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001890:	061b      	lsls	r3, r3, #24
 8001892:	491b      	ldr	r1, [pc, #108]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001898:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <HAL_RCC_OscConfig+0x478>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff fb53 	bl	8000f48 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff fb4f 	bl	8000f48 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e05c      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x416>
 80018c4:	e054      	b.n	8001970 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <HAL_RCC_OscConfig+0x478>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fb3c 	bl	8000f48 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff fb38 	bl	8000f48 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e045      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e6:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_RCC_OscConfig+0x470>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x444>
 80018f2:	e03d      	b.n	8001970 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d107      	bne.n	800190c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e038      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
 8001900:	40023800 	.word	0x40023800
 8001904:	40007000 	.word	0x40007000
 8001908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800190c:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <HAL_RCC_OscConfig+0x4ec>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d028      	beq.n	800196c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d121      	bne.n	800196c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d11a      	bne.n	800196c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800193c:	4013      	ands	r3, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001944:	4293      	cmp	r3, r2
 8001946:	d111      	bne.n	800196c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001952:	085b      	lsrs	r3, r3, #1
 8001954:	3b01      	subs	r3, #1
 8001956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d107      	bne.n	800196c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800

08001980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0cc      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001994:	4b68      	ldr	r3, [pc, #416]	@ (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d90c      	bls.n	80019bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	4b65      	ldr	r3, [pc, #404]	@ (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	4b63      	ldr	r3, [pc, #396]	@ (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0b8      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d020      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d4:	4b59      	ldr	r3, [pc, #356]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4a58      	ldr	r2, [pc, #352]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019ec:	4b53      	ldr	r3, [pc, #332]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4a52      	ldr	r2, [pc, #328]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f8:	4b50      	ldr	r3, [pc, #320]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	494d      	ldr	r1, [pc, #308]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d044      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	4b47      	ldr	r3, [pc, #284]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d119      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e07f      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d003      	beq.n	8001a3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e06f      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e067      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a5e:	4b37      	ldr	r3, [pc, #220]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f023 0203 	bic.w	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4934      	ldr	r1, [pc, #208]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a70:	f7ff fa6a 	bl	8000f48 <HAL_GetTick>
 8001a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a78:	f7ff fa66 	bl	8000f48 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e04f      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 020c 	and.w	r2, r3, #12
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d1eb      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b25      	ldr	r3, [pc, #148]	@ (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d20c      	bcs.n	8001ac8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b22      	ldr	r3, [pc, #136]	@ (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab6:	4b20      	ldr	r3, [pc, #128]	@ (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e032      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad4:	4b19      	ldr	r3, [pc, #100]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4916      	ldr	r1, [pc, #88]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af2:	4b12      	ldr	r3, [pc, #72]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	490e      	ldr	r1, [pc, #56]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b06:	f000 f821 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	490a      	ldr	r1, [pc, #40]	@ (8001b40 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	5ccb      	ldrb	r3, [r1, r3]
 8001b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1e:	4a09      	ldr	r2, [pc, #36]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b22:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f8c4 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023c00 	.word	0x40023c00
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	08007fa4 	.word	0x08007fa4
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b50:	b094      	sub	sp, #80	@ 0x50
 8001b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b64:	4b79      	ldr	r3, [pc, #484]	@ (8001d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d00d      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x40>
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	f200 80e1 	bhi.w	8001d38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0x34>
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d003      	beq.n	8001b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b7e:	e0db      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b80:	4b73      	ldr	r3, [pc, #460]	@ (8001d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b84:	e0db      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b86:	4b73      	ldr	r3, [pc, #460]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b8a:	e0d8      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b94:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b96:	4b6d      	ldr	r3, [pc, #436]	@ (8001d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d063      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8001d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	099b      	lsrs	r3, r3, #6
 8001ba8:	2200      	movs	r2, #0
 8001baa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001bbe:	4622      	mov	r2, r4
 8001bc0:	462b      	mov	r3, r5
 8001bc2:	f04f 0000 	mov.w	r0, #0
 8001bc6:	f04f 0100 	mov.w	r1, #0
 8001bca:	0159      	lsls	r1, r3, #5
 8001bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bd0:	0150      	lsls	r0, r2, #5
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	1a51      	subs	r1, r2, r1
 8001bda:	6139      	str	r1, [r7, #16]
 8001bdc:	4629      	mov	r1, r5
 8001bde:	eb63 0301 	sbc.w	r3, r3, r1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	018b      	lsls	r3, r1, #6
 8001bf4:	4651      	mov	r1, sl
 8001bf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bfa:	4651      	mov	r1, sl
 8001bfc:	018a      	lsls	r2, r1, #6
 8001bfe:	4651      	mov	r1, sl
 8001c00:	ebb2 0801 	subs.w	r8, r2, r1
 8001c04:	4659      	mov	r1, fp
 8001c06:	eb63 0901 	sbc.w	r9, r3, r1
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c1e:	4690      	mov	r8, r2
 8001c20:	4699      	mov	r9, r3
 8001c22:	4623      	mov	r3, r4
 8001c24:	eb18 0303 	adds.w	r3, r8, r3
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	462b      	mov	r3, r5
 8001c2c:	eb49 0303 	adc.w	r3, r9, r3
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c3e:	4629      	mov	r1, r5
 8001c40:	024b      	lsls	r3, r1, #9
 8001c42:	4621      	mov	r1, r4
 8001c44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c48:	4621      	mov	r1, r4
 8001c4a:	024a      	lsls	r2, r1, #9
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c52:	2200      	movs	r2, #0
 8001c54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c5c:	f7fe fb60 	bl	8000320 <__aeabi_uldivmod>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4613      	mov	r3, r2
 8001c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c68:	e058      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6a:	4b38      	ldr	r3, [pc, #224]	@ (8001d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	099b      	lsrs	r3, r3, #6
 8001c70:	2200      	movs	r2, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	4611      	mov	r1, r2
 8001c76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c7a:	623b      	str	r3, [r7, #32]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c84:	4642      	mov	r2, r8
 8001c86:	464b      	mov	r3, r9
 8001c88:	f04f 0000 	mov.w	r0, #0
 8001c8c:	f04f 0100 	mov.w	r1, #0
 8001c90:	0159      	lsls	r1, r3, #5
 8001c92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c96:	0150      	lsls	r0, r2, #5
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4641      	mov	r1, r8
 8001c9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ca2:	4649      	mov	r1, r9
 8001ca4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cbc:	ebb2 040a 	subs.w	r4, r2, sl
 8001cc0:	eb63 050b 	sbc.w	r5, r3, fp
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	00eb      	lsls	r3, r5, #3
 8001cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cd2:	00e2      	lsls	r2, r4, #3
 8001cd4:	4614      	mov	r4, r2
 8001cd6:	461d      	mov	r5, r3
 8001cd8:	4643      	mov	r3, r8
 8001cda:	18e3      	adds	r3, r4, r3
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	464b      	mov	r3, r9
 8001ce0:	eb45 0303 	adc.w	r3, r5, r3
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cf2:	4629      	mov	r1, r5
 8001cf4:	028b      	lsls	r3, r1, #10
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cfc:	4621      	mov	r1, r4
 8001cfe:	028a      	lsls	r2, r1, #10
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d06:	2200      	movs	r2, #0
 8001d08:	61bb      	str	r3, [r7, #24]
 8001d0a:	61fa      	str	r2, [r7, #28]
 8001d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d10:	f7fe fb06 	bl	8000320 <__aeabi_uldivmod>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4613      	mov	r3, r2
 8001d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	0c1b      	lsrs	r3, r3, #16
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	3301      	adds	r3, #1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d36:	e002      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d38:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3750      	adds	r7, #80	@ 0x50
 8001d44:	46bd      	mov	sp, r7
 8001d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	00f42400 	.word	0x00f42400
 8001d54:	007a1200 	.word	0x007a1200

08001d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	@ (8001d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000000 	.word	0x20000000

08001d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d74:	f7ff fff0 	bl	8001d58 <HAL_RCC_GetHCLKFreq>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b05      	ldr	r3, [pc, #20]	@ (8001d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	0a9b      	lsrs	r3, r3, #10
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	4903      	ldr	r1, [pc, #12]	@ (8001d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d86:	5ccb      	ldrb	r3, [r1, r3]
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40023800 	.word	0x40023800
 8001d94:	08007fb4 	.word	0x08007fb4

08001d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d9c:	f7ff ffdc 	bl	8001d58 <HAL_RCC_GetHCLKFreq>
 8001da0:	4602      	mov	r2, r0
 8001da2:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	0b5b      	lsrs	r3, r3, #13
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	4903      	ldr	r1, [pc, #12]	@ (8001dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dae:	5ccb      	ldrb	r3, [r1, r3]
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	08007fb4 	.word	0x08007fb4

08001dc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	220f      	movs	r2, #15
 8001dce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dd0:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <HAL_RCC_GetClockConfig+0x5c>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0203 	and.w	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e1c <HAL_RCC_GetClockConfig+0x5c>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001de8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <HAL_RCC_GetClockConfig+0x5c>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001df4:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <HAL_RCC_GetClockConfig+0x5c>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	08db      	lsrs	r3, r3, #3
 8001dfa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e02:	4b07      	ldr	r3, [pc, #28]	@ (8001e20 <HAL_RCC_GetClockConfig+0x60>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0207 	and.w	r2, r3, #7
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	601a      	str	r2, [r3, #0]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40023c00 	.word	0x40023c00

08001e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e041      	b.n	8001eba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f839 	bl	8001ec2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3304      	adds	r3, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f000 f9c0 	bl	80021e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d001      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e04e      	b.n	8001f8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a23      	ldr	r2, [pc, #140]	@ (8001f9c <HAL_TIM_Base_Start_IT+0xc4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d022      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x80>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f1a:	d01d      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x80>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d018      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x80>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d013      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x80>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00e      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x80>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fac <HAL_TIM_Base_Start_IT+0xd4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d009      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x80>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a19      	ldr	r2, [pc, #100]	@ (8001fb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d004      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x80>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a18      	ldr	r2, [pc, #96]	@ (8001fb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d111      	bne.n	8001f7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d010      	beq.n	8001f8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0201 	orr.w	r2, r2, #1
 8001f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f7a:	e007      	b.n	8001f8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40000400 	.word	0x40000400
 8001fa4:	40000800 	.word	0x40000800
 8001fa8:	40000c00 	.word	0x40000c00
 8001fac:	40010400 	.word	0x40010400
 8001fb0:	40014000 	.word	0x40014000
 8001fb4:	40001800 	.word	0x40001800

08001fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d020      	beq.n	800201c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01b      	beq.n	800201c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0202 	mvn.w	r2, #2
 8001fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f8d2 	bl	80021ac <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f8c4 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f8d5 	bl	80021c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d020      	beq.n	8002068 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01b      	beq.n	8002068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0204 	mvn.w	r2, #4
 8002038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2202      	movs	r2, #2
 800203e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f8ac 	bl	80021ac <HAL_TIM_IC_CaptureCallback>
 8002054:	e005      	b.n	8002062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f89e 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f8af 	bl	80021c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d020      	beq.n	80020b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01b      	beq.n	80020b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0208 	mvn.w	r2, #8
 8002084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2204      	movs	r2, #4
 800208a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f886 	bl	80021ac <HAL_TIM_IC_CaptureCallback>
 80020a0:	e005      	b.n	80020ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f878 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f889 	bl	80021c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d020      	beq.n	8002100 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01b      	beq.n	8002100 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0210 	mvn.w	r2, #16
 80020d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2208      	movs	r2, #8
 80020d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f860 	bl	80021ac <HAL_TIM_IC_CaptureCallback>
 80020ec:	e005      	b.n	80020fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f852 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f863 	bl	80021c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00c      	beq.n	8002124 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0201 	mvn.w	r2, #1
 800211c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fd40 	bl	8000ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00c      	beq.n	8002148 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f906 	bl	8002354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00c      	beq.n	800216c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d007      	beq.n	800216c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f834 	bl	80021d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00c      	beq.n	8002190 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0220 	mvn.w	r2, #32
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f8d8 	bl	8002340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a46      	ldr	r2, [pc, #280]	@ (8002314 <TIM_Base_SetConfig+0x12c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d013      	beq.n	8002228 <TIM_Base_SetConfig+0x40>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002206:	d00f      	beq.n	8002228 <TIM_Base_SetConfig+0x40>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a43      	ldr	r2, [pc, #268]	@ (8002318 <TIM_Base_SetConfig+0x130>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00b      	beq.n	8002228 <TIM_Base_SetConfig+0x40>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a42      	ldr	r2, [pc, #264]	@ (800231c <TIM_Base_SetConfig+0x134>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d007      	beq.n	8002228 <TIM_Base_SetConfig+0x40>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a41      	ldr	r2, [pc, #260]	@ (8002320 <TIM_Base_SetConfig+0x138>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d003      	beq.n	8002228 <TIM_Base_SetConfig+0x40>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a40      	ldr	r2, [pc, #256]	@ (8002324 <TIM_Base_SetConfig+0x13c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d108      	bne.n	800223a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800222e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a35      	ldr	r2, [pc, #212]	@ (8002314 <TIM_Base_SetConfig+0x12c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d02b      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002248:	d027      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a32      	ldr	r2, [pc, #200]	@ (8002318 <TIM_Base_SetConfig+0x130>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d023      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a31      	ldr	r2, [pc, #196]	@ (800231c <TIM_Base_SetConfig+0x134>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d01f      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a30      	ldr	r2, [pc, #192]	@ (8002320 <TIM_Base_SetConfig+0x138>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01b      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a2f      	ldr	r2, [pc, #188]	@ (8002324 <TIM_Base_SetConfig+0x13c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d017      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a2e      	ldr	r2, [pc, #184]	@ (8002328 <TIM_Base_SetConfig+0x140>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a2d      	ldr	r2, [pc, #180]	@ (800232c <TIM_Base_SetConfig+0x144>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00f      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a2c      	ldr	r2, [pc, #176]	@ (8002330 <TIM_Base_SetConfig+0x148>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00b      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a2b      	ldr	r2, [pc, #172]	@ (8002334 <TIM_Base_SetConfig+0x14c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d007      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a2a      	ldr	r2, [pc, #168]	@ (8002338 <TIM_Base_SetConfig+0x150>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d003      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a29      	ldr	r2, [pc, #164]	@ (800233c <TIM_Base_SetConfig+0x154>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d108      	bne.n	80022ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a10      	ldr	r2, [pc, #64]	@ (8002314 <TIM_Base_SetConfig+0x12c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d003      	beq.n	80022e0 <TIM_Base_SetConfig+0xf8>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a12      	ldr	r2, [pc, #72]	@ (8002324 <TIM_Base_SetConfig+0x13c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d103      	bne.n	80022e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d105      	bne.n	8002306 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f023 0201 	bic.w	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	611a      	str	r2, [r3, #16]
  }
}
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40010000 	.word	0x40010000
 8002318:	40000400 	.word	0x40000400
 800231c:	40000800 	.word	0x40000800
 8002320:	40000c00 	.word	0x40000c00
 8002324:	40010400 	.word	0x40010400
 8002328:	40014000 	.word	0x40014000
 800232c:	40014400 	.word	0x40014400
 8002330:	40014800 	.word	0x40014800
 8002334:	40001800 	.word	0x40001800
 8002338:	40001c00 	.word	0x40001c00
 800233c:	40002000 	.word	0x40002000

08002340 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e042      	b.n	8002400 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe fc48 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2224      	movs	r2, #36	@ 0x24
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f973 	bl	8002698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	@ 0x28
 800240c:	af02      	add	r7, sp, #8
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	4613      	mov	r3, r2
 8002416:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b20      	cmp	r3, #32
 8002426:	d175      	bne.n	8002514 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <HAL_UART_Transmit+0x2c>
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e06e      	b.n	8002516 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2221      	movs	r2, #33	@ 0x21
 8002442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002446:	f7fe fd7f 	bl	8000f48 <HAL_GetTick>
 800244a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	88fa      	ldrh	r2, [r7, #6]
 8002450:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	88fa      	ldrh	r2, [r7, #6]
 8002456:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002460:	d108      	bne.n	8002474 <HAL_UART_Transmit+0x6c>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d104      	bne.n	8002474 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	e003      	b.n	800247c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002478:	2300      	movs	r3, #0
 800247a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800247c:	e02e      	b.n	80024dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2200      	movs	r2, #0
 8002486:	2180      	movs	r1, #128	@ 0x80
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f848 	bl	800251e <UART_WaitOnFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e03a      	b.n	8002516 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10b      	bne.n	80024be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	3302      	adds	r3, #2
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	e007      	b.n	80024ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	3301      	adds	r3, #1
 80024cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1cb      	bne.n	800247e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2200      	movs	r2, #0
 80024ee:	2140      	movs	r1, #64	@ 0x40
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 f814 	bl	800251e <UART_WaitOnFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e006      	b.n	8002516 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	e000      	b.n	8002516 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002514:	2302      	movs	r3, #2
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	3720      	adds	r7, #32
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	4613      	mov	r3, r2
 800252c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800252e:	e03b      	b.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d037      	beq.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002538:	f7fe fd06 	bl	8000f48 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	6a3a      	ldr	r2, [r7, #32]
 8002544:	429a      	cmp	r2, r3
 8002546:	d302      	bcc.n	800254e <UART_WaitOnFlagUntilTimeout+0x30>
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e03a      	b.n	80025c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d023      	beq.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b80      	cmp	r3, #128	@ 0x80
 8002564:	d020      	beq.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b40      	cmp	r3, #64	@ 0x40
 800256a:	d01d      	beq.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b08      	cmp	r3, #8
 8002578:	d116      	bne.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f81d 	bl	80025d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2208      	movs	r2, #8
 800259a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e00f      	b.n	80025c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4013      	ands	r3, r2
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d0b4      	beq.n	8002530 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b095      	sub	sp, #84	@ 0x54
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	330c      	adds	r3, #12
 80025de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e2:	e853 3f00 	ldrex	r3, [r3]
 80025e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	330c      	adds	r3, #12
 80025f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80025fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002600:	e841 2300 	strex	r3, r2, [r1]
 8002604:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1e5      	bne.n	80025d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3314      	adds	r3, #20
 8002612:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	e853 3f00 	ldrex	r3, [r3]
 800261a:	61fb      	str	r3, [r7, #28]
   return(result);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	3314      	adds	r3, #20
 800262a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800262c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800262e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002630:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002634:	e841 2300 	strex	r3, r2, [r1]
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e5      	bne.n	800260c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002644:	2b01      	cmp	r3, #1
 8002646:	d119      	bne.n	800267c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	330c      	adds	r3, #12
 800264e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	e853 3f00 	ldrex	r3, [r3]
 8002656:	60bb      	str	r3, [r7, #8]
   return(result);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f023 0310 	bic.w	r3, r3, #16
 800265e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	330c      	adds	r3, #12
 8002666:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002668:	61ba      	str	r2, [r7, #24]
 800266a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266c:	6979      	ldr	r1, [r7, #20]
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	e841 2300 	strex	r3, r2, [r1]
 8002674:	613b      	str	r3, [r7, #16]
   return(result);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1e5      	bne.n	8002648 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800268a:	bf00      	nop
 800268c:	3754      	adds	r7, #84	@ 0x54
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800269c:	b0c0      	sub	sp, #256	@ 0x100
 800269e:	af00      	add	r7, sp, #0
 80026a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b4:	68d9      	ldr	r1, [r3, #12]
 80026b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	ea40 0301 	orr.w	r3, r0, r1
 80026c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80026f0:	f021 010c 	bic.w	r1, r1, #12
 80026f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80026fe:	430b      	orrs	r3, r1
 8002700:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800270e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002712:	6999      	ldr	r1, [r3, #24]
 8002714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	ea40 0301 	orr.w	r3, r0, r1
 800271e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b8f      	ldr	r3, [pc, #572]	@ (8002964 <UART_SetConfig+0x2cc>)
 8002728:	429a      	cmp	r2, r3
 800272a:	d005      	beq.n	8002738 <UART_SetConfig+0xa0>
 800272c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4b8d      	ldr	r3, [pc, #564]	@ (8002968 <UART_SetConfig+0x2d0>)
 8002734:	429a      	cmp	r2, r3
 8002736:	d104      	bne.n	8002742 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002738:	f7ff fb2e 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 800273c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002740:	e003      	b.n	800274a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002742:	f7ff fb15 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 8002746:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800274a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002754:	f040 810c 	bne.w	8002970 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800275c:	2200      	movs	r2, #0
 800275e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002762:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002766:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800276a:	4622      	mov	r2, r4
 800276c:	462b      	mov	r3, r5
 800276e:	1891      	adds	r1, r2, r2
 8002770:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002772:	415b      	adcs	r3, r3
 8002774:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002776:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800277a:	4621      	mov	r1, r4
 800277c:	eb12 0801 	adds.w	r8, r2, r1
 8002780:	4629      	mov	r1, r5
 8002782:	eb43 0901 	adc.w	r9, r3, r1
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800279a:	4690      	mov	r8, r2
 800279c:	4699      	mov	r9, r3
 800279e:	4623      	mov	r3, r4
 80027a0:	eb18 0303 	adds.w	r3, r8, r3
 80027a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027a8:	462b      	mov	r3, r5
 80027aa:	eb49 0303 	adc.w	r3, r9, r3
 80027ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027c6:	460b      	mov	r3, r1
 80027c8:	18db      	adds	r3, r3, r3
 80027ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80027cc:	4613      	mov	r3, r2
 80027ce:	eb42 0303 	adc.w	r3, r2, r3
 80027d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80027d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80027dc:	f7fd fda0 	bl	8000320 <__aeabi_uldivmod>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4b61      	ldr	r3, [pc, #388]	@ (800296c <UART_SetConfig+0x2d4>)
 80027e6:	fba3 2302 	umull	r2, r3, r3, r2
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	011c      	lsls	r4, r3, #4
 80027ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027f2:	2200      	movs	r2, #0
 80027f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80027fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002800:	4642      	mov	r2, r8
 8002802:	464b      	mov	r3, r9
 8002804:	1891      	adds	r1, r2, r2
 8002806:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002808:	415b      	adcs	r3, r3
 800280a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800280c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002810:	4641      	mov	r1, r8
 8002812:	eb12 0a01 	adds.w	sl, r2, r1
 8002816:	4649      	mov	r1, r9
 8002818:	eb43 0b01 	adc.w	fp, r3, r1
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002828:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800282c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002830:	4692      	mov	sl, r2
 8002832:	469b      	mov	fp, r3
 8002834:	4643      	mov	r3, r8
 8002836:	eb1a 0303 	adds.w	r3, sl, r3
 800283a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800283e:	464b      	mov	r3, r9
 8002840:	eb4b 0303 	adc.w	r3, fp, r3
 8002844:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002854:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002858:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800285c:	460b      	mov	r3, r1
 800285e:	18db      	adds	r3, r3, r3
 8002860:	643b      	str	r3, [r7, #64]	@ 0x40
 8002862:	4613      	mov	r3, r2
 8002864:	eb42 0303 	adc.w	r3, r2, r3
 8002868:	647b      	str	r3, [r7, #68]	@ 0x44
 800286a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800286e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002872:	f7fd fd55 	bl	8000320 <__aeabi_uldivmod>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4611      	mov	r1, r2
 800287c:	4b3b      	ldr	r3, [pc, #236]	@ (800296c <UART_SetConfig+0x2d4>)
 800287e:	fba3 2301 	umull	r2, r3, r3, r1
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	2264      	movs	r2, #100	@ 0x64
 8002886:	fb02 f303 	mul.w	r3, r2, r3
 800288a:	1acb      	subs	r3, r1, r3
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002892:	4b36      	ldr	r3, [pc, #216]	@ (800296c <UART_SetConfig+0x2d4>)
 8002894:	fba3 2302 	umull	r2, r3, r3, r2
 8002898:	095b      	lsrs	r3, r3, #5
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028a0:	441c      	add	r4, r3
 80028a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028a6:	2200      	movs	r2, #0
 80028a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028b4:	4642      	mov	r2, r8
 80028b6:	464b      	mov	r3, r9
 80028b8:	1891      	adds	r1, r2, r2
 80028ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028bc:	415b      	adcs	r3, r3
 80028be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028c4:	4641      	mov	r1, r8
 80028c6:	1851      	adds	r1, r2, r1
 80028c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80028ca:	4649      	mov	r1, r9
 80028cc:	414b      	adcs	r3, r1
 80028ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80028dc:	4659      	mov	r1, fp
 80028de:	00cb      	lsls	r3, r1, #3
 80028e0:	4651      	mov	r1, sl
 80028e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028e6:	4651      	mov	r1, sl
 80028e8:	00ca      	lsls	r2, r1, #3
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	4642      	mov	r2, r8
 80028f2:	189b      	adds	r3, r3, r2
 80028f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028f8:	464b      	mov	r3, r9
 80028fa:	460a      	mov	r2, r1
 80028fc:	eb42 0303 	adc.w	r3, r2, r3
 8002900:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002910:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002914:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002918:	460b      	mov	r3, r1
 800291a:	18db      	adds	r3, r3, r3
 800291c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800291e:	4613      	mov	r3, r2
 8002920:	eb42 0303 	adc.w	r3, r2, r3
 8002924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800292a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800292e:	f7fd fcf7 	bl	8000320 <__aeabi_uldivmod>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4b0d      	ldr	r3, [pc, #52]	@ (800296c <UART_SetConfig+0x2d4>)
 8002938:	fba3 1302 	umull	r1, r3, r3, r2
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	2164      	movs	r1, #100	@ 0x64
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	3332      	adds	r3, #50	@ 0x32
 800294a:	4a08      	ldr	r2, [pc, #32]	@ (800296c <UART_SetConfig+0x2d4>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	f003 0207 	and.w	r2, r3, #7
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4422      	add	r2, r4
 800295e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002960:	e106      	b.n	8002b70 <UART_SetConfig+0x4d8>
 8002962:	bf00      	nop
 8002964:	40011000 	.word	0x40011000
 8002968:	40011400 	.word	0x40011400
 800296c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002974:	2200      	movs	r2, #0
 8002976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800297a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800297e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002982:	4642      	mov	r2, r8
 8002984:	464b      	mov	r3, r9
 8002986:	1891      	adds	r1, r2, r2
 8002988:	6239      	str	r1, [r7, #32]
 800298a:	415b      	adcs	r3, r3
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
 800298e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002992:	4641      	mov	r1, r8
 8002994:	1854      	adds	r4, r2, r1
 8002996:	4649      	mov	r1, r9
 8002998:	eb43 0501 	adc.w	r5, r3, r1
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	00eb      	lsls	r3, r5, #3
 80029a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029aa:	00e2      	lsls	r2, r4, #3
 80029ac:	4614      	mov	r4, r2
 80029ae:	461d      	mov	r5, r3
 80029b0:	4643      	mov	r3, r8
 80029b2:	18e3      	adds	r3, r4, r3
 80029b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029b8:	464b      	mov	r3, r9
 80029ba:	eb45 0303 	adc.w	r3, r5, r3
 80029be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029de:	4629      	mov	r1, r5
 80029e0:	008b      	lsls	r3, r1, #2
 80029e2:	4621      	mov	r1, r4
 80029e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029e8:	4621      	mov	r1, r4
 80029ea:	008a      	lsls	r2, r1, #2
 80029ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80029f0:	f7fd fc96 	bl	8000320 <__aeabi_uldivmod>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4b60      	ldr	r3, [pc, #384]	@ (8002b7c <UART_SetConfig+0x4e4>)
 80029fa:	fba3 2302 	umull	r2, r3, r3, r2
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	011c      	lsls	r4, r3, #4
 8002a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a06:	2200      	movs	r2, #0
 8002a08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a14:	4642      	mov	r2, r8
 8002a16:	464b      	mov	r3, r9
 8002a18:	1891      	adds	r1, r2, r2
 8002a1a:	61b9      	str	r1, [r7, #24]
 8002a1c:	415b      	adcs	r3, r3
 8002a1e:	61fb      	str	r3, [r7, #28]
 8002a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a24:	4641      	mov	r1, r8
 8002a26:	1851      	adds	r1, r2, r1
 8002a28:	6139      	str	r1, [r7, #16]
 8002a2a:	4649      	mov	r1, r9
 8002a2c:	414b      	adcs	r3, r1
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a3c:	4659      	mov	r1, fp
 8002a3e:	00cb      	lsls	r3, r1, #3
 8002a40:	4651      	mov	r1, sl
 8002a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a46:	4651      	mov	r1, sl
 8002a48:	00ca      	lsls	r2, r1, #3
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4642      	mov	r2, r8
 8002a52:	189b      	adds	r3, r3, r2
 8002a54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a58:	464b      	mov	r3, r9
 8002a5a:	460a      	mov	r2, r1
 8002a5c:	eb42 0303 	adc.w	r3, r2, r3
 8002a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a7c:	4649      	mov	r1, r9
 8002a7e:	008b      	lsls	r3, r1, #2
 8002a80:	4641      	mov	r1, r8
 8002a82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a86:	4641      	mov	r1, r8
 8002a88:	008a      	lsls	r2, r1, #2
 8002a8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002a8e:	f7fd fc47 	bl	8000320 <__aeabi_uldivmod>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4611      	mov	r1, r2
 8002a98:	4b38      	ldr	r3, [pc, #224]	@ (8002b7c <UART_SetConfig+0x4e4>)
 8002a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	2264      	movs	r2, #100	@ 0x64
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	1acb      	subs	r3, r1, r3
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	3332      	adds	r3, #50	@ 0x32
 8002aac:	4a33      	ldr	r2, [pc, #204]	@ (8002b7c <UART_SetConfig+0x4e4>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ab8:	441c      	add	r4, r3
 8002aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002abe:	2200      	movs	r2, #0
 8002ac0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ac2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ac4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ac8:	4642      	mov	r2, r8
 8002aca:	464b      	mov	r3, r9
 8002acc:	1891      	adds	r1, r2, r2
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	415b      	adcs	r3, r3
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad8:	4641      	mov	r1, r8
 8002ada:	1851      	adds	r1, r2, r1
 8002adc:	6039      	str	r1, [r7, #0]
 8002ade:	4649      	mov	r1, r9
 8002ae0:	414b      	adcs	r3, r1
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002af0:	4659      	mov	r1, fp
 8002af2:	00cb      	lsls	r3, r1, #3
 8002af4:	4651      	mov	r1, sl
 8002af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002afa:	4651      	mov	r1, sl
 8002afc:	00ca      	lsls	r2, r1, #3
 8002afe:	4610      	mov	r0, r2
 8002b00:	4619      	mov	r1, r3
 8002b02:	4603      	mov	r3, r0
 8002b04:	4642      	mov	r2, r8
 8002b06:	189b      	adds	r3, r3, r2
 8002b08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b0a:	464b      	mov	r3, r9
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	eb42 0303 	adc.w	r3, r2, r3
 8002b12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	008b      	lsls	r3, r1, #2
 8002b30:	4641      	mov	r1, r8
 8002b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b36:	4641      	mov	r1, r8
 8002b38:	008a      	lsls	r2, r1, #2
 8002b3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b3e:	f7fd fbef 	bl	8000320 <__aeabi_uldivmod>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <UART_SetConfig+0x4e4>)
 8002b48:	fba3 1302 	umull	r1, r3, r3, r2
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	2164      	movs	r1, #100	@ 0x64
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	3332      	adds	r3, #50	@ 0x32
 8002b5a:	4a08      	ldr	r2, [pc, #32]	@ (8002b7c <UART_SetConfig+0x4e4>)
 8002b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	f003 020f 	and.w	r2, r3, #15
 8002b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4422      	add	r2, r4
 8002b6e:	609a      	str	r2, [r3, #8]
}
 8002b70:	bf00      	nop
 8002b72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b76:	46bd      	mov	sp, r7
 8002b78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b7c:	51eb851f 	.word	0x51eb851f

08002b80 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f103 0208 	add.w	r2, r3, #8
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f04f 32ff 	mov.w	r2, #4294967295
 8002b98:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f103 0208 	add.w	r2, r3, #8
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f103 0208 	add.w	r2, r3, #8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b085      	sub	sp, #20
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	601a      	str	r2, [r3, #0]
}
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002c22:	b480      	push	{r7}
 8002c24:	b085      	sub	sp, #20
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c38:	d103      	bne.n	8002c42 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	e00c      	b.n	8002c5c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3308      	adds	r3, #8
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	e002      	b.n	8002c50 <vListInsert+0x2e>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d2f6      	bcs.n	8002c4a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	601a      	str	r2, [r3, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6892      	ldr	r2, [r2, #8]
 8002caa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6852      	ldr	r2, [r2, #4]
 8002cb4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d103      	bne.n	8002cc8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	1e5a      	subs	r2, r3, #1
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10b      	bne.n	8002d14 <xQueueGenericReset+0x2c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002d0e:	bf00      	nop
 8002d10:	bf00      	nop
 8002d12:	e7fd      	b.n	8002d10 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002d14:	f002 fb32 	bl	800537c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d20:	68f9      	ldr	r1, [r7, #12]
 8002d22:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	441a      	add	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d44:	3b01      	subs	r3, #1
 8002d46:	68f9      	ldr	r1, [r7, #12]
 8002d48:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	441a      	add	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	22ff      	movs	r2, #255	@ 0xff
 8002d58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	22ff      	movs	r2, #255	@ 0xff
 8002d60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d114      	bne.n	8002d94 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d01a      	beq.n	8002da8 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	3310      	adds	r3, #16
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 faca 	bl	8004310 <xTaskRemoveFromEventList>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d012      	beq.n	8002da8 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002d82:	4b0d      	ldr	r3, [pc, #52]	@ (8002db8 <xQueueGenericReset+0xd0>)
 8002d84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	e009      	b.n	8002da8 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3310      	adds	r3, #16
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fef1 	bl	8002b80 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3324      	adds	r3, #36	@ 0x24
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff feec 	bl	8002b80 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002da8:	f002 fb1a 	bl	80053e0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002dac:	2301      	movs	r3, #1
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	e000ed04 	.word	0xe000ed04

08002dbc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08c      	sub	sp, #48	@ 0x30
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10b      	bne.n	8002de8 <xQueueGenericCreate+0x2c>
        __asm volatile
 8002dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	61bb      	str	r3, [r7, #24]
    }
 8002de2:	bf00      	nop
 8002de4:	bf00      	nop
 8002de6:	e7fd      	b.n	8002de4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	fb02 f303 	mul.w	r3, r2, r3
 8002df0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d006      	beq.n	8002e06 <xQueueGenericCreate+0x4a>
 8002df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d101      	bne.n	8002e0a <xQueueGenericCreate+0x4e>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <xQueueGenericCreate+0x50>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10b      	bne.n	8002e28 <xQueueGenericCreate+0x6c>
        __asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	617b      	str	r3, [r7, #20]
    }
 8002e22:	bf00      	nop
 8002e24:	bf00      	nop
 8002e26:	e7fd      	b.n	8002e24 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002e2e:	d90b      	bls.n	8002e48 <xQueueGenericCreate+0x8c>
        __asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	613b      	str	r3, [r7, #16]
    }
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	3350      	adds	r3, #80	@ 0x50
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 fbc7 	bl	80055e0 <pvPortMalloc>
 8002e52:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3350      	adds	r3, #80	@ 0x50
 8002e62:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e64:	79fa      	ldrb	r2, [r7, #7]
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f805 	bl	8002e80 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002e76:	6a3b      	ldr	r3, [r7, #32]
    }
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3728      	adds	r7, #40	@ 0x28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d103      	bne.n	8002e9c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e002      	b.n	8002ea2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002eae:	2101      	movs	r1, #1
 8002eb0:	69b8      	ldr	r0, [r7, #24]
 8002eb2:	f7ff ff19 	bl	8002ce8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	68f9      	ldr	r1, [r7, #12]
 8002ec4:	2073      	movs	r0, #115	@ 0x73
 8002ec6:	f003 fc21 	bl	800670c <SEGGER_SYSVIEW_RecordU32x3>
}
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b090      	sub	sp, #64	@ 0x40
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8002eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <xQueueGenericSend+0x34>
        __asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002f02:	bf00      	nop
 8002f04:	bf00      	nop
 8002f06:	e7fd      	b.n	8002f04 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d103      	bne.n	8002f16 <xQueueGenericSend+0x42>
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <xQueueGenericSend+0x46>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <xQueueGenericSend+0x48>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10b      	bne.n	8002f38 <xQueueGenericSend+0x64>
        __asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	e7fd      	b.n	8002f34 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d103      	bne.n	8002f46 <xQueueGenericSend+0x72>
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <xQueueGenericSend+0x76>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <xQueueGenericSend+0x78>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10b      	bne.n	8002f68 <xQueueGenericSend+0x94>
        __asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	623b      	str	r3, [r7, #32]
    }
 8002f62:	bf00      	nop
 8002f64:	bf00      	nop
 8002f66:	e7fd      	b.n	8002f64 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f68:	f001 fb76 	bl	8004658 <xTaskGetSchedulerState>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d102      	bne.n	8002f78 <xQueueGenericSend+0xa4>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <xQueueGenericSend+0xa8>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <xQueueGenericSend+0xaa>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10b      	bne.n	8002f9a <xQueueGenericSend+0xc6>
        __asm volatile
 8002f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f86:	f383 8811 	msr	BASEPRI, r3
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	61fb      	str	r3, [r7, #28]
    }
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	e7fd      	b.n	8002f96 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002f9a:	f002 f9ef 	bl	800537c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d302      	bcc.n	8002fb0 <xQueueGenericSend+0xdc>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d136      	bne.n	800301e <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f004 f938 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4601      	mov	r1, r0
 8002fc4:	205a      	movs	r0, #90	@ 0x5a
 8002fc6:	f003 fc17 	bl	80067f8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fd0:	f000 fbd8 	bl	8003784 <prvCopyDataToQueue>
 8002fd4:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d010      	beq.n	8003000 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe0:	3324      	adds	r3, #36	@ 0x24
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f001 f994 	bl	8004310 <xTaskRemoveFromEventList>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d013      	beq.n	8003016 <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002fee:	4b4d      	ldr	r3, [pc, #308]	@ (8003124 <xQueueGenericSend+0x250>)
 8002ff0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	e00a      	b.n	8003016 <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003006:	4b47      	ldr	r3, [pc, #284]	@ (8003124 <xQueueGenericSend+0x250>)
 8003008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003016:	f002 f9e3 	bl	80053e0 <vPortExitCritical>
                return pdPASS;
 800301a:	2301      	movs	r3, #1
 800301c:	e07d      	b.n	800311a <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d110      	bne.n	8003046 <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003024:	f002 f9dc 	bl	80053e0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8003028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302a:	4618      	mov	r0, r3
 800302c:	f004 f8fc 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	460b      	mov	r3, r1
 800303a:	4601      	mov	r1, r0
 800303c:	205a      	movs	r0, #90	@ 0x5a
 800303e:	f003 fbdb 	bl	80067f8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8003042:	2300      	movs	r3, #0
 8003044:	e069      	b.n	800311a <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003048:	2b00      	cmp	r3, #0
 800304a:	d106      	bne.n	800305a <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	4618      	mov	r0, r3
 8003052:	f001 f9c5 	bl	80043e0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003056:	2301      	movs	r3, #1
 8003058:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800305a:	f002 f9c1 	bl	80053e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800305e:	f000 ff07 	bl	8003e70 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003062:	f002 f98b 	bl	800537c <vPortEnterCritical>
 8003066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003068:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800306c:	b25b      	sxtb	r3, r3
 800306e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003072:	d103      	bne.n	800307c <xQueueGenericSend+0x1a8>
 8003074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800307c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003082:	b25b      	sxtb	r3, r3
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d103      	bne.n	8003092 <xQueueGenericSend+0x1be>
 800308a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003092:	f002 f9a5 	bl	80053e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003096:	1d3a      	adds	r2, r7, #4
 8003098:	f107 0314 	add.w	r3, r7, #20
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f001 f9b4 	bl	800440c <xTaskCheckForTimeOut>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d124      	bne.n	80030f4 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030ac:	f000 fc62 	bl	8003974 <prvIsQueueFull>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d018      	beq.n	80030e8 <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b8:	3310      	adds	r3, #16
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f001 f8d0 	bl	8004264 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80030c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030c6:	f000 fbed 	bl	80038a4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80030ca:	f000 fedf 	bl	8003e8c <xTaskResumeAll>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f47f af62 	bne.w	8002f9a <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80030d6:	4b13      	ldr	r3, [pc, #76]	@ (8003124 <xQueueGenericSend+0x250>)
 80030d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	e758      	b.n	8002f9a <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80030e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030ea:	f000 fbdb 	bl	80038a4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80030ee:	f000 fecd 	bl	8003e8c <xTaskResumeAll>
 80030f2:	e752      	b.n	8002f9a <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80030f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030f6:	f000 fbd5 	bl	80038a4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80030fa:	f000 fec7 	bl	8003e8c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80030fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003100:	4618      	mov	r0, r3
 8003102:	f004 f891 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	460b      	mov	r3, r1
 8003110:	4601      	mov	r1, r0
 8003112:	205a      	movs	r0, #90	@ 0x5a
 8003114:	f003 fb70 	bl	80067f8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8003118:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800311a:	4618      	mov	r0, r3
 800311c:	3738      	adds	r7, #56	@ 0x38
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	e000ed04 	.word	0xe000ed04

08003128 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b090      	sub	sp, #64	@ 0x40
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800313a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10b      	bne.n	8003158 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003152:	bf00      	nop
 8003154:	bf00      	nop
 8003156:	e7fd      	b.n	8003154 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d103      	bne.n	8003166 <xQueueGenericSendFromISR+0x3e>
 800315e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <xQueueGenericSendFromISR+0x42>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <xQueueGenericSendFromISR+0x44>
 800316a:	2300      	movs	r3, #0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10b      	bne.n	8003188 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8003170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003182:	bf00      	nop
 8003184:	bf00      	nop
 8003186:	e7fd      	b.n	8003184 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d103      	bne.n	8003196 <xQueueGenericSendFromISR+0x6e>
 800318e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <xQueueGenericSendFromISR+0x72>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <xQueueGenericSendFromISR+0x74>
 800319a:	2300      	movs	r3, #0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10b      	bne.n	80031b8 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80031a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	623b      	str	r3, [r7, #32]
    }
 80031b2:	bf00      	nop
 80031b4:	bf00      	nop
 80031b6:	e7fd      	b.n	80031b4 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031b8:	f002 f9d0 	bl	800555c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80031bc:	f3ef 8211 	mrs	r2, BASEPRI
 80031c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	61fa      	str	r2, [r7, #28]
 80031d2:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80031d4:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031d6:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d302      	bcc.n	80031ea <xQueueGenericSendFromISR+0xc2>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d149      	bne.n	800327e <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80031ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80031fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031fc:	4618      	mov	r0, r3
 80031fe:	f004 f813 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 8003202:	4601      	mov	r1, r0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	461a      	mov	r2, r3
 8003208:	2060      	movs	r0, #96	@ 0x60
 800320a:	f003 fa25 	bl	8006658 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003214:	f000 fab6 	bl	8003784 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003218:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003220:	d112      	bne.n	8003248 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	2b00      	cmp	r3, #0
 8003228:	d026      	beq.n	8003278 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800322a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800322c:	3324      	adds	r3, #36	@ 0x24
 800322e:	4618      	mov	r0, r3
 8003230:	f001 f86e 	bl	8004310 <xTaskRemoveFromEventList>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d01e      	beq.n	8003278 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01b      	beq.n	8003278 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	e017      	b.n	8003278 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003248:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800324c:	2b7f      	cmp	r3, #127	@ 0x7f
 800324e:	d10b      	bne.n	8003268 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8003250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	617b      	str	r3, [r7, #20]
    }
 8003262:	bf00      	nop
 8003264:	bf00      	nop
 8003266:	e7fd      	b.n	8003264 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003268:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800326c:	3301      	adds	r3, #1
 800326e:	b2db      	uxtb	r3, r3
 8003270:	b25a      	sxtb	r2, r3
 8003272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8003278:	2301      	movs	r3, #1
 800327a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 800327c:	e00b      	b.n	8003296 <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800327e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003280:	4618      	mov	r0, r3
 8003282:	f003 ffd1 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 8003286:	4601      	mov	r1, r0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	461a      	mov	r2, r3
 800328c:	2060      	movs	r0, #96	@ 0x60
 800328e:	f003 f9e3 	bl	8006658 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8003292:	2300      	movs	r3, #0
 8003294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003298:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80032a0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80032a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3740      	adds	r7, #64	@ 0x40
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b08f      	sub	sp, #60	@ 0x3c
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80032c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10b      	bne.n	80032de <xQueueReceive+0x32>
        __asm volatile
 80032c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	623b      	str	r3, [r7, #32]
    }
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	e7fd      	b.n	80032da <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d103      	bne.n	80032ec <xQueueReceive+0x40>
 80032e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <xQueueReceive+0x44>
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <xQueueReceive+0x46>
 80032f0:	2300      	movs	r3, #0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <xQueueReceive+0x62>
        __asm volatile
 80032f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	61fb      	str	r3, [r7, #28]
    }
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	e7fd      	b.n	800330a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800330e:	f001 f9a3 	bl	8004658 <xTaskGetSchedulerState>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <xQueueReceive+0x72>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <xQueueReceive+0x76>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <xQueueReceive+0x78>
 8003322:	2300      	movs	r3, #0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10b      	bne.n	8003340 <xQueueReceive+0x94>
        __asm volatile
 8003328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	61bb      	str	r3, [r7, #24]
    }
 800333a:	bf00      	nop
 800333c:	bf00      	nop
 800333e:	e7fd      	b.n	800333c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003340:	f002 f81c 	bl	800537c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003348:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	2b00      	cmp	r3, #0
 800334e:	d02f      	beq.n	80033b0 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003354:	f000 fa80 	bl	8003858 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8003358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335a:	4618      	mov	r0, r3
 800335c:	f003 ff64 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 8003360:	4604      	mov	r4, r0
 8003362:	2000      	movs	r0, #0
 8003364:	f003 ff60 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 8003368:	4602      	mov	r2, r0
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2101      	movs	r1, #1
 800336e:	9100      	str	r1, [sp, #0]
 8003370:	4621      	mov	r1, r4
 8003372:	205c      	movs	r0, #92	@ 0x5c
 8003374:	f003 fa40 	bl	80067f8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337a:	1e5a      	subs	r2, r3, #1
 800337c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00f      	beq.n	80033a8 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800338a:	3310      	adds	r3, #16
 800338c:	4618      	mov	r0, r3
 800338e:	f000 ffbf 	bl	8004310 <xTaskRemoveFromEventList>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003398:	4b4d      	ldr	r3, [pc, #308]	@ (80034d0 <xQueueReceive+0x224>)
 800339a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80033a8:	f002 f81a 	bl	80053e0 <vPortExitCritical>
                return pdPASS;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e08a      	b.n	80034c6 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d113      	bne.n	80033de <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80033b6:	f002 f813 	bl	80053e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80033ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033bc:	4618      	mov	r0, r3
 80033be:	f003 ff33 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 80033c2:	4604      	mov	r4, r0
 80033c4:	2000      	movs	r0, #0
 80033c6:	f003 ff2f 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 80033ca:	4602      	mov	r2, r0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2101      	movs	r1, #1
 80033d0:	9100      	str	r1, [sp, #0]
 80033d2:	4621      	mov	r1, r4
 80033d4:	205c      	movs	r0, #92	@ 0x5c
 80033d6:	f003 fa0f 	bl	80067f8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80033da:	2300      	movs	r3, #0
 80033dc:	e073      	b.n	80034c6 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80033de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d106      	bne.n	80033f2 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80033e4:	f107 0310 	add.w	r3, r7, #16
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fff9 	bl	80043e0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80033ee:	2301      	movs	r3, #1
 80033f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80033f2:	f001 fff5 	bl	80053e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80033f6:	f000 fd3b 	bl	8003e70 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80033fa:	f001 ffbf 	bl	800537c <vPortEnterCritical>
 80033fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003400:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003404:	b25b      	sxtb	r3, r3
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d103      	bne.n	8003414 <xQueueReceive+0x168>
 800340c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003416:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800341a:	b25b      	sxtb	r3, r3
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d103      	bne.n	800342a <xQueueReceive+0x17e>
 8003422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800342a:	f001 ffd9 	bl	80053e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800342e:	1d3a      	adds	r2, r7, #4
 8003430:	f107 0310 	add.w	r3, r7, #16
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f000 ffe8 	bl	800440c <xTaskCheckForTimeOut>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d124      	bne.n	800348c <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003444:	f000 fa80 	bl	8003948 <prvIsQueueEmpty>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d018      	beq.n	8003480 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800344e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003450:	3324      	adds	r3, #36	@ 0x24
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f000 ff04 	bl	8004264 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800345c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800345e:	f000 fa21 	bl	80038a4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003462:	f000 fd13 	bl	8003e8c <xTaskResumeAll>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	f47f af69 	bne.w	8003340 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800346e:	4b18      	ldr	r3, [pc, #96]	@ (80034d0 <xQueueReceive+0x224>)
 8003470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	e75f      	b.n	8003340 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003480:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003482:	f000 fa0f 	bl	80038a4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003486:	f000 fd01 	bl	8003e8c <xTaskResumeAll>
 800348a:	e759      	b.n	8003340 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800348c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800348e:	f000 fa09 	bl	80038a4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003492:	f000 fcfb 	bl	8003e8c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003496:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003498:	f000 fa56 	bl	8003948 <prvIsQueueEmpty>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f43f af4e 	beq.w	8003340 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80034a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a6:	4618      	mov	r0, r3
 80034a8:	f003 febe 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 80034ac:	4604      	mov	r4, r0
 80034ae:	2000      	movs	r0, #0
 80034b0:	f003 feba 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 80034b4:	4602      	mov	r2, r0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2101      	movs	r1, #1
 80034ba:	9100      	str	r1, [sp, #0]
 80034bc:	4621      	mov	r1, r4
 80034be:	205c      	movs	r0, #92	@ 0x5c
 80034c0:	f003 f99a 	bl	80067f8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80034c4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3734      	adds	r7, #52	@ 0x34
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd90      	pop	{r4, r7, pc}
 80034ce:	bf00      	nop
 80034d0:	e000ed04 	.word	0xe000ed04

080034d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b091      	sub	sp, #68	@ 0x44
 80034d8:	af02      	add	r7, sp, #8
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80034de:	2300      	movs	r3, #0
 80034e0:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80034e6:	2300      	movs	r3, #0
 80034e8:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80034ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <xQueueSemaphoreTake+0x34>
        __asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	623b      	str	r3, [r7, #32]
    }
 8003502:	bf00      	nop
 8003504:	bf00      	nop
 8003506:	e7fd      	b.n	8003504 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <xQueueSemaphoreTake+0x54>
        __asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	61fb      	str	r3, [r7, #28]
    }
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003528:	f001 f896 	bl	8004658 <xTaskGetSchedulerState>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <xQueueSemaphoreTake+0x64>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <xQueueSemaphoreTake+0x68>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <xQueueSemaphoreTake+0x6a>
 800353c:	2300      	movs	r3, #0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10b      	bne.n	800355a <xQueueSemaphoreTake+0x86>
        __asm volatile
 8003542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	61bb      	str	r3, [r7, #24]
    }
 8003554:	bf00      	nop
 8003556:	bf00      	nop
 8003558:	e7fd      	b.n	8003556 <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800355a:	f001 ff0f 	bl	800537c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800355e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003562:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003566:	2b00      	cmp	r3, #0
 8003568:	d034      	beq.n	80035d4 <xQueueSemaphoreTake+0x100>
            {
                traceQUEUE_RECEIVE( pxQueue );
 800356a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356c:	4618      	mov	r0, r3
 800356e:	f003 fe5b 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 8003572:	4604      	mov	r4, r0
 8003574:	2000      	movs	r0, #0
 8003576:	f003 fe57 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 800357a:	4602      	mov	r2, r0
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2101      	movs	r1, #1
 8003580:	9100      	str	r1, [sp, #0]
 8003582:	4621      	mov	r1, r4
 8003584:	205c      	movs	r0, #92	@ 0x5c
 8003586:	f003 f937 	bl	80067f8 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800358a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358c:	1e5a      	subs	r2, r3, #1
 800358e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003590:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d104      	bne.n	80035a4 <xQueueSemaphoreTake+0xd0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800359a:	f001 fa11 	bl	80049c0 <pvTaskIncrementMutexHeldCount>
 800359e:	4602      	mov	r2, r0
 80035a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a2:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00f      	beq.n	80035cc <xQueueSemaphoreTake+0xf8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ae:	3310      	adds	r3, #16
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fead 	bl	8004310 <xTaskRemoveFromEventList>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <xQueueSemaphoreTake+0xf8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80035bc:	4b64      	ldr	r3, [pc, #400]	@ (8003750 <xQueueSemaphoreTake+0x27c>)
 80035be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80035cc:	f001 ff08 	bl	80053e0 <vPortExitCritical>
                return pdPASS;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0b8      	b.n	8003746 <xQueueSemaphoreTake+0x272>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d122      	bne.n	8003620 <xQueueSemaphoreTake+0x14c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80035da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <xQueueSemaphoreTake+0x124>
        __asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	617b      	str	r3, [r7, #20]
    }
 80035f2:	bf00      	nop
 80035f4:	bf00      	nop
 80035f6:	e7fd      	b.n	80035f4 <xQueueSemaphoreTake+0x120>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80035f8:	f001 fef2 	bl	80053e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80035fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fe:	4618      	mov	r0, r3
 8003600:	f003 fe12 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 8003604:	4604      	mov	r4, r0
 8003606:	2000      	movs	r0, #0
 8003608:	f003 fe0e 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 800360c:	4602      	mov	r2, r0
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2101      	movs	r1, #1
 8003612:	9100      	str	r1, [sp, #0]
 8003614:	4621      	mov	r1, r4
 8003616:	205c      	movs	r0, #92	@ 0x5c
 8003618:	f003 f8ee 	bl	80067f8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800361c:	2300      	movs	r3, #0
 800361e:	e092      	b.n	8003746 <xQueueSemaphoreTake+0x272>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <xQueueSemaphoreTake+0x160>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003626:	f107 030c 	add.w	r3, r7, #12
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fed8 	bl	80043e0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003630:	2301      	movs	r3, #1
 8003632:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003634:	f001 fed4 	bl	80053e0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003638:	f000 fc1a 	bl	8003e70 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800363c:	f001 fe9e 	bl	800537c <vPortEnterCritical>
 8003640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003642:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003646:	b25b      	sxtb	r3, r3
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d103      	bne.n	8003656 <xQueueSemaphoreTake+0x182>
 800364e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003658:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800365c:	b25b      	sxtb	r3, r3
 800365e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003662:	d103      	bne.n	800366c <xQueueSemaphoreTake+0x198>
 8003664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800366c:	f001 feb8 	bl	80053e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003670:	463a      	mov	r2, r7
 8003672:	f107 030c 	add.w	r3, r7, #12
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fec7 	bl	800440c <xTaskCheckForTimeOut>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d132      	bne.n	80036ea <xQueueSemaphoreTake+0x216>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003684:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003686:	f000 f95f 	bl	8003948 <prvIsQueueEmpty>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d026      	beq.n	80036de <xQueueSemaphoreTake+0x20a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d109      	bne.n	80036ac <xQueueSemaphoreTake+0x1d8>
                        {
                            taskENTER_CRITICAL();
 8003698:	f001 fe70 	bl	800537c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800369c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fff7 	bl	8004694 <xTaskPriorityInherit>
 80036a6:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 80036a8:	f001 fe9a 	bl	80053e0 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ae:	3324      	adds	r3, #36	@ 0x24
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	4611      	mov	r1, r2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fdd5 	bl	8004264 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80036ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036bc:	f000 f8f2 	bl	80038a4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80036c0:	f000 fbe4 	bl	8003e8c <xTaskResumeAll>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f47f af47 	bne.w	800355a <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 80036cc:	4b20      	ldr	r3, [pc, #128]	@ (8003750 <xQueueSemaphoreTake+0x27c>)
 80036ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	e73d      	b.n	800355a <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80036de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036e0:	f000 f8e0 	bl	80038a4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80036e4:	f000 fbd2 	bl	8003e8c <xTaskResumeAll>
 80036e8:	e737      	b.n	800355a <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80036ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036ec:	f000 f8da 	bl	80038a4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80036f0:	f000 fbcc 	bl	8003e8c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036f6:	f000 f927 	bl	8003948 <prvIsQueueEmpty>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f43f af2c 	beq.w	800355a <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00d      	beq.n	8003724 <xQueueSemaphoreTake+0x250>
                        {
                            taskENTER_CRITICAL();
 8003708:	f001 fe38 	bl	800537c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800370c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800370e:	f000 f821 	bl	8003754 <prvGetDisinheritPriorityAfterTimeout>
 8003712:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800371a:	4618      	mov	r0, r3
 800371c:	f001 f8b6 	bl	800488c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003720:	f001 fe5e 	bl	80053e0 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003726:	4618      	mov	r0, r3
 8003728:	f003 fd7e 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 800372c:	4604      	mov	r4, r0
 800372e:	2000      	movs	r0, #0
 8003730:	f003 fd7a 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 8003734:	4602      	mov	r2, r0
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2101      	movs	r1, #1
 800373a:	9100      	str	r1, [sp, #0]
 800373c:	4621      	mov	r1, r4
 800373e:	205c      	movs	r0, #92	@ 0x5c
 8003740:	f003 f85a 	bl	80067f8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003744:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003746:	4618      	mov	r0, r3
 8003748:	373c      	adds	r7, #60	@ 0x3c
 800374a:	46bd      	mov	sp, r7
 800374c:	bd90      	pop	{r4, r7, pc}
 800374e:	bf00      	nop
 8003750:	e000ed04 	.word	0xe000ed04

08003754 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	2b00      	cmp	r3, #0
 8003762:	d006      	beq.n	8003772 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f1c3 0305 	rsb	r3, r3, #5
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	e001      	b.n	8003776 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003776:	68fb      	ldr	r3, [r7, #12]
    }
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003798:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10d      	bne.n	80037be <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d14d      	bne.n	8003846 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 ffea 	bl	8004788 <xTaskPriorityDisinherit>
 80037b4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	e043      	b.n	8003846 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d119      	bne.n	80037f8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6858      	ldr	r0, [r3, #4]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037cc:	461a      	mov	r2, r3
 80037ce:	68b9      	ldr	r1, [r7, #8]
 80037d0:	f003 fed6 	bl	8007580 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037dc:	441a      	add	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d32b      	bcc.n	8003846 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	e026      	b.n	8003846 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	68d8      	ldr	r0, [r3, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	461a      	mov	r2, r3
 8003802:	68b9      	ldr	r1, [r7, #8]
 8003804:	f003 febc 	bl	8007580 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	425b      	negs	r3, r3
 8003812:	441a      	add	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d207      	bcs.n	8003834 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	425b      	negs	r3, r3
 800382e:	441a      	add	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d105      	bne.n	8003846 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	3b01      	subs	r3, #1
 8003844:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800384e:	697b      	ldr	r3, [r7, #20]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d018      	beq.n	800389c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	441a      	add	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	429a      	cmp	r2, r3
 8003882:	d303      	bcc.n	800388c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68d9      	ldr	r1, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003894:	461a      	mov	r2, r3
 8003896:	6838      	ldr	r0, [r7, #0]
 8003898:	f003 fe72 	bl	8007580 <memcpy>
    }
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80038ac:	f001 fd66 	bl	800537c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038b6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80038b8:	e011      	b.n	80038de <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d012      	beq.n	80038e8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3324      	adds	r3, #36	@ 0x24
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fd22 	bl	8004310 <xTaskRemoveFromEventList>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80038d2:	f000 fe03 	bl	80044dc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	3b01      	subs	r3, #1
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80038de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	dce9      	bgt.n	80038ba <prvUnlockQueue+0x16>
 80038e6:	e000      	b.n	80038ea <prvUnlockQueue+0x46>
                        break;
 80038e8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	22ff      	movs	r2, #255	@ 0xff
 80038ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80038f2:	f001 fd75 	bl	80053e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80038f6:	f001 fd41 	bl	800537c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003900:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003902:	e011      	b.n	8003928 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d012      	beq.n	8003932 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3310      	adds	r3, #16
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fcfd 	bl	8004310 <xTaskRemoveFromEventList>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800391c:	f000 fdde 	bl	80044dc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003920:	7bbb      	ldrb	r3, [r7, #14]
 8003922:	3b01      	subs	r3, #1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800392c:	2b00      	cmp	r3, #0
 800392e:	dce9      	bgt.n	8003904 <prvUnlockQueue+0x60>
 8003930:	e000      	b.n	8003934 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003932:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	22ff      	movs	r2, #255	@ 0xff
 8003938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800393c:	f001 fd50 	bl	80053e0 <vPortExitCritical>
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003950:	f001 fd14 	bl	800537c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003958:	2b00      	cmp	r3, #0
 800395a:	d102      	bne.n	8003962 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800395c:	2301      	movs	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e001      	b.n	8003966 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003966:	f001 fd3b 	bl	80053e0 <vPortExitCritical>

    return xReturn;
 800396a:	68fb      	ldr	r3, [r7, #12]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800397c:	f001 fcfe 	bl	800537c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003988:	429a      	cmp	r2, r3
 800398a:	d102      	bne.n	8003992 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800398c:	2301      	movs	r3, #1
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	e001      	b.n	8003996 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003996:	f001 fd23 	bl	80053e0 <vPortExitCritical>

    return xReturn;
 800399a:	68fb      	ldr	r3, [r7, #12]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	e01e      	b.n	80039f2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80039b4:	4a13      	ldr	r2, [pc, #76]	@ (8003a04 <vQueueAddToRegistry+0x60>)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d115      	bne.n	80039ec <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80039c0:	4910      	ldr	r1, [pc, #64]	@ (8003a04 <vQueueAddToRegistry+0x60>)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80039ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003a04 <vQueueAddToRegistry+0x60>)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4618      	mov	r0, r3
 80039da:	f003 fc25 	bl	8007228 <SEGGER_SYSVIEW_ShrinkId>
 80039de:	4601      	mov	r1, r0
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	2071      	movs	r0, #113	@ 0x71
 80039e6:	f002 fe37 	bl	8006658 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80039ea:	e006      	b.n	80039fa <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3301      	adds	r3, #1
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b07      	cmp	r3, #7
 80039f6:	d9dd      	bls.n	80039b4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80039f8:	bf00      	nop
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000218 	.word	0x20000218

08003a08 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003a18:	f001 fcb0 	bl	800537c <vPortEnterCritical>
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a22:	b25b      	sxtb	r3, r3
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d103      	bne.n	8003a32 <vQueueWaitForMessageRestricted+0x2a>
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a38:	b25b      	sxtb	r3, r3
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3e:	d103      	bne.n	8003a48 <vQueueWaitForMessageRestricted+0x40>
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a48:	f001 fcca 	bl	80053e0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	3324      	adds	r3, #36	@ 0x24
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	68b9      	ldr	r1, [r7, #8]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fc27 	bl	80042b0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003a62:	6978      	ldr	r0, [r7, #20]
 8003a64:	f7ff ff1e 	bl	80038a4 <prvUnlockQueue>
    }
 8003a68:	bf00      	nop
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08c      	sub	sp, #48	@ 0x30
 8003a74:	af04      	add	r7, sp, #16
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f001 fdab 	bl	80055e0 <pvPortMalloc>
 8003a8a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00e      	beq.n	8003ab0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a92:	2058      	movs	r0, #88	@ 0x58
 8003a94:	f001 fda4 	bl	80055e0 <pvPortMalloc>
 8003a98:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003aa6:	e005      	b.n	8003ab4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003aa8:	6978      	ldr	r0, [r7, #20]
 8003aaa:	f001 fe7b 	bl	80057a4 <vPortFree>
 8003aae:	e001      	b.n	8003ab4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d013      	beq.n	8003ae2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003aba:	88fa      	ldrh	r2, [r7, #6]
 8003abc:	2300      	movs	r3, #0
 8003abe:	9303      	str	r3, [sp, #12]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	9302      	str	r3, [sp, #8]
 8003ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac6:	9301      	str	r3, [sp, #4]
 8003ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68b9      	ldr	r1, [r7, #8]
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f80e 	bl	8003af2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003ad6:	69f8      	ldr	r0, [r7, #28]
 8003ad8:	f000 f8a2 	bl	8003c20 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003adc:	2301      	movs	r3, #1
 8003ade:	61bb      	str	r3, [r7, #24]
 8003ae0:	e002      	b.n	8003ae8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003ae8:	69bb      	ldr	r3, [r7, #24]
    }
 8003aea:	4618      	mov	r0, r3
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b088      	sub	sp, #32
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b02:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	461a      	mov	r2, r3
 8003b0a:	21a5      	movs	r1, #165	@ 0xa5
 8003b0c:	f003 fd04 	bl	8007518 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f023 0307 	bic.w	r3, r3, #7
 8003b28:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00b      	beq.n	8003b4c <prvInitialiseNewTask+0x5a>
        __asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	617b      	str	r3, [r7, #20]
    }
 8003b46:	bf00      	nop
 8003b48:	bf00      	nop
 8003b4a:	e7fd      	b.n	8003b48 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d01f      	beq.n	8003b92 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	e012      	b.n	8003b7e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	7819      	ldrb	r1, [r3, #0]
 8003b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	4413      	add	r3, r2
 8003b66:	3334      	adds	r3, #52	@ 0x34
 8003b68:	460a      	mov	r2, r1
 8003b6a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	4413      	add	r3, r2
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d006      	beq.n	8003b86 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	2b09      	cmp	r3, #9
 8003b82:	d9e9      	bls.n	8003b58 <prvInitialiseNewTask+0x66>
 8003b84:	e000      	b.n	8003b88 <prvInitialiseNewTask+0x96>
            {
                break;
 8003b86:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003b90:	e003      	b.n	8003b9a <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d901      	bls.n	8003ba4 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ba8:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bae:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff f800 	bl	8002bc0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc2:	3318      	adds	r3, #24
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fe fffb 	bl	8002bc0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bce:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd2:	f1c3 0205 	rsb	r2, r3, #5
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bde:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be2:	3350      	adds	r3, #80	@ 0x50
 8003be4:	2204      	movs	r2, #4
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f003 fc95 	bl	8007518 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf0:	3354      	adds	r3, #84	@ 0x54
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f003 fc8e 	bl	8007518 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	68f9      	ldr	r1, [r7, #12]
 8003c00:	69b8      	ldr	r0, [r7, #24]
 8003c02:	f001 fa87 	bl	8005114 <pxPortInitialiseStack>
 8003c06:	4602      	mov	r2, r0
 8003c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c16:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003c18:	bf00      	nop
 8003c1a:	3720      	adds	r7, #32
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003c20:	b5b0      	push	{r4, r5, r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003c28:	f001 fba8 	bl	800537c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d1c <prvAddNewTaskToReadyList+0xfc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	4a3a      	ldr	r2, [pc, #232]	@ (8003d1c <prvAddNewTaskToReadyList+0xfc>)
 8003c34:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003c36:	4b3a      	ldr	r3, [pc, #232]	@ (8003d20 <prvAddNewTaskToReadyList+0x100>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003c3e:	4a38      	ldr	r2, [pc, #224]	@ (8003d20 <prvAddNewTaskToReadyList+0x100>)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c44:	4b35      	ldr	r3, [pc, #212]	@ (8003d1c <prvAddNewTaskToReadyList+0xfc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d110      	bne.n	8003c6e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003c4c:	f000 fc6a 	bl	8004524 <prvInitialiseTaskLists>
 8003c50:	e00d      	b.n	8003c6e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003c52:	4b34      	ldr	r3, [pc, #208]	@ (8003d24 <prvAddNewTaskToReadyList+0x104>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c5a:	4b31      	ldr	r3, [pc, #196]	@ (8003d20 <prvAddNewTaskToReadyList+0x100>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d802      	bhi.n	8003c6e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003c68:	4a2d      	ldr	r2, [pc, #180]	@ (8003d20 <prvAddNewTaskToReadyList+0x100>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003d28 <prvAddNewTaskToReadyList+0x108>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3301      	adds	r3, #1
 8003c74:	4a2c      	ldr	r2, [pc, #176]	@ (8003d28 <prvAddNewTaskToReadyList+0x108>)
 8003c76:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c78:	4b2b      	ldr	r3, [pc, #172]	@ (8003d28 <prvAddNewTaskToReadyList+0x108>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d016      	beq.n	8003cb4 <prvAddNewTaskToReadyList+0x94>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f003 f9a7 	bl	8006fdc <SEGGER_SYSVIEW_OnTaskCreate>
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	461d      	mov	r5, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461c      	mov	r4, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003caa:	1ae3      	subs	r3, r4, r3
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	462b      	mov	r3, r5
 8003cb0:	f001 ff48 	bl	8005b44 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f003 fa14 	bl	80070e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	4b19      	ldr	r3, [pc, #100]	@ (8003d2c <prvAddNewTaskToReadyList+0x10c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	4a18      	ldr	r2, [pc, #96]	@ (8003d2c <prvAddNewTaskToReadyList+0x10c>)
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4a15      	ldr	r2, [pc, #84]	@ (8003d30 <prvAddNewTaskToReadyList+0x110>)
 8003cdc:	441a      	add	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	f7fe ff78 	bl	8002bda <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003cea:	f001 fb79 	bl	80053e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003cee:	4b0d      	ldr	r3, [pc, #52]	@ (8003d24 <prvAddNewTaskToReadyList+0x104>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00e      	beq.n	8003d14 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d20 <prvAddNewTaskToReadyList+0x100>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d207      	bcs.n	8003d14 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003d04:	4b0b      	ldr	r3, [pc, #44]	@ (8003d34 <prvAddNewTaskToReadyList+0x114>)
 8003d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d1c:	20000330 	.word	0x20000330
 8003d20:	20000258 	.word	0x20000258
 8003d24:	2000033c 	.word	0x2000033c
 8003d28:	2000034c 	.word	0x2000034c
 8003d2c:	20000338 	.word	0x20000338
 8003d30:	2000025c 	.word	0x2000025c
 8003d34:	e000ed04 	.word	0xe000ed04

08003d38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d01c      	beq.n	8003d84 <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003d4a:	4b16      	ldr	r3, [pc, #88]	@ (8003da4 <vTaskDelay+0x6c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <vTaskDelay+0x32>
        __asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	60bb      	str	r3, [r7, #8]
    }
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	e7fd      	b.n	8003d66 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003d6a:	f000 f881 	bl	8003e70 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	2023      	movs	r0, #35	@ 0x23
 8003d72:	f002 fc35 	bl	80065e0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d76:	2100      	movs	r1, #0
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fe35 	bl	80049e8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003d7e:	f000 f885 	bl	8003e8c <xTaskResumeAll>
 8003d82:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d107      	bne.n	8003d9a <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 8003d8a:	4b07      	ldr	r3, [pc, #28]	@ (8003da8 <vTaskDelay+0x70>)
 8003d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000358 	.word	0x20000358
 8003da8:	e000ed04 	.word	0xe000ed04

08003dac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003db2:	4b27      	ldr	r3, [pc, #156]	@ (8003e50 <vTaskStartScheduler+0xa4>)
 8003db4:	9301      	str	r3, [sp, #4]
 8003db6:	2300      	movs	r3, #0
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2282      	movs	r2, #130	@ 0x82
 8003dbe:	4925      	ldr	r1, [pc, #148]	@ (8003e54 <vTaskStartScheduler+0xa8>)
 8003dc0:	4825      	ldr	r0, [pc, #148]	@ (8003e58 <vTaskStartScheduler+0xac>)
 8003dc2:	f7ff fe55 	bl	8003a70 <xTaskCreate>
 8003dc6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d102      	bne.n	8003dd4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003dce:	f000 fe83 	bl	8004ad8 <xTimerCreateTimerTask>
 8003dd2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d124      	bne.n	8003e24 <vTaskStartScheduler+0x78>
        __asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	60bb      	str	r3, [r7, #8]
    }
 8003dec:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003dee:	4b1b      	ldr	r3, [pc, #108]	@ (8003e5c <vTaskStartScheduler+0xb0>)
 8003df0:	f04f 32ff 	mov.w	r2, #4294967295
 8003df4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003df6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e60 <vTaskStartScheduler+0xb4>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003dfc:	4b19      	ldr	r3, [pc, #100]	@ (8003e64 <vTaskStartScheduler+0xb8>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003e02:	4b19      	ldr	r3, [pc, #100]	@ (8003e68 <vTaskStartScheduler+0xbc>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4b12      	ldr	r3, [pc, #72]	@ (8003e50 <vTaskStartScheduler+0xa4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d102      	bne.n	8003e14 <vTaskStartScheduler+0x68>
 8003e0e:	f003 f8c9 	bl	8006fa4 <SEGGER_SYSVIEW_OnIdle>
 8003e12:	e004      	b.n	8003e1e <vTaskStartScheduler+0x72>
 8003e14:	4b14      	ldr	r3, [pc, #80]	@ (8003e68 <vTaskStartScheduler+0xbc>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f003 f921 	bl	8007060 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003e1e:	f001 fa09 	bl	8005234 <xPortStartScheduler>
 8003e22:	e00f      	b.n	8003e44 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2a:	d10b      	bne.n	8003e44 <vTaskStartScheduler+0x98>
        __asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	607b      	str	r3, [r7, #4]
    }
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	e7fd      	b.n	8003e40 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003e44:	4b09      	ldr	r3, [pc, #36]	@ (8003e6c <vTaskStartScheduler+0xc0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
}
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	20000354 	.word	0x20000354
 8003e54:	08007ec4 	.word	0x08007ec4
 8003e58:	080044f5 	.word	0x080044f5
 8003e5c:	20000350 	.word	0x20000350
 8003e60:	2000033c 	.word	0x2000033c
 8003e64:	20000334 	.word	0x20000334
 8003e68:	20000258 	.word	0x20000258
 8003e6c:	2000000c 	.word	0x2000000c

08003e70 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003e74:	4b04      	ldr	r3, [pc, #16]	@ (8003e88 <vTaskSuspendAll+0x18>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	4a03      	ldr	r2, [pc, #12]	@ (8003e88 <vTaskSuspendAll+0x18>)
 8003e7c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003e7e:	bf00      	nop
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	20000358 	.word	0x20000358

08003e8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003e9a:	4b44      	ldr	r3, [pc, #272]	@ (8003fac <xTaskResumeAll+0x120>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10b      	bne.n	8003eba <xTaskResumeAll+0x2e>
        __asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	603b      	str	r3, [r7, #0]
    }
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop
 8003eb8:	e7fd      	b.n	8003eb6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003eba:	f001 fa5f 	bl	800537c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8003fac <xTaskResumeAll+0x120>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	4a39      	ldr	r2, [pc, #228]	@ (8003fac <xTaskResumeAll+0x120>)
 8003ec6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ec8:	4b38      	ldr	r3, [pc, #224]	@ (8003fac <xTaskResumeAll+0x120>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d165      	bne.n	8003f9c <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ed0:	4b37      	ldr	r3, [pc, #220]	@ (8003fb0 <xTaskResumeAll+0x124>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d061      	beq.n	8003f9c <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ed8:	e032      	b.n	8003f40 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eda:	4b36      	ldr	r3, [pc, #216]	@ (8003fb4 <xTaskResumeAll+0x128>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3318      	adds	r3, #24
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe fed4 	bl	8002c94 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fe fecf 	bl	8002c94 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f003 f8f3 	bl	80070e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f02:	2201      	movs	r2, #1
 8003f04:	409a      	lsls	r2, r3
 8003f06:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb8 <xTaskResumeAll+0x12c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8003fb8 <xTaskResumeAll+0x12c>)
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4a27      	ldr	r2, [pc, #156]	@ (8003fbc <xTaskResumeAll+0x130>)
 8003f1e:	441a      	add	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f7fe fe57 	bl	8002bda <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f30:	4b23      	ldr	r3, [pc, #140]	@ (8003fc0 <xTaskResumeAll+0x134>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8003f3a:	4b22      	ldr	r3, [pc, #136]	@ (8003fc4 <xTaskResumeAll+0x138>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f40:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb4 <xTaskResumeAll+0x128>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1c8      	bne.n	8003eda <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003f4e:	f000 fb67 	bl	8004620 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f52:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc8 <xTaskResumeAll+0x13c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d010      	beq.n	8003f80 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003f5e:	f000 f859 	bl	8004014 <xTaskIncrementTick>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8003f68:	4b16      	ldr	r3, [pc, #88]	@ (8003fc4 <xTaskResumeAll+0x138>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f1      	bne.n	8003f5e <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8003f7a:	4b13      	ldr	r3, [pc, #76]	@ (8003fc8 <xTaskResumeAll+0x13c>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003f80:	4b10      	ldr	r3, [pc, #64]	@ (8003fc4 <xTaskResumeAll+0x138>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003fcc <xTaskResumeAll+0x140>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003f9c:	f001 fa20 	bl	80053e0 <vPortExitCritical>

    return xAlreadyYielded;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000358 	.word	0x20000358
 8003fb0:	20000330 	.word	0x20000330
 8003fb4:	200002f0 	.word	0x200002f0
 8003fb8:	20000338 	.word	0x20000338
 8003fbc:	2000025c 	.word	0x2000025c
 8003fc0:	20000258 	.word	0x20000258
 8003fc4:	20000344 	.word	0x20000344
 8003fc8:	20000340 	.word	0x20000340
 8003fcc:	e000ed04 	.word	0xe000ed04

08003fd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003fd6:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <xTaskGetTickCount+0x1c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003fdc:	687b      	ldr	r3, [r7, #4]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000334 	.word	0x20000334

08003ff0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ff6:	f001 fab1 	bl	800555c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003ffe:	4b04      	ldr	r3, [pc, #16]	@ (8004010 <xTaskGetTickCountFromISR+0x20>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004004:	683b      	ldr	r3, [r7, #0]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000334 	.word	0x20000334

08004014 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800401e:	4b51      	ldr	r3, [pc, #324]	@ (8004164 <xTaskIncrementTick+0x150>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	f040 8093 	bne.w	800414e <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004028:	4b4f      	ldr	r3, [pc, #316]	@ (8004168 <xTaskIncrementTick+0x154>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3301      	adds	r3, #1
 800402e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004030:	4a4d      	ldr	r2, [pc, #308]	@ (8004168 <xTaskIncrementTick+0x154>)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d121      	bne.n	8004080 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800403c:	4b4b      	ldr	r3, [pc, #300]	@ (800416c <xTaskIncrementTick+0x158>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00b      	beq.n	800405e <xTaskIncrementTick+0x4a>
        __asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	603b      	str	r3, [r7, #0]
    }
 8004058:	bf00      	nop
 800405a:	bf00      	nop
 800405c:	e7fd      	b.n	800405a <xTaskIncrementTick+0x46>
 800405e:	4b43      	ldr	r3, [pc, #268]	@ (800416c <xTaskIncrementTick+0x158>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	4b42      	ldr	r3, [pc, #264]	@ (8004170 <xTaskIncrementTick+0x15c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a40      	ldr	r2, [pc, #256]	@ (800416c <xTaskIncrementTick+0x158>)
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	4a40      	ldr	r2, [pc, #256]	@ (8004170 <xTaskIncrementTick+0x15c>)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	4b40      	ldr	r3, [pc, #256]	@ (8004174 <xTaskIncrementTick+0x160>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3301      	adds	r3, #1
 8004078:	4a3e      	ldr	r2, [pc, #248]	@ (8004174 <xTaskIncrementTick+0x160>)
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	f000 fad0 	bl	8004620 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004080:	4b3d      	ldr	r3, [pc, #244]	@ (8004178 <xTaskIncrementTick+0x164>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	429a      	cmp	r2, r3
 8004088:	d34c      	bcc.n	8004124 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800408a:	4b38      	ldr	r3, [pc, #224]	@ (800416c <xTaskIncrementTick+0x158>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d104      	bne.n	800409e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004094:	4b38      	ldr	r3, [pc, #224]	@ (8004178 <xTaskIncrementTick+0x164>)
 8004096:	f04f 32ff 	mov.w	r2, #4294967295
 800409a:	601a      	str	r2, [r3, #0]
                    break;
 800409c:	e042      	b.n	8004124 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800409e:	4b33      	ldr	r3, [pc, #204]	@ (800416c <xTaskIncrementTick+0x158>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d203      	bcs.n	80040be <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80040b6:	4a30      	ldr	r2, [pc, #192]	@ (8004178 <xTaskIncrementTick+0x164>)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040bc:	e032      	b.n	8004124 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	3304      	adds	r3, #4
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe fde6 	bl	8002c94 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d004      	beq.n	80040da <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	3318      	adds	r3, #24
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe fddd 	bl	8002c94 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4618      	mov	r0, r3
 80040de:	f003 f801 	bl	80070e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e6:	2201      	movs	r2, #1
 80040e8:	409a      	lsls	r2, r3
 80040ea:	4b24      	ldr	r3, [pc, #144]	@ (800417c <xTaskIncrementTick+0x168>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	4a22      	ldr	r2, [pc, #136]	@ (800417c <xTaskIncrementTick+0x168>)
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4a1f      	ldr	r2, [pc, #124]	@ (8004180 <xTaskIncrementTick+0x16c>)
 8004102:	441a      	add	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	3304      	adds	r3, #4
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f7fe fd65 	bl	8002bda <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004114:	4b1b      	ldr	r3, [pc, #108]	@ (8004184 <xTaskIncrementTick+0x170>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411a:	429a      	cmp	r2, r3
 800411c:	d3b5      	bcc.n	800408a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800411e:	2301      	movs	r3, #1
 8004120:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004122:	e7b2      	b.n	800408a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004124:	4b17      	ldr	r3, [pc, #92]	@ (8004184 <xTaskIncrementTick+0x170>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800412a:	4915      	ldr	r1, [pc, #84]	@ (8004180 <xTaskIncrementTick+0x16c>)
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d901      	bls.n	8004140 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 800413c:	2301      	movs	r3, #1
 800413e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004140:	4b11      	ldr	r3, [pc, #68]	@ (8004188 <xTaskIncrementTick+0x174>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d007      	beq.n	8004158 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8004148:	2301      	movs	r3, #1
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	e004      	b.n	8004158 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800414e:	4b0f      	ldr	r3, [pc, #60]	@ (800418c <xTaskIncrementTick+0x178>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3301      	adds	r3, #1
 8004154:	4a0d      	ldr	r2, [pc, #52]	@ (800418c <xTaskIncrementTick+0x178>)
 8004156:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004158:	697b      	ldr	r3, [r7, #20]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000358 	.word	0x20000358
 8004168:	20000334 	.word	0x20000334
 800416c:	200002e8 	.word	0x200002e8
 8004170:	200002ec 	.word	0x200002ec
 8004174:	20000348 	.word	0x20000348
 8004178:	20000350 	.word	0x20000350
 800417c:	20000338 	.word	0x20000338
 8004180:	2000025c 	.word	0x2000025c
 8004184:	20000258 	.word	0x20000258
 8004188:	20000344 	.word	0x20000344
 800418c:	20000340 	.word	0x20000340

08004190 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004196:	4b2d      	ldr	r3, [pc, #180]	@ (800424c <vTaskSwitchContext+0xbc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800419e:	4b2c      	ldr	r3, [pc, #176]	@ (8004250 <vTaskSwitchContext+0xc0>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80041a4:	e04e      	b.n	8004244 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80041a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004250 <vTaskSwitchContext+0xc0>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ac:	4b29      	ldr	r3, [pc, #164]	@ (8004254 <vTaskSwitchContext+0xc4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	fab3 f383 	clz	r3, r3
 80041b8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80041ba:	7afb      	ldrb	r3, [r7, #11]
 80041bc:	f1c3 031f 	rsb	r3, r3, #31
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	4925      	ldr	r1, [pc, #148]	@ (8004258 <vTaskSwitchContext+0xc8>)
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10b      	bne.n	80041ee <vTaskSwitchContext+0x5e>
        __asm volatile
 80041d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	607b      	str	r3, [r7, #4]
    }
 80041e8:	bf00      	nop
 80041ea:	bf00      	nop
 80041ec:	e7fd      	b.n	80041ea <vTaskSwitchContext+0x5a>
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4a17      	ldr	r2, [pc, #92]	@ (8004258 <vTaskSwitchContext+0xc8>)
 80041fa:	4413      	add	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	3308      	adds	r3, #8
 8004210:	429a      	cmp	r2, r3
 8004212:	d104      	bne.n	800421e <vTaskSwitchContext+0x8e>
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4a0d      	ldr	r2, [pc, #52]	@ (800425c <vTaskSwitchContext+0xcc>)
 8004226:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8004228:	4b0c      	ldr	r3, [pc, #48]	@ (800425c <vTaskSwitchContext+0xcc>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4b0c      	ldr	r3, [pc, #48]	@ (8004260 <vTaskSwitchContext+0xd0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d102      	bne.n	800423a <vTaskSwitchContext+0xaa>
 8004234:	f002 feb6 	bl	8006fa4 <SEGGER_SYSVIEW_OnIdle>
}
 8004238:	e004      	b.n	8004244 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800423a:	4b08      	ldr	r3, [pc, #32]	@ (800425c <vTaskSwitchContext+0xcc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f002 ff0e 	bl	8007060 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004244:	bf00      	nop
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000358 	.word	0x20000358
 8004250:	20000344 	.word	0x20000344
 8004254:	20000338 	.word	0x20000338
 8004258:	2000025c 	.word	0x2000025c
 800425c:	20000258 	.word	0x20000258
 8004260:	20000354 	.word	0x20000354

08004264 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10b      	bne.n	800428c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	60fb      	str	r3, [r7, #12]
    }
 8004286:	bf00      	nop
 8004288:	bf00      	nop
 800428a:	e7fd      	b.n	8004288 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800428c:	4b07      	ldr	r3, [pc, #28]	@ (80042ac <vTaskPlaceOnEventList+0x48>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3318      	adds	r3, #24
 8004292:	4619      	mov	r1, r3
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7fe fcc4 	bl	8002c22 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800429a:	2101      	movs	r1, #1
 800429c:	6838      	ldr	r0, [r7, #0]
 800429e:	f000 fba3 	bl	80049e8 <prvAddCurrentTaskToDelayedList>
}
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000258 	.word	0x20000258

080042b0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	617b      	str	r3, [r7, #20]
    }
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	e7fd      	b.n	80042d6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042da:	4b0c      	ldr	r3, [pc, #48]	@ (800430c <vTaskPlaceOnEventListRestricted+0x5c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3318      	adds	r3, #24
 80042e0:	4619      	mov	r1, r3
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f7fe fc79 	bl	8002bda <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80042ee:	f04f 33ff 	mov.w	r3, #4294967295
 80042f2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80042f4:	2024      	movs	r0, #36	@ 0x24
 80042f6:	f002 f955 	bl	80065a4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	68b8      	ldr	r0, [r7, #8]
 80042fe:	f000 fb73 	bl	80049e8 <prvAddCurrentTaskToDelayedList>
    }
 8004302:	bf00      	nop
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000258 	.word	0x20000258

08004310 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	60fb      	str	r3, [r7, #12]
    }
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	e7fd      	b.n	800433a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	3318      	adds	r3, #24
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe fca6 	bl	8002c94 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004348:	4b1f      	ldr	r3, [pc, #124]	@ (80043c8 <xTaskRemoveFromEventList+0xb8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d120      	bne.n	8004392 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	3304      	adds	r3, #4
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe fc9d 	bl	8002c94 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4618      	mov	r0, r3
 800435e:	f002 fec1 	bl	80070e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004366:	2201      	movs	r2, #1
 8004368:	409a      	lsls	r2, r3
 800436a:	4b18      	ldr	r3, [pc, #96]	@ (80043cc <xTaskRemoveFromEventList+0xbc>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4313      	orrs	r3, r2
 8004370:	4a16      	ldr	r2, [pc, #88]	@ (80043cc <xTaskRemoveFromEventList+0xbc>)
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4a13      	ldr	r2, [pc, #76]	@ (80043d0 <xTaskRemoveFromEventList+0xc0>)
 8004382:	441a      	add	r2, r3
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	3304      	adds	r3, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4610      	mov	r0, r2
 800438c:	f7fe fc25 	bl	8002bda <vListInsertEnd>
 8004390:	e005      	b.n	800439e <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	3318      	adds	r3, #24
 8004396:	4619      	mov	r1, r3
 8004398:	480e      	ldr	r0, [pc, #56]	@ (80043d4 <xTaskRemoveFromEventList+0xc4>)
 800439a:	f7fe fc1e 	bl	8002bda <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a2:	4b0d      	ldr	r3, [pc, #52]	@ (80043d8 <xTaskRemoveFromEventList+0xc8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d905      	bls.n	80043b8 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80043ac:	2301      	movs	r3, #1
 80043ae:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80043b0:	4b0a      	ldr	r3, [pc, #40]	@ (80043dc <xTaskRemoveFromEventList+0xcc>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e001      	b.n	80043bc <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80043bc:	697b      	ldr	r3, [r7, #20]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000358 	.word	0x20000358
 80043cc:	20000338 	.word	0x20000338
 80043d0:	2000025c 	.word	0x2000025c
 80043d4:	200002f0 	.word	0x200002f0
 80043d8:	20000258 	.word	0x20000258
 80043dc:	20000344 	.word	0x20000344

080043e0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043e8:	4b06      	ldr	r3, [pc, #24]	@ (8004404 <vTaskInternalSetTimeOutState+0x24>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80043f0:	4b05      	ldr	r3, [pc, #20]	@ (8004408 <vTaskInternalSetTimeOutState+0x28>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	605a      	str	r2, [r3, #4]
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	20000348 	.word	0x20000348
 8004408:	20000334 	.word	0x20000334

0800440c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10b      	bne.n	8004434 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	613b      	str	r3, [r7, #16]
    }
 800442e:	bf00      	nop
 8004430:	bf00      	nop
 8004432:	e7fd      	b.n	8004430 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10b      	bne.n	8004452 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	60fb      	str	r3, [r7, #12]
    }
 800444c:	bf00      	nop
 800444e:	bf00      	nop
 8004450:	e7fd      	b.n	800444e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004452:	f000 ff93 	bl	800537c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004456:	4b1f      	ldr	r3, [pc, #124]	@ (80044d4 <xTaskCheckForTimeOut+0xc8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446e:	d102      	bne.n	8004476 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004470:	2300      	movs	r3, #0
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	e026      	b.n	80044c4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	4b17      	ldr	r3, [pc, #92]	@ (80044d8 <xTaskCheckForTimeOut+0xcc>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d00a      	beq.n	8004498 <xTaskCheckForTimeOut+0x8c>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	429a      	cmp	r2, r3
 800448a:	d305      	bcc.n	8004498 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800448c:	2301      	movs	r3, #1
 800448e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	e015      	b.n	80044c4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d20b      	bcs.n	80044ba <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	1ad2      	subs	r2, r2, r3
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff ff96 	bl	80043e0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	e004      	b.n	80044c4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80044c0:	2301      	movs	r3, #1
 80044c2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80044c4:	f000 ff8c 	bl	80053e0 <vPortExitCritical>

    return xReturn;
 80044c8:	69fb      	ldr	r3, [r7, #28]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3720      	adds	r7, #32
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000334 	.word	0x20000334
 80044d8:	20000348 	.word	0x20000348

080044dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80044e0:	4b03      	ldr	r3, [pc, #12]	@ (80044f0 <vTaskMissedYield+0x14>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
}
 80044e6:	bf00      	nop
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	20000344 	.word	0x20000344

080044f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80044fc:	f000 f852 	bl	80045a4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004500:	4b06      	ldr	r3, [pc, #24]	@ (800451c <prvIdleTask+0x28>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d9f9      	bls.n	80044fc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004508:	4b05      	ldr	r3, [pc, #20]	@ (8004520 <prvIdleTask+0x2c>)
 800450a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004518:	e7f0      	b.n	80044fc <prvIdleTask+0x8>
 800451a:	bf00      	nop
 800451c:	2000025c 	.word	0x2000025c
 8004520:	e000ed04 	.word	0xe000ed04

08004524 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800452a:	2300      	movs	r3, #0
 800452c:	607b      	str	r3, [r7, #4]
 800452e:	e00c      	b.n	800454a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4a12      	ldr	r2, [pc, #72]	@ (8004584 <prvInitialiseTaskLists+0x60>)
 800453c:	4413      	add	r3, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe fb1e 	bl	8002b80 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3301      	adds	r3, #1
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b04      	cmp	r3, #4
 800454e:	d9ef      	bls.n	8004530 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004550:	480d      	ldr	r0, [pc, #52]	@ (8004588 <prvInitialiseTaskLists+0x64>)
 8004552:	f7fe fb15 	bl	8002b80 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004556:	480d      	ldr	r0, [pc, #52]	@ (800458c <prvInitialiseTaskLists+0x68>)
 8004558:	f7fe fb12 	bl	8002b80 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800455c:	480c      	ldr	r0, [pc, #48]	@ (8004590 <prvInitialiseTaskLists+0x6c>)
 800455e:	f7fe fb0f 	bl	8002b80 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004562:	480c      	ldr	r0, [pc, #48]	@ (8004594 <prvInitialiseTaskLists+0x70>)
 8004564:	f7fe fb0c 	bl	8002b80 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004568:	480b      	ldr	r0, [pc, #44]	@ (8004598 <prvInitialiseTaskLists+0x74>)
 800456a:	f7fe fb09 	bl	8002b80 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800456e:	4b0b      	ldr	r3, [pc, #44]	@ (800459c <prvInitialiseTaskLists+0x78>)
 8004570:	4a05      	ldr	r2, [pc, #20]	@ (8004588 <prvInitialiseTaskLists+0x64>)
 8004572:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004574:	4b0a      	ldr	r3, [pc, #40]	@ (80045a0 <prvInitialiseTaskLists+0x7c>)
 8004576:	4a05      	ldr	r2, [pc, #20]	@ (800458c <prvInitialiseTaskLists+0x68>)
 8004578:	601a      	str	r2, [r3, #0]
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	2000025c 	.word	0x2000025c
 8004588:	200002c0 	.word	0x200002c0
 800458c:	200002d4 	.word	0x200002d4
 8004590:	200002f0 	.word	0x200002f0
 8004594:	20000304 	.word	0x20000304
 8004598:	2000031c 	.word	0x2000031c
 800459c:	200002e8 	.word	0x200002e8
 80045a0:	200002ec 	.word	0x200002ec

080045a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045aa:	e019      	b.n	80045e0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80045ac:	f000 fee6 	bl	800537c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b0:	4b10      	ldr	r3, [pc, #64]	@ (80045f4 <prvCheckTasksWaitingTermination+0x50>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fe fb69 	bl	8002c94 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80045c2:	4b0d      	ldr	r3, [pc, #52]	@ (80045f8 <prvCheckTasksWaitingTermination+0x54>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	4a0b      	ldr	r2, [pc, #44]	@ (80045f8 <prvCheckTasksWaitingTermination+0x54>)
 80045ca:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80045cc:	4b0b      	ldr	r3, [pc, #44]	@ (80045fc <prvCheckTasksWaitingTermination+0x58>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	4a0a      	ldr	r2, [pc, #40]	@ (80045fc <prvCheckTasksWaitingTermination+0x58>)
 80045d4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80045d6:	f000 ff03 	bl	80053e0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f810 	bl	8004600 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045e0:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <prvCheckTasksWaitingTermination+0x58>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e1      	bne.n	80045ac <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000304 	.word	0x20000304
 80045f8:	20000330 	.word	0x20000330
 80045fc:	20000318 	.word	0x20000318

08004600 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460c:	4618      	mov	r0, r3
 800460e:	f001 f8c9 	bl	80057a4 <vPortFree>
                vPortFree( pxTCB );
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f001 f8c6 	bl	80057a4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004618:	bf00      	nop
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004624:	4b0a      	ldr	r3, [pc, #40]	@ (8004650 <prvResetNextTaskUnblockTime+0x30>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d104      	bne.n	8004638 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800462e:	4b09      	ldr	r3, [pc, #36]	@ (8004654 <prvResetNextTaskUnblockTime+0x34>)
 8004630:	f04f 32ff 	mov.w	r2, #4294967295
 8004634:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004636:	e005      	b.n	8004644 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004638:	4b05      	ldr	r3, [pc, #20]	@ (8004650 <prvResetNextTaskUnblockTime+0x30>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a04      	ldr	r2, [pc, #16]	@ (8004654 <prvResetNextTaskUnblockTime+0x34>)
 8004642:	6013      	str	r3, [r2, #0]
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	200002e8 	.word	0x200002e8
 8004654:	20000350 	.word	0x20000350

08004658 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800465e:	4b0b      	ldr	r3, [pc, #44]	@ (800468c <xTaskGetSchedulerState+0x34>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004666:	2301      	movs	r3, #1
 8004668:	607b      	str	r3, [r7, #4]
 800466a:	e008      	b.n	800467e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800466c:	4b08      	ldr	r3, [pc, #32]	@ (8004690 <xTaskGetSchedulerState+0x38>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d102      	bne.n	800467a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004674:	2302      	movs	r3, #2
 8004676:	607b      	str	r3, [r7, #4]
 8004678:	e001      	b.n	800467e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800467a:	2300      	movs	r3, #0
 800467c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800467e:	687b      	ldr	r3, [r7, #4]
    }
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	2000033c 	.word	0x2000033c
 8004690:	20000358 	.word	0x20000358

08004694 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d063      	beq.n	8004772 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ae:	4b33      	ldr	r3, [pc, #204]	@ (800477c <xTaskPriorityInherit+0xe8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d253      	bcs.n	8004760 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	db06      	blt.n	80046ce <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046c0:	4b2e      	ldr	r3, [pc, #184]	@ (800477c <xTaskPriorityInherit+0xe8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c6:	f1c3 0205 	rsb	r2, r3, #5
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	6959      	ldr	r1, [r3, #20]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4a28      	ldr	r2, [pc, #160]	@ (8004780 <xTaskPriorityInherit+0xec>)
 80046e0:	4413      	add	r3, r2
 80046e2:	4299      	cmp	r1, r3
 80046e4:	d12f      	bne.n	8004746 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fe fad2 	bl	8002c94 <uxListRemove>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fa:	2201      	movs	r2, #1
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43da      	mvns	r2, r3
 8004702:	4b20      	ldr	r3, [pc, #128]	@ (8004784 <xTaskPriorityInherit+0xf0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4013      	ands	r3, r2
 8004708:	4a1e      	ldr	r2, [pc, #120]	@ (8004784 <xTaskPriorityInherit+0xf0>)
 800470a:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800470c:	4b1b      	ldr	r3, [pc, #108]	@ (800477c <xTaskPriorityInherit+0xe8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471a:	2201      	movs	r2, #1
 800471c:	409a      	lsls	r2, r3
 800471e:	4b19      	ldr	r3, [pc, #100]	@ (8004784 <xTaskPriorityInherit+0xf0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4313      	orrs	r3, r2
 8004724:	4a17      	ldr	r2, [pc, #92]	@ (8004784 <xTaskPriorityInherit+0xf0>)
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4a12      	ldr	r2, [pc, #72]	@ (8004780 <xTaskPriorityInherit+0xec>)
 8004736:	441a      	add	r2, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	3304      	adds	r3, #4
 800473c:	4619      	mov	r1, r3
 800473e:	4610      	mov	r0, r2
 8004740:	f7fe fa4b 	bl	8002bda <vListInsertEnd>
 8004744:	e004      	b.n	8004750 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004746:	4b0d      	ldr	r3, [pc, #52]	@ (800477c <xTaskPriorityInherit+0xe8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4619      	mov	r1, r3
 8004754:	2049      	movs	r0, #73	@ 0x49
 8004756:	f001 ff43 	bl	80065e0 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800475a:	2301      	movs	r3, #1
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	e008      	b.n	8004772 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004764:	4b05      	ldr	r3, [pc, #20]	@ (800477c <xTaskPriorityInherit+0xe8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476a:	429a      	cmp	r2, r3
 800476c:	d201      	bcs.n	8004772 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800476e:	2301      	movs	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004772:	68fb      	ldr	r3, [r7, #12]
    }
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	20000258 	.word	0x20000258
 8004780:	2000025c 	.word	0x2000025c
 8004784:	20000338 	.word	0x20000338

08004788 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d06a      	beq.n	8004874 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800479e:	4b38      	ldr	r3, [pc, #224]	@ (8004880 <xTaskPriorityDisinherit+0xf8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d00b      	beq.n	80047c0 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	60fb      	str	r3, [r7, #12]
    }
 80047ba:	bf00      	nop
 80047bc:	bf00      	nop
 80047be:	e7fd      	b.n	80047bc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	60bb      	str	r3, [r7, #8]
    }
 80047da:	bf00      	nop
 80047dc:	bf00      	nop
 80047de:	e7fd      	b.n	80047dc <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e4:	1e5a      	subs	r2, r3, #1
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d03e      	beq.n	8004874 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d13a      	bne.n	8004874 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	3304      	adds	r3, #4
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe fa46 	bl	8002c94 <uxListRemove>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10a      	bne.n	8004824 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	2201      	movs	r2, #1
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	43da      	mvns	r2, r3
 800481a:	4b1a      	ldr	r3, [pc, #104]	@ (8004884 <xTaskPriorityDisinherit+0xfc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4013      	ands	r3, r2
 8004820:	4a18      	ldr	r2, [pc, #96]	@ (8004884 <xTaskPriorityDisinherit+0xfc>)
 8004822:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4619      	mov	r1, r3
 8004828:	204a      	movs	r0, #74	@ 0x4a
 800482a:	f001 fed9 	bl	80065e0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483a:	f1c3 0205 	rsb	r2, r3, #5
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004846:	2201      	movs	r2, #1
 8004848:	409a      	lsls	r2, r3
 800484a:	4b0e      	ldr	r3, [pc, #56]	@ (8004884 <xTaskPriorityDisinherit+0xfc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4313      	orrs	r3, r2
 8004850:	4a0c      	ldr	r2, [pc, #48]	@ (8004884 <xTaskPriorityDisinherit+0xfc>)
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4a09      	ldr	r2, [pc, #36]	@ (8004888 <xTaskPriorityDisinherit+0x100>)
 8004862:	441a      	add	r2, r3
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	3304      	adds	r3, #4
 8004868:	4619      	mov	r1, r3
 800486a:	4610      	mov	r0, r2
 800486c:	f7fe f9b5 	bl	8002bda <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004870:	2301      	movs	r3, #1
 8004872:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004874:	697b      	ldr	r3, [r7, #20]
    }
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000258 	.word	0x20000258
 8004884:	20000338 	.word	0x20000338
 8004888:	2000025c 	.word	0x2000025c

0800488c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800489a:	2301      	movs	r3, #1
 800489c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 8083 	beq.w	80049ac <vTaskPriorityDisinheritAfterTimeout+0x120>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10b      	bne.n	80048c6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	60fb      	str	r3, [r7, #12]
    }
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	e7fd      	b.n	80048c2 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d902      	bls.n	80048d6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	e002      	b.n	80048dc <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048da:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	69fa      	ldr	r2, [r7, #28]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d062      	beq.n	80049ac <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d15d      	bne.n	80049ac <vTaskPriorityDisinheritAfterTimeout+0x120>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80048f0:	4b30      	ldr	r3, [pc, #192]	@ (80049b4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d10b      	bne.n	8004912 <vTaskPriorityDisinheritAfterTimeout+0x86>
        __asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	60bb      	str	r3, [r7, #8]
    }
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	e7fd      	b.n	800490e <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4619      	mov	r1, r3
 8004916:	204a      	movs	r0, #74	@ 0x4a
 8004918:	f001 fe62 	bl	80065e0 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004920:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	2b00      	cmp	r3, #0
 800492e:	db04      	blt.n	800493a <vTaskPriorityDisinheritAfterTimeout+0xae>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f1c3 0205 	rsb	r2, r3, #5
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	6959      	ldr	r1, [r3, #20]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4a1b      	ldr	r2, [pc, #108]	@ (80049b8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800494a:	4413      	add	r3, r2
 800494c:	4299      	cmp	r1, r3
 800494e:	d12d      	bne.n	80049ac <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	3304      	adds	r3, #4
 8004954:	4618      	mov	r0, r3
 8004956:	f7fe f99d 	bl	8002c94 <uxListRemove>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <vTaskPriorityDisinheritAfterTimeout+0xea>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004964:	2201      	movs	r2, #1
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43da      	mvns	r2, r3
 800496c:	4b13      	ldr	r3, [pc, #76]	@ (80049bc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4013      	ands	r3, r2
 8004972:	4a12      	ldr	r2, [pc, #72]	@ (80049bc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004974:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	4618      	mov	r0, r3
 800497a:	f002 fbb3 	bl	80070e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004982:	2201      	movs	r2, #1
 8004984:	409a      	lsls	r2, r3
 8004986:	4b0d      	ldr	r3, [pc, #52]	@ (80049bc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4313      	orrs	r3, r2
 800498c:	4a0b      	ldr	r2, [pc, #44]	@ (80049bc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4a06      	ldr	r2, [pc, #24]	@ (80049b8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800499e:	441a      	add	r2, r3
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f7fe f917 	bl	8002bda <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80049ac:	bf00      	nop
 80049ae:	3720      	adds	r7, #32
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20000258 	.word	0x20000258
 80049b8:	2000025c 	.word	0x2000025c
 80049bc:	20000338 	.word	0x20000338

080049c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80049c4:	4b07      	ldr	r3, [pc, #28]	@ (80049e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d004      	beq.n	80049d6 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80049cc:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049d2:	3201      	adds	r2, #1
 80049d4:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 80049d6:	4b03      	ldr	r3, [pc, #12]	@ (80049e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80049d8:	681b      	ldr	r3, [r3, #0]
    }
 80049da:	4618      	mov	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	20000258 	.word	0x20000258

080049e8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80049f2:	4b32      	ldr	r3, [pc, #200]	@ (8004abc <prvAddCurrentTaskToDelayedList+0xd4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049f8:	4b31      	ldr	r3, [pc, #196]	@ (8004ac0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3304      	adds	r3, #4
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fe f948 	bl	8002c94 <uxListRemove>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10b      	bne.n	8004a22 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ac0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	2201      	movs	r2, #1
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	43da      	mvns	r2, r3
 8004a18:	4b2a      	ldr	r3, [pc, #168]	@ (8004ac4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	4a29      	ldr	r2, [pc, #164]	@ (8004ac4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004a20:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d110      	bne.n	8004a4c <prvAddCurrentTaskToDelayedList+0x64>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00d      	beq.n	8004a4c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004a30:	4b23      	ldr	r3, [pc, #140]	@ (8004ac0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	211b      	movs	r1, #27
 8004a36:	4618      	mov	r0, r3
 8004a38:	f002 fb96 	bl	8007168 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a3c:	4b20      	ldr	r3, [pc, #128]	@ (8004ac0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3304      	adds	r3, #4
 8004a42:	4619      	mov	r1, r3
 8004a44:	4820      	ldr	r0, [pc, #128]	@ (8004ac8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8004a46:	f7fe f8c8 	bl	8002bda <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004a4a:	e032      	b.n	8004ab2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4413      	add	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a54:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d20f      	bcs.n	8004a84 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004a64:	4b16      	ldr	r3, [pc, #88]	@ (8004ac0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2104      	movs	r1, #4
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f002 fb7c 	bl	8007168 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a70:	4b16      	ldr	r3, [pc, #88]	@ (8004acc <prvAddCurrentTaskToDelayedList+0xe4>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	4b12      	ldr	r3, [pc, #72]	@ (8004ac0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	f7fe f8d0 	bl	8002c22 <vListInsert>
}
 8004a82:	e016      	b.n	8004ab2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004a84:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2104      	movs	r1, #4
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f002 fb6c 	bl	8007168 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a90:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f7fe f8c0 	bl	8002c22 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad4 <prvAddCurrentTaskToDelayedList+0xec>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d202      	bcs.n	8004ab2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8004aac:	4a09      	ldr	r2, [pc, #36]	@ (8004ad4 <prvAddCurrentTaskToDelayedList+0xec>)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6013      	str	r3, [r2, #0]
}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000334 	.word	0x20000334
 8004ac0:	20000258 	.word	0x20000258
 8004ac4:	20000338 	.word	0x20000338
 8004ac8:	2000031c 	.word	0x2000031c
 8004acc:	200002ec 	.word	0x200002ec
 8004ad0:	200002e8 	.word	0x200002e8
 8004ad4:	20000350 	.word	0x20000350

08004ad8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004ae2:	f000 fae1 	bl	80050a8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004ae6:	4b12      	ldr	r3, [pc, #72]	@ (8004b30 <xTimerCreateTimerTask+0x58>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00b      	beq.n	8004b06 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004aee:	4b11      	ldr	r3, [pc, #68]	@ (8004b34 <xTimerCreateTimerTask+0x5c>)
 8004af0:	9301      	str	r3, [sp, #4]
 8004af2:	2302      	movs	r3, #2
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	2300      	movs	r3, #0
 8004af8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004afc:	490e      	ldr	r1, [pc, #56]	@ (8004b38 <xTimerCreateTimerTask+0x60>)
 8004afe:	480f      	ldr	r0, [pc, #60]	@ (8004b3c <xTimerCreateTimerTask+0x64>)
 8004b00:	f7fe ffb6 	bl	8003a70 <xTaskCreate>
 8004b04:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10b      	bne.n	8004b24 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	603b      	str	r3, [r7, #0]
    }
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	e7fd      	b.n	8004b20 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004b24:	687b      	ldr	r3, [r7, #4]
    }
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	2000038c 	.word	0x2000038c
 8004b34:	20000390 	.word	0x20000390
 8004b38:	08007ecc 	.word	0x08007ecc
 8004b3c:	08004c79 	.word	0x08004c79

08004b40 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08a      	sub	sp, #40	@ 0x28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10b      	bne.n	8004b70 <xTimerGenericCommand+0x30>
        __asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	623b      	str	r3, [r7, #32]
    }
 8004b6a:	bf00      	nop
 8004b6c:	bf00      	nop
 8004b6e:	e7fd      	b.n	8004b6c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004b70:	4b19      	ldr	r3, [pc, #100]	@ (8004bd8 <xTimerGenericCommand+0x98>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d02a      	beq.n	8004bce <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b05      	cmp	r3, #5
 8004b88:	dc18      	bgt.n	8004bbc <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b8a:	f7ff fd65 	bl	8004658 <xTaskGetSchedulerState>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d109      	bne.n	8004ba8 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b94:	4b10      	ldr	r3, [pc, #64]	@ (8004bd8 <xTimerGenericCommand+0x98>)
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	f107 0114 	add.w	r1, r7, #20
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ba0:	f7fe f998 	bl	8002ed4 <xQueueGenericSend>
 8004ba4:	6278      	str	r0, [r7, #36]	@ 0x24
 8004ba6:	e012      	b.n	8004bce <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd8 <xTimerGenericCommand+0x98>)
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	f107 0114 	add.w	r1, r7, #20
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f7fe f98e 	bl	8002ed4 <xQueueGenericSend>
 8004bb8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bba:	e008      	b.n	8004bce <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004bbc:	4b06      	ldr	r3, [pc, #24]	@ (8004bd8 <xTimerGenericCommand+0x98>)
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	f107 0114 	add.w	r1, r7, #20
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	f7fe faae 	bl	8003128 <xQueueGenericSendFromISR>
 8004bcc:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3728      	adds	r7, #40	@ 0x28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	2000038c 	.word	0x2000038c

08004bdc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004be6:	4b23      	ldr	r3, [pc, #140]	@ (8004c74 <prvProcessExpiredTimer+0x98>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe f84d 	bl	8002c94 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d023      	beq.n	8004c50 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	699a      	ldr	r2, [r3, #24]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	18d1      	adds	r1, r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	6978      	ldr	r0, [r7, #20]
 8004c16:	f000 f8d5 	bl	8004dc4 <prvInsertTimerInActiveList>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d020      	beq.n	8004c62 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c20:	2300      	movs	r3, #0
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	2300      	movs	r3, #0
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	2100      	movs	r1, #0
 8004c2a:	6978      	ldr	r0, [r7, #20]
 8004c2c:	f7ff ff88 	bl	8004b40 <xTimerGenericCommand>
 8004c30:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d114      	bne.n	8004c62 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	60fb      	str	r3, [r7, #12]
    }
 8004c4a:	bf00      	nop
 8004c4c:	bf00      	nop
 8004c4e:	e7fd      	b.n	8004c4c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c56:	f023 0301 	bic.w	r3, r3, #1
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	6978      	ldr	r0, [r7, #20]
 8004c68:	4798      	blx	r3
    }
 8004c6a:	bf00      	nop
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000384 	.word	0x20000384

08004c78 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c80:	f107 0308 	add.w	r3, r7, #8
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 f859 	bl	8004d3c <prvGetNextExpireTime>
 8004c8a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f805 	bl	8004ca0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004c96:	f000 f8d7 	bl	8004e48 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c9a:	bf00      	nop
 8004c9c:	e7f0      	b.n	8004c80 <prvTimerTask+0x8>
	...

08004ca0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004caa:	f7ff f8e1 	bl	8003e70 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cae:	f107 0308 	add.w	r3, r7, #8
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 f866 	bl	8004d84 <prvSampleTimeNow>
 8004cb8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d130      	bne.n	8004d22 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10a      	bne.n	8004cdc <prvProcessTimerOrBlockTask+0x3c>
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d806      	bhi.n	8004cdc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004cce:	f7ff f8dd 	bl	8003e8c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004cd2:	68f9      	ldr	r1, [r7, #12]
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff ff81 	bl	8004bdc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004cda:	e024      	b.n	8004d26 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d008      	beq.n	8004cf4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ce2:	4b13      	ldr	r3, [pc, #76]	@ (8004d30 <prvProcessTimerOrBlockTask+0x90>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <prvProcessTimerOrBlockTask+0x50>
 8004cec:	2301      	movs	r3, #1
 8004cee:	e000      	b.n	8004cf2 <prvProcessTimerOrBlockTask+0x52>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8004d34 <prvProcessTimerOrBlockTask+0x94>)
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	4619      	mov	r1, r3
 8004d02:	f7fe fe81 	bl	8003a08 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004d06:	f7ff f8c1 	bl	8003e8c <xTaskResumeAll>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004d10:	4b09      	ldr	r3, [pc, #36]	@ (8004d38 <prvProcessTimerOrBlockTask+0x98>)
 8004d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	f3bf 8f6f 	isb	sy
    }
 8004d20:	e001      	b.n	8004d26 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004d22:	f7ff f8b3 	bl	8003e8c <xTaskResumeAll>
    }
 8004d26:	bf00      	nop
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000388 	.word	0x20000388
 8004d34:	2000038c 	.word	0x2000038c
 8004d38:	e000ed04 	.word	0xe000ed04

08004d3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d44:	4b0e      	ldr	r3, [pc, #56]	@ (8004d80 <prvGetNextExpireTime+0x44>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <prvGetNextExpireTime+0x16>
 8004d4e:	2201      	movs	r2, #1
 8004d50:	e000      	b.n	8004d54 <prvGetNextExpireTime+0x18>
 8004d52:	2200      	movs	r2, #0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d105      	bne.n	8004d6c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d60:	4b07      	ldr	r3, [pc, #28]	@ (8004d80 <prvGetNextExpireTime+0x44>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	e001      	b.n	8004d70 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004d70:	68fb      	ldr	r3, [r7, #12]
    }
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	20000384 	.word	0x20000384

08004d84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004d8c:	f7ff f920 	bl	8003fd0 <xTaskGetTickCount>
 8004d90:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004d92:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc0 <prvSampleTimeNow+0x3c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d205      	bcs.n	8004da8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004d9c:	f000 f91e 	bl	8004fdc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e002      	b.n	8004dae <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004dae:	4a04      	ldr	r2, [pc, #16]	@ (8004dc0 <prvSampleTimeNow+0x3c>)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004db4:	68fb      	ldr	r3, [r7, #12]
    }
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000394 	.word	0x20000394

08004dc4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d812      	bhi.n	8004e10 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	1ad2      	subs	r2, r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d302      	bcc.n	8004dfe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	e01b      	b.n	8004e36 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004dfe:	4b10      	ldr	r3, [pc, #64]	@ (8004e40 <prvInsertTimerInActiveList+0x7c>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3304      	adds	r3, #4
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	f7fd ff0a 	bl	8002c22 <vListInsert>
 8004e0e:	e012      	b.n	8004e36 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d206      	bcs.n	8004e26 <prvInsertTimerInActiveList+0x62>
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d302      	bcc.n	8004e26 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004e20:	2301      	movs	r3, #1
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	e007      	b.n	8004e36 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e26:	4b07      	ldr	r3, [pc, #28]	@ (8004e44 <prvInsertTimerInActiveList+0x80>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4610      	mov	r0, r2
 8004e32:	f7fd fef6 	bl	8002c22 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004e36:	697b      	ldr	r3, [r7, #20]
    }
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000388 	.word	0x20000388
 8004e44:	20000384 	.word	0x20000384

08004e48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08c      	sub	sp, #48	@ 0x30
 8004e4c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e4e:	e0b2      	b.n	8004fb6 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f2c0 80af 	blt.w	8004fb6 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d004      	beq.n	8004e6e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e66:	3304      	adds	r3, #4
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fd ff13 	bl	8002c94 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e6e:	1d3b      	adds	r3, r7, #4
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff ff87 	bl	8004d84 <prvSampleTimeNow>
 8004e76:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b09      	cmp	r3, #9
 8004e7c:	f200 8098 	bhi.w	8004fb0 <prvProcessReceivedCommands+0x168>
 8004e80:	a201      	add	r2, pc, #4	@ (adr r2, 8004e88 <prvProcessReceivedCommands+0x40>)
 8004e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e86:	bf00      	nop
 8004e88:	08004eb1 	.word	0x08004eb1
 8004e8c:	08004eb1 	.word	0x08004eb1
 8004e90:	08004eb1 	.word	0x08004eb1
 8004e94:	08004f27 	.word	0x08004f27
 8004e98:	08004f3b 	.word	0x08004f3b
 8004e9c:	08004f87 	.word	0x08004f87
 8004ea0:	08004eb1 	.word	0x08004eb1
 8004ea4:	08004eb1 	.word	0x08004eb1
 8004ea8:	08004f27 	.word	0x08004f27
 8004eac:	08004f3b 	.word	0x08004f3b
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	18d1      	adds	r1, r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a3a      	ldr	r2, [r7, #32]
 8004ece:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ed0:	f7ff ff78 	bl	8004dc4 <prvInsertTimerInActiveList>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d06c      	beq.n	8004fb4 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ee0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d061      	beq.n	8004fb4 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	441a      	add	r2, r3
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	2300      	movs	r3, #0
 8004efe:	2100      	movs	r1, #0
 8004f00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f02:	f7ff fe1d 	bl	8004b40 <xTimerGenericCommand>
 8004f06:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d152      	bne.n	8004fb4 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	61bb      	str	r3, [r7, #24]
    }
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	e7fd      	b.n	8004f22 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f2c:	f023 0301 	bic.w	r3, r3, #1
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004f38:	e03d      	b.n	8004fb6 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f40:	f043 0301 	orr.w	r3, r3, #1
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10b      	bne.n	8004f72 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	617b      	str	r3, [r7, #20]
    }
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	e7fd      	b.n	8004f6e <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	18d1      	adds	r1, r2, r3
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	6a3a      	ldr	r2, [r7, #32]
 8004f7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f80:	f7ff ff20 	bl	8004dc4 <prvInsertTimerInActiveList>
                        break;
 8004f84:	e017      	b.n	8004fb6 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d103      	bne.n	8004f9c <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8004f94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f96:	f000 fc05 	bl	80057a4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004f9a:	e00c      	b.n	8004fb6 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004faa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004fae:	e002      	b.n	8004fb6 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004fb0:	bf00      	nop
 8004fb2:	e000      	b.n	8004fb6 <prvProcessReceivedCommands+0x16e>
                        break;
 8004fb4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fb6:	4b08      	ldr	r3, [pc, #32]	@ (8004fd8 <prvProcessReceivedCommands+0x190>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f107 0108 	add.w	r1, r7, #8
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fe f973 	bl	80032ac <xQueueReceive>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f47f af41 	bne.w	8004e50 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004fce:	bf00      	nop
 8004fd0:	bf00      	nop
 8004fd2:	3728      	adds	r7, #40	@ 0x28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	2000038c 	.word	0x2000038c

08004fdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fe2:	e049      	b.n	8005078 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80050a0 <prvSwitchTimerLists+0xc4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fee:	4b2c      	ldr	r3, [pc, #176]	@ (80050a0 <prvSwitchTimerLists+0xc4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fd fe49 	bl	8002c94 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d02f      	beq.n	8005078 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4413      	add	r3, r2
 8005020:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	429a      	cmp	r2, r3
 8005028:	d90e      	bls.n	8005048 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005036:	4b1a      	ldr	r3, [pc, #104]	@ (80050a0 <prvSwitchTimerLists+0xc4>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3304      	adds	r3, #4
 800503e:	4619      	mov	r1, r3
 8005040:	4610      	mov	r0, r2
 8005042:	f7fd fdee 	bl	8002c22 <vListInsert>
 8005046:	e017      	b.n	8005078 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005048:	2300      	movs	r3, #0
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	2300      	movs	r3, #0
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	2100      	movs	r1, #0
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff fd74 	bl	8004b40 <xTimerGenericCommand>
 8005058:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10b      	bne.n	8005078 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	603b      	str	r3, [r7, #0]
    }
 8005072:	bf00      	nop
 8005074:	bf00      	nop
 8005076:	e7fd      	b.n	8005074 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005078:	4b09      	ldr	r3, [pc, #36]	@ (80050a0 <prvSwitchTimerLists+0xc4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1b0      	bne.n	8004fe4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005082:	4b07      	ldr	r3, [pc, #28]	@ (80050a0 <prvSwitchTimerLists+0xc4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005088:	4b06      	ldr	r3, [pc, #24]	@ (80050a4 <prvSwitchTimerLists+0xc8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a04      	ldr	r2, [pc, #16]	@ (80050a0 <prvSwitchTimerLists+0xc4>)
 800508e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005090:	4a04      	ldr	r2, [pc, #16]	@ (80050a4 <prvSwitchTimerLists+0xc8>)
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	6013      	str	r3, [r2, #0]
    }
 8005096:	bf00      	nop
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000384 	.word	0x20000384
 80050a4:	20000388 	.word	0x20000388

080050a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80050ac:	f000 f966 	bl	800537c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80050b0:	4b12      	ldr	r3, [pc, #72]	@ (80050fc <prvCheckForValidListAndQueue+0x54>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d11d      	bne.n	80050f4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80050b8:	4811      	ldr	r0, [pc, #68]	@ (8005100 <prvCheckForValidListAndQueue+0x58>)
 80050ba:	f7fd fd61 	bl	8002b80 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80050be:	4811      	ldr	r0, [pc, #68]	@ (8005104 <prvCheckForValidListAndQueue+0x5c>)
 80050c0:	f7fd fd5e 	bl	8002b80 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80050c4:	4b10      	ldr	r3, [pc, #64]	@ (8005108 <prvCheckForValidListAndQueue+0x60>)
 80050c6:	4a0e      	ldr	r2, [pc, #56]	@ (8005100 <prvCheckForValidListAndQueue+0x58>)
 80050c8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80050ca:	4b10      	ldr	r3, [pc, #64]	@ (800510c <prvCheckForValidListAndQueue+0x64>)
 80050cc:	4a0d      	ldr	r2, [pc, #52]	@ (8005104 <prvCheckForValidListAndQueue+0x5c>)
 80050ce:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80050d0:	2200      	movs	r2, #0
 80050d2:	210c      	movs	r1, #12
 80050d4:	200a      	movs	r0, #10
 80050d6:	f7fd fe71 	bl	8002dbc <xQueueGenericCreate>
 80050da:	4603      	mov	r3, r0
 80050dc:	4a07      	ldr	r2, [pc, #28]	@ (80050fc <prvCheckForValidListAndQueue+0x54>)
 80050de:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80050e0:	4b06      	ldr	r3, [pc, #24]	@ (80050fc <prvCheckForValidListAndQueue+0x54>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050e8:	4b04      	ldr	r3, [pc, #16]	@ (80050fc <prvCheckForValidListAndQueue+0x54>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4908      	ldr	r1, [pc, #32]	@ (8005110 <prvCheckForValidListAndQueue+0x68>)
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fe fc58 	bl	80039a4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80050f4:	f000 f974 	bl	80053e0 <vPortExitCritical>
    }
 80050f8:	bf00      	nop
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	2000038c 	.word	0x2000038c
 8005100:	2000035c 	.word	0x2000035c
 8005104:	20000370 	.word	0x20000370
 8005108:	20000384 	.word	0x20000384
 800510c:	20000388 	.word	0x20000388
 8005110:	08007ed4 	.word	0x08007ed4

08005114 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3b04      	subs	r3, #4
 8005124:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800512c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3b04      	subs	r3, #4
 8005132:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f023 0201 	bic.w	r2, r3, #1
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	3b04      	subs	r3, #4
 8005142:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005144:	4a0c      	ldr	r2, [pc, #48]	@ (8005178 <pxPortInitialiseStack+0x64>)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3b14      	subs	r3, #20
 800514e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3b04      	subs	r3, #4
 800515a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f06f 0202 	mvn.w	r2, #2
 8005162:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3b20      	subs	r3, #32
 8005168:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800516a:	68fb      	ldr	r3, [r7, #12]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	0800517d 	.word	0x0800517d

0800517c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005186:	4b13      	ldr	r3, [pc, #76]	@ (80051d4 <prvTaskExitError+0x58>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d00b      	beq.n	80051a8 <prvTaskExitError+0x2c>
        __asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	60fb      	str	r3, [r7, #12]
    }
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <prvTaskExitError+0x28>
        __asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	60bb      	str	r3, [r7, #8]
    }
 80051ba:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80051bc:	bf00      	nop
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0fc      	beq.n	80051be <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000010 	.word	0x20000010
	...

080051e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80051e0:	4b07      	ldr	r3, [pc, #28]	@ (8005200 <pxCurrentTCBConst2>)
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	6808      	ldr	r0, [r1, #0]
 80051e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ea:	f380 8809 	msr	PSP, r0
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f04f 0000 	mov.w	r0, #0
 80051f6:	f380 8811 	msr	BASEPRI, r0
 80051fa:	4770      	bx	lr
 80051fc:	f3af 8000 	nop.w

08005200 <pxCurrentTCBConst2>:
 8005200:	20000258 	.word	0x20000258
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop

08005208 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005208:	4808      	ldr	r0, [pc, #32]	@ (800522c <prvPortStartFirstTask+0x24>)
 800520a:	6800      	ldr	r0, [r0, #0]
 800520c:	6800      	ldr	r0, [r0, #0]
 800520e:	f380 8808 	msr	MSP, r0
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f380 8814 	msr	CONTROL, r0
 800521a:	b662      	cpsie	i
 800521c:	b661      	cpsie	f
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	df00      	svc	0
 8005228:	bf00      	nop
 800522a:	0000      	.short	0x0000
 800522c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop

08005234 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800523a:	4b47      	ldr	r3, [pc, #284]	@ (8005358 <xPortStartScheduler+0x124>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a47      	ldr	r2, [pc, #284]	@ (800535c <xPortStartScheduler+0x128>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d10b      	bne.n	800525c <xPortStartScheduler+0x28>
        __asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	613b      	str	r3, [r7, #16]
    }
 8005256:	bf00      	nop
 8005258:	bf00      	nop
 800525a:	e7fd      	b.n	8005258 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800525c:	4b3e      	ldr	r3, [pc, #248]	@ (8005358 <xPortStartScheduler+0x124>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a3f      	ldr	r2, [pc, #252]	@ (8005360 <xPortStartScheduler+0x12c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d10b      	bne.n	800527e <xPortStartScheduler+0x4a>
        __asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	60fb      	str	r3, [r7, #12]
    }
 8005278:	bf00      	nop
 800527a:	bf00      	nop
 800527c:	e7fd      	b.n	800527a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800527e:	4b39      	ldr	r3, [pc, #228]	@ (8005364 <xPortStartScheduler+0x130>)
 8005280:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	22ff      	movs	r2, #255	@ 0xff
 800528e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	4b31      	ldr	r3, [pc, #196]	@ (8005368 <xPortStartScheduler+0x134>)
 80052a4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052a6:	4b31      	ldr	r3, [pc, #196]	@ (800536c <xPortStartScheduler+0x138>)
 80052a8:	2207      	movs	r2, #7
 80052aa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052ac:	e009      	b.n	80052c2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80052ae:	4b2f      	ldr	r3, [pc, #188]	@ (800536c <xPortStartScheduler+0x138>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	4a2d      	ldr	r2, [pc, #180]	@ (800536c <xPortStartScheduler+0x138>)
 80052b6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052c2:	78fb      	ldrb	r3, [r7, #3]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ca:	2b80      	cmp	r3, #128	@ 0x80
 80052cc:	d0ef      	beq.n	80052ae <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052ce:	4b27      	ldr	r3, [pc, #156]	@ (800536c <xPortStartScheduler+0x138>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f1c3 0307 	rsb	r3, r3, #7
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d00b      	beq.n	80052f2 <xPortStartScheduler+0xbe>
        __asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	60bb      	str	r3, [r7, #8]
    }
 80052ec:	bf00      	nop
 80052ee:	bf00      	nop
 80052f0:	e7fd      	b.n	80052ee <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052f2:	4b1e      	ldr	r3, [pc, #120]	@ (800536c <xPortStartScheduler+0x138>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	4a1c      	ldr	r2, [pc, #112]	@ (800536c <xPortStartScheduler+0x138>)
 80052fa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052fc:	4b1b      	ldr	r3, [pc, #108]	@ (800536c <xPortStartScheduler+0x138>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005304:	4a19      	ldr	r2, [pc, #100]	@ (800536c <xPortStartScheduler+0x138>)
 8005306:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	b2da      	uxtb	r2, r3
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005310:	4b17      	ldr	r3, [pc, #92]	@ (8005370 <xPortStartScheduler+0x13c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a16      	ldr	r2, [pc, #88]	@ (8005370 <xPortStartScheduler+0x13c>)
 8005316:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800531a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800531c:	4b14      	ldr	r3, [pc, #80]	@ (8005370 <xPortStartScheduler+0x13c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a13      	ldr	r2, [pc, #76]	@ (8005370 <xPortStartScheduler+0x13c>)
 8005322:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005326:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005328:	f000 f8e8 	bl	80054fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800532c:	4b11      	ldr	r3, [pc, #68]	@ (8005374 <xPortStartScheduler+0x140>)
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005332:	f000 f907 	bl	8005544 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005336:	4b10      	ldr	r3, [pc, #64]	@ (8005378 <xPortStartScheduler+0x144>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a0f      	ldr	r2, [pc, #60]	@ (8005378 <xPortStartScheduler+0x144>)
 800533c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005340:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005342:	f7ff ff61 	bl	8005208 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005346:	f7fe ff23 	bl	8004190 <vTaskSwitchContext>
    prvTaskExitError();
 800534a:	f7ff ff17 	bl	800517c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	e000ed00 	.word	0xe000ed00
 800535c:	410fc271 	.word	0x410fc271
 8005360:	410fc270 	.word	0x410fc270
 8005364:	e000e400 	.word	0xe000e400
 8005368:	20000398 	.word	0x20000398
 800536c:	2000039c 	.word	0x2000039c
 8005370:	e000ed20 	.word	0xe000ed20
 8005374:	20000010 	.word	0x20000010
 8005378:	e000ef34 	.word	0xe000ef34

0800537c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
        __asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	607b      	str	r3, [r7, #4]
    }
 8005394:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005396:	4b10      	ldr	r3, [pc, #64]	@ (80053d8 <vPortEnterCritical+0x5c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3301      	adds	r3, #1
 800539c:	4a0e      	ldr	r2, [pc, #56]	@ (80053d8 <vPortEnterCritical+0x5c>)
 800539e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80053a0:	4b0d      	ldr	r3, [pc, #52]	@ (80053d8 <vPortEnterCritical+0x5c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d110      	bne.n	80053ca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053a8:	4b0c      	ldr	r3, [pc, #48]	@ (80053dc <vPortEnterCritical+0x60>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00b      	beq.n	80053ca <vPortEnterCritical+0x4e>
        __asm volatile
 80053b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	603b      	str	r3, [r7, #0]
    }
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop
 80053c8:	e7fd      	b.n	80053c6 <vPortEnterCritical+0x4a>
    }
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	20000010 	.word	0x20000010
 80053dc:	e000ed04 	.word	0xe000ed04

080053e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80053e6:	4b12      	ldr	r3, [pc, #72]	@ (8005430 <vPortExitCritical+0x50>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10b      	bne.n	8005406 <vPortExitCritical+0x26>
        __asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	607b      	str	r3, [r7, #4]
    }
 8005400:	bf00      	nop
 8005402:	bf00      	nop
 8005404:	e7fd      	b.n	8005402 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005406:	4b0a      	ldr	r3, [pc, #40]	@ (8005430 <vPortExitCritical+0x50>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3b01      	subs	r3, #1
 800540c:	4a08      	ldr	r2, [pc, #32]	@ (8005430 <vPortExitCritical+0x50>)
 800540e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005410:	4b07      	ldr	r3, [pc, #28]	@ (8005430 <vPortExitCritical+0x50>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d105      	bne.n	8005424 <vPortExitCritical+0x44>
 8005418:	2300      	movs	r3, #0
 800541a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	f383 8811 	msr	BASEPRI, r3
    }
 8005422:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	20000010 	.word	0x20000010
	...

08005440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005440:	f3ef 8009 	mrs	r0, PSP
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	4b15      	ldr	r3, [pc, #84]	@ (80054a0 <pxCurrentTCBConst>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	f01e 0f10 	tst.w	lr, #16
 8005450:	bf08      	it	eq
 8005452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545a:	6010      	str	r0, [r2, #0]
 800545c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005460:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005464:	f380 8811 	msr	BASEPRI, r0
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f7fe fe8e 	bl	8004190 <vTaskSwitchContext>
 8005474:	f04f 0000 	mov.w	r0, #0
 8005478:	f380 8811 	msr	BASEPRI, r0
 800547c:	bc09      	pop	{r0, r3}
 800547e:	6819      	ldr	r1, [r3, #0]
 8005480:	6808      	ldr	r0, [r1, #0]
 8005482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005486:	f01e 0f10 	tst.w	lr, #16
 800548a:	bf08      	it	eq
 800548c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005490:	f380 8809 	msr	PSP, r0
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	f3af 8000 	nop.w

080054a0 <pxCurrentTCBConst>:
 80054a0:	20000258 	.word	0x20000258
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop

080054a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
        __asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	607b      	str	r3, [r7, #4]
    }
 80054c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80054c2:	f001 fcf5 	bl	8006eb0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80054c6:	f7fe fda5 	bl	8004014 <xTaskIncrementTick>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d006      	beq.n	80054de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80054d0:	f001 fd4c 	bl	8006f6c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054d4:	4b08      	ldr	r3, [pc, #32]	@ (80054f8 <SysTick_Handler+0x50>)
 80054d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	e001      	b.n	80054e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80054de:	f001 fd29 	bl	8006f34 <SEGGER_SYSVIEW_RecordExitISR>
 80054e2:	2300      	movs	r3, #0
 80054e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	f383 8811 	msr	BASEPRI, r3
    }
 80054ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80054ee:	bf00      	nop
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	e000ed04 	.word	0xe000ed04

080054fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005500:	4b0b      	ldr	r3, [pc, #44]	@ (8005530 <vPortSetupTimerInterrupt+0x34>)
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005506:	4b0b      	ldr	r3, [pc, #44]	@ (8005534 <vPortSetupTimerInterrupt+0x38>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800550c:	4b0a      	ldr	r3, [pc, #40]	@ (8005538 <vPortSetupTimerInterrupt+0x3c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a0a      	ldr	r2, [pc, #40]	@ (800553c <vPortSetupTimerInterrupt+0x40>)
 8005512:	fba2 2303 	umull	r2, r3, r2, r3
 8005516:	099b      	lsrs	r3, r3, #6
 8005518:	4a09      	ldr	r2, [pc, #36]	@ (8005540 <vPortSetupTimerInterrupt+0x44>)
 800551a:	3b01      	subs	r3, #1
 800551c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800551e:	4b04      	ldr	r3, [pc, #16]	@ (8005530 <vPortSetupTimerInterrupt+0x34>)
 8005520:	2207      	movs	r2, #7
 8005522:	601a      	str	r2, [r3, #0]
}
 8005524:	bf00      	nop
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	e000e010 	.word	0xe000e010
 8005534:	e000e018 	.word	0xe000e018
 8005538:	20000000 	.word	0x20000000
 800553c:	10624dd3 	.word	0x10624dd3
 8005540:	e000e014 	.word	0xe000e014

08005544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005544:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005554 <vPortEnableVFP+0x10>
 8005548:	6801      	ldr	r1, [r0, #0]
 800554a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800554e:	6001      	str	r1, [r0, #0]
 8005550:	4770      	bx	lr
 8005552:	0000      	.short	0x0000
 8005554:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop

0800555c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005562:	f3ef 8305 	mrs	r3, IPSR
 8005566:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b0f      	cmp	r3, #15
 800556c:	d915      	bls.n	800559a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800556e:	4a18      	ldr	r2, [pc, #96]	@ (80055d0 <vPortValidateInterruptPriority+0x74>)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4413      	add	r3, r2
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005578:	4b16      	ldr	r3, [pc, #88]	@ (80055d4 <vPortValidateInterruptPriority+0x78>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	7afa      	ldrb	r2, [r7, #11]
 800557e:	429a      	cmp	r2, r3
 8005580:	d20b      	bcs.n	800559a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	607b      	str	r3, [r7, #4]
    }
 8005594:	bf00      	nop
 8005596:	bf00      	nop
 8005598:	e7fd      	b.n	8005596 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800559a:	4b0f      	ldr	r3, [pc, #60]	@ (80055d8 <vPortValidateInterruptPriority+0x7c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80055a2:	4b0e      	ldr	r3, [pc, #56]	@ (80055dc <vPortValidateInterruptPriority+0x80>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d90b      	bls.n	80055c2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	603b      	str	r3, [r7, #0]
    }
 80055bc:	bf00      	nop
 80055be:	bf00      	nop
 80055c0:	e7fd      	b.n	80055be <vPortValidateInterruptPriority+0x62>
    }
 80055c2:	bf00      	nop
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	e000e3f0 	.word	0xe000e3f0
 80055d4:	20000398 	.word	0x20000398
 80055d8:	e000ed0c 	.word	0xe000ed0c
 80055dc:	2000039c 	.word	0x2000039c

080055e0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08a      	sub	sp, #40	@ 0x28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80055ec:	f7fe fc40 	bl	8003e70 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80055f0:	4b66      	ldr	r3, [pc, #408]	@ (800578c <pvPortMalloc+0x1ac>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80055f8:	f000 f938 	bl	800586c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055fc:	4b64      	ldr	r3, [pc, #400]	@ (8005790 <pvPortMalloc+0x1b0>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4013      	ands	r3, r2
 8005604:	2b00      	cmp	r3, #0
 8005606:	f040 80a9 	bne.w	800575c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d02e      	beq.n	800566e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005610:	2208      	movs	r2, #8
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	429a      	cmp	r2, r3
 800561a:	d228      	bcs.n	800566e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800561c:	2208      	movs	r2, #8
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	2b00      	cmp	r3, #0
 800562c:	d022      	beq.n	8005674 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f023 0307 	bic.w	r3, r3, #7
 8005634:	3308      	adds	r3, #8
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	429a      	cmp	r2, r3
 800563a:	d215      	bcs.n	8005668 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f023 0307 	bic.w	r3, r3, #7
 8005642:	3308      	adds	r3, #8
 8005644:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	2b00      	cmp	r3, #0
 800564e:	d011      	beq.n	8005674 <pvPortMalloc+0x94>
        __asm volatile
 8005650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	617b      	str	r3, [r7, #20]
    }
 8005662:	bf00      	nop
 8005664:	bf00      	nop
 8005666:	e7fd      	b.n	8005664 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005668:	2300      	movs	r3, #0
 800566a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800566c:	e002      	b.n	8005674 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800566e:	2300      	movs	r3, #0
 8005670:	607b      	str	r3, [r7, #4]
 8005672:	e000      	b.n	8005676 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005674:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d06f      	beq.n	800575c <pvPortMalloc+0x17c>
 800567c:	4b45      	ldr	r3, [pc, #276]	@ (8005794 <pvPortMalloc+0x1b4>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	429a      	cmp	r2, r3
 8005684:	d86a      	bhi.n	800575c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005686:	4b44      	ldr	r3, [pc, #272]	@ (8005798 <pvPortMalloc+0x1b8>)
 8005688:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800568a:	4b43      	ldr	r3, [pc, #268]	@ (8005798 <pvPortMalloc+0x1b8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005690:	e004      	b.n	800569c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005694:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d903      	bls.n	80056ae <pvPortMalloc+0xce>
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f1      	bne.n	8005692 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80056ae:	4b37      	ldr	r3, [pc, #220]	@ (800578c <pvPortMalloc+0x1ac>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d051      	beq.n	800575c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2208      	movs	r2, #8
 80056be:	4413      	add	r3, r2
 80056c0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	1ad2      	subs	r2, r2, r3
 80056d2:	2308      	movs	r3, #8
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d920      	bls.n	800571c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4413      	add	r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00b      	beq.n	8005704 <pvPortMalloc+0x124>
        __asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	613b      	str	r3, [r7, #16]
    }
 80056fe:	bf00      	nop
 8005700:	bf00      	nop
 8005702:	e7fd      	b.n	8005700 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	1ad2      	subs	r2, r2, r3
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005716:	69b8      	ldr	r0, [r7, #24]
 8005718:	f000 f90a 	bl	8005930 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800571c:	4b1d      	ldr	r3, [pc, #116]	@ (8005794 <pvPortMalloc+0x1b4>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	4a1b      	ldr	r2, [pc, #108]	@ (8005794 <pvPortMalloc+0x1b4>)
 8005728:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800572a:	4b1a      	ldr	r3, [pc, #104]	@ (8005794 <pvPortMalloc+0x1b4>)
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4b1b      	ldr	r3, [pc, #108]	@ (800579c <pvPortMalloc+0x1bc>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d203      	bcs.n	800573e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005736:	4b17      	ldr	r3, [pc, #92]	@ (8005794 <pvPortMalloc+0x1b4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a18      	ldr	r2, [pc, #96]	@ (800579c <pvPortMalloc+0x1bc>)
 800573c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	4b13      	ldr	r3, [pc, #76]	@ (8005790 <pvPortMalloc+0x1b0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	431a      	orrs	r2, r3
 8005748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005752:	4b13      	ldr	r3, [pc, #76]	@ (80057a0 <pvPortMalloc+0x1c0>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3301      	adds	r3, #1
 8005758:	4a11      	ldr	r2, [pc, #68]	@ (80057a0 <pvPortMalloc+0x1c0>)
 800575a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800575c:	f7fe fb96 	bl	8003e8c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00b      	beq.n	8005782 <pvPortMalloc+0x1a2>
        __asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	60fb      	str	r3, [r7, #12]
    }
 800577c:	bf00      	nop
 800577e:	bf00      	nop
 8005780:	e7fd      	b.n	800577e <pvPortMalloc+0x19e>
    return pvReturn;
 8005782:	69fb      	ldr	r3, [r7, #28]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3728      	adds	r7, #40	@ 0x28
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20012fa8 	.word	0x20012fa8
 8005790:	20012fbc 	.word	0x20012fbc
 8005794:	20012fac 	.word	0x20012fac
 8005798:	20012fa0 	.word	0x20012fa0
 800579c:	20012fb0 	.word	0x20012fb0
 80057a0:	20012fb4 	.word	0x20012fb4

080057a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d04f      	beq.n	8005856 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80057b6:	2308      	movs	r3, #8
 80057b8:	425b      	negs	r3, r3
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4413      	add	r3, r2
 80057be:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	4b25      	ldr	r3, [pc, #148]	@ (8005860 <vPortFree+0xbc>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4013      	ands	r3, r2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10b      	bne.n	80057ea <vPortFree+0x46>
        __asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	60fb      	str	r3, [r7, #12]
    }
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop
 80057e8:	e7fd      	b.n	80057e6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00b      	beq.n	800580a <vPortFree+0x66>
        __asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	60bb      	str	r3, [r7, #8]
    }
 8005804:	bf00      	nop
 8005806:	bf00      	nop
 8005808:	e7fd      	b.n	8005806 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	4b14      	ldr	r3, [pc, #80]	@ (8005860 <vPortFree+0xbc>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4013      	ands	r3, r2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01e      	beq.n	8005856 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d11a      	bne.n	8005856 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	4b0e      	ldr	r3, [pc, #56]	@ (8005860 <vPortFree+0xbc>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	43db      	mvns	r3, r3
 800582a:	401a      	ands	r2, r3
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005830:	f7fe fb1e 	bl	8003e70 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	4b0a      	ldr	r3, [pc, #40]	@ (8005864 <vPortFree+0xc0>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4413      	add	r3, r2
 800583e:	4a09      	ldr	r2, [pc, #36]	@ (8005864 <vPortFree+0xc0>)
 8005840:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005842:	6938      	ldr	r0, [r7, #16]
 8005844:	f000 f874 	bl	8005930 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005848:	4b07      	ldr	r3, [pc, #28]	@ (8005868 <vPortFree+0xc4>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3301      	adds	r3, #1
 800584e:	4a06      	ldr	r2, [pc, #24]	@ (8005868 <vPortFree+0xc4>)
 8005850:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005852:	f7fe fb1b 	bl	8003e8c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005856:	bf00      	nop
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20012fbc 	.word	0x20012fbc
 8005864:	20012fac 	.word	0x20012fac
 8005868:	20012fb8 	.word	0x20012fb8

0800586c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005872:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8005876:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005878:	4b27      	ldr	r3, [pc, #156]	@ (8005918 <prvHeapInit+0xac>)
 800587a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00c      	beq.n	80058a0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3307      	adds	r3, #7
 800588a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0307 	bic.w	r3, r3, #7
 8005892:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	4a1f      	ldr	r2, [pc, #124]	@ (8005918 <prvHeapInit+0xac>)
 800589c:	4413      	add	r3, r2
 800589e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058a4:	4a1d      	ldr	r2, [pc, #116]	@ (800591c <prvHeapInit+0xb0>)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80058aa:	4b1c      	ldr	r3, [pc, #112]	@ (800591c <prvHeapInit+0xb0>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	4413      	add	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80058b8:	2208      	movs	r2, #8
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1a9b      	subs	r3, r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0307 	bic.w	r3, r3, #7
 80058c6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4a15      	ldr	r2, [pc, #84]	@ (8005920 <prvHeapInit+0xb4>)
 80058cc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80058ce:	4b14      	ldr	r3, [pc, #80]	@ (8005920 <prvHeapInit+0xb4>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2200      	movs	r2, #0
 80058d4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80058d6:	4b12      	ldr	r3, [pc, #72]	@ (8005920 <prvHeapInit+0xb4>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	1ad2      	subs	r2, r2, r3
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005920 <prvHeapInit+0xb4>)
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005924 <prvHeapInit+0xb8>)
 80058fa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	4a09      	ldr	r2, [pc, #36]	@ (8005928 <prvHeapInit+0xbc>)
 8005902:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005904:	4b09      	ldr	r3, [pc, #36]	@ (800592c <prvHeapInit+0xc0>)
 8005906:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800590a:	601a      	str	r2, [r3, #0]
}
 800590c:	bf00      	nop
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	200003a0 	.word	0x200003a0
 800591c:	20012fa0 	.word	0x20012fa0
 8005920:	20012fa8 	.word	0x20012fa8
 8005924:	20012fb0 	.word	0x20012fb0
 8005928:	20012fac 	.word	0x20012fac
 800592c:	20012fbc 	.word	0x20012fbc

08005930 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005938:	4b28      	ldr	r3, [pc, #160]	@ (80059dc <prvInsertBlockIntoFreeList+0xac>)
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	e002      	b.n	8005944 <prvInsertBlockIntoFreeList+0x14>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	429a      	cmp	r2, r3
 800594c:	d8f7      	bhi.n	800593e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	4413      	add	r3, r2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	429a      	cmp	r2, r3
 800595e:	d108      	bne.n	8005972 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	441a      	add	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	441a      	add	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d118      	bne.n	80059b8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	4b15      	ldr	r3, [pc, #84]	@ (80059e0 <prvInsertBlockIntoFreeList+0xb0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d00d      	beq.n	80059ae <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	441a      	add	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	e008      	b.n	80059c0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059ae:	4b0c      	ldr	r3, [pc, #48]	@ (80059e0 <prvInsertBlockIntoFreeList+0xb0>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	e003      	b.n	80059c0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d002      	beq.n	80059ce <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80059ce:	bf00      	nop
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	20012fa0 	.word	0x20012fa0
 80059e0:	20012fa8 	.word	0x20012fa8

080059e4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80059e8:	4803      	ldr	r0, [pc, #12]	@ (80059f8 <_cbSendSystemDesc+0x14>)
 80059ea:	f001 fa0b 	bl	8006e04 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80059ee:	4803      	ldr	r0, [pc, #12]	@ (80059fc <_cbSendSystemDesc+0x18>)
 80059f0:	f001 fa08 	bl	8006e04 <SEGGER_SYSVIEW_SendSysDesc>
}
 80059f4:	bf00      	nop
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	08007edc 	.word	0x08007edc
 80059fc:	08007f1c 	.word	0x08007f1c

08005a00 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005a04:	4b06      	ldr	r3, [pc, #24]	@ (8005a20 <SEGGER_SYSVIEW_Conf+0x20>)
 8005a06:	6818      	ldr	r0, [r3, #0]
 8005a08:	4b05      	ldr	r3, [pc, #20]	@ (8005a20 <SEGGER_SYSVIEW_Conf+0x20>)
 8005a0a:	6819      	ldr	r1, [r3, #0]
 8005a0c:	4b05      	ldr	r3, [pc, #20]	@ (8005a24 <SEGGER_SYSVIEW_Conf+0x24>)
 8005a0e:	4a06      	ldr	r2, [pc, #24]	@ (8005a28 <SEGGER_SYSVIEW_Conf+0x28>)
 8005a10:	f000 fd74 	bl	80064fc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005a14:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8005a18:	f000 fdb4 	bl	8006584 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005a1c:	bf00      	nop
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	20000000 	.word	0x20000000
 8005a24:	080059e5 	.word	0x080059e5
 8005a28:	08007fbc 	.word	0x08007fbc

08005a2c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005a32:	2300      	movs	r3, #0
 8005a34:	607b      	str	r3, [r7, #4]
 8005a36:	e033      	b.n	8005aa0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005a38:	491e      	ldr	r1, [pc, #120]	@ (8005ab4 <_cbSendTaskList+0x88>)
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	491a      	ldr	r1, [pc, #104]	@ (8005ab4 <_cbSendTaskList+0x88>)
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	440b      	add	r3, r1
 8005a56:	3304      	adds	r3, #4
 8005a58:	6819      	ldr	r1, [r3, #0]
 8005a5a:	4c16      	ldr	r4, [pc, #88]	@ (8005ab4 <_cbSendTaskList+0x88>)
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4423      	add	r3, r4
 8005a68:	3308      	adds	r3, #8
 8005a6a:	681c      	ldr	r4, [r3, #0]
 8005a6c:	4d11      	ldr	r5, [pc, #68]	@ (8005ab4 <_cbSendTaskList+0x88>)
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	442b      	add	r3, r5
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	681d      	ldr	r5, [r3, #0]
 8005a7e:	4e0d      	ldr	r6, [pc, #52]	@ (8005ab4 <_cbSendTaskList+0x88>)
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4433      	add	r3, r6
 8005a8c:	3310      	adds	r3, #16
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	462b      	mov	r3, r5
 8005a94:	4622      	mov	r2, r4
 8005a96:	f000 f8bd 	bl	8005c14 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	607b      	str	r3, [r7, #4]
 8005aa0:	4b05      	ldr	r3, [pc, #20]	@ (8005ab8 <_cbSendTaskList+0x8c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d3c6      	bcc.n	8005a38 <_cbSendTaskList+0xc>
  }
}
 8005aaa:	bf00      	nop
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ab4:	20012fc0 	.word	0x20012fc0
 8005ab8:	20013060 	.word	0x20013060

08005abc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ac0:	b082      	sub	sp, #8
 8005ac2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005ac4:	f7fe fa94 	bl	8003ff0 <xTaskGetTickCountFromISR>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2200      	movs	r2, #0
 8005acc:	469a      	mov	sl, r3
 8005ace:	4693      	mov	fp, r2
 8005ad0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005ad4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	f04f 0a00 	mov.w	sl, #0
 8005ae0:	f04f 0b00 	mov.w	fp, #0
 8005ae4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005ae8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005aec:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005af0:	4652      	mov	r2, sl
 8005af2:	465b      	mov	r3, fp
 8005af4:	1a14      	subs	r4, r2, r0
 8005af6:	eb63 0501 	sbc.w	r5, r3, r1
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	f04f 0300 	mov.w	r3, #0
 8005b02:	00ab      	lsls	r3, r5, #2
 8005b04:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005b08:	00a2      	lsls	r2, r4, #2
 8005b0a:	4614      	mov	r4, r2
 8005b0c:	461d      	mov	r5, r3
 8005b0e:	eb14 0800 	adds.w	r8, r4, r0
 8005b12:	eb45 0901 	adc.w	r9, r5, r1
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b2a:	4690      	mov	r8, r2
 8005b2c:	4699      	mov	r9, r3
 8005b2e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005b32:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005b36:	4610      	mov	r0, r2
 8005b38:	4619      	mov	r1, r3
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005b44 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005b52:	2205      	movs	r2, #5
 8005b54:	492b      	ldr	r1, [pc, #172]	@ (8005c04 <SYSVIEW_AddTask+0xc0>)
 8005b56:	68b8      	ldr	r0, [r7, #8]
 8005b58:	f001 fcce 	bl	80074f8 <memcmp>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d04b      	beq.n	8005bfa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005b62:	4b29      	ldr	r3, [pc, #164]	@ (8005c08 <SYSVIEW_AddTask+0xc4>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b07      	cmp	r3, #7
 8005b68:	d903      	bls.n	8005b72 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005b6a:	4828      	ldr	r0, [pc, #160]	@ (8005c0c <SYSVIEW_AddTask+0xc8>)
 8005b6c:	f001 fc48 	bl	8007400 <SEGGER_SYSVIEW_Warn>
    return;
 8005b70:	e044      	b.n	8005bfc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005b72:	4b25      	ldr	r3, [pc, #148]	@ (8005c08 <SYSVIEW_AddTask+0xc4>)
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4926      	ldr	r1, [pc, #152]	@ (8005c10 <SYSVIEW_AddTask+0xcc>)
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005b86:	4b20      	ldr	r3, [pc, #128]	@ (8005c08 <SYSVIEW_AddTask+0xc4>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4921      	ldr	r1, [pc, #132]	@ (8005c10 <SYSVIEW_AddTask+0xcc>)
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	440b      	add	r3, r1
 8005b96:	3304      	adds	r3, #4
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005c08 <SYSVIEW_AddTask+0xc4>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	491b      	ldr	r1, [pc, #108]	@ (8005c10 <SYSVIEW_AddTask+0xcc>)
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	440b      	add	r3, r1
 8005bac:	3308      	adds	r3, #8
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005bb2:	4b15      	ldr	r3, [pc, #84]	@ (8005c08 <SYSVIEW_AddTask+0xc4>)
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	4916      	ldr	r1, [pc, #88]	@ (8005c10 <SYSVIEW_AddTask+0xcc>)
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	330c      	adds	r3, #12
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8005c08 <SYSVIEW_AddTask+0xc4>)
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	4910      	ldr	r1, [pc, #64]	@ (8005c10 <SYSVIEW_AddTask+0xcc>)
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	3310      	adds	r3, #16
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005bde:	4b0a      	ldr	r3, [pc, #40]	@ (8005c08 <SYSVIEW_AddTask+0xc4>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3301      	adds	r3, #1
 8005be4:	4a08      	ldr	r2, [pc, #32]	@ (8005c08 <SYSVIEW_AddTask+0xc4>)
 8005be6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 f80e 	bl	8005c14 <SYSVIEW_SendTaskInfo>
 8005bf8:	e000      	b.n	8005bfc <SYSVIEW_AddTask+0xb8>
    return;
 8005bfa:	bf00      	nop

}
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	08007f2c 	.word	0x08007f2c
 8005c08:	20013060 	.word	0x20013060
 8005c0c:	08007f34 	.word	0x08007f34
 8005c10:	20012fc0 	.word	0x20012fc0

08005c14 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	@ 0x28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005c22:	f107 0314 	add.w	r3, r7, #20
 8005c26:	2214      	movs	r2, #20
 8005c28:	2100      	movs	r1, #0
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f001 fc74 	bl	8007518 <memset>
  TaskInfo.TaskID     = TaskID;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c42:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005c44:	f107 0314 	add.w	r3, r7, #20
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 ffe3 	bl	8006c14 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005c4e:	bf00      	nop
 8005c50:	3728      	adds	r7, #40	@ 0x28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd8 <USART2_IRQHandler+0x80>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d011      	beq.n	8005c92 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8005cdc <USART2_IRQHandler+0x84>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f003 030b 	and.w	r3, r3, #11
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d108      	bne.n	8005c92 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005c80:	4b17      	ldr	r3, [pc, #92]	@ (8005ce0 <USART2_IRQHandler+0x88>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d004      	beq.n	8005c92 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005c88:	4b15      	ldr	r3, [pc, #84]	@ (8005ce0 <USART2_IRQHandler+0x88>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	79fa      	ldrb	r2, [r7, #7]
 8005c8e:	4610      	mov	r0, r2
 8005c90:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01a      	beq.n	8005cd2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005c9c:	4b11      	ldr	r3, [pc, #68]	@ (8005ce4 <USART2_IRQHandler+0x8c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d015      	beq.n	8005cd0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce4 <USART2_IRQHandler+0x8c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	1dfa      	adds	r2, r7, #7
 8005caa:	4610      	mov	r0, r2
 8005cac:	4798      	blx	r3
 8005cae:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce8 <USART2_IRQHandler+0x90>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a0b      	ldr	r2, [pc, #44]	@ (8005ce8 <USART2_IRQHandler+0x90>)
 8005cbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	e006      	b.n	8005cd2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005cc4:	4b04      	ldr	r3, [pc, #16]	@ (8005cd8 <USART2_IRQHandler+0x80>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005cc8:	79fa      	ldrb	r2, [r7, #7]
 8005cca:	4b04      	ldr	r3, [pc, #16]	@ (8005cdc <USART2_IRQHandler+0x84>)
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	e000      	b.n	8005cd2 <USART2_IRQHandler+0x7a>
      return;
 8005cd0:	bf00      	nop
    }
  }
}
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	40004400 	.word	0x40004400
 8005cdc:	40004404 	.word	0x40004404
 8005ce0:	20013064 	.word	0x20013064
 8005ce4:	20013068 	.word	0x20013068
 8005ce8:	4000440c 	.word	0x4000440c

08005cec <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005cf0:	4b05      	ldr	r3, [pc, #20]	@ (8005d08 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a04      	ldr	r2, [pc, #16]	@ (8005d08 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cfa:	6013      	str	r3, [r2, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	4000440c 	.word	0x4000440c

08005d0c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005d12:	4b24      	ldr	r3, [pc, #144]	@ (8005da4 <_DoInit+0x98>)
 8005d14:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2203      	movs	r2, #3
 8005d1a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2203      	movs	r2, #3
 8005d20:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a20      	ldr	r2, [pc, #128]	@ (8005da8 <_DoInit+0x9c>)
 8005d26:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a20      	ldr	r2, [pc, #128]	@ (8005dac <_DoInit+0xa0>)
 8005d2c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d34:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a17      	ldr	r2, [pc, #92]	@ (8005da8 <_DoInit+0x9c>)
 8005d4c:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a17      	ldr	r2, [pc, #92]	@ (8005db0 <_DoInit+0xa4>)
 8005d52:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2210      	movs	r2, #16
 8005d58:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3307      	adds	r3, #7
 8005d70:	4a10      	ldr	r2, [pc, #64]	@ (8005db4 <_DoInit+0xa8>)
 8005d72:	6810      	ldr	r0, [r2, #0]
 8005d74:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005d76:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a0e      	ldr	r2, [pc, #56]	@ (8005db8 <_DoInit+0xac>)
 8005d7e:	6810      	ldr	r0, [r2, #0]
 8005d80:	6018      	str	r0, [r3, #0]
 8005d82:	8891      	ldrh	r1, [r2, #4]
 8005d84:	7992      	ldrb	r2, [r2, #6]
 8005d86:	8099      	strh	r1, [r3, #4]
 8005d88:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005d8a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2220      	movs	r2, #32
 8005d92:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005d94:	f3bf 8f5f 	dmb	sy
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	2001306c 	.word	0x2001306c
 8005da8:	08007f84 	.word	0x08007f84
 8005dac:	20013114 	.word	0x20013114
 8005db0:	20013514 	.word	0x20013514
 8005db4:	08007f90 	.word	0x08007f90
 8005db8:	08007f94 	.word	0x08007f94

08005dbc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08c      	sub	sp, #48	@ 0x30
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005dc8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ec4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005dca:	623b      	str	r3, [r7, #32]
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <SEGGER_RTT_ReadNoLock+0x1e>
 8005dd6:	f7ff ff99 	bl	8005d0c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	4413      	add	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	3360      	adds	r3, #96	@ 0x60
 8005de6:	4a37      	ldr	r2, [pc, #220]	@ (8005ec4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005de8:	4413      	add	r3, r2
 8005dea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005e00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d92b      	bls.n	8005e60 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4293      	cmp	r3, r2
 8005e18:	bf28      	it	cs
 8005e1a:	4613      	movcs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e24:	4413      	add	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	6939      	ldr	r1, [r7, #16]
 8005e2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e2e:	f001 fba7 	bl	8007580 <memcpy>
    NumBytesRead += NumBytesRem;
 8005e32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	4413      	add	r3, r2
 8005e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	4413      	add	r3, r2
 8005e40:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005e4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	4413      	add	r3, r2
 8005e50:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d101      	bne.n	8005e60 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	bf28      	it	cs
 8005e70:	4613      	movcs	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d019      	beq.n	8005eae <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e80:	4413      	add	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	6939      	ldr	r1, [r7, #16]
 8005e88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e8a:	f001 fb79 	bl	8007580 <memcpy>
    NumBytesRead += NumBytesRem;
 8005e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	4413      	add	r3, r2
 8005e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005ea6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	4413      	add	r3, r2
 8005eac:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005eb8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3730      	adds	r7, #48	@ 0x30
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	2001306c 	.word	0x2001306c

08005ec8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8005fcc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005ee4:	f7ff ff12 	bl	8005d0c <_DoInit>
  SEGGER_RTT_LOCK();
 8005ee8:	f3ef 8311 	mrs	r3, BASEPRI
 8005eec:	f04f 0120 	mov.w	r1, #32
 8005ef0:	f381 8811 	msr	BASEPRI, r1
 8005ef4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ef6:	4b35      	ldr	r3, [pc, #212]	@ (8005fcc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005ef8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005efe:	6939      	ldr	r1, [r7, #16]
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	4613      	mov	r3, r2
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	4413      	add	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	440b      	add	r3, r1
 8005f0e:	3304      	adds	r3, #4
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d008      	beq.n	8005f28 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	dbeb      	blt.n	8005efe <SEGGER_RTT_AllocUpBuffer+0x36>
 8005f26:	e000      	b.n	8005f2a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005f28:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	da3f      	bge.n	8005fb4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005f34:	6939      	ldr	r1, [r7, #16]
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	4413      	add	r3, r2
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	440b      	add	r3, r1
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005f48:	6939      	ldr	r1, [r7, #16]
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	4613      	mov	r3, r2
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	4413      	add	r3, r2
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	440b      	add	r3, r1
 8005f58:	3304      	adds	r3, #4
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005f5e:	6939      	ldr	r1, [r7, #16]
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	4613      	mov	r3, r2
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	4413      	add	r3, r2
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	440b      	add	r3, r1
 8005f6c:	3320      	adds	r3, #32
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005f72:	6939      	ldr	r1, [r7, #16]
 8005f74:	69fa      	ldr	r2, [r7, #28]
 8005f76:	4613      	mov	r3, r2
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	4413      	add	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	440b      	add	r3, r1
 8005f80:	3328      	adds	r3, #40	@ 0x28
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005f86:	6939      	ldr	r1, [r7, #16]
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	4413      	add	r3, r2
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	440b      	add	r3, r1
 8005f94:	3324      	adds	r3, #36	@ 0x24
 8005f96:	2200      	movs	r2, #0
 8005f98:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005f9a:	6939      	ldr	r1, [r7, #16]
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	4413      	add	r3, r2
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	440b      	add	r3, r1
 8005fa8:	332c      	adds	r3, #44	@ 0x2c
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005fae:	f3bf 8f5f 	dmb	sy
 8005fb2:	e002      	b.n	8005fba <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3720      	adds	r7, #32
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	2001306c 	.word	0x2001306c

08005fd0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005fde:	4b33      	ldr	r3, [pc, #204]	@ (80060ac <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005fe0:	61bb      	str	r3, [r7, #24]
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005fec:	f7ff fe8e 	bl	8005d0c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ff0:	4b2e      	ldr	r3, [pc, #184]	@ (80060ac <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005ff2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d24d      	bcs.n	800609c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8006000:	f3ef 8311 	mrs	r3, BASEPRI
 8006004:	f04f 0120 	mov.w	r1, #32
 8006008:	f381 8811 	msr	BASEPRI, r1
 800600c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d031      	beq.n	8006078 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8006014:	6979      	ldr	r1, [r7, #20]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4613      	mov	r3, r2
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	4413      	add	r3, r2
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	440b      	add	r3, r1
 8006022:	3360      	adds	r3, #96	@ 0x60
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8006028:	6979      	ldr	r1, [r7, #20]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4613      	mov	r3, r2
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	4413      	add	r3, r2
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	440b      	add	r3, r1
 8006036:	3364      	adds	r3, #100	@ 0x64
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800603c:	6979      	ldr	r1, [r7, #20]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4613      	mov	r3, r2
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	4413      	add	r3, r2
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	440b      	add	r3, r1
 800604a:	3368      	adds	r3, #104	@ 0x68
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8006050:	6979      	ldr	r1, [r7, #20]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4613      	mov	r3, r2
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	4413      	add	r3, r2
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	440b      	add	r3, r1
 800605e:	3370      	adds	r3, #112	@ 0x70
 8006060:	2200      	movs	r2, #0
 8006062:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8006064:	6979      	ldr	r1, [r7, #20]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4613      	mov	r3, r2
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	4413      	add	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	440b      	add	r3, r1
 8006072:	336c      	adds	r3, #108	@ 0x6c
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8006078:	6979      	ldr	r1, [r7, #20]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4613      	mov	r3, r2
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	4413      	add	r3, r2
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	440b      	add	r3, r1
 8006086:	3374      	adds	r3, #116	@ 0x74
 8006088:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800608a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800608c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006096:	2300      	movs	r3, #0
 8006098:	61fb      	str	r3, [r7, #28]
 800609a:	e002      	b.n	80060a2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800609c:	f04f 33ff 	mov.w	r3, #4294967295
 80060a0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80060a2:	69fb      	ldr	r3, [r7, #28]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3720      	adds	r7, #32
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	2001306c 	.word	0x2001306c

080060b0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80060bc:	2300      	movs	r3, #0
 80060be:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80060c0:	e002      	b.n	80060c8 <_EncodeStr+0x18>
    Len++;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	3301      	adds	r3, #1
 80060c6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	4413      	add	r3, r2
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1f6      	bne.n	80060c2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d901      	bls.n	80060e0 <_EncodeStr+0x30>
    Len = Limit;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	2bfe      	cmp	r3, #254	@ 0xfe
 80060e4:	d806      	bhi.n	80060f4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	60fa      	str	r2, [r7, #12]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	e011      	b.n	8006118 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	60fa      	str	r2, [r7, #12]
 80060fa:	22ff      	movs	r2, #255	@ 0xff
 80060fc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	60fa      	str	r2, [r7, #12]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	0a19      	lsrs	r1, r3, #8
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	60fa      	str	r2, [r7, #12]
 8006114:	b2ca      	uxtb	r2, r1
 8006116:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800611c:	e00a      	b.n	8006134 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	1c53      	adds	r3, r2, #1
 8006122:	60bb      	str	r3, [r7, #8]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	1c59      	adds	r1, r3, #1
 8006128:	60f9      	str	r1, [r7, #12]
 800612a:	7812      	ldrb	r2, [r2, #0]
 800612c:	701a      	strb	r2, [r3, #0]
    n++;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	3301      	adds	r3, #1
 8006132:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	429a      	cmp	r2, r3
 800613a:	d3f0      	bcc.n	800611e <_EncodeStr+0x6e>
  }
  return pPayload;
 800613c:	68fb      	ldr	r3, [r7, #12]
}
 800613e:	4618      	mov	r0, r3
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3304      	adds	r3, #4
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
	...

08006164 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800616a:	4b35      	ldr	r3, [pc, #212]	@ (8006240 <_HandleIncomingPacket+0xdc>)
 800616c:	7e1b      	ldrb	r3, [r3, #24]
 800616e:	4618      	mov	r0, r3
 8006170:	1cfb      	adds	r3, r7, #3
 8006172:	2201      	movs	r2, #1
 8006174:	4619      	mov	r1, r3
 8006176:	f7ff fe21 	bl	8005dbc <SEGGER_RTT_ReadNoLock>
 800617a:	4603      	mov	r3, r0
 800617c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	dd59      	ble.n	8006238 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	2b80      	cmp	r3, #128	@ 0x80
 8006188:	d032      	beq.n	80061f0 <_HandleIncomingPacket+0x8c>
 800618a:	2b80      	cmp	r3, #128	@ 0x80
 800618c:	dc42      	bgt.n	8006214 <_HandleIncomingPacket+0xb0>
 800618e:	2b07      	cmp	r3, #7
 8006190:	dc16      	bgt.n	80061c0 <_HandleIncomingPacket+0x5c>
 8006192:	2b00      	cmp	r3, #0
 8006194:	dd3e      	ble.n	8006214 <_HandleIncomingPacket+0xb0>
 8006196:	3b01      	subs	r3, #1
 8006198:	2b06      	cmp	r3, #6
 800619a:	d83b      	bhi.n	8006214 <_HandleIncomingPacket+0xb0>
 800619c:	a201      	add	r2, pc, #4	@ (adr r2, 80061a4 <_HandleIncomingPacket+0x40>)
 800619e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a2:	bf00      	nop
 80061a4:	080061c7 	.word	0x080061c7
 80061a8:	080061cd 	.word	0x080061cd
 80061ac:	080061d3 	.word	0x080061d3
 80061b0:	080061d9 	.word	0x080061d9
 80061b4:	080061df 	.word	0x080061df
 80061b8:	080061e5 	.word	0x080061e5
 80061bc:	080061eb 	.word	0x080061eb
 80061c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80061c2:	d034      	beq.n	800622e <_HandleIncomingPacket+0xca>
 80061c4:	e026      	b.n	8006214 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80061c6:	f000 fba9 	bl	800691c <SEGGER_SYSVIEW_Start>
      break;
 80061ca:	e035      	b.n	8006238 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80061cc:	f000 fc62 	bl	8006a94 <SEGGER_SYSVIEW_Stop>
      break;
 80061d0:	e032      	b.n	8006238 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80061d2:	f000 fe3b 	bl	8006e4c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80061d6:	e02f      	b.n	8006238 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80061d8:	f000 fe00 	bl	8006ddc <SEGGER_SYSVIEW_SendTaskList>
      break;
 80061dc:	e02c      	b.n	8006238 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80061de:	f000 fc7f 	bl	8006ae0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80061e2:	e029      	b.n	8006238 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80061e4:	f001 f8ce 	bl	8007384 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80061e8:	e026      	b.n	8006238 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80061ea:	f001 f8ad 	bl	8007348 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80061ee:	e023      	b.n	8006238 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80061f0:	4b13      	ldr	r3, [pc, #76]	@ (8006240 <_HandleIncomingPacket+0xdc>)
 80061f2:	7e1b      	ldrb	r3, [r3, #24]
 80061f4:	4618      	mov	r0, r3
 80061f6:	1cfb      	adds	r3, r7, #3
 80061f8:	2201      	movs	r2, #1
 80061fa:	4619      	mov	r1, r3
 80061fc:	f7ff fdde 	bl	8005dbc <SEGGER_RTT_ReadNoLock>
 8006200:	4603      	mov	r3, r0
 8006202:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	dd13      	ble.n	8006232 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	4618      	mov	r0, r3
 800620e:	f001 f81b 	bl	8007248 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006212:	e00e      	b.n	8006232 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	b25b      	sxtb	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	da0c      	bge.n	8006236 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800621c:	4b08      	ldr	r3, [pc, #32]	@ (8006240 <_HandleIncomingPacket+0xdc>)
 800621e:	7e1b      	ldrb	r3, [r3, #24]
 8006220:	4618      	mov	r0, r3
 8006222:	1cfb      	adds	r3, r7, #3
 8006224:	2201      	movs	r2, #1
 8006226:	4619      	mov	r1, r3
 8006228:	f7ff fdc8 	bl	8005dbc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800622c:	e003      	b.n	8006236 <_HandleIncomingPacket+0xd2>
      break;
 800622e:	bf00      	nop
 8006230:	e002      	b.n	8006238 <_HandleIncomingPacket+0xd4>
      break;
 8006232:	bf00      	nop
 8006234:	e000      	b.n	8006238 <_HandleIncomingPacket+0xd4>
      break;
 8006236:	bf00      	nop
    }
  }
}
 8006238:	bf00      	nop
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	2001452c 	.word	0x2001452c

08006244 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006244:	b580      	push	{r7, lr}
 8006246:	b08c      	sub	sp, #48	@ 0x30
 8006248:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800624a:	2301      	movs	r3, #1
 800624c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800624e:	1d3b      	adds	r3, r7, #4
 8006250:	3301      	adds	r3, #1
 8006252:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006258:	4b32      	ldr	r3, [pc, #200]	@ (8006324 <_TrySendOverflowPacket+0xe0>)
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800625e:	e00b      	b.n	8006278 <_TrySendOverflowPacket+0x34>
 8006260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006262:	b2da      	uxtb	r2, r3
 8006264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006266:	1c59      	adds	r1, r3, #1
 8006268:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800626a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006274:	09db      	lsrs	r3, r3, #7
 8006276:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627a:	2b7f      	cmp	r3, #127	@ 0x7f
 800627c:	d8f0      	bhi.n	8006260 <_TrySendOverflowPacket+0x1c>
 800627e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006284:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800628e:	4b26      	ldr	r3, [pc, #152]	@ (8006328 <_TrySendOverflowPacket+0xe4>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006294:	4b23      	ldr	r3, [pc, #140]	@ (8006324 <_TrySendOverflowPacket+0xe0>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	623b      	str	r3, [r7, #32]
 80062a6:	e00b      	b.n	80062c0 <_TrySendOverflowPacket+0x7c>
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ae:	1c59      	adds	r1, r3, #1
 80062b0:	6279      	str	r1, [r7, #36]	@ 0x24
 80062b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	09db      	lsrs	r3, r3, #7
 80062be:	623b      	str	r3, [r7, #32]
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80062c4:	d8f0      	bhi.n	80062a8 <_TrySendOverflowPacket+0x64>
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80062cc:	6a3a      	ldr	r2, [r7, #32]
 80062ce:	b2d2      	uxtb	r2, r2
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80062d6:	4b13      	ldr	r3, [pc, #76]	@ (8006324 <_TrySendOverflowPacket+0xe0>)
 80062d8:	785b      	ldrb	r3, [r3, #1]
 80062da:	4618      	mov	r0, r3
 80062dc:	1d3b      	adds	r3, r7, #4
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	1d3b      	adds	r3, r7, #4
 80062e6:	4619      	mov	r1, r3
 80062e8:	f7f9 ff72 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80062ec:	4603      	mov	r3, r0
 80062ee:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80062f0:	f7ff fcfc 	bl	8005cec <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80062fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006324 <_TrySendOverflowPacket+0xe0>)
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006300:	4b08      	ldr	r3, [pc, #32]	@ (8006324 <_TrySendOverflowPacket+0xe0>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	3b01      	subs	r3, #1
 8006306:	b2da      	uxtb	r2, r3
 8006308:	4b06      	ldr	r3, [pc, #24]	@ (8006324 <_TrySendOverflowPacket+0xe0>)
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	e004      	b.n	8006318 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800630e:	4b05      	ldr	r3, [pc, #20]	@ (8006324 <_TrySendOverflowPacket+0xe0>)
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	3301      	adds	r3, #1
 8006314:	4a03      	ldr	r2, [pc, #12]	@ (8006324 <_TrySendOverflowPacket+0xe0>)
 8006316:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006318:	693b      	ldr	r3, [r7, #16]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3730      	adds	r7, #48	@ 0x30
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	2001452c 	.word	0x2001452c
 8006328:	e0001004 	.word	0xe0001004

0800632c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800632c:	b580      	push	{r7, lr}
 800632e:	b08a      	sub	sp, #40	@ 0x28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006338:	4b6d      	ldr	r3, [pc, #436]	@ (80064f0 <_SendPacket+0x1c4>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d010      	beq.n	8006362 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006340:	4b6b      	ldr	r3, [pc, #428]	@ (80064f0 <_SendPacket+0x1c4>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 80a5 	beq.w	8006494 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800634a:	4b69      	ldr	r3, [pc, #420]	@ (80064f0 <_SendPacket+0x1c4>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d109      	bne.n	8006366 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006352:	f7ff ff77 	bl	8006244 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006356:	4b66      	ldr	r3, [pc, #408]	@ (80064f0 <_SendPacket+0x1c4>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b01      	cmp	r3, #1
 800635c:	f040 809c 	bne.w	8006498 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8006360:	e001      	b.n	8006366 <_SendPacket+0x3a>
    goto Send;
 8006362:	bf00      	nop
 8006364:	e000      	b.n	8006368 <_SendPacket+0x3c>
Send:
 8006366:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b1f      	cmp	r3, #31
 800636c:	d809      	bhi.n	8006382 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800636e:	4b60      	ldr	r3, [pc, #384]	@ (80064f0 <_SendPacket+0x1c4>)
 8006370:	69da      	ldr	r2, [r3, #28]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	fa22 f303 	lsr.w	r3, r2, r3
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b00      	cmp	r3, #0
 800637e:	f040 808d 	bne.w	800649c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b17      	cmp	r3, #23
 8006386:	d807      	bhi.n	8006398 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3b01      	subs	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	b2da      	uxtb	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	e03d      	b.n	8006414 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80063a4:	d912      	bls.n	80063cc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	09da      	lsrs	r2, r3, #7
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3b01      	subs	r3, #1
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	b2d2      	uxtb	r2, r2
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	3a01      	subs	r2, #1
 80063be:	60fa      	str	r2, [r7, #12]
 80063c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	e006      	b.n	80063da <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80063de:	d912      	bls.n	8006406 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	09da      	lsrs	r2, r3, #7
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	3a01      	subs	r2, #1
 80063f8:	60fa      	str	r2, [r7, #12]
 80063fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	e006      	b.n	8006414 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3b01      	subs	r3, #1
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	b2da      	uxtb	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006414:	4b37      	ldr	r3, [pc, #220]	@ (80064f4 <_SendPacket+0x1c8>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800641a:	4b35      	ldr	r3, [pc, #212]	@ (80064f0 <_SendPacket+0x1c4>)
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	627b      	str	r3, [r7, #36]	@ 0x24
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	623b      	str	r3, [r7, #32]
 800642c:	e00b      	b.n	8006446 <_SendPacket+0x11a>
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	b2da      	uxtb	r2, r3
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	1c59      	adds	r1, r3, #1
 8006436:	6279      	str	r1, [r7, #36]	@ 0x24
 8006438:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	701a      	strb	r2, [r3, #0]
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	09db      	lsrs	r3, r3, #7
 8006444:	623b      	str	r3, [r7, #32]
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	2b7f      	cmp	r3, #127	@ 0x7f
 800644a:	d8f0      	bhi.n	800642e <_SendPacket+0x102>
 800644c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	627a      	str	r2, [r7, #36]	@ 0x24
 8006452:	6a3a      	ldr	r2, [r7, #32]
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800645c:	4b24      	ldr	r3, [pc, #144]	@ (80064f0 <_SendPacket+0x1c4>)
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	4618      	mov	r0, r3
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	461a      	mov	r2, r3
 800646a:	68f9      	ldr	r1, [r7, #12]
 800646c:	f7f9 feb0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006470:	4603      	mov	r3, r0
 8006472:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006474:	f7ff fc3a 	bl	8005cec <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800647e:	4a1c      	ldr	r2, [pc, #112]	@ (80064f0 <_SendPacket+0x1c4>)
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	60d3      	str	r3, [r2, #12]
 8006484:	e00b      	b.n	800649e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006486:	4b1a      	ldr	r3, [pc, #104]	@ (80064f0 <_SendPacket+0x1c4>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	3301      	adds	r3, #1
 800648c:	b2da      	uxtb	r2, r3
 800648e:	4b18      	ldr	r3, [pc, #96]	@ (80064f0 <_SendPacket+0x1c4>)
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	e004      	b.n	800649e <_SendPacket+0x172>
    goto SendDone;
 8006494:	bf00      	nop
 8006496:	e002      	b.n	800649e <_SendPacket+0x172>
      goto SendDone;
 8006498:	bf00      	nop
 800649a:	e000      	b.n	800649e <_SendPacket+0x172>
      goto SendDone;
 800649c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800649e:	4b14      	ldr	r3, [pc, #80]	@ (80064f0 <_SendPacket+0x1c4>)
 80064a0:	7e1b      	ldrb	r3, [r3, #24]
 80064a2:	4619      	mov	r1, r3
 80064a4:	4a14      	ldr	r2, [pc, #80]	@ (80064f8 <_SendPacket+0x1cc>)
 80064a6:	460b      	mov	r3, r1
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	440b      	add	r3, r1
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	4413      	add	r3, r2
 80064b0:	336c      	adds	r3, #108	@ 0x6c
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	4b0e      	ldr	r3, [pc, #56]	@ (80064f0 <_SendPacket+0x1c4>)
 80064b6:	7e1b      	ldrb	r3, [r3, #24]
 80064b8:	4618      	mov	r0, r3
 80064ba:	490f      	ldr	r1, [pc, #60]	@ (80064f8 <_SendPacket+0x1cc>)
 80064bc:	4603      	mov	r3, r0
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	4403      	add	r3, r0
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	440b      	add	r3, r1
 80064c6:	3370      	adds	r3, #112	@ 0x70
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d00b      	beq.n	80064e6 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80064ce:	4b08      	ldr	r3, [pc, #32]	@ (80064f0 <_SendPacket+0x1c4>)
 80064d0:	789b      	ldrb	r3, [r3, #2]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d107      	bne.n	80064e6 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80064d6:	4b06      	ldr	r3, [pc, #24]	@ (80064f0 <_SendPacket+0x1c4>)
 80064d8:	2201      	movs	r2, #1
 80064da:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80064dc:	f7ff fe42 	bl	8006164 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80064e0:	4b03      	ldr	r3, [pc, #12]	@ (80064f0 <_SendPacket+0x1c4>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80064e6:	bf00      	nop
 80064e8:	3728      	adds	r7, #40	@ 0x28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	2001452c 	.word	0x2001452c
 80064f4:	e0001004 	.word	0xe0001004
 80064f8:	2001306c 	.word	0x2001306c

080064fc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af02      	add	r7, sp, #8
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800650a:	2300      	movs	r3, #0
 800650c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006510:	4917      	ldr	r1, [pc, #92]	@ (8006570 <SEGGER_SYSVIEW_Init+0x74>)
 8006512:	4818      	ldr	r0, [pc, #96]	@ (8006574 <SEGGER_SYSVIEW_Init+0x78>)
 8006514:	f7ff fcd8 	bl	8005ec8 <SEGGER_RTT_AllocUpBuffer>
 8006518:	4603      	mov	r3, r0
 800651a:	b2da      	uxtb	r2, r3
 800651c:	4b16      	ldr	r3, [pc, #88]	@ (8006578 <SEGGER_SYSVIEW_Init+0x7c>)
 800651e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006520:	4b15      	ldr	r3, [pc, #84]	@ (8006578 <SEGGER_SYSVIEW_Init+0x7c>)
 8006522:	785a      	ldrb	r2, [r3, #1]
 8006524:	4b14      	ldr	r3, [pc, #80]	@ (8006578 <SEGGER_SYSVIEW_Init+0x7c>)
 8006526:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006528:	4b13      	ldr	r3, [pc, #76]	@ (8006578 <SEGGER_SYSVIEW_Init+0x7c>)
 800652a:	7e1b      	ldrb	r3, [r3, #24]
 800652c:	4618      	mov	r0, r3
 800652e:	2300      	movs	r3, #0
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	2308      	movs	r3, #8
 8006534:	4a11      	ldr	r2, [pc, #68]	@ (800657c <SEGGER_SYSVIEW_Init+0x80>)
 8006536:	490f      	ldr	r1, [pc, #60]	@ (8006574 <SEGGER_SYSVIEW_Init+0x78>)
 8006538:	f7ff fd4a 	bl	8005fd0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800653c:	4b0e      	ldr	r3, [pc, #56]	@ (8006578 <SEGGER_SYSVIEW_Init+0x7c>)
 800653e:	2200      	movs	r2, #0
 8006540:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006542:	4b0f      	ldr	r3, [pc, #60]	@ (8006580 <SEGGER_SYSVIEW_Init+0x84>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a0c      	ldr	r2, [pc, #48]	@ (8006578 <SEGGER_SYSVIEW_Init+0x7c>)
 8006548:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800654a:	4a0b      	ldr	r2, [pc, #44]	@ (8006578 <SEGGER_SYSVIEW_Init+0x7c>)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006550:	4a09      	ldr	r2, [pc, #36]	@ (8006578 <SEGGER_SYSVIEW_Init+0x7c>)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006556:	4a08      	ldr	r2, [pc, #32]	@ (8006578 <SEGGER_SYSVIEW_Init+0x7c>)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800655c:	4a06      	ldr	r2, [pc, #24]	@ (8006578 <SEGGER_SYSVIEW_Init+0x7c>)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006562:	4b05      	ldr	r3, [pc, #20]	@ (8006578 <SEGGER_SYSVIEW_Init+0x7c>)
 8006564:	2200      	movs	r2, #0
 8006566:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006568:	bf00      	nop
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	20013524 	.word	0x20013524
 8006574:	08007f9c 	.word	0x08007f9c
 8006578:	2001452c 	.word	0x2001452c
 800657c:	20014524 	.word	0x20014524
 8006580:	e0001004 	.word	0xe0001004

08006584 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800658c:	4a04      	ldr	r2, [pc, #16]	@ (80065a0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6113      	str	r3, [r2, #16]
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	2001452c 	.word	0x2001452c

080065a4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065ac:	f3ef 8311 	mrs	r3, BASEPRI
 80065b0:	f04f 0120 	mov.w	r1, #32
 80065b4:	f381 8811 	msr	BASEPRI, r1
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	4808      	ldr	r0, [pc, #32]	@ (80065dc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80065bc:	f7ff fdc5 	bl	800614a <_PreparePacket>
 80065c0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	68b9      	ldr	r1, [r7, #8]
 80065c6:	68b8      	ldr	r0, [r7, #8]
 80065c8:	f7ff feb0 	bl	800632c <_SendPacket>
  RECORD_END();
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f383 8811 	msr	BASEPRI, r3
}
 80065d2:	bf00      	nop
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	2001455c 	.word	0x2001455c

080065e0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b088      	sub	sp, #32
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065ea:	f3ef 8311 	mrs	r3, BASEPRI
 80065ee:	f04f 0120 	mov.w	r1, #32
 80065f2:	f381 8811 	msr	BASEPRI, r1
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	4816      	ldr	r0, [pc, #88]	@ (8006654 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80065fa:	f7ff fda6 	bl	800614a <_PreparePacket>
 80065fe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	61fb      	str	r3, [r7, #28]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	61bb      	str	r3, [r7, #24]
 800660c:	e00b      	b.n	8006626 <SEGGER_SYSVIEW_RecordU32+0x46>
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	b2da      	uxtb	r2, r3
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	1c59      	adds	r1, r3, #1
 8006616:	61f9      	str	r1, [r7, #28]
 8006618:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	09db      	lsrs	r3, r3, #7
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	2b7f      	cmp	r3, #127	@ 0x7f
 800662a:	d8f0      	bhi.n	800660e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	61fa      	str	r2, [r7, #28]
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	6938      	ldr	r0, [r7, #16]
 8006642:	f7ff fe73 	bl	800632c <_SendPacket>
  RECORD_END();
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f383 8811 	msr	BASEPRI, r3
}
 800664c:	bf00      	nop
 800664e:	3720      	adds	r7, #32
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	2001455c 	.word	0x2001455c

08006658 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006658:	b580      	push	{r7, lr}
 800665a:	b08c      	sub	sp, #48	@ 0x30
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006664:	f3ef 8311 	mrs	r3, BASEPRI
 8006668:	f04f 0120 	mov.w	r1, #32
 800666c:	f381 8811 	msr	BASEPRI, r1
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	4825      	ldr	r0, [pc, #148]	@ (8006708 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006674:	f7ff fd69 	bl	800614a <_PreparePacket>
 8006678:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006686:	e00b      	b.n	80066a0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668a:	b2da      	uxtb	r2, r3
 800668c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668e:	1c59      	adds	r1, r3, #1
 8006690:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006692:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669c:	09db      	lsrs	r3, r3, #7
 800669e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80066a4:	d8f0      	bhi.n	8006688 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80066a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	623b      	str	r3, [r7, #32]
 80066be:	e00b      	b.n	80066d8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c6:	1c59      	adds	r1, r3, #1
 80066c8:	6279      	str	r1, [r7, #36]	@ 0x24
 80066ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066ce:	b2d2      	uxtb	r2, r2
 80066d0:	701a      	strb	r2, [r3, #0]
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	09db      	lsrs	r3, r3, #7
 80066d6:	623b      	str	r3, [r7, #32]
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	2b7f      	cmp	r3, #127	@ 0x7f
 80066dc:	d8f0      	bhi.n	80066c0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80066de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80066e4:	6a3a      	ldr	r2, [r7, #32]
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ec:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	6979      	ldr	r1, [r7, #20]
 80066f2:	69b8      	ldr	r0, [r7, #24]
 80066f4:	f7ff fe1a 	bl	800632c <_SendPacket>
  RECORD_END();
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	f383 8811 	msr	BASEPRI, r3
}
 80066fe:	bf00      	nop
 8006700:	3730      	adds	r7, #48	@ 0x30
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	2001455c 	.word	0x2001455c

0800670c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800670c:	b580      	push	{r7, lr}
 800670e:	b08e      	sub	sp, #56	@ 0x38
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800671a:	f3ef 8311 	mrs	r3, BASEPRI
 800671e:	f04f 0120 	mov.w	r1, #32
 8006722:	f381 8811 	msr	BASEPRI, r1
 8006726:	61fb      	str	r3, [r7, #28]
 8006728:	4832      	ldr	r0, [pc, #200]	@ (80067f4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800672a:	f7ff fd0e 	bl	800614a <_PreparePacket>
 800672e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	637b      	str	r3, [r7, #52]	@ 0x34
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	633b      	str	r3, [r7, #48]	@ 0x30
 800673c:	e00b      	b.n	8006756 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800673e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006740:	b2da      	uxtb	r2, r3
 8006742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006744:	1c59      	adds	r1, r3, #1
 8006746:	6379      	str	r1, [r7, #52]	@ 0x34
 8006748:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006752:	09db      	lsrs	r3, r3, #7
 8006754:	633b      	str	r3, [r7, #48]	@ 0x30
 8006756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006758:	2b7f      	cmp	r3, #127	@ 0x7f
 800675a:	d8f0      	bhi.n	800673e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800675c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	637a      	str	r2, [r7, #52]	@ 0x34
 8006762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800676a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006774:	e00b      	b.n	800678e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006778:	b2da      	uxtb	r2, r3
 800677a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800677c:	1c59      	adds	r1, r3, #1
 800677e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006780:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006784:	b2d2      	uxtb	r2, r2
 8006786:	701a      	strb	r2, [r3, #0]
 8006788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678a:	09db      	lsrs	r3, r3, #7
 800678c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800678e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006790:	2b7f      	cmp	r3, #127	@ 0x7f
 8006792:	d8f0      	bhi.n	8006776 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800679a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800679c:	b2d2      	uxtb	r2, r2
 800679e:	701a      	strb	r2, [r3, #0]
 80067a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	623b      	str	r3, [r7, #32]
 80067ac:	e00b      	b.n	80067c6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	1c59      	adds	r1, r3, #1
 80067b6:	6279      	str	r1, [r7, #36]	@ 0x24
 80067b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	09db      	lsrs	r3, r3, #7
 80067c4:	623b      	str	r3, [r7, #32]
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80067ca:	d8f0      	bhi.n	80067ae <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80067cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80067d2:	6a3a      	ldr	r2, [r7, #32]
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	6979      	ldr	r1, [r7, #20]
 80067e0:	69b8      	ldr	r0, [r7, #24]
 80067e2:	f7ff fda3 	bl	800632c <_SendPacket>
  RECORD_END();
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	f383 8811 	msr	BASEPRI, r3
}
 80067ec:	bf00      	nop
 80067ee:	3738      	adds	r7, #56	@ 0x38
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	2001455c 	.word	0x2001455c

080067f8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b090      	sub	sp, #64	@ 0x40
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006806:	f3ef 8311 	mrs	r3, BASEPRI
 800680a:	f04f 0120 	mov.w	r1, #32
 800680e:	f381 8811 	msr	BASEPRI, r1
 8006812:	61fb      	str	r3, [r7, #28]
 8006814:	4840      	ldr	r0, [pc, #256]	@ (8006918 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006816:	f7ff fc98 	bl	800614a <_PreparePacket>
 800681a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006828:	e00b      	b.n	8006842 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800682a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682c:	b2da      	uxtb	r2, r3
 800682e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006830:	1c59      	adds	r1, r3, #1
 8006832:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006834:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683e:	09db      	lsrs	r3, r3, #7
 8006840:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006844:	2b7f      	cmp	r3, #127	@ 0x7f
 8006846:	d8f0      	bhi.n	800682a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800684e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006850:	b2d2      	uxtb	r2, r2
 8006852:	701a      	strb	r2, [r3, #0]
 8006854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006856:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	637b      	str	r3, [r7, #52]	@ 0x34
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006860:	e00b      	b.n	800687a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006864:	b2da      	uxtb	r2, r3
 8006866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006868:	1c59      	adds	r1, r3, #1
 800686a:	6379      	str	r1, [r7, #52]	@ 0x34
 800686c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006876:	09db      	lsrs	r3, r3, #7
 8006878:	633b      	str	r3, [r7, #48]	@ 0x30
 800687a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687c:	2b7f      	cmp	r3, #127	@ 0x7f
 800687e:	d8f0      	bhi.n	8006862 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	637a      	str	r2, [r7, #52]	@ 0x34
 8006886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006888:	b2d2      	uxtb	r2, r2
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800688e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006898:	e00b      	b.n	80068b2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800689a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689c:	b2da      	uxtb	r2, r3
 800689e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a0:	1c59      	adds	r1, r3, #1
 80068a2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80068a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068a8:	b2d2      	uxtb	r2, r2
 80068aa:	701a      	strb	r2, [r3, #0]
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	09db      	lsrs	r3, r3, #7
 80068b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80068b6:	d8f0      	bhi.n	800689a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80068b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	701a      	strb	r2, [r3, #0]
 80068c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80068cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068ce:	623b      	str	r3, [r7, #32]
 80068d0:	e00b      	b.n	80068ea <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	1c59      	adds	r1, r3, #1
 80068da:	6279      	str	r1, [r7, #36]	@ 0x24
 80068dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	701a      	strb	r2, [r3, #0]
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	09db      	lsrs	r3, r3, #7
 80068e8:	623b      	str	r3, [r7, #32]
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80068ee:	d8f0      	bhi.n	80068d2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80068f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80068f6:	6a3a      	ldr	r2, [r7, #32]
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	6979      	ldr	r1, [r7, #20]
 8006904:	69b8      	ldr	r0, [r7, #24]
 8006906:	f7ff fd11 	bl	800632c <_SendPacket>
  RECORD_END();
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	f383 8811 	msr	BASEPRI, r3
}
 8006910:	bf00      	nop
 8006912:	3740      	adds	r7, #64	@ 0x40
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	2001455c 	.word	0x2001455c

0800691c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800691c:	b580      	push	{r7, lr}
 800691e:	b08c      	sub	sp, #48	@ 0x30
 8006920:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006922:	4b59      	ldr	r3, [pc, #356]	@ (8006a88 <SEGGER_SYSVIEW_Start+0x16c>)
 8006924:	2201      	movs	r2, #1
 8006926:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006928:	f3ef 8311 	mrs	r3, BASEPRI
 800692c:	f04f 0120 	mov.w	r1, #32
 8006930:	f381 8811 	msr	BASEPRI, r1
 8006934:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006936:	4b54      	ldr	r3, [pc, #336]	@ (8006a88 <SEGGER_SYSVIEW_Start+0x16c>)
 8006938:	785b      	ldrb	r3, [r3, #1]
 800693a:	220a      	movs	r2, #10
 800693c:	4953      	ldr	r1, [pc, #332]	@ (8006a8c <SEGGER_SYSVIEW_Start+0x170>)
 800693e:	4618      	mov	r0, r3
 8006940:	f7f9 fc46 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800694a:	f7ff f9cf 	bl	8005cec <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800694e:	200a      	movs	r0, #10
 8006950:	f7ff fe28 	bl	80065a4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006954:	f3ef 8311 	mrs	r3, BASEPRI
 8006958:	f04f 0120 	mov.w	r1, #32
 800695c:	f381 8811 	msr	BASEPRI, r1
 8006960:	60bb      	str	r3, [r7, #8]
 8006962:	484b      	ldr	r0, [pc, #300]	@ (8006a90 <SEGGER_SYSVIEW_Start+0x174>)
 8006964:	f7ff fbf1 	bl	800614a <_PreparePacket>
 8006968:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006972:	4b45      	ldr	r3, [pc, #276]	@ (8006a88 <SEGGER_SYSVIEW_Start+0x16c>)
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006978:	e00b      	b.n	8006992 <SEGGER_SYSVIEW_Start+0x76>
 800697a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697c:	b2da      	uxtb	r2, r3
 800697e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006980:	1c59      	adds	r1, r3, #1
 8006982:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006984:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006988:	b2d2      	uxtb	r2, r2
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698e:	09db      	lsrs	r3, r3, #7
 8006990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006994:	2b7f      	cmp	r3, #127	@ 0x7f
 8006996:	d8f0      	bhi.n	800697a <SEGGER_SYSVIEW_Start+0x5e>
 8006998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800699e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069a0:	b2d2      	uxtb	r2, r2
 80069a2:	701a      	strb	r2, [r3, #0]
 80069a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80069ac:	4b36      	ldr	r3, [pc, #216]	@ (8006a88 <SEGGER_SYSVIEW_Start+0x16c>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	623b      	str	r3, [r7, #32]
 80069b2:	e00b      	b.n	80069cc <SEGGER_SYSVIEW_Start+0xb0>
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ba:	1c59      	adds	r1, r3, #1
 80069bc:	6279      	str	r1, [r7, #36]	@ 0x24
 80069be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	701a      	strb	r2, [r3, #0]
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	09db      	lsrs	r3, r3, #7
 80069ca:	623b      	str	r3, [r7, #32]
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80069d0:	d8f0      	bhi.n	80069b4 <SEGGER_SYSVIEW_Start+0x98>
 80069d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d4:	1c5a      	adds	r2, r3, #1
 80069d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80069d8:	6a3a      	ldr	r2, [r7, #32]
 80069da:	b2d2      	uxtb	r2, r2
 80069dc:	701a      	strb	r2, [r3, #0]
 80069de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	61fb      	str	r3, [r7, #28]
 80069e6:	4b28      	ldr	r3, [pc, #160]	@ (8006a88 <SEGGER_SYSVIEW_Start+0x16c>)
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	61bb      	str	r3, [r7, #24]
 80069ec:	e00b      	b.n	8006a06 <SEGGER_SYSVIEW_Start+0xea>
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	1c59      	adds	r1, r3, #1
 80069f6:	61f9      	str	r1, [r7, #28]
 80069f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069fc:	b2d2      	uxtb	r2, r2
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	09db      	lsrs	r3, r3, #7
 8006a04:	61bb      	str	r3, [r7, #24]
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a0a:	d8f0      	bhi.n	80069ee <SEGGER_SYSVIEW_Start+0xd2>
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	61fa      	str	r2, [r7, #28]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	b2d2      	uxtb	r2, r2
 8006a16:	701a      	strb	r2, [r3, #0]
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	e00b      	b.n	8006a3e <SEGGER_SYSVIEW_Start+0x122>
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	1c59      	adds	r1, r3, #1
 8006a2e:	6179      	str	r1, [r7, #20]
 8006a30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	09db      	lsrs	r3, r3, #7
 8006a3c:	613b      	str	r3, [r7, #16]
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a42:	d8f0      	bhi.n	8006a26 <SEGGER_SYSVIEW_Start+0x10a>
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	617a      	str	r2, [r7, #20]
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006a54:	2218      	movs	r2, #24
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7ff fc67 	bl	800632c <_SendPacket>
      RECORD_END();
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006a64:	4b08      	ldr	r3, [pc, #32]	@ (8006a88 <SEGGER_SYSVIEW_Start+0x16c>)
 8006a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006a6c:	4b06      	ldr	r3, [pc, #24]	@ (8006a88 <SEGGER_SYSVIEW_Start+0x16c>)
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a70:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006a72:	f000 f9eb 	bl	8006e4c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006a76:	f000 f9b1 	bl	8006ddc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006a7a:	f000 fc83 	bl	8007384 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006a7e:	bf00      	nop
 8006a80:	3730      	adds	r7, #48	@ 0x30
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	2001452c 	.word	0x2001452c
 8006a8c:	08007fc4 	.word	0x08007fc4
 8006a90:	2001455c 	.word	0x2001455c

08006a94 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a9e:	f04f 0120 	mov.w	r1, #32
 8006aa2:	f381 8811 	msr	BASEPRI, r1
 8006aa6:	607b      	str	r3, [r7, #4]
 8006aa8:	480b      	ldr	r0, [pc, #44]	@ (8006ad8 <SEGGER_SYSVIEW_Stop+0x44>)
 8006aaa:	f7ff fb4e 	bl	800614a <_PreparePacket>
 8006aae:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8006adc <SEGGER_SYSVIEW_Stop+0x48>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006ab8:	220b      	movs	r2, #11
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6838      	ldr	r0, [r7, #0]
 8006abe:	f7ff fc35 	bl	800632c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006ac2:	4b06      	ldr	r3, [pc, #24]	@ (8006adc <SEGGER_SYSVIEW_Stop+0x48>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f383 8811 	msr	BASEPRI, r3
}
 8006ace:	bf00      	nop
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	2001455c 	.word	0x2001455c
 8006adc:	2001452c 	.word	0x2001452c

08006ae0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08c      	sub	sp, #48	@ 0x30
 8006ae4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ae6:	f3ef 8311 	mrs	r3, BASEPRI
 8006aea:	f04f 0120 	mov.w	r1, #32
 8006aee:	f381 8811 	msr	BASEPRI, r1
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	4845      	ldr	r0, [pc, #276]	@ (8006c0c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006af6:	f7ff fb28 	bl	800614a <_PreparePacket>
 8006afa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b04:	4b42      	ldr	r3, [pc, #264]	@ (8006c10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b0a:	e00b      	b.n	8006b24 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b12:	1c59      	adds	r1, r3, #1
 8006b14:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006b16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b20:	09db      	lsrs	r3, r3, #7
 8006b22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b26:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b28:	d8f0      	bhi.n	8006b0c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b38:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b3e:	4b34      	ldr	r3, [pc, #208]	@ (8006c10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	623b      	str	r3, [r7, #32]
 8006b44:	e00b      	b.n	8006b5e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4c:	1c59      	adds	r1, r3, #1
 8006b4e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b50:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	09db      	lsrs	r3, r3, #7
 8006b5c:	623b      	str	r3, [r7, #32]
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b62:	d8f0      	bhi.n	8006b46 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b6a:	6a3a      	ldr	r2, [r7, #32]
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
 8006b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	61fb      	str	r3, [r7, #28]
 8006b78:	4b25      	ldr	r3, [pc, #148]	@ (8006c10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	61bb      	str	r3, [r7, #24]
 8006b7e:	e00b      	b.n	8006b98 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	1c59      	adds	r1, r3, #1
 8006b88:	61f9      	str	r1, [r7, #28]
 8006b8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	09db      	lsrs	r3, r3, #7
 8006b96:	61bb      	str	r3, [r7, #24]
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b9c:	d8f0      	bhi.n	8006b80 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	61fa      	str	r2, [r7, #28]
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	613b      	str	r3, [r7, #16]
 8006bb6:	e00b      	b.n	8006bd0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	1c59      	adds	r1, r3, #1
 8006bc0:	6179      	str	r1, [r7, #20]
 8006bc2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bc6:	b2d2      	uxtb	r2, r2
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	09db      	lsrs	r3, r3, #7
 8006bce:	613b      	str	r3, [r7, #16]
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bd4:	d8f0      	bhi.n	8006bb8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	617a      	str	r2, [r7, #20]
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006be6:	2218      	movs	r2, #24
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	68b8      	ldr	r0, [r7, #8]
 8006bec:	f7ff fb9e 	bl	800632c <_SendPacket>
  RECORD_END();
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006bf6:	4b06      	ldr	r3, [pc, #24]	@ (8006c10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006bfe:	4b04      	ldr	r3, [pc, #16]	@ (8006c10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c02:	4798      	blx	r3
  }
}
 8006c04:	bf00      	nop
 8006c06:	3730      	adds	r7, #48	@ 0x30
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	2001455c 	.word	0x2001455c
 8006c10:	2001452c 	.word	0x2001452c

08006c14 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b092      	sub	sp, #72	@ 0x48
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006c1c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c20:	f04f 0120 	mov.w	r1, #32
 8006c24:	f381 8811 	msr	BASEPRI, r1
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	486a      	ldr	r0, [pc, #424]	@ (8006dd4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006c2c:	f7ff fa8d 	bl	800614a <_PreparePacket>
 8006c30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	4b66      	ldr	r3, [pc, #408]	@ (8006dd8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c46:	e00b      	b.n	8006c60 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c4e:	1c59      	adds	r1, r3, #1
 8006c50:	6479      	str	r1, [r7, #68]	@ 0x44
 8006c52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	701a      	strb	r2, [r3, #0]
 8006c5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c5c:	09db      	lsrs	r3, r3, #7
 8006c5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c62:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c64:	d8f0      	bhi.n	8006c48 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006c66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c68:	1c5a      	adds	r2, r3, #1
 8006c6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	701a      	strb	r2, [r3, #0]
 8006c72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c80:	e00b      	b.n	8006c9a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c88:	1c59      	adds	r1, r3, #1
 8006c8a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006c8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c96:	09db      	lsrs	r3, r3, #7
 8006c98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c9e:	d8f0      	bhi.n	8006c82 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006ca6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cae:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f7ff f9f9 	bl	80060b0 <_EncodeStr>
 8006cbe:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006cc0:	2209      	movs	r2, #9
 8006cc2:	68f9      	ldr	r1, [r7, #12]
 8006cc4:	6938      	ldr	r0, [r7, #16]
 8006cc6:	f7ff fb31 	bl	800632c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	4b40      	ldr	r3, [pc, #256]	@ (8006dd8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cde:	e00b      	b.n	8006cf8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ce6:	1c59      	adds	r1, r3, #1
 8006ce8:	6379      	str	r1, [r7, #52]	@ 0x34
 8006cea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	701a      	strb	r2, [r3, #0]
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	09db      	lsrs	r3, r3, #7
 8006cf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cfc:	d8f0      	bhi.n	8006ce0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	637a      	str	r2, [r7, #52]	@ 0x34
 8006d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	701a      	strb	r2, [r3, #0]
 8006d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d18:	e00b      	b.n	8006d32 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d20:	1c59      	adds	r1, r3, #1
 8006d22:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006d24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d28:	b2d2      	uxtb	r2, r2
 8006d2a:	701a      	strb	r2, [r3, #0]
 8006d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2e:	09db      	lsrs	r3, r3, #7
 8006d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d34:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d36:	d8f0      	bhi.n	8006d1a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d40:	b2d2      	uxtb	r2, r2
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d46:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	623b      	str	r3, [r7, #32]
 8006d52:	e00b      	b.n	8006d6c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5a:	1c59      	adds	r1, r3, #1
 8006d5c:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	701a      	strb	r2, [r3, #0]
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	09db      	lsrs	r3, r3, #7
 8006d6a:	623b      	str	r3, [r7, #32]
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d70:	d8f0      	bhi.n	8006d54 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d78:	6a3a      	ldr	r2, [r7, #32]
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	61fb      	str	r3, [r7, #28]
 8006d86:	2300      	movs	r3, #0
 8006d88:	61bb      	str	r3, [r7, #24]
 8006d8a:	e00b      	b.n	8006da4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	1c59      	adds	r1, r3, #1
 8006d94:	61f9      	str	r1, [r7, #28]
 8006d96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	701a      	strb	r2, [r3, #0]
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	09db      	lsrs	r3, r3, #7
 8006da2:	61bb      	str	r3, [r7, #24]
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006da8:	d8f0      	bhi.n	8006d8c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	61fa      	str	r2, [r7, #28]
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	701a      	strb	r2, [r3, #0]
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006dba:	2215      	movs	r2, #21
 8006dbc:	68f9      	ldr	r1, [r7, #12]
 8006dbe:	6938      	ldr	r0, [r7, #16]
 8006dc0:	f7ff fab4 	bl	800632c <_SendPacket>
  RECORD_END();
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f383 8811 	msr	BASEPRI, r3
}
 8006dca:	bf00      	nop
 8006dcc:	3748      	adds	r7, #72	@ 0x48
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	2001455c 	.word	0x2001455c
 8006dd8:	2001452c 	.word	0x2001452c

08006ddc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006de0:	4b07      	ldr	r3, [pc, #28]	@ (8006e00 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d008      	beq.n	8006dfa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006de8:	4b05      	ldr	r3, [pc, #20]	@ (8006e00 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006df2:	4b03      	ldr	r3, [pc, #12]	@ (8006e00 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	4798      	blx	r3
  }
}
 8006dfa:	bf00      	nop
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	2001452c 	.word	0x2001452c

08006e04 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e0c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e10:	f04f 0120 	mov.w	r1, #32
 8006e14:	f381 8811 	msr	BASEPRI, r1
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	480b      	ldr	r0, [pc, #44]	@ (8006e48 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006e1c:	f7ff f995 	bl	800614a <_PreparePacket>
 8006e20:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e22:	2280      	movs	r2, #128	@ 0x80
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	6938      	ldr	r0, [r7, #16]
 8006e28:	f7ff f942 	bl	80060b0 <_EncodeStr>
 8006e2c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006e2e:	220e      	movs	r2, #14
 8006e30:	68f9      	ldr	r1, [r7, #12]
 8006e32:	6938      	ldr	r0, [r7, #16]
 8006e34:	f7ff fa7a 	bl	800632c <_SendPacket>
  RECORD_END();
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f383 8811 	msr	BASEPRI, r3
}
 8006e3e:	bf00      	nop
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	2001455c 	.word	0x2001455c

08006e4c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006e4c:	b590      	push	{r4, r7, lr}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006e52:	4b15      	ldr	r3, [pc, #84]	@ (8006ea8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d01a      	beq.n	8006e90 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006e5a:	4b13      	ldr	r3, [pc, #76]	@ (8006ea8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d015      	beq.n	8006e90 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006e64:	4b10      	ldr	r3, [pc, #64]	@ (8006ea8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4798      	blx	r3
 8006e6c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e70:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006e72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e76:	f04f 0200 	mov.w	r2, #0
 8006e7a:	f04f 0300 	mov.w	r3, #0
 8006e7e:	000a      	movs	r2, r1
 8006e80:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e82:	4613      	mov	r3, r2
 8006e84:	461a      	mov	r2, r3
 8006e86:	4621      	mov	r1, r4
 8006e88:	200d      	movs	r0, #13
 8006e8a:	f7ff fbe5 	bl	8006658 <SEGGER_SYSVIEW_RecordU32x2>
 8006e8e:	e006      	b.n	8006e9e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006e90:	4b06      	ldr	r3, [pc, #24]	@ (8006eac <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4619      	mov	r1, r3
 8006e96:	200c      	movs	r0, #12
 8006e98:	f7ff fba2 	bl	80065e0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006e9c:	bf00      	nop
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd90      	pop	{r4, r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	2001452c 	.word	0x2001452c
 8006eac:	e0001004 	.word	0xe0001004

08006eb0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006eb6:	f3ef 8311 	mrs	r3, BASEPRI
 8006eba:	f04f 0120 	mov.w	r1, #32
 8006ebe:	f381 8811 	msr	BASEPRI, r1
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	4819      	ldr	r0, [pc, #100]	@ (8006f2c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006ec6:	f7ff f940 	bl	800614a <_PreparePacket>
 8006eca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006ed0:	4b17      	ldr	r3, [pc, #92]	@ (8006f30 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	617b      	str	r3, [r7, #20]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	613b      	str	r3, [r7, #16]
 8006ee2:	e00b      	b.n	8006efc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	1c59      	adds	r1, r3, #1
 8006eec:	6179      	str	r1, [r7, #20]
 8006eee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	701a      	strb	r2, [r3, #0]
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	09db      	lsrs	r3, r3, #7
 8006efa:	613b      	str	r3, [r7, #16]
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f00:	d8f0      	bhi.n	8006ee4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	617a      	str	r2, [r7, #20]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006f12:	2202      	movs	r2, #2
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	68b8      	ldr	r0, [r7, #8]
 8006f18:	f7ff fa08 	bl	800632c <_SendPacket>
  RECORD_END();
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f383 8811 	msr	BASEPRI, r3
}
 8006f22:	bf00      	nop
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	2001455c 	.word	0x2001455c
 8006f30:	e000ed04 	.word	0xe000ed04

08006f34 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f3a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f3e:	f04f 0120 	mov.w	r1, #32
 8006f42:	f381 8811 	msr	BASEPRI, r1
 8006f46:	607b      	str	r3, [r7, #4]
 8006f48:	4807      	ldr	r0, [pc, #28]	@ (8006f68 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006f4a:	f7ff f8fe 	bl	800614a <_PreparePacket>
 8006f4e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006f50:	2203      	movs	r2, #3
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6838      	ldr	r0, [r7, #0]
 8006f56:	f7ff f9e9 	bl	800632c <_SendPacket>
  RECORD_END();
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f383 8811 	msr	BASEPRI, r3
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	2001455c 	.word	0x2001455c

08006f6c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f72:	f3ef 8311 	mrs	r3, BASEPRI
 8006f76:	f04f 0120 	mov.w	r1, #32
 8006f7a:	f381 8811 	msr	BASEPRI, r1
 8006f7e:	607b      	str	r3, [r7, #4]
 8006f80:	4807      	ldr	r0, [pc, #28]	@ (8006fa0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006f82:	f7ff f8e2 	bl	800614a <_PreparePacket>
 8006f86:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006f88:	2212      	movs	r2, #18
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6838      	ldr	r0, [r7, #0]
 8006f8e:	f7ff f9cd 	bl	800632c <_SendPacket>
  RECORD_END();
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f383 8811 	msr	BASEPRI, r3
}
 8006f98:	bf00      	nop
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	2001455c 	.word	0x2001455c

08006fa4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006faa:	f3ef 8311 	mrs	r3, BASEPRI
 8006fae:	f04f 0120 	mov.w	r1, #32
 8006fb2:	f381 8811 	msr	BASEPRI, r1
 8006fb6:	607b      	str	r3, [r7, #4]
 8006fb8:	4807      	ldr	r0, [pc, #28]	@ (8006fd8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006fba:	f7ff f8c6 	bl	800614a <_PreparePacket>
 8006fbe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006fc0:	2211      	movs	r2, #17
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6838      	ldr	r0, [r7, #0]
 8006fc6:	f7ff f9b1 	bl	800632c <_SendPacket>
  RECORD_END();
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f383 8811 	msr	BASEPRI, r3
}
 8006fd0:	bf00      	nop
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	2001455c 	.word	0x2001455c

08006fdc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006fe4:	f3ef 8311 	mrs	r3, BASEPRI
 8006fe8:	f04f 0120 	mov.w	r1, #32
 8006fec:	f381 8811 	msr	BASEPRI, r1
 8006ff0:	617b      	str	r3, [r7, #20]
 8006ff2:	4819      	ldr	r0, [pc, #100]	@ (8007058 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006ff4:	f7ff f8a9 	bl	800614a <_PreparePacket>
 8006ff8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ffe:	4b17      	ldr	r3, [pc, #92]	@ (800705c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	61fb      	str	r3, [r7, #28]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	e00b      	b.n	800702a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	1c59      	adds	r1, r3, #1
 800701a:	61f9      	str	r1, [r7, #28]
 800701c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007020:	b2d2      	uxtb	r2, r2
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	09db      	lsrs	r3, r3, #7
 8007028:	61bb      	str	r3, [r7, #24]
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2b7f      	cmp	r3, #127	@ 0x7f
 800702e:	d8f0      	bhi.n	8007012 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	61fa      	str	r2, [r7, #28]
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	b2d2      	uxtb	r2, r2
 800703a:	701a      	strb	r2, [r3, #0]
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007040:	2208      	movs	r2, #8
 8007042:	68f9      	ldr	r1, [r7, #12]
 8007044:	6938      	ldr	r0, [r7, #16]
 8007046:	f7ff f971 	bl	800632c <_SendPacket>
  RECORD_END();
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f383 8811 	msr	BASEPRI, r3
}
 8007050:	bf00      	nop
 8007052:	3720      	adds	r7, #32
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	2001455c 	.word	0x2001455c
 800705c:	2001452c 	.word	0x2001452c

08007060 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007068:	f3ef 8311 	mrs	r3, BASEPRI
 800706c:	f04f 0120 	mov.w	r1, #32
 8007070:	f381 8811 	msr	BASEPRI, r1
 8007074:	617b      	str	r3, [r7, #20]
 8007076:	4819      	ldr	r0, [pc, #100]	@ (80070dc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007078:	f7ff f867 	bl	800614a <_PreparePacket>
 800707c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007082:	4b17      	ldr	r3, [pc, #92]	@ (80070e0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	61fb      	str	r3, [r7, #28]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	61bb      	str	r3, [r7, #24]
 8007094:	e00b      	b.n	80070ae <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	b2da      	uxtb	r2, r3
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	1c59      	adds	r1, r3, #1
 800709e:	61f9      	str	r1, [r7, #28]
 80070a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	701a      	strb	r2, [r3, #0]
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	09db      	lsrs	r3, r3, #7
 80070ac:	61bb      	str	r3, [r7, #24]
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80070b2:	d8f0      	bhi.n	8007096 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	61fa      	str	r2, [r7, #28]
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	b2d2      	uxtb	r2, r2
 80070be:	701a      	strb	r2, [r3, #0]
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80070c4:	2204      	movs	r2, #4
 80070c6:	68f9      	ldr	r1, [r7, #12]
 80070c8:	6938      	ldr	r0, [r7, #16]
 80070ca:	f7ff f92f 	bl	800632c <_SendPacket>
  RECORD_END();
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f383 8811 	msr	BASEPRI, r3
}
 80070d4:	bf00      	nop
 80070d6:	3720      	adds	r7, #32
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	2001455c 	.word	0x2001455c
 80070e0:	2001452c 	.word	0x2001452c

080070e4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80070ec:	f3ef 8311 	mrs	r3, BASEPRI
 80070f0:	f04f 0120 	mov.w	r1, #32
 80070f4:	f381 8811 	msr	BASEPRI, r1
 80070f8:	617b      	str	r3, [r7, #20]
 80070fa:	4819      	ldr	r0, [pc, #100]	@ (8007160 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80070fc:	f7ff f825 	bl	800614a <_PreparePacket>
 8007100:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007106:	4b17      	ldr	r3, [pc, #92]	@ (8007164 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	61fb      	str	r3, [r7, #28]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	61bb      	str	r3, [r7, #24]
 8007118:	e00b      	b.n	8007132 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	b2da      	uxtb	r2, r3
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	1c59      	adds	r1, r3, #1
 8007122:	61f9      	str	r1, [r7, #28]
 8007124:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007128:	b2d2      	uxtb	r2, r2
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	09db      	lsrs	r3, r3, #7
 8007130:	61bb      	str	r3, [r7, #24]
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	2b7f      	cmp	r3, #127	@ 0x7f
 8007136:	d8f0      	bhi.n	800711a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	61fa      	str	r2, [r7, #28]
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	b2d2      	uxtb	r2, r2
 8007142:	701a      	strb	r2, [r3, #0]
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007148:	2206      	movs	r2, #6
 800714a:	68f9      	ldr	r1, [r7, #12]
 800714c:	6938      	ldr	r0, [r7, #16]
 800714e:	f7ff f8ed 	bl	800632c <_SendPacket>
  RECORD_END();
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f383 8811 	msr	BASEPRI, r3
}
 8007158:	bf00      	nop
 800715a:	3720      	adds	r7, #32
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	2001455c 	.word	0x2001455c
 8007164:	2001452c 	.word	0x2001452c

08007168 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007168:	b580      	push	{r7, lr}
 800716a:	b08a      	sub	sp, #40	@ 0x28
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007172:	f3ef 8311 	mrs	r3, BASEPRI
 8007176:	f04f 0120 	mov.w	r1, #32
 800717a:	f381 8811 	msr	BASEPRI, r1
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	4827      	ldr	r0, [pc, #156]	@ (8007220 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007182:	f7fe ffe2 	bl	800614a <_PreparePacket>
 8007186:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800718c:	4b25      	ldr	r3, [pc, #148]	@ (8007224 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	627b      	str	r3, [r7, #36]	@ 0x24
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	623b      	str	r3, [r7, #32]
 800719e:	e00b      	b.n	80071b8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a6:	1c59      	adds	r1, r3, #1
 80071a8:	6279      	str	r1, [r7, #36]	@ 0x24
 80071aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071ae:	b2d2      	uxtb	r2, r2
 80071b0:	701a      	strb	r2, [r3, #0]
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	09db      	lsrs	r3, r3, #7
 80071b6:	623b      	str	r3, [r7, #32]
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80071bc:	d8f0      	bhi.n	80071a0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80071c4:	6a3a      	ldr	r2, [r7, #32]
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	701a      	strb	r2, [r3, #0]
 80071ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	61fb      	str	r3, [r7, #28]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	61bb      	str	r3, [r7, #24]
 80071d6:	e00b      	b.n	80071f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	1c59      	adds	r1, r3, #1
 80071e0:	61f9      	str	r1, [r7, #28]
 80071e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	09db      	lsrs	r3, r3, #7
 80071ee:	61bb      	str	r3, [r7, #24]
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80071f4:	d8f0      	bhi.n	80071d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	61fa      	str	r2, [r7, #28]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	b2d2      	uxtb	r2, r2
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007206:	2207      	movs	r2, #7
 8007208:	68f9      	ldr	r1, [r7, #12]
 800720a:	6938      	ldr	r0, [r7, #16]
 800720c:	f7ff f88e 	bl	800632c <_SendPacket>
  RECORD_END();
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f383 8811 	msr	BASEPRI, r3
}
 8007216:	bf00      	nop
 8007218:	3728      	adds	r7, #40	@ 0x28
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	2001455c 	.word	0x2001455c
 8007224:	2001452c 	.word	0x2001452c

08007228 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007230:	4b04      	ldr	r3, [pc, #16]	@ (8007244 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	1ad3      	subs	r3, r2, r3
}
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	2001452c 	.word	0x2001452c

08007248 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007248:	b580      	push	{r7, lr}
 800724a:	b08c      	sub	sp, #48	@ 0x30
 800724c:	af00      	add	r7, sp, #0
 800724e:	4603      	mov	r3, r0
 8007250:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007252:	4b3b      	ldr	r3, [pc, #236]	@ (8007340 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d06d      	beq.n	8007336 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800725a:	4b39      	ldr	r3, [pc, #228]	@ (8007340 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007260:	2300      	movs	r3, #0
 8007262:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007264:	e008      	b.n	8007278 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800726c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726e:	2b00      	cmp	r3, #0
 8007270:	d007      	beq.n	8007282 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007274:	3301      	adds	r3, #1
 8007276:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007278:	79fb      	ldrb	r3, [r7, #7]
 800727a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800727c:	429a      	cmp	r2, r3
 800727e:	d3f2      	bcc.n	8007266 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007280:	e000      	b.n	8007284 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007282:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007286:	2b00      	cmp	r3, #0
 8007288:	d055      	beq.n	8007336 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800728a:	f3ef 8311 	mrs	r3, BASEPRI
 800728e:	f04f 0120 	mov.w	r1, #32
 8007292:	f381 8811 	msr	BASEPRI, r1
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	482a      	ldr	r0, [pc, #168]	@ (8007344 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800729a:	f7fe ff56 	bl	800614a <_PreparePacket>
 800729e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80072a8:	79fb      	ldrb	r3, [r7, #7]
 80072aa:	623b      	str	r3, [r7, #32]
 80072ac:	e00b      	b.n	80072c6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b4:	1c59      	adds	r1, r3, #1
 80072b6:	6279      	str	r1, [r7, #36]	@ 0x24
 80072b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072bc:	b2d2      	uxtb	r2, r2
 80072be:	701a      	strb	r2, [r3, #0]
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	09db      	lsrs	r3, r3, #7
 80072c4:	623b      	str	r3, [r7, #32]
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80072ca:	d8f0      	bhi.n	80072ae <SEGGER_SYSVIEW_SendModule+0x66>
 80072cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80072d2:	6a3a      	ldr	r2, [r7, #32]
 80072d4:	b2d2      	uxtb	r2, r2
 80072d6:	701a      	strb	r2, [r3, #0]
 80072d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072da:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	61fb      	str	r3, [r7, #28]
 80072e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	61bb      	str	r3, [r7, #24]
 80072e6:	e00b      	b.n	8007300 <SEGGER_SYSVIEW_SendModule+0xb8>
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	1c59      	adds	r1, r3, #1
 80072f0:	61f9      	str	r1, [r7, #28]
 80072f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072f6:	b2d2      	uxtb	r2, r2
 80072f8:	701a      	strb	r2, [r3, #0]
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	09db      	lsrs	r3, r3, #7
 80072fe:	61bb      	str	r3, [r7, #24]
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	2b7f      	cmp	r3, #127	@ 0x7f
 8007304:	d8f0      	bhi.n	80072e8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	61fa      	str	r2, [r7, #28]
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	b2d2      	uxtb	r2, r2
 8007310:	701a      	strb	r2, [r3, #0]
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2280      	movs	r2, #128	@ 0x80
 800731c:	4619      	mov	r1, r3
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f7fe fec6 	bl	80060b0 <_EncodeStr>
 8007324:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007326:	2216      	movs	r2, #22
 8007328:	68f9      	ldr	r1, [r7, #12]
 800732a:	6938      	ldr	r0, [r7, #16]
 800732c:	f7fe fffe 	bl	800632c <_SendPacket>
      RECORD_END();
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007336:	bf00      	nop
 8007338:	3730      	adds	r7, #48	@ 0x30
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20014554 	.word	0x20014554
 8007344:	2001455c 	.word	0x2001455c

08007348 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800734e:	4b0c      	ldr	r3, [pc, #48]	@ (8007380 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00f      	beq.n	8007376 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007356:	4b0a      	ldr	r3, [pc, #40]	@ (8007380 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d002      	beq.n	800736a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1f2      	bne.n	800735c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20014554 	.word	0x20014554

08007384 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800738a:	f3ef 8311 	mrs	r3, BASEPRI
 800738e:	f04f 0120 	mov.w	r1, #32
 8007392:	f381 8811 	msr	BASEPRI, r1
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	4817      	ldr	r0, [pc, #92]	@ (80073f8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800739a:	f7fe fed6 	bl	800614a <_PreparePacket>
 800739e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	4b14      	ldr	r3, [pc, #80]	@ (80073fc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	613b      	str	r3, [r7, #16]
 80073ae:	e00b      	b.n	80073c8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	1c59      	adds	r1, r3, #1
 80073b8:	6179      	str	r1, [r7, #20]
 80073ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	09db      	lsrs	r3, r3, #7
 80073c6:	613b      	str	r3, [r7, #16]
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80073cc:	d8f0      	bhi.n	80073b0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	617a      	str	r2, [r7, #20]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	701a      	strb	r2, [r3, #0]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80073de:	221b      	movs	r2, #27
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	68b8      	ldr	r0, [r7, #8]
 80073e4:	f7fe ffa2 	bl	800632c <_SendPacket>
  RECORD_END();
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f383 8811 	msr	BASEPRI, r3
}
 80073ee:	bf00      	nop
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	2001455c 	.word	0x2001455c
 80073fc:	20014558 	.word	0x20014558

08007400 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007400:	b580      	push	{r7, lr}
 8007402:	b08a      	sub	sp, #40	@ 0x28
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007408:	f3ef 8311 	mrs	r3, BASEPRI
 800740c:	f04f 0120 	mov.w	r1, #32
 8007410:	f381 8811 	msr	BASEPRI, r1
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	4827      	ldr	r0, [pc, #156]	@ (80074b4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007418:	f7fe fe97 	bl	800614a <_PreparePacket>
 800741c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800741e:	2280      	movs	r2, #128	@ 0x80
 8007420:	6879      	ldr	r1, [r7, #4]
 8007422:	6938      	ldr	r0, [r7, #16]
 8007424:	f7fe fe44 	bl	80060b0 <_EncodeStr>
 8007428:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
 800742e:	2301      	movs	r3, #1
 8007430:	623b      	str	r3, [r7, #32]
 8007432:	e00b      	b.n	800744c <SEGGER_SYSVIEW_Warn+0x4c>
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	b2da      	uxtb	r2, r3
 8007438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743a:	1c59      	adds	r1, r3, #1
 800743c:	6279      	str	r1, [r7, #36]	@ 0x24
 800743e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007442:	b2d2      	uxtb	r2, r2
 8007444:	701a      	strb	r2, [r3, #0]
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	09db      	lsrs	r3, r3, #7
 800744a:	623b      	str	r3, [r7, #32]
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007450:	d8f0      	bhi.n	8007434 <SEGGER_SYSVIEW_Warn+0x34>
 8007452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007454:	1c5a      	adds	r2, r3, #1
 8007456:	627a      	str	r2, [r7, #36]	@ 0x24
 8007458:	6a3a      	ldr	r2, [r7, #32]
 800745a:	b2d2      	uxtb	r2, r2
 800745c:	701a      	strb	r2, [r3, #0]
 800745e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007460:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	61fb      	str	r3, [r7, #28]
 8007466:	2300      	movs	r3, #0
 8007468:	61bb      	str	r3, [r7, #24]
 800746a:	e00b      	b.n	8007484 <SEGGER_SYSVIEW_Warn+0x84>
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	b2da      	uxtb	r2, r3
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	1c59      	adds	r1, r3, #1
 8007474:	61f9      	str	r1, [r7, #28]
 8007476:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800747a:	b2d2      	uxtb	r2, r2
 800747c:	701a      	strb	r2, [r3, #0]
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	09db      	lsrs	r3, r3, #7
 8007482:	61bb      	str	r3, [r7, #24]
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	2b7f      	cmp	r3, #127	@ 0x7f
 8007488:	d8f0      	bhi.n	800746c <SEGGER_SYSVIEW_Warn+0x6c>
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	61fa      	str	r2, [r7, #28]
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	b2d2      	uxtb	r2, r2
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800749a:	221a      	movs	r2, #26
 800749c:	68f9      	ldr	r1, [r7, #12]
 800749e:	6938      	ldr	r0, [r7, #16]
 80074a0:	f7fe ff44 	bl	800632c <_SendPacket>
  RECORD_END();
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f383 8811 	msr	BASEPRI, r3
}
 80074aa:	bf00      	nop
 80074ac:	3728      	adds	r7, #40	@ 0x28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	2001455c 	.word	0x2001455c

080074b8 <siprintf>:
 80074b8:	b40e      	push	{r1, r2, r3}
 80074ba:	b500      	push	{lr}
 80074bc:	b09c      	sub	sp, #112	@ 0x70
 80074be:	ab1d      	add	r3, sp, #116	@ 0x74
 80074c0:	9002      	str	r0, [sp, #8]
 80074c2:	9006      	str	r0, [sp, #24]
 80074c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80074c8:	4809      	ldr	r0, [pc, #36]	@ (80074f0 <siprintf+0x38>)
 80074ca:	9107      	str	r1, [sp, #28]
 80074cc:	9104      	str	r1, [sp, #16]
 80074ce:	4909      	ldr	r1, [pc, #36]	@ (80074f4 <siprintf+0x3c>)
 80074d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80074d4:	9105      	str	r1, [sp, #20]
 80074d6:	6800      	ldr	r0, [r0, #0]
 80074d8:	9301      	str	r3, [sp, #4]
 80074da:	a902      	add	r1, sp, #8
 80074dc:	f000 f9b2 	bl	8007844 <_svfiprintf_r>
 80074e0:	9b02      	ldr	r3, [sp, #8]
 80074e2:	2200      	movs	r2, #0
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	b01c      	add	sp, #112	@ 0x70
 80074e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074ec:	b003      	add	sp, #12
 80074ee:	4770      	bx	lr
 80074f0:	20000014 	.word	0x20000014
 80074f4:	ffff0208 	.word	0xffff0208

080074f8 <memcmp>:
 80074f8:	b510      	push	{r4, lr}
 80074fa:	3901      	subs	r1, #1
 80074fc:	4402      	add	r2, r0
 80074fe:	4290      	cmp	r0, r2
 8007500:	d101      	bne.n	8007506 <memcmp+0xe>
 8007502:	2000      	movs	r0, #0
 8007504:	e005      	b.n	8007512 <memcmp+0x1a>
 8007506:	7803      	ldrb	r3, [r0, #0]
 8007508:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800750c:	42a3      	cmp	r3, r4
 800750e:	d001      	beq.n	8007514 <memcmp+0x1c>
 8007510:	1b18      	subs	r0, r3, r4
 8007512:	bd10      	pop	{r4, pc}
 8007514:	3001      	adds	r0, #1
 8007516:	e7f2      	b.n	80074fe <memcmp+0x6>

08007518 <memset>:
 8007518:	4402      	add	r2, r0
 800751a:	4603      	mov	r3, r0
 800751c:	4293      	cmp	r3, r2
 800751e:	d100      	bne.n	8007522 <memset+0xa>
 8007520:	4770      	bx	lr
 8007522:	f803 1b01 	strb.w	r1, [r3], #1
 8007526:	e7f9      	b.n	800751c <memset+0x4>

08007528 <__errno>:
 8007528:	4b01      	ldr	r3, [pc, #4]	@ (8007530 <__errno+0x8>)
 800752a:	6818      	ldr	r0, [r3, #0]
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	20000014 	.word	0x20000014

08007534 <__libc_init_array>:
 8007534:	b570      	push	{r4, r5, r6, lr}
 8007536:	4d0d      	ldr	r5, [pc, #52]	@ (800756c <__libc_init_array+0x38>)
 8007538:	4c0d      	ldr	r4, [pc, #52]	@ (8007570 <__libc_init_array+0x3c>)
 800753a:	1b64      	subs	r4, r4, r5
 800753c:	10a4      	asrs	r4, r4, #2
 800753e:	2600      	movs	r6, #0
 8007540:	42a6      	cmp	r6, r4
 8007542:	d109      	bne.n	8007558 <__libc_init_array+0x24>
 8007544:	4d0b      	ldr	r5, [pc, #44]	@ (8007574 <__libc_init_array+0x40>)
 8007546:	4c0c      	ldr	r4, [pc, #48]	@ (8007578 <__libc_init_array+0x44>)
 8007548:	f000 fc66 	bl	8007e18 <_init>
 800754c:	1b64      	subs	r4, r4, r5
 800754e:	10a4      	asrs	r4, r4, #2
 8007550:	2600      	movs	r6, #0
 8007552:	42a6      	cmp	r6, r4
 8007554:	d105      	bne.n	8007562 <__libc_init_array+0x2e>
 8007556:	bd70      	pop	{r4, r5, r6, pc}
 8007558:	f855 3b04 	ldr.w	r3, [r5], #4
 800755c:	4798      	blx	r3
 800755e:	3601      	adds	r6, #1
 8007560:	e7ee      	b.n	8007540 <__libc_init_array+0xc>
 8007562:	f855 3b04 	ldr.w	r3, [r5], #4
 8007566:	4798      	blx	r3
 8007568:	3601      	adds	r6, #1
 800756a:	e7f2      	b.n	8007552 <__libc_init_array+0x1e>
 800756c:	0800800c 	.word	0x0800800c
 8007570:	0800800c 	.word	0x0800800c
 8007574:	0800800c 	.word	0x0800800c
 8007578:	08008010 	.word	0x08008010

0800757c <__retarget_lock_acquire_recursive>:
 800757c:	4770      	bx	lr

0800757e <__retarget_lock_release_recursive>:
 800757e:	4770      	bx	lr

08007580 <memcpy>:
 8007580:	440a      	add	r2, r1
 8007582:	4291      	cmp	r1, r2
 8007584:	f100 33ff 	add.w	r3, r0, #4294967295
 8007588:	d100      	bne.n	800758c <memcpy+0xc>
 800758a:	4770      	bx	lr
 800758c:	b510      	push	{r4, lr}
 800758e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007596:	4291      	cmp	r1, r2
 8007598:	d1f9      	bne.n	800758e <memcpy+0xe>
 800759a:	bd10      	pop	{r4, pc}

0800759c <_free_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4605      	mov	r5, r0
 80075a0:	2900      	cmp	r1, #0
 80075a2:	d041      	beq.n	8007628 <_free_r+0x8c>
 80075a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a8:	1f0c      	subs	r4, r1, #4
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	bfb8      	it	lt
 80075ae:	18e4      	addlt	r4, r4, r3
 80075b0:	f000 f8e0 	bl	8007774 <__malloc_lock>
 80075b4:	4a1d      	ldr	r2, [pc, #116]	@ (800762c <_free_r+0x90>)
 80075b6:	6813      	ldr	r3, [r2, #0]
 80075b8:	b933      	cbnz	r3, 80075c8 <_free_r+0x2c>
 80075ba:	6063      	str	r3, [r4, #4]
 80075bc:	6014      	str	r4, [r2, #0]
 80075be:	4628      	mov	r0, r5
 80075c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075c4:	f000 b8dc 	b.w	8007780 <__malloc_unlock>
 80075c8:	42a3      	cmp	r3, r4
 80075ca:	d908      	bls.n	80075de <_free_r+0x42>
 80075cc:	6820      	ldr	r0, [r4, #0]
 80075ce:	1821      	adds	r1, r4, r0
 80075d0:	428b      	cmp	r3, r1
 80075d2:	bf01      	itttt	eq
 80075d4:	6819      	ldreq	r1, [r3, #0]
 80075d6:	685b      	ldreq	r3, [r3, #4]
 80075d8:	1809      	addeq	r1, r1, r0
 80075da:	6021      	streq	r1, [r4, #0]
 80075dc:	e7ed      	b.n	80075ba <_free_r+0x1e>
 80075de:	461a      	mov	r2, r3
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	b10b      	cbz	r3, 80075e8 <_free_r+0x4c>
 80075e4:	42a3      	cmp	r3, r4
 80075e6:	d9fa      	bls.n	80075de <_free_r+0x42>
 80075e8:	6811      	ldr	r1, [r2, #0]
 80075ea:	1850      	adds	r0, r2, r1
 80075ec:	42a0      	cmp	r0, r4
 80075ee:	d10b      	bne.n	8007608 <_free_r+0x6c>
 80075f0:	6820      	ldr	r0, [r4, #0]
 80075f2:	4401      	add	r1, r0
 80075f4:	1850      	adds	r0, r2, r1
 80075f6:	4283      	cmp	r3, r0
 80075f8:	6011      	str	r1, [r2, #0]
 80075fa:	d1e0      	bne.n	80075be <_free_r+0x22>
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	6053      	str	r3, [r2, #4]
 8007602:	4408      	add	r0, r1
 8007604:	6010      	str	r0, [r2, #0]
 8007606:	e7da      	b.n	80075be <_free_r+0x22>
 8007608:	d902      	bls.n	8007610 <_free_r+0x74>
 800760a:	230c      	movs	r3, #12
 800760c:	602b      	str	r3, [r5, #0]
 800760e:	e7d6      	b.n	80075be <_free_r+0x22>
 8007610:	6820      	ldr	r0, [r4, #0]
 8007612:	1821      	adds	r1, r4, r0
 8007614:	428b      	cmp	r3, r1
 8007616:	bf04      	itt	eq
 8007618:	6819      	ldreq	r1, [r3, #0]
 800761a:	685b      	ldreq	r3, [r3, #4]
 800761c:	6063      	str	r3, [r4, #4]
 800761e:	bf04      	itt	eq
 8007620:	1809      	addeq	r1, r1, r0
 8007622:	6021      	streq	r1, [r4, #0]
 8007624:	6054      	str	r4, [r2, #4]
 8007626:	e7ca      	b.n	80075be <_free_r+0x22>
 8007628:	bd38      	pop	{r3, r4, r5, pc}
 800762a:	bf00      	nop
 800762c:	20014784 	.word	0x20014784

08007630 <sbrk_aligned>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	4e0f      	ldr	r6, [pc, #60]	@ (8007670 <sbrk_aligned+0x40>)
 8007634:	460c      	mov	r4, r1
 8007636:	6831      	ldr	r1, [r6, #0]
 8007638:	4605      	mov	r5, r0
 800763a:	b911      	cbnz	r1, 8007642 <sbrk_aligned+0x12>
 800763c:	f000 fba6 	bl	8007d8c <_sbrk_r>
 8007640:	6030      	str	r0, [r6, #0]
 8007642:	4621      	mov	r1, r4
 8007644:	4628      	mov	r0, r5
 8007646:	f000 fba1 	bl	8007d8c <_sbrk_r>
 800764a:	1c43      	adds	r3, r0, #1
 800764c:	d103      	bne.n	8007656 <sbrk_aligned+0x26>
 800764e:	f04f 34ff 	mov.w	r4, #4294967295
 8007652:	4620      	mov	r0, r4
 8007654:	bd70      	pop	{r4, r5, r6, pc}
 8007656:	1cc4      	adds	r4, r0, #3
 8007658:	f024 0403 	bic.w	r4, r4, #3
 800765c:	42a0      	cmp	r0, r4
 800765e:	d0f8      	beq.n	8007652 <sbrk_aligned+0x22>
 8007660:	1a21      	subs	r1, r4, r0
 8007662:	4628      	mov	r0, r5
 8007664:	f000 fb92 	bl	8007d8c <_sbrk_r>
 8007668:	3001      	adds	r0, #1
 800766a:	d1f2      	bne.n	8007652 <sbrk_aligned+0x22>
 800766c:	e7ef      	b.n	800764e <sbrk_aligned+0x1e>
 800766e:	bf00      	nop
 8007670:	20014780 	.word	0x20014780

08007674 <_malloc_r>:
 8007674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007678:	1ccd      	adds	r5, r1, #3
 800767a:	f025 0503 	bic.w	r5, r5, #3
 800767e:	3508      	adds	r5, #8
 8007680:	2d0c      	cmp	r5, #12
 8007682:	bf38      	it	cc
 8007684:	250c      	movcc	r5, #12
 8007686:	2d00      	cmp	r5, #0
 8007688:	4606      	mov	r6, r0
 800768a:	db01      	blt.n	8007690 <_malloc_r+0x1c>
 800768c:	42a9      	cmp	r1, r5
 800768e:	d904      	bls.n	800769a <_malloc_r+0x26>
 8007690:	230c      	movs	r3, #12
 8007692:	6033      	str	r3, [r6, #0]
 8007694:	2000      	movs	r0, #0
 8007696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800769a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007770 <_malloc_r+0xfc>
 800769e:	f000 f869 	bl	8007774 <__malloc_lock>
 80076a2:	f8d8 3000 	ldr.w	r3, [r8]
 80076a6:	461c      	mov	r4, r3
 80076a8:	bb44      	cbnz	r4, 80076fc <_malloc_r+0x88>
 80076aa:	4629      	mov	r1, r5
 80076ac:	4630      	mov	r0, r6
 80076ae:	f7ff ffbf 	bl	8007630 <sbrk_aligned>
 80076b2:	1c43      	adds	r3, r0, #1
 80076b4:	4604      	mov	r4, r0
 80076b6:	d158      	bne.n	800776a <_malloc_r+0xf6>
 80076b8:	f8d8 4000 	ldr.w	r4, [r8]
 80076bc:	4627      	mov	r7, r4
 80076be:	2f00      	cmp	r7, #0
 80076c0:	d143      	bne.n	800774a <_malloc_r+0xd6>
 80076c2:	2c00      	cmp	r4, #0
 80076c4:	d04b      	beq.n	800775e <_malloc_r+0xea>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	4639      	mov	r1, r7
 80076ca:	4630      	mov	r0, r6
 80076cc:	eb04 0903 	add.w	r9, r4, r3
 80076d0:	f000 fb5c 	bl	8007d8c <_sbrk_r>
 80076d4:	4581      	cmp	r9, r0
 80076d6:	d142      	bne.n	800775e <_malloc_r+0xea>
 80076d8:	6821      	ldr	r1, [r4, #0]
 80076da:	1a6d      	subs	r5, r5, r1
 80076dc:	4629      	mov	r1, r5
 80076de:	4630      	mov	r0, r6
 80076e0:	f7ff ffa6 	bl	8007630 <sbrk_aligned>
 80076e4:	3001      	adds	r0, #1
 80076e6:	d03a      	beq.n	800775e <_malloc_r+0xea>
 80076e8:	6823      	ldr	r3, [r4, #0]
 80076ea:	442b      	add	r3, r5
 80076ec:	6023      	str	r3, [r4, #0]
 80076ee:	f8d8 3000 	ldr.w	r3, [r8]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	bb62      	cbnz	r2, 8007750 <_malloc_r+0xdc>
 80076f6:	f8c8 7000 	str.w	r7, [r8]
 80076fa:	e00f      	b.n	800771c <_malloc_r+0xa8>
 80076fc:	6822      	ldr	r2, [r4, #0]
 80076fe:	1b52      	subs	r2, r2, r5
 8007700:	d420      	bmi.n	8007744 <_malloc_r+0xd0>
 8007702:	2a0b      	cmp	r2, #11
 8007704:	d917      	bls.n	8007736 <_malloc_r+0xc2>
 8007706:	1961      	adds	r1, r4, r5
 8007708:	42a3      	cmp	r3, r4
 800770a:	6025      	str	r5, [r4, #0]
 800770c:	bf18      	it	ne
 800770e:	6059      	strne	r1, [r3, #4]
 8007710:	6863      	ldr	r3, [r4, #4]
 8007712:	bf08      	it	eq
 8007714:	f8c8 1000 	streq.w	r1, [r8]
 8007718:	5162      	str	r2, [r4, r5]
 800771a:	604b      	str	r3, [r1, #4]
 800771c:	4630      	mov	r0, r6
 800771e:	f000 f82f 	bl	8007780 <__malloc_unlock>
 8007722:	f104 000b 	add.w	r0, r4, #11
 8007726:	1d23      	adds	r3, r4, #4
 8007728:	f020 0007 	bic.w	r0, r0, #7
 800772c:	1ac2      	subs	r2, r0, r3
 800772e:	bf1c      	itt	ne
 8007730:	1a1b      	subne	r3, r3, r0
 8007732:	50a3      	strne	r3, [r4, r2]
 8007734:	e7af      	b.n	8007696 <_malloc_r+0x22>
 8007736:	6862      	ldr	r2, [r4, #4]
 8007738:	42a3      	cmp	r3, r4
 800773a:	bf0c      	ite	eq
 800773c:	f8c8 2000 	streq.w	r2, [r8]
 8007740:	605a      	strne	r2, [r3, #4]
 8007742:	e7eb      	b.n	800771c <_malloc_r+0xa8>
 8007744:	4623      	mov	r3, r4
 8007746:	6864      	ldr	r4, [r4, #4]
 8007748:	e7ae      	b.n	80076a8 <_malloc_r+0x34>
 800774a:	463c      	mov	r4, r7
 800774c:	687f      	ldr	r7, [r7, #4]
 800774e:	e7b6      	b.n	80076be <_malloc_r+0x4a>
 8007750:	461a      	mov	r2, r3
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	42a3      	cmp	r3, r4
 8007756:	d1fb      	bne.n	8007750 <_malloc_r+0xdc>
 8007758:	2300      	movs	r3, #0
 800775a:	6053      	str	r3, [r2, #4]
 800775c:	e7de      	b.n	800771c <_malloc_r+0xa8>
 800775e:	230c      	movs	r3, #12
 8007760:	6033      	str	r3, [r6, #0]
 8007762:	4630      	mov	r0, r6
 8007764:	f000 f80c 	bl	8007780 <__malloc_unlock>
 8007768:	e794      	b.n	8007694 <_malloc_r+0x20>
 800776a:	6005      	str	r5, [r0, #0]
 800776c:	e7d6      	b.n	800771c <_malloc_r+0xa8>
 800776e:	bf00      	nop
 8007770:	20014784 	.word	0x20014784

08007774 <__malloc_lock>:
 8007774:	4801      	ldr	r0, [pc, #4]	@ (800777c <__malloc_lock+0x8>)
 8007776:	f7ff bf01 	b.w	800757c <__retarget_lock_acquire_recursive>
 800777a:	bf00      	nop
 800777c:	2001477c 	.word	0x2001477c

08007780 <__malloc_unlock>:
 8007780:	4801      	ldr	r0, [pc, #4]	@ (8007788 <__malloc_unlock+0x8>)
 8007782:	f7ff befc 	b.w	800757e <__retarget_lock_release_recursive>
 8007786:	bf00      	nop
 8007788:	2001477c 	.word	0x2001477c

0800778c <__ssputs_r>:
 800778c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007790:	688e      	ldr	r6, [r1, #8]
 8007792:	461f      	mov	r7, r3
 8007794:	42be      	cmp	r6, r7
 8007796:	680b      	ldr	r3, [r1, #0]
 8007798:	4682      	mov	sl, r0
 800779a:	460c      	mov	r4, r1
 800779c:	4690      	mov	r8, r2
 800779e:	d82d      	bhi.n	80077fc <__ssputs_r+0x70>
 80077a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80077a8:	d026      	beq.n	80077f8 <__ssputs_r+0x6c>
 80077aa:	6965      	ldr	r5, [r4, #20]
 80077ac:	6909      	ldr	r1, [r1, #16]
 80077ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077b2:	eba3 0901 	sub.w	r9, r3, r1
 80077b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077ba:	1c7b      	adds	r3, r7, #1
 80077bc:	444b      	add	r3, r9
 80077be:	106d      	asrs	r5, r5, #1
 80077c0:	429d      	cmp	r5, r3
 80077c2:	bf38      	it	cc
 80077c4:	461d      	movcc	r5, r3
 80077c6:	0553      	lsls	r3, r2, #21
 80077c8:	d527      	bpl.n	800781a <__ssputs_r+0x8e>
 80077ca:	4629      	mov	r1, r5
 80077cc:	f7ff ff52 	bl	8007674 <_malloc_r>
 80077d0:	4606      	mov	r6, r0
 80077d2:	b360      	cbz	r0, 800782e <__ssputs_r+0xa2>
 80077d4:	6921      	ldr	r1, [r4, #16]
 80077d6:	464a      	mov	r2, r9
 80077d8:	f7ff fed2 	bl	8007580 <memcpy>
 80077dc:	89a3      	ldrh	r3, [r4, #12]
 80077de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80077e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077e6:	81a3      	strh	r3, [r4, #12]
 80077e8:	6126      	str	r6, [r4, #16]
 80077ea:	6165      	str	r5, [r4, #20]
 80077ec:	444e      	add	r6, r9
 80077ee:	eba5 0509 	sub.w	r5, r5, r9
 80077f2:	6026      	str	r6, [r4, #0]
 80077f4:	60a5      	str	r5, [r4, #8]
 80077f6:	463e      	mov	r6, r7
 80077f8:	42be      	cmp	r6, r7
 80077fa:	d900      	bls.n	80077fe <__ssputs_r+0x72>
 80077fc:	463e      	mov	r6, r7
 80077fe:	6820      	ldr	r0, [r4, #0]
 8007800:	4632      	mov	r2, r6
 8007802:	4641      	mov	r1, r8
 8007804:	f000 faa8 	bl	8007d58 <memmove>
 8007808:	68a3      	ldr	r3, [r4, #8]
 800780a:	1b9b      	subs	r3, r3, r6
 800780c:	60a3      	str	r3, [r4, #8]
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	4433      	add	r3, r6
 8007812:	6023      	str	r3, [r4, #0]
 8007814:	2000      	movs	r0, #0
 8007816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800781a:	462a      	mov	r2, r5
 800781c:	f000 fac6 	bl	8007dac <_realloc_r>
 8007820:	4606      	mov	r6, r0
 8007822:	2800      	cmp	r0, #0
 8007824:	d1e0      	bne.n	80077e8 <__ssputs_r+0x5c>
 8007826:	6921      	ldr	r1, [r4, #16]
 8007828:	4650      	mov	r0, sl
 800782a:	f7ff feb7 	bl	800759c <_free_r>
 800782e:	230c      	movs	r3, #12
 8007830:	f8ca 3000 	str.w	r3, [sl]
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800783a:	81a3      	strh	r3, [r4, #12]
 800783c:	f04f 30ff 	mov.w	r0, #4294967295
 8007840:	e7e9      	b.n	8007816 <__ssputs_r+0x8a>
	...

08007844 <_svfiprintf_r>:
 8007844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007848:	4698      	mov	r8, r3
 800784a:	898b      	ldrh	r3, [r1, #12]
 800784c:	061b      	lsls	r3, r3, #24
 800784e:	b09d      	sub	sp, #116	@ 0x74
 8007850:	4607      	mov	r7, r0
 8007852:	460d      	mov	r5, r1
 8007854:	4614      	mov	r4, r2
 8007856:	d510      	bpl.n	800787a <_svfiprintf_r+0x36>
 8007858:	690b      	ldr	r3, [r1, #16]
 800785a:	b973      	cbnz	r3, 800787a <_svfiprintf_r+0x36>
 800785c:	2140      	movs	r1, #64	@ 0x40
 800785e:	f7ff ff09 	bl	8007674 <_malloc_r>
 8007862:	6028      	str	r0, [r5, #0]
 8007864:	6128      	str	r0, [r5, #16]
 8007866:	b930      	cbnz	r0, 8007876 <_svfiprintf_r+0x32>
 8007868:	230c      	movs	r3, #12
 800786a:	603b      	str	r3, [r7, #0]
 800786c:	f04f 30ff 	mov.w	r0, #4294967295
 8007870:	b01d      	add	sp, #116	@ 0x74
 8007872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007876:	2340      	movs	r3, #64	@ 0x40
 8007878:	616b      	str	r3, [r5, #20]
 800787a:	2300      	movs	r3, #0
 800787c:	9309      	str	r3, [sp, #36]	@ 0x24
 800787e:	2320      	movs	r3, #32
 8007880:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007884:	f8cd 800c 	str.w	r8, [sp, #12]
 8007888:	2330      	movs	r3, #48	@ 0x30
 800788a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a28 <_svfiprintf_r+0x1e4>
 800788e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007892:	f04f 0901 	mov.w	r9, #1
 8007896:	4623      	mov	r3, r4
 8007898:	469a      	mov	sl, r3
 800789a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800789e:	b10a      	cbz	r2, 80078a4 <_svfiprintf_r+0x60>
 80078a0:	2a25      	cmp	r2, #37	@ 0x25
 80078a2:	d1f9      	bne.n	8007898 <_svfiprintf_r+0x54>
 80078a4:	ebba 0b04 	subs.w	fp, sl, r4
 80078a8:	d00b      	beq.n	80078c2 <_svfiprintf_r+0x7e>
 80078aa:	465b      	mov	r3, fp
 80078ac:	4622      	mov	r2, r4
 80078ae:	4629      	mov	r1, r5
 80078b0:	4638      	mov	r0, r7
 80078b2:	f7ff ff6b 	bl	800778c <__ssputs_r>
 80078b6:	3001      	adds	r0, #1
 80078b8:	f000 80a7 	beq.w	8007a0a <_svfiprintf_r+0x1c6>
 80078bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078be:	445a      	add	r2, fp
 80078c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80078c2:	f89a 3000 	ldrb.w	r3, [sl]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 809f 	beq.w	8007a0a <_svfiprintf_r+0x1c6>
 80078cc:	2300      	movs	r3, #0
 80078ce:	f04f 32ff 	mov.w	r2, #4294967295
 80078d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078d6:	f10a 0a01 	add.w	sl, sl, #1
 80078da:	9304      	str	r3, [sp, #16]
 80078dc:	9307      	str	r3, [sp, #28]
 80078de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80078e4:	4654      	mov	r4, sl
 80078e6:	2205      	movs	r2, #5
 80078e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ec:	484e      	ldr	r0, [pc, #312]	@ (8007a28 <_svfiprintf_r+0x1e4>)
 80078ee:	f7f8 fcc7 	bl	8000280 <memchr>
 80078f2:	9a04      	ldr	r2, [sp, #16]
 80078f4:	b9d8      	cbnz	r0, 800792e <_svfiprintf_r+0xea>
 80078f6:	06d0      	lsls	r0, r2, #27
 80078f8:	bf44      	itt	mi
 80078fa:	2320      	movmi	r3, #32
 80078fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007900:	0711      	lsls	r1, r2, #28
 8007902:	bf44      	itt	mi
 8007904:	232b      	movmi	r3, #43	@ 0x2b
 8007906:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800790a:	f89a 3000 	ldrb.w	r3, [sl]
 800790e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007910:	d015      	beq.n	800793e <_svfiprintf_r+0xfa>
 8007912:	9a07      	ldr	r2, [sp, #28]
 8007914:	4654      	mov	r4, sl
 8007916:	2000      	movs	r0, #0
 8007918:	f04f 0c0a 	mov.w	ip, #10
 800791c:	4621      	mov	r1, r4
 800791e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007922:	3b30      	subs	r3, #48	@ 0x30
 8007924:	2b09      	cmp	r3, #9
 8007926:	d94b      	bls.n	80079c0 <_svfiprintf_r+0x17c>
 8007928:	b1b0      	cbz	r0, 8007958 <_svfiprintf_r+0x114>
 800792a:	9207      	str	r2, [sp, #28]
 800792c:	e014      	b.n	8007958 <_svfiprintf_r+0x114>
 800792e:	eba0 0308 	sub.w	r3, r0, r8
 8007932:	fa09 f303 	lsl.w	r3, r9, r3
 8007936:	4313      	orrs	r3, r2
 8007938:	9304      	str	r3, [sp, #16]
 800793a:	46a2      	mov	sl, r4
 800793c:	e7d2      	b.n	80078e4 <_svfiprintf_r+0xa0>
 800793e:	9b03      	ldr	r3, [sp, #12]
 8007940:	1d19      	adds	r1, r3, #4
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	9103      	str	r1, [sp, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	bfbb      	ittet	lt
 800794a:	425b      	neglt	r3, r3
 800794c:	f042 0202 	orrlt.w	r2, r2, #2
 8007950:	9307      	strge	r3, [sp, #28]
 8007952:	9307      	strlt	r3, [sp, #28]
 8007954:	bfb8      	it	lt
 8007956:	9204      	strlt	r2, [sp, #16]
 8007958:	7823      	ldrb	r3, [r4, #0]
 800795a:	2b2e      	cmp	r3, #46	@ 0x2e
 800795c:	d10a      	bne.n	8007974 <_svfiprintf_r+0x130>
 800795e:	7863      	ldrb	r3, [r4, #1]
 8007960:	2b2a      	cmp	r3, #42	@ 0x2a
 8007962:	d132      	bne.n	80079ca <_svfiprintf_r+0x186>
 8007964:	9b03      	ldr	r3, [sp, #12]
 8007966:	1d1a      	adds	r2, r3, #4
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	9203      	str	r2, [sp, #12]
 800796c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007970:	3402      	adds	r4, #2
 8007972:	9305      	str	r3, [sp, #20]
 8007974:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a38 <_svfiprintf_r+0x1f4>
 8007978:	7821      	ldrb	r1, [r4, #0]
 800797a:	2203      	movs	r2, #3
 800797c:	4650      	mov	r0, sl
 800797e:	f7f8 fc7f 	bl	8000280 <memchr>
 8007982:	b138      	cbz	r0, 8007994 <_svfiprintf_r+0x150>
 8007984:	9b04      	ldr	r3, [sp, #16]
 8007986:	eba0 000a 	sub.w	r0, r0, sl
 800798a:	2240      	movs	r2, #64	@ 0x40
 800798c:	4082      	lsls	r2, r0
 800798e:	4313      	orrs	r3, r2
 8007990:	3401      	adds	r4, #1
 8007992:	9304      	str	r3, [sp, #16]
 8007994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007998:	4824      	ldr	r0, [pc, #144]	@ (8007a2c <_svfiprintf_r+0x1e8>)
 800799a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800799e:	2206      	movs	r2, #6
 80079a0:	f7f8 fc6e 	bl	8000280 <memchr>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d036      	beq.n	8007a16 <_svfiprintf_r+0x1d2>
 80079a8:	4b21      	ldr	r3, [pc, #132]	@ (8007a30 <_svfiprintf_r+0x1ec>)
 80079aa:	bb1b      	cbnz	r3, 80079f4 <_svfiprintf_r+0x1b0>
 80079ac:	9b03      	ldr	r3, [sp, #12]
 80079ae:	3307      	adds	r3, #7
 80079b0:	f023 0307 	bic.w	r3, r3, #7
 80079b4:	3308      	adds	r3, #8
 80079b6:	9303      	str	r3, [sp, #12]
 80079b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ba:	4433      	add	r3, r6
 80079bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80079be:	e76a      	b.n	8007896 <_svfiprintf_r+0x52>
 80079c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80079c4:	460c      	mov	r4, r1
 80079c6:	2001      	movs	r0, #1
 80079c8:	e7a8      	b.n	800791c <_svfiprintf_r+0xd8>
 80079ca:	2300      	movs	r3, #0
 80079cc:	3401      	adds	r4, #1
 80079ce:	9305      	str	r3, [sp, #20]
 80079d0:	4619      	mov	r1, r3
 80079d2:	f04f 0c0a 	mov.w	ip, #10
 80079d6:	4620      	mov	r0, r4
 80079d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079dc:	3a30      	subs	r2, #48	@ 0x30
 80079de:	2a09      	cmp	r2, #9
 80079e0:	d903      	bls.n	80079ea <_svfiprintf_r+0x1a6>
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d0c6      	beq.n	8007974 <_svfiprintf_r+0x130>
 80079e6:	9105      	str	r1, [sp, #20]
 80079e8:	e7c4      	b.n	8007974 <_svfiprintf_r+0x130>
 80079ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80079ee:	4604      	mov	r4, r0
 80079f0:	2301      	movs	r3, #1
 80079f2:	e7f0      	b.n	80079d6 <_svfiprintf_r+0x192>
 80079f4:	ab03      	add	r3, sp, #12
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	462a      	mov	r2, r5
 80079fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007a34 <_svfiprintf_r+0x1f0>)
 80079fc:	a904      	add	r1, sp, #16
 80079fe:	4638      	mov	r0, r7
 8007a00:	f3af 8000 	nop.w
 8007a04:	1c42      	adds	r2, r0, #1
 8007a06:	4606      	mov	r6, r0
 8007a08:	d1d6      	bne.n	80079b8 <_svfiprintf_r+0x174>
 8007a0a:	89ab      	ldrh	r3, [r5, #12]
 8007a0c:	065b      	lsls	r3, r3, #25
 8007a0e:	f53f af2d 	bmi.w	800786c <_svfiprintf_r+0x28>
 8007a12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a14:	e72c      	b.n	8007870 <_svfiprintf_r+0x2c>
 8007a16:	ab03      	add	r3, sp, #12
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	462a      	mov	r2, r5
 8007a1c:	4b05      	ldr	r3, [pc, #20]	@ (8007a34 <_svfiprintf_r+0x1f0>)
 8007a1e:	a904      	add	r1, sp, #16
 8007a20:	4638      	mov	r0, r7
 8007a22:	f000 f879 	bl	8007b18 <_printf_i>
 8007a26:	e7ed      	b.n	8007a04 <_svfiprintf_r+0x1c0>
 8007a28:	08007fce 	.word	0x08007fce
 8007a2c:	08007fd8 	.word	0x08007fd8
 8007a30:	00000000 	.word	0x00000000
 8007a34:	0800778d 	.word	0x0800778d
 8007a38:	08007fd4 	.word	0x08007fd4

08007a3c <_printf_common>:
 8007a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a40:	4616      	mov	r6, r2
 8007a42:	4698      	mov	r8, r3
 8007a44:	688a      	ldr	r2, [r1, #8]
 8007a46:	690b      	ldr	r3, [r1, #16]
 8007a48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	bfb8      	it	lt
 8007a50:	4613      	movlt	r3, r2
 8007a52:	6033      	str	r3, [r6, #0]
 8007a54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a58:	4607      	mov	r7, r0
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	b10a      	cbz	r2, 8007a62 <_printf_common+0x26>
 8007a5e:	3301      	adds	r3, #1
 8007a60:	6033      	str	r3, [r6, #0]
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	0699      	lsls	r1, r3, #26
 8007a66:	bf42      	ittt	mi
 8007a68:	6833      	ldrmi	r3, [r6, #0]
 8007a6a:	3302      	addmi	r3, #2
 8007a6c:	6033      	strmi	r3, [r6, #0]
 8007a6e:	6825      	ldr	r5, [r4, #0]
 8007a70:	f015 0506 	ands.w	r5, r5, #6
 8007a74:	d106      	bne.n	8007a84 <_printf_common+0x48>
 8007a76:	f104 0a19 	add.w	sl, r4, #25
 8007a7a:	68e3      	ldr	r3, [r4, #12]
 8007a7c:	6832      	ldr	r2, [r6, #0]
 8007a7e:	1a9b      	subs	r3, r3, r2
 8007a80:	42ab      	cmp	r3, r5
 8007a82:	dc26      	bgt.n	8007ad2 <_printf_common+0x96>
 8007a84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a88:	6822      	ldr	r2, [r4, #0]
 8007a8a:	3b00      	subs	r3, #0
 8007a8c:	bf18      	it	ne
 8007a8e:	2301      	movne	r3, #1
 8007a90:	0692      	lsls	r2, r2, #26
 8007a92:	d42b      	bmi.n	8007aec <_printf_common+0xb0>
 8007a94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a98:	4641      	mov	r1, r8
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	47c8      	blx	r9
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	d01e      	beq.n	8007ae0 <_printf_common+0xa4>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	6922      	ldr	r2, [r4, #16]
 8007aa6:	f003 0306 	and.w	r3, r3, #6
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	bf02      	ittt	eq
 8007aae:	68e5      	ldreq	r5, [r4, #12]
 8007ab0:	6833      	ldreq	r3, [r6, #0]
 8007ab2:	1aed      	subeq	r5, r5, r3
 8007ab4:	68a3      	ldr	r3, [r4, #8]
 8007ab6:	bf0c      	ite	eq
 8007ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007abc:	2500      	movne	r5, #0
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	bfc4      	itt	gt
 8007ac2:	1a9b      	subgt	r3, r3, r2
 8007ac4:	18ed      	addgt	r5, r5, r3
 8007ac6:	2600      	movs	r6, #0
 8007ac8:	341a      	adds	r4, #26
 8007aca:	42b5      	cmp	r5, r6
 8007acc:	d11a      	bne.n	8007b04 <_printf_common+0xc8>
 8007ace:	2000      	movs	r0, #0
 8007ad0:	e008      	b.n	8007ae4 <_printf_common+0xa8>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	4652      	mov	r2, sl
 8007ad6:	4641      	mov	r1, r8
 8007ad8:	4638      	mov	r0, r7
 8007ada:	47c8      	blx	r9
 8007adc:	3001      	adds	r0, #1
 8007ade:	d103      	bne.n	8007ae8 <_printf_common+0xac>
 8007ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae8:	3501      	adds	r5, #1
 8007aea:	e7c6      	b.n	8007a7a <_printf_common+0x3e>
 8007aec:	18e1      	adds	r1, r4, r3
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	2030      	movs	r0, #48	@ 0x30
 8007af2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007af6:	4422      	add	r2, r4
 8007af8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007afc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b00:	3302      	adds	r3, #2
 8007b02:	e7c7      	b.n	8007a94 <_printf_common+0x58>
 8007b04:	2301      	movs	r3, #1
 8007b06:	4622      	mov	r2, r4
 8007b08:	4641      	mov	r1, r8
 8007b0a:	4638      	mov	r0, r7
 8007b0c:	47c8      	blx	r9
 8007b0e:	3001      	adds	r0, #1
 8007b10:	d0e6      	beq.n	8007ae0 <_printf_common+0xa4>
 8007b12:	3601      	adds	r6, #1
 8007b14:	e7d9      	b.n	8007aca <_printf_common+0x8e>
	...

08007b18 <_printf_i>:
 8007b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b1c:	7e0f      	ldrb	r7, [r1, #24]
 8007b1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b20:	2f78      	cmp	r7, #120	@ 0x78
 8007b22:	4691      	mov	r9, r2
 8007b24:	4680      	mov	r8, r0
 8007b26:	460c      	mov	r4, r1
 8007b28:	469a      	mov	sl, r3
 8007b2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b2e:	d807      	bhi.n	8007b40 <_printf_i+0x28>
 8007b30:	2f62      	cmp	r7, #98	@ 0x62
 8007b32:	d80a      	bhi.n	8007b4a <_printf_i+0x32>
 8007b34:	2f00      	cmp	r7, #0
 8007b36:	f000 80d2 	beq.w	8007cde <_printf_i+0x1c6>
 8007b3a:	2f58      	cmp	r7, #88	@ 0x58
 8007b3c:	f000 80b9 	beq.w	8007cb2 <_printf_i+0x19a>
 8007b40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b48:	e03a      	b.n	8007bc0 <_printf_i+0xa8>
 8007b4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b4e:	2b15      	cmp	r3, #21
 8007b50:	d8f6      	bhi.n	8007b40 <_printf_i+0x28>
 8007b52:	a101      	add	r1, pc, #4	@ (adr r1, 8007b58 <_printf_i+0x40>)
 8007b54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b58:	08007bb1 	.word	0x08007bb1
 8007b5c:	08007bc5 	.word	0x08007bc5
 8007b60:	08007b41 	.word	0x08007b41
 8007b64:	08007b41 	.word	0x08007b41
 8007b68:	08007b41 	.word	0x08007b41
 8007b6c:	08007b41 	.word	0x08007b41
 8007b70:	08007bc5 	.word	0x08007bc5
 8007b74:	08007b41 	.word	0x08007b41
 8007b78:	08007b41 	.word	0x08007b41
 8007b7c:	08007b41 	.word	0x08007b41
 8007b80:	08007b41 	.word	0x08007b41
 8007b84:	08007cc5 	.word	0x08007cc5
 8007b88:	08007bef 	.word	0x08007bef
 8007b8c:	08007c7f 	.word	0x08007c7f
 8007b90:	08007b41 	.word	0x08007b41
 8007b94:	08007b41 	.word	0x08007b41
 8007b98:	08007ce7 	.word	0x08007ce7
 8007b9c:	08007b41 	.word	0x08007b41
 8007ba0:	08007bef 	.word	0x08007bef
 8007ba4:	08007b41 	.word	0x08007b41
 8007ba8:	08007b41 	.word	0x08007b41
 8007bac:	08007c87 	.word	0x08007c87
 8007bb0:	6833      	ldr	r3, [r6, #0]
 8007bb2:	1d1a      	adds	r2, r3, #4
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6032      	str	r2, [r6, #0]
 8007bb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e09d      	b.n	8007d00 <_printf_i+0x1e8>
 8007bc4:	6833      	ldr	r3, [r6, #0]
 8007bc6:	6820      	ldr	r0, [r4, #0]
 8007bc8:	1d19      	adds	r1, r3, #4
 8007bca:	6031      	str	r1, [r6, #0]
 8007bcc:	0606      	lsls	r6, r0, #24
 8007bce:	d501      	bpl.n	8007bd4 <_printf_i+0xbc>
 8007bd0:	681d      	ldr	r5, [r3, #0]
 8007bd2:	e003      	b.n	8007bdc <_printf_i+0xc4>
 8007bd4:	0645      	lsls	r5, r0, #25
 8007bd6:	d5fb      	bpl.n	8007bd0 <_printf_i+0xb8>
 8007bd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bdc:	2d00      	cmp	r5, #0
 8007bde:	da03      	bge.n	8007be8 <_printf_i+0xd0>
 8007be0:	232d      	movs	r3, #45	@ 0x2d
 8007be2:	426d      	negs	r5, r5
 8007be4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007be8:	4859      	ldr	r0, [pc, #356]	@ (8007d50 <_printf_i+0x238>)
 8007bea:	230a      	movs	r3, #10
 8007bec:	e011      	b.n	8007c12 <_printf_i+0xfa>
 8007bee:	6821      	ldr	r1, [r4, #0]
 8007bf0:	6833      	ldr	r3, [r6, #0]
 8007bf2:	0608      	lsls	r0, r1, #24
 8007bf4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bf8:	d402      	bmi.n	8007c00 <_printf_i+0xe8>
 8007bfa:	0649      	lsls	r1, r1, #25
 8007bfc:	bf48      	it	mi
 8007bfe:	b2ad      	uxthmi	r5, r5
 8007c00:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c02:	4853      	ldr	r0, [pc, #332]	@ (8007d50 <_printf_i+0x238>)
 8007c04:	6033      	str	r3, [r6, #0]
 8007c06:	bf14      	ite	ne
 8007c08:	230a      	movne	r3, #10
 8007c0a:	2308      	moveq	r3, #8
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c12:	6866      	ldr	r6, [r4, #4]
 8007c14:	60a6      	str	r6, [r4, #8]
 8007c16:	2e00      	cmp	r6, #0
 8007c18:	bfa2      	ittt	ge
 8007c1a:	6821      	ldrge	r1, [r4, #0]
 8007c1c:	f021 0104 	bicge.w	r1, r1, #4
 8007c20:	6021      	strge	r1, [r4, #0]
 8007c22:	b90d      	cbnz	r5, 8007c28 <_printf_i+0x110>
 8007c24:	2e00      	cmp	r6, #0
 8007c26:	d04b      	beq.n	8007cc0 <_printf_i+0x1a8>
 8007c28:	4616      	mov	r6, r2
 8007c2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c2e:	fb03 5711 	mls	r7, r3, r1, r5
 8007c32:	5dc7      	ldrb	r7, [r0, r7]
 8007c34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c38:	462f      	mov	r7, r5
 8007c3a:	42bb      	cmp	r3, r7
 8007c3c:	460d      	mov	r5, r1
 8007c3e:	d9f4      	bls.n	8007c2a <_printf_i+0x112>
 8007c40:	2b08      	cmp	r3, #8
 8007c42:	d10b      	bne.n	8007c5c <_printf_i+0x144>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	07df      	lsls	r7, r3, #31
 8007c48:	d508      	bpl.n	8007c5c <_printf_i+0x144>
 8007c4a:	6923      	ldr	r3, [r4, #16]
 8007c4c:	6861      	ldr	r1, [r4, #4]
 8007c4e:	4299      	cmp	r1, r3
 8007c50:	bfde      	ittt	le
 8007c52:	2330      	movle	r3, #48	@ 0x30
 8007c54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c5c:	1b92      	subs	r2, r2, r6
 8007c5e:	6122      	str	r2, [r4, #16]
 8007c60:	f8cd a000 	str.w	sl, [sp]
 8007c64:	464b      	mov	r3, r9
 8007c66:	aa03      	add	r2, sp, #12
 8007c68:	4621      	mov	r1, r4
 8007c6a:	4640      	mov	r0, r8
 8007c6c:	f7ff fee6 	bl	8007a3c <_printf_common>
 8007c70:	3001      	adds	r0, #1
 8007c72:	d14a      	bne.n	8007d0a <_printf_i+0x1f2>
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295
 8007c78:	b004      	add	sp, #16
 8007c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	f043 0320 	orr.w	r3, r3, #32
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	4833      	ldr	r0, [pc, #204]	@ (8007d54 <_printf_i+0x23c>)
 8007c88:	2778      	movs	r7, #120	@ 0x78
 8007c8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	6831      	ldr	r1, [r6, #0]
 8007c92:	061f      	lsls	r7, r3, #24
 8007c94:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c98:	d402      	bmi.n	8007ca0 <_printf_i+0x188>
 8007c9a:	065f      	lsls	r7, r3, #25
 8007c9c:	bf48      	it	mi
 8007c9e:	b2ad      	uxthmi	r5, r5
 8007ca0:	6031      	str	r1, [r6, #0]
 8007ca2:	07d9      	lsls	r1, r3, #31
 8007ca4:	bf44      	itt	mi
 8007ca6:	f043 0320 	orrmi.w	r3, r3, #32
 8007caa:	6023      	strmi	r3, [r4, #0]
 8007cac:	b11d      	cbz	r5, 8007cb6 <_printf_i+0x19e>
 8007cae:	2310      	movs	r3, #16
 8007cb0:	e7ac      	b.n	8007c0c <_printf_i+0xf4>
 8007cb2:	4827      	ldr	r0, [pc, #156]	@ (8007d50 <_printf_i+0x238>)
 8007cb4:	e7e9      	b.n	8007c8a <_printf_i+0x172>
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	f023 0320 	bic.w	r3, r3, #32
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	e7f6      	b.n	8007cae <_printf_i+0x196>
 8007cc0:	4616      	mov	r6, r2
 8007cc2:	e7bd      	b.n	8007c40 <_printf_i+0x128>
 8007cc4:	6833      	ldr	r3, [r6, #0]
 8007cc6:	6825      	ldr	r5, [r4, #0]
 8007cc8:	6961      	ldr	r1, [r4, #20]
 8007cca:	1d18      	adds	r0, r3, #4
 8007ccc:	6030      	str	r0, [r6, #0]
 8007cce:	062e      	lsls	r6, r5, #24
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	d501      	bpl.n	8007cd8 <_printf_i+0x1c0>
 8007cd4:	6019      	str	r1, [r3, #0]
 8007cd6:	e002      	b.n	8007cde <_printf_i+0x1c6>
 8007cd8:	0668      	lsls	r0, r5, #25
 8007cda:	d5fb      	bpl.n	8007cd4 <_printf_i+0x1bc>
 8007cdc:	8019      	strh	r1, [r3, #0]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	6123      	str	r3, [r4, #16]
 8007ce2:	4616      	mov	r6, r2
 8007ce4:	e7bc      	b.n	8007c60 <_printf_i+0x148>
 8007ce6:	6833      	ldr	r3, [r6, #0]
 8007ce8:	1d1a      	adds	r2, r3, #4
 8007cea:	6032      	str	r2, [r6, #0]
 8007cec:	681e      	ldr	r6, [r3, #0]
 8007cee:	6862      	ldr	r2, [r4, #4]
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f7f8 fac4 	bl	8000280 <memchr>
 8007cf8:	b108      	cbz	r0, 8007cfe <_printf_i+0x1e6>
 8007cfa:	1b80      	subs	r0, r0, r6
 8007cfc:	6060      	str	r0, [r4, #4]
 8007cfe:	6863      	ldr	r3, [r4, #4]
 8007d00:	6123      	str	r3, [r4, #16]
 8007d02:	2300      	movs	r3, #0
 8007d04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d08:	e7aa      	b.n	8007c60 <_printf_i+0x148>
 8007d0a:	6923      	ldr	r3, [r4, #16]
 8007d0c:	4632      	mov	r2, r6
 8007d0e:	4649      	mov	r1, r9
 8007d10:	4640      	mov	r0, r8
 8007d12:	47d0      	blx	sl
 8007d14:	3001      	adds	r0, #1
 8007d16:	d0ad      	beq.n	8007c74 <_printf_i+0x15c>
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	079b      	lsls	r3, r3, #30
 8007d1c:	d413      	bmi.n	8007d46 <_printf_i+0x22e>
 8007d1e:	68e0      	ldr	r0, [r4, #12]
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	4298      	cmp	r0, r3
 8007d24:	bfb8      	it	lt
 8007d26:	4618      	movlt	r0, r3
 8007d28:	e7a6      	b.n	8007c78 <_printf_i+0x160>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	4649      	mov	r1, r9
 8007d30:	4640      	mov	r0, r8
 8007d32:	47d0      	blx	sl
 8007d34:	3001      	adds	r0, #1
 8007d36:	d09d      	beq.n	8007c74 <_printf_i+0x15c>
 8007d38:	3501      	adds	r5, #1
 8007d3a:	68e3      	ldr	r3, [r4, #12]
 8007d3c:	9903      	ldr	r1, [sp, #12]
 8007d3e:	1a5b      	subs	r3, r3, r1
 8007d40:	42ab      	cmp	r3, r5
 8007d42:	dcf2      	bgt.n	8007d2a <_printf_i+0x212>
 8007d44:	e7eb      	b.n	8007d1e <_printf_i+0x206>
 8007d46:	2500      	movs	r5, #0
 8007d48:	f104 0619 	add.w	r6, r4, #25
 8007d4c:	e7f5      	b.n	8007d3a <_printf_i+0x222>
 8007d4e:	bf00      	nop
 8007d50:	08007fdf 	.word	0x08007fdf
 8007d54:	08007ff0 	.word	0x08007ff0

08007d58 <memmove>:
 8007d58:	4288      	cmp	r0, r1
 8007d5a:	b510      	push	{r4, lr}
 8007d5c:	eb01 0402 	add.w	r4, r1, r2
 8007d60:	d902      	bls.n	8007d68 <memmove+0x10>
 8007d62:	4284      	cmp	r4, r0
 8007d64:	4623      	mov	r3, r4
 8007d66:	d807      	bhi.n	8007d78 <memmove+0x20>
 8007d68:	1e43      	subs	r3, r0, #1
 8007d6a:	42a1      	cmp	r1, r4
 8007d6c:	d008      	beq.n	8007d80 <memmove+0x28>
 8007d6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d76:	e7f8      	b.n	8007d6a <memmove+0x12>
 8007d78:	4402      	add	r2, r0
 8007d7a:	4601      	mov	r1, r0
 8007d7c:	428a      	cmp	r2, r1
 8007d7e:	d100      	bne.n	8007d82 <memmove+0x2a>
 8007d80:	bd10      	pop	{r4, pc}
 8007d82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d8a:	e7f7      	b.n	8007d7c <memmove+0x24>

08007d8c <_sbrk_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	4d06      	ldr	r5, [pc, #24]	@ (8007da8 <_sbrk_r+0x1c>)
 8007d90:	2300      	movs	r3, #0
 8007d92:	4604      	mov	r4, r0
 8007d94:	4608      	mov	r0, r1
 8007d96:	602b      	str	r3, [r5, #0]
 8007d98:	f7f9 f82e 	bl	8000df8 <_sbrk>
 8007d9c:	1c43      	adds	r3, r0, #1
 8007d9e:	d102      	bne.n	8007da6 <_sbrk_r+0x1a>
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	b103      	cbz	r3, 8007da6 <_sbrk_r+0x1a>
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	bd38      	pop	{r3, r4, r5, pc}
 8007da8:	20014778 	.word	0x20014778

08007dac <_realloc_r>:
 8007dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007db0:	4680      	mov	r8, r0
 8007db2:	4615      	mov	r5, r2
 8007db4:	460c      	mov	r4, r1
 8007db6:	b921      	cbnz	r1, 8007dc2 <_realloc_r+0x16>
 8007db8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	f7ff bc59 	b.w	8007674 <_malloc_r>
 8007dc2:	b92a      	cbnz	r2, 8007dd0 <_realloc_r+0x24>
 8007dc4:	f7ff fbea 	bl	800759c <_free_r>
 8007dc8:	2400      	movs	r4, #0
 8007dca:	4620      	mov	r0, r4
 8007dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dd0:	f000 f81a 	bl	8007e08 <_malloc_usable_size_r>
 8007dd4:	4285      	cmp	r5, r0
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	d802      	bhi.n	8007de0 <_realloc_r+0x34>
 8007dda:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007dde:	d8f4      	bhi.n	8007dca <_realloc_r+0x1e>
 8007de0:	4629      	mov	r1, r5
 8007de2:	4640      	mov	r0, r8
 8007de4:	f7ff fc46 	bl	8007674 <_malloc_r>
 8007de8:	4607      	mov	r7, r0
 8007dea:	2800      	cmp	r0, #0
 8007dec:	d0ec      	beq.n	8007dc8 <_realloc_r+0x1c>
 8007dee:	42b5      	cmp	r5, r6
 8007df0:	462a      	mov	r2, r5
 8007df2:	4621      	mov	r1, r4
 8007df4:	bf28      	it	cs
 8007df6:	4632      	movcs	r2, r6
 8007df8:	f7ff fbc2 	bl	8007580 <memcpy>
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	4640      	mov	r0, r8
 8007e00:	f7ff fbcc 	bl	800759c <_free_r>
 8007e04:	463c      	mov	r4, r7
 8007e06:	e7e0      	b.n	8007dca <_realloc_r+0x1e>

08007e08 <_malloc_usable_size_r>:
 8007e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e0c:	1f18      	subs	r0, r3, #4
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	bfbc      	itt	lt
 8007e12:	580b      	ldrlt	r3, [r1, r0]
 8007e14:	18c0      	addlt	r0, r0, r3
 8007e16:	4770      	bx	lr

08007e18 <_init>:
 8007e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1a:	bf00      	nop
 8007e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e1e:	bc08      	pop	{r3}
 8007e20:	469e      	mov	lr, r3
 8007e22:	4770      	bx	lr

08007e24 <_fini>:
 8007e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e26:	bf00      	nop
 8007e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e2a:	bc08      	pop	{r3}
 8007e2c:	469e      	mov	lr, r3
 8007e2e:	4770      	bx	lr
