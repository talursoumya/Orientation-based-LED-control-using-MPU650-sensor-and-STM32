
006_LED_Btn_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008154  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  080082e4  080082e4  000092e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084a8  080084a8  0000a01c  2**0
                  CONTENTS
  4 .ARM          00000008  080084a8  080084a8  000094a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084b0  080084b0  0000a01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084b0  080084b0  000094b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084b4  080084b4  000094b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080084b8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a01c  2**0
                  CONTENTS
 10 .bss          000144e8  2000001c  2000001c  0000a01c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014504  20014504  0000a01c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a01c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000177b9  00000000  00000000  0000a04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003586  00000000  00000000  00021805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  00024d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ba  00000000  00000000  00026320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fc9  00000000  00000000  000273da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018db2  00000000  00000000  0004b3a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da842  00000000  00000000  00064155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013e997  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ae0  00000000  00000000  0013e9dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000cc  00000000  00000000  001444bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082cc 	.word	0x080082cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080082cc 	.word	0x080082cc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f30 	.word	0x20012f30

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fcb9 	bl	8000ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f87d 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f90f 	bl	8000784 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000566:	f000 f8e3 	bl	8000730 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800056a:	4830      	ldr	r0, [pc, #192]	@ (800062c <main+0xd8>)
 800056c:	f005 fb5a 	bl	8005c24 <SEGGER_UART_init>

  //Enable the CYCCNT counter
     DWT_CTRL |= (1<<0);
 8000570:	4b2f      	ldr	r3, [pc, #188]	@ (8000630 <main+0xdc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a2e      	ldr	r2, [pc, #184]	@ (8000630 <main+0xdc>)
 8000576:	f043 0301 	orr.w	r3, r3, #1
 800057a:	6013      	str	r3, [r2, #0]

    SEGGER_SYSVIEW_Conf();
 800057c:	f005 f8c0 	bl	8005700 <SEGGER_SYSVIEW_Conf>

   // SEGGER_SYSVIEW_Start();

  	status=xTaskCreate(led_green_handler,"LED-Green_task",200,NULL,3,&ledg_task_handle);
 8000580:	4b2c      	ldr	r3, [pc, #176]	@ (8000634 <main+0xe0>)
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	2303      	movs	r3, #3
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2300      	movs	r3, #0
 800058a:	22c8      	movs	r2, #200	@ 0xc8
 800058c:	492a      	ldr	r1, [pc, #168]	@ (8000638 <main+0xe4>)
 800058e:	482b      	ldr	r0, [pc, #172]	@ (800063c <main+0xe8>)
 8000590:	f003 f806 	bl	80035a0 <xTaskCreate>
 8000594:	60f8      	str	r0, [r7, #12]
  	configASSERT(status == pdPASS);
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d00b      	beq.n	80005b4 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800059c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005a0:	f383 8811 	msr	BASEPRI, r3
 80005a4:	f3bf 8f6f 	isb	sy
 80005a8:	f3bf 8f4f 	dsb	sy
 80005ac:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <main+0x5c>
  	next_task_handle = ledg_task_handle;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <main+0xe0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a21      	ldr	r2, [pc, #132]	@ (8000640 <main+0xec>)
 80005ba:	6013      	str	r3, [r2, #0]

  	status=xTaskCreate(led_orange_handler,"LED-Orange_task",200,NULL,2,&ledo_task_handle);
 80005bc:	4b21      	ldr	r3, [pc, #132]	@ (8000644 <main+0xf0>)
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	2302      	movs	r3, #2
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2300      	movs	r3, #0
 80005c6:	22c8      	movs	r2, #200	@ 0xc8
 80005c8:	491f      	ldr	r1, [pc, #124]	@ (8000648 <main+0xf4>)
 80005ca:	4820      	ldr	r0, [pc, #128]	@ (800064c <main+0xf8>)
 80005cc:	f002 ffe8 	bl	80035a0 <xTaskCreate>
 80005d0:	60f8      	str	r0, [r7, #12]
  	configASSERT(status == pdPASS);
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d00b      	beq.n	80005f0 <main+0x9c>
        __asm volatile
 80005d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005dc:	f383 8811 	msr	BASEPRI, r3
 80005e0:	f3bf 8f6f 	isb	sy
 80005e4:	f3bf 8f4f 	dsb	sy
 80005e8:	607b      	str	r3, [r7, #4]
    }
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <main+0x98>

  	status=xTaskCreate(led_red_handler,"LED-Red_task",200,NULL,1,&ledr_task_handle);
 80005f0:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <main+0xfc>)
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2301      	movs	r3, #1
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	22c8      	movs	r2, #200	@ 0xc8
 80005fc:	4915      	ldr	r1, [pc, #84]	@ (8000654 <main+0x100>)
 80005fe:	4816      	ldr	r0, [pc, #88]	@ (8000658 <main+0x104>)
 8000600:	f002 ffce 	bl	80035a0 <xTaskCreate>
 8000604:	60f8      	str	r0, [r7, #12]
  	configASSERT(status == pdPASS);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d00b      	beq.n	8000624 <main+0xd0>
        __asm volatile
 800060c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000610:	f383 8811 	msr	BASEPRI, r3
 8000614:	f3bf 8f6f 	isb	sy
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	603b      	str	r3, [r7, #0]
    }
 800061e:	bf00      	nop
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <main+0xcc>



  	//start the freeRTOS scheduler
  	vTaskStartScheduler();
 8000624:	f003 f9ca 	bl	80039bc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <main+0xd4>
 800062c:	0007a120 	.word	0x0007a120
 8000630:	e0001000 	.word	0xe0001000
 8000634:	20000080 	.word	0x20000080
 8000638:	080082e4 	.word	0x080082e4
 800063c:	08000aa9 	.word	0x08000aa9
 8000640:	2000008c 	.word	0x2000008c
 8000644:	20000084 	.word	0x20000084
 8000648:	080082f4 	.word	0x080082f4
 800064c:	08000b19 	.word	0x08000b19
 8000650:	20000088 	.word	0x20000088
 8000654:	08008304 	.word	0x08008304
 8000658:	08000b89 	.word	0x08000b89

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	@ 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f007 fdf4 	bl	8008258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	@ (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d0:	23a8      	movs	r3, #168	@ 0xa8
 80006d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d8:	2307      	movs	r3, #7
 80006da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 ff0d 	bl	8001500 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 fa94 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2105      	movs	r1, #5
 800070e:	4618      	mov	r0, r3
 8000710:	f001 f96e 	bl	80019f0 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071a:	f000 fa7d 	bl	8000c18 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	@ 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <MX_USART2_UART_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000768:	f001 fe36 	bl	80023d8 <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000772:	f000 fa51 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000038 	.word	0x20000038
 8000780:	40004400 	.word	0x40004400

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	@ 0x30
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	4ba6      	ldr	r3, [pc, #664]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4aa5      	ldr	r2, [pc, #660]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 80007a4:	f043 0310 	orr.w	r3, r3, #16
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4ba3      	ldr	r3, [pc, #652]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0310 	and.w	r3, r3, #16
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	4b9f      	ldr	r3, [pc, #636]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a9e      	ldr	r2, [pc, #632]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b9c      	ldr	r3, [pc, #624]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b98      	ldr	r3, [pc, #608]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a97      	ldr	r2, [pc, #604]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b95      	ldr	r3, [pc, #596]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b91      	ldr	r3, [pc, #580]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a90      	ldr	r2, [pc, #576]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b8e      	ldr	r3, [pc, #568]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b8a      	ldr	r3, [pc, #552]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a89      	ldr	r2, [pc, #548]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b87      	ldr	r3, [pc, #540]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b83      	ldr	r3, [pc, #524]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a82      	ldr	r2, [pc, #520]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b80      	ldr	r3, [pc, #512]	@ (8000a38 <MX_GPIO_Init+0x2b4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2108      	movs	r1, #8
 8000846:	487d      	ldr	r0, [pc, #500]	@ (8000a3c <MX_GPIO_Init+0x2b8>)
 8000848:	f000 fe02 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2101      	movs	r1, #1
 8000850:	487b      	ldr	r0, [pc, #492]	@ (8000a40 <MX_GPIO_Init+0x2bc>)
 8000852:	f000 fdfd 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000856:	2200      	movs	r2, #0
 8000858:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800085c:	4879      	ldr	r0, [pc, #484]	@ (8000a44 <MX_GPIO_Init+0x2c0>)
 800085e:	f000 fdf7 	bl	8001450 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000862:	2308      	movs	r3, #8
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4870      	ldr	r0, [pc, #448]	@ (8000a3c <MX_GPIO_Init+0x2b8>)
 800087a:	f000 fc4d 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800087e:	2301      	movs	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	486a      	ldr	r0, [pc, #424]	@ (8000a40 <MX_GPIO_Init+0x2bc>)
 8000896:	f000 fc3f 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800089a:	2308      	movs	r3, #8
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008aa:	2305      	movs	r3, #5
 80008ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4862      	ldr	r0, [pc, #392]	@ (8000a40 <MX_GPIO_Init+0x2bc>)
 80008b6:	f000 fc2f 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	485e      	ldr	r0, [pc, #376]	@ (8000a48 <MX_GPIO_Init+0x2c4>)
 80008d0:	f000 fc22 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008d4:	2310      	movs	r3, #16
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e4:	2306      	movs	r3, #6
 80008e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4856      	ldr	r0, [pc, #344]	@ (8000a48 <MX_GPIO_Init+0x2c4>)
 80008f0:	f000 fc12 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008f4:	23e0      	movs	r3, #224	@ 0xe0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000904:	2305      	movs	r3, #5
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	484e      	ldr	r0, [pc, #312]	@ (8000a48 <MX_GPIO_Init+0x2c4>)
 8000910:	f000 fc02 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000914:	2304      	movs	r3, #4
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4849      	ldr	r0, [pc, #292]	@ (8000a4c <MX_GPIO_Init+0x2c8>)
 8000928:	f000 fbf6 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800092c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093e:	2305      	movs	r3, #5
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4840      	ldr	r0, [pc, #256]	@ (8000a4c <MX_GPIO_Init+0x2c8>)
 800094a:	f000 fbe5 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800094e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000952:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4837      	ldr	r0, [pc, #220]	@ (8000a44 <MX_GPIO_Init+0x2c0>)
 8000968:	f000 fbd6 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800096c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800097e:	2306      	movs	r3, #6
 8000980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	482d      	ldr	r0, [pc, #180]	@ (8000a40 <MX_GPIO_Init+0x2bc>)
 800098a:	f000 fbc5 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800098e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4829      	ldr	r0, [pc, #164]	@ (8000a48 <MX_GPIO_Init+0x2c4>)
 80009a4:	f000 fbb8 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009a8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ba:	230a      	movs	r3, #10
 80009bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4820      	ldr	r0, [pc, #128]	@ (8000a48 <MX_GPIO_Init+0x2c4>)
 80009c6:	f000 fba7 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ca:	2320      	movs	r3, #32
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4819      	ldr	r0, [pc, #100]	@ (8000a44 <MX_GPIO_Init+0x2c0>)
 80009de:	f000 fb9b 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009e2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e8:	2312      	movs	r3, #18
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f4:	2304      	movs	r3, #4
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4813      	ldr	r0, [pc, #76]	@ (8000a4c <MX_GPIO_Init+0x2c8>)
 8000a00:	f000 fb8a 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a08:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4808      	ldr	r0, [pc, #32]	@ (8000a3c <MX_GPIO_Init+0x2b8>)
 8000a1a:	f000 fb7d 	bl	8001118 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2106      	movs	r1, #6
 8000a22:	2006      	movs	r0, #6
 8000a24:	f000 fb4e 	bl	80010c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a28:	2006      	movs	r0, #6
 8000a2a:	f000 fb67 	bl	80010fc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2e:	bf00      	nop
 8000a30:	3730      	adds	r7, #48	@ 0x30
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40020800 	.word	0x40020800
 8000a44:	40020c00 	.word	0x40020c00
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020400 	.word	0x40020400

08000a50 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */

void button_interrupt_handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]

	traceISR_ENTER();
 8000a5a:	f007 f8a7 	bl	8007bac <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle,0,eNoAction,&pxHigherPriorityTaskWoken);
 8000a5e:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <button_interrupt_handler+0x50>)
 8000a60:	6818      	ldr	r0, [r3, #0]
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	2300      	movs	r3, #0
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f003 fd24 	bl	80044bc <xTaskGenericNotifyFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d00a      	beq.n	8000a90 <button_interrupt_handler+0x40>
 8000a7a:	f007 f8f5 	bl	8007c68 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <button_interrupt_handler+0x54>)
 8000a80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	f3bf 8f4f 	dsb	sy
 8000a8a:	f3bf 8f6f 	isb	sy
 8000a8e:	e001      	b.n	8000a94 <button_interrupt_handler+0x44>
 8000a90:	f007 f8ce 	bl	8007c30 <SEGGER_SYSVIEW_RecordExitISR>

	traceISR_EXIT();
 8000a94:	f007 f8cc 	bl	8007c30 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000008c 	.word	0x2000008c
 8000aa4:	e000ed04 	.word	0xe000ed04

08000aa8 <led_green_handler>:



static void led_green_handler(void* parameters)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 8000ab0:	4814      	ldr	r0, [pc, #80]	@ (8000b04 <led_green_handler+0x5c>)
 8000ab2:	f007 fb23 	bl	80080fc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000ab6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aba:	4813      	ldr	r0, [pc, #76]	@ (8000b08 <led_green_handler+0x60>)
 8000abc:	f000 fce1 	bl	8001482 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000ac0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2100      	movs	r1, #0
 8000acc:	2000      	movs	r0, #0
 8000ace:	f003 fc6b 	bl	80043a8 <xTaskGenericNotifyWait>
 8000ad2:	60f8      	str	r0, [r7, #12]


		if(status == pdTRUE)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d1ea      	bne.n	8000ab0 <led_green_handler+0x8>
		{

			portENTER_CRITICAL();
 8000ada:	f004 facf 	bl	800507c <vPortEnterCritical>
			next_task_handle = ledo_task_handle;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <led_green_handler+0x64>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b10 <led_green_handler+0x68>)
 8000ae4:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN,GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aec:	4806      	ldr	r0, [pc, #24]	@ (8000b08 <led_green_handler+0x60>)
 8000aee:	f000 fcaf 	bl	8001450 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green task");
 8000af2:	4808      	ldr	r0, [pc, #32]	@ (8000b14 <led_green_handler+0x6c>)
 8000af4:	f007 fb02 	bl	80080fc <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000af8:	f004 faf2 	bl	80050e0 <vPortExitCritical>
			vTaskDelete(NULL);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f002 feb3 	bl	8003868 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 8000b02:	e7d5      	b.n	8000ab0 <led_green_handler+0x8>
 8000b04:	08008314 	.word	0x08008314
 8000b08:	40020c00 	.word	0x40020c00
 8000b0c:	20000084 	.word	0x20000084
 8000b10:	2000008c 	.word	0x2000008c
 8000b14:	08008328 	.word	0x08008328

08000b18 <led_orange_handler>:
	}

}

static void led_orange_handler(void* parameters)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led");
 8000b20:	4814      	ldr	r0, [pc, #80]	@ (8000b74 <led_orange_handler+0x5c>)
 8000b22:	f007 faeb 	bl	80080fc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000b26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b2a:	4813      	ldr	r0, [pc, #76]	@ (8000b78 <led_orange_handler+0x60>)
 8000b2c:	f000 fca9 	bl	8001482 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000b30:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	2300      	movs	r3, #0
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f003 fc33 	bl	80043a8 <xTaskGenericNotifyWait>
 8000b42:	60f8      	str	r0, [r7, #12]


		if(status == pdTRUE)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d1ea      	bne.n	8000b20 <led_orange_handler+0x8>
		{
					portENTER_CRITICAL();
 8000b4a:	f004 fa97 	bl	800507c <vPortEnterCritical>
					next_task_handle = ledr_task_handle;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <led_orange_handler+0x64>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a0b      	ldr	r2, [pc, #44]	@ (8000b80 <led_orange_handler+0x68>)
 8000b54:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN,GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b5c:	4806      	ldr	r0, [pc, #24]	@ (8000b78 <led_orange_handler+0x60>)
 8000b5e:	f000 fc77 	bl	8001450 <HAL_GPIO_WritePin>
					SEGGER_SYSVIEW_PrintfTarget("Delete orange task");
 8000b62:	4808      	ldr	r0, [pc, #32]	@ (8000b84 <led_orange_handler+0x6c>)
 8000b64:	f007 faca 	bl	80080fc <SEGGER_SYSVIEW_PrintfTarget>
					portEXIT_CRITICAL();
 8000b68:	f004 faba 	bl	80050e0 <vPortExitCritical>
					vTaskDelete(NULL);
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f002 fe7b 	bl	8003868 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led");
 8000b72:	e7d5      	b.n	8000b20 <led_orange_handler+0x8>
 8000b74:	0800833c 	.word	0x0800833c
 8000b78:	40020c00 	.word	0x40020c00
 8000b7c:	20000088 	.word	0x20000088
 8000b80:	2000008c 	.word	0x2000008c
 8000b84:	08008350 	.word	0x08008350

08000b88 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af02      	add	r7, sp, #8
 8000b8e:	6078      	str	r0, [r7, #4]


	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
 8000b90:	4814      	ldr	r0, [pc, #80]	@ (8000be4 <led_red_handler+0x5c>)
 8000b92:	f007 fab3 	bl	80080fc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b96:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b9a:	4813      	ldr	r0, [pc, #76]	@ (8000be8 <led_red_handler+0x60>)
 8000b9c:	f000 fc71 	bl	8001482 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000ba0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2100      	movs	r1, #0
 8000bac:	2000      	movs	r0, #0
 8000bae:	f003 fbfb 	bl	80043a8 <xTaskGenericNotifyWait>
 8000bb2:	60f8      	str	r0, [r7, #12]


		if(status == pdTRUE)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d1ea      	bne.n	8000b90 <led_red_handler+0x8>
			{
			    portENTER_CRITICAL();
 8000bba:	f004 fa5f 	bl	800507c <vPortEnterCritical>
				next_task_handle = NULL;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <led_red_handler+0x64>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD, LED_RED_PIN,GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bca:	4807      	ldr	r0, [pc, #28]	@ (8000be8 <led_red_handler+0x60>)
 8000bcc:	f000 fc40 	bl	8001450 <HAL_GPIO_WritePin>
				SEGGER_SYSVIEW_PrintfTarget("Delete red task");
 8000bd0:	4807      	ldr	r0, [pc, #28]	@ (8000bf0 <led_red_handler+0x68>)
 8000bd2:	f007 fa93 	bl	80080fc <SEGGER_SYSVIEW_PrintfTarget>
				portEXIT_CRITICAL();
 8000bd6:	f004 fa83 	bl	80050e0 <vPortExitCritical>
				vTaskDelete(NULL);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f002 fe44 	bl	8003868 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
 8000be0:	e7d6      	b.n	8000b90 <led_red_handler+0x8>
 8000be2:	bf00      	nop
 8000be4:	08008364 	.word	0x08008364
 8000be8:	40020c00 	.word	0x40020c00
 8000bec:	2000008c 	.word	0x2000008c
 8000bf0:	08008378 	.word	0x08008378

08000bf4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d101      	bne.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c06:	f000 f985 	bl	8000f14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40001000 	.word	0x40001000

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <Error_Handler+0x8>

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	4a0f      	ldr	r2, [pc, #60]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	4a08      	ldr	r2, [pc, #32]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a19      	ldr	r2, [pc, #100]	@ (8000cf8 <HAL_UART_MspInit+0x84>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d12b      	bne.n	8000cee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <HAL_UART_MspInit+0x88>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	4a17      	ldr	r2, [pc, #92]	@ (8000cfc <HAL_UART_MspInit+0x88>)
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <HAL_UART_MspInit+0x88>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <HAL_UART_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a10      	ldr	r2, [pc, #64]	@ (8000cfc <HAL_UART_MspInit+0x88>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <HAL_UART_MspInit+0x88>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cce:	230c      	movs	r3, #12
 8000cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cde:	2307      	movs	r3, #7
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <HAL_UART_MspInit+0x8c>)
 8000cea:	f000 fa15 	bl	8001118 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	@ 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40004400 	.word	0x40004400
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020000 	.word	0x40020000

08000d04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08e      	sub	sp, #56	@ 0x38
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	4b33      	ldr	r3, [pc, #204]	@ (8000de8 <HAL_InitTick+0xe4>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1c:	4a32      	ldr	r2, [pc, #200]	@ (8000de8 <HAL_InitTick+0xe4>)
 8000d1e:	f043 0310 	orr.w	r3, r3, #16
 8000d22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d24:	4b30      	ldr	r3, [pc, #192]	@ (8000de8 <HAL_InitTick+0xe4>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d30:	f107 0210 	add.w	r2, r7, #16
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 f878 	bl	8001e30 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d40:	6a3b      	ldr	r3, [r7, #32]
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d103      	bne.n	8000d52 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d4a:	f001 f849 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8000d4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d50:	e004      	b.n	8000d5c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d52:	f001 f845 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8000d56:	4603      	mov	r3, r0
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d5e:	4a23      	ldr	r2, [pc, #140]	@ (8000dec <HAL_InitTick+0xe8>)
 8000d60:	fba2 2303 	umull	r2, r3, r2, r3
 8000d64:	0c9b      	lsrs	r3, r3, #18
 8000d66:	3b01      	subs	r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	@ (8000df0 <HAL_InitTick+0xec>)
 8000d6c:	4a21      	ldr	r2, [pc, #132]	@ (8000df4 <HAL_InitTick+0xf0>)
 8000d6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d70:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <HAL_InitTick+0xec>)
 8000d72:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d76:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d78:	4a1d      	ldr	r2, [pc, #116]	@ (8000df0 <HAL_InitTick+0xec>)
 8000d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d7c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <HAL_InitTick+0xec>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <HAL_InitTick+0xec>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <HAL_InitTick+0xec>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d90:	4817      	ldr	r0, [pc, #92]	@ (8000df0 <HAL_InitTick+0xec>)
 8000d92:	f001 f87f 	bl	8001e94 <HAL_TIM_Base_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d11b      	bne.n	8000ddc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000da4:	4812      	ldr	r0, [pc, #72]	@ (8000df0 <HAL_InitTick+0xec>)
 8000da6:	f001 f8cf 	bl	8001f48 <HAL_TIM_Base_Start_IT>
 8000daa:	4603      	mov	r3, r0
 8000dac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000db0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d111      	bne.n	8000ddc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000db8:	2036      	movs	r0, #54	@ 0x36
 8000dba:	f000 f99f 	bl	80010fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d808      	bhi.n	8000dd6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	2036      	movs	r0, #54	@ 0x36
 8000dca:	f000 f97b 	bl	80010c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <HAL_InitTick+0xf4>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	e002      	b.n	8000ddc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3738      	adds	r7, #56	@ 0x38
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	431bde83 	.word	0x431bde83
 8000df0:	20000090 	.word	0x20000090
 8000df4:	40001000 	.word	0x40001000
 8000df8:	20000004 	.word	0x20000004

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <NMI_Handler+0x4>

08000e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <MemManage_Handler+0x4>

08000e14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000e36:	f7ff fe0b 	bl	8000a50 <button_interrupt_handler>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f000 fb3c 	bl	80014b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <TIM6_DAC_IRQHandler+0x10>)
 8000e4a:	f001 f8ed 	bl	8002028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000090 	.word	0x20000090

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <SystemInit+0x20>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e62:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <SystemInit+0x20>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e80:	f7ff ffea 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e84:	480c      	ldr	r0, [pc, #48]	@ (8000eb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e86:	490d      	ldr	r1, [pc, #52]	@ (8000ebc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ec8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f007 f9dd 	bl	8008268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eae:	f7ff fb51 	bl	8000554 <main>
  bx  lr    
 8000eb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ebc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ec0:	080084b8 	.word	0x080084b8
  ldr r2, =_sbss
 8000ec4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000ec8:	20014504 	.word	0x20014504

08000ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC_IRQHandler>
	...

08000ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f10 <HAL_Init+0x40>)
 8000eda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <HAL_Init+0x40>)
 8000ee6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	@ (8000f10 <HAL_Init+0x40>)
 8000ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 f8d8 	bl	80010ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efe:	200f      	movs	r0, #15
 8000f00:	f7ff ff00 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f04:	f7ff fe8e 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023c00 	.word	0x40023c00

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008
 8000f38:	200000d8 	.word	0x200000d8

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	@ (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200000d8 	.word	0x200000d8

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	@ (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db0b      	blt.n	8000fe2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 021f 	and.w	r2, r3, #31
 8000fd0:	4907      	ldr	r1, [pc, #28]	@ (8000ff0 <__NVIC_EnableIRQ+0x38>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	2001      	movs	r0, #1
 8000fda:	fa00 f202 	lsl.w	r2, r0, r2
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	@ (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	@ (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	@ 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	@ 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ff4c 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d6:	f7ff ff61 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 80010da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	6978      	ldr	r0, [r7, #20]
 80010e2:	f7ff ffb1 	bl	8001048 <NVIC_EncodePriority>
 80010e6:	4602      	mov	r2, r0
 80010e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff80 	bl	8000ff4 <__NVIC_SetPriority>
}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff54 	bl	8000fb8 <__NVIC_EnableIRQ>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	@ 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	e16b      	b.n	800140c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	429a      	cmp	r2, r3
 800114e:	f040 815a 	bne.w	8001406 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d005      	beq.n	800116a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001166:	2b02      	cmp	r3, #2
 8001168:	d130      	bne.n	80011cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 0201 	and.w	r2, r3, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d017      	beq.n	8001208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d123      	bne.n	800125c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	69b9      	ldr	r1, [r7, #24]
 8001258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0203 	and.w	r2, r3, #3
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80b4 	beq.w	8001406 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b60      	ldr	r3, [pc, #384]	@ (8001424 <HAL_GPIO_Init+0x30c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001424 <HAL_GPIO_Init+0x30c>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001424 <HAL_GPIO_Init+0x30c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001428 <HAL_GPIO_Init+0x310>)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a52      	ldr	r2, [pc, #328]	@ (800142c <HAL_GPIO_Init+0x314>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d02b      	beq.n	800133e <HAL_GPIO_Init+0x226>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a51      	ldr	r2, [pc, #324]	@ (8001430 <HAL_GPIO_Init+0x318>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d025      	beq.n	800133a <HAL_GPIO_Init+0x222>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a50      	ldr	r2, [pc, #320]	@ (8001434 <HAL_GPIO_Init+0x31c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d01f      	beq.n	8001336 <HAL_GPIO_Init+0x21e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001438 <HAL_GPIO_Init+0x320>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d019      	beq.n	8001332 <HAL_GPIO_Init+0x21a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4e      	ldr	r2, [pc, #312]	@ (800143c <HAL_GPIO_Init+0x324>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0x216>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4d      	ldr	r2, [pc, #308]	@ (8001440 <HAL_GPIO_Init+0x328>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d00d      	beq.n	800132a <HAL_GPIO_Init+0x212>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4c      	ldr	r2, [pc, #304]	@ (8001444 <HAL_GPIO_Init+0x32c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d007      	beq.n	8001326 <HAL_GPIO_Init+0x20e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4b      	ldr	r2, [pc, #300]	@ (8001448 <HAL_GPIO_Init+0x330>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_GPIO_Init+0x20a>
 800131e:	2307      	movs	r3, #7
 8001320:	e00e      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001322:	2308      	movs	r3, #8
 8001324:	e00c      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001326:	2306      	movs	r3, #6
 8001328:	e00a      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800132a:	2305      	movs	r3, #5
 800132c:	e008      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800132e:	2304      	movs	r3, #4
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001332:	2303      	movs	r3, #3
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800133e:	2300      	movs	r3, #0
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001350:	4935      	ldr	r1, [pc, #212]	@ (8001428 <HAL_GPIO_Init+0x310>)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135e:	4b3b      	ldr	r3, [pc, #236]	@ (800144c <HAL_GPIO_Init+0x334>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001382:	4a32      	ldr	r2, [pc, #200]	@ (800144c <HAL_GPIO_Init+0x334>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001388:	4b30      	ldr	r3, [pc, #192]	@ (800144c <HAL_GPIO_Init+0x334>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ac:	4a27      	ldr	r2, [pc, #156]	@ (800144c <HAL_GPIO_Init+0x334>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b2:	4b26      	ldr	r3, [pc, #152]	@ (800144c <HAL_GPIO_Init+0x334>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d6:	4a1d      	ldr	r2, [pc, #116]	@ (800144c <HAL_GPIO_Init+0x334>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <HAL_GPIO_Init+0x334>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001400:	4a12      	ldr	r2, [pc, #72]	@ (800144c <HAL_GPIO_Init+0x334>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	f67f ae90 	bls.w	8001134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3724      	adds	r7, #36	@ 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40013800 	.word	0x40013800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020800 	.word	0x40020800
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40021000 	.word	0x40021000
 8001440:	40021400 	.word	0x40021400
 8001444:	40021800 	.word	0x40021800
 8001448:	40021c00 	.word	0x40021c00
 800144c:	40013c00 	.word	0x40013c00

08001450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
 800145c:	4613      	mov	r3, r2
 800145e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001460:	787b      	ldrb	r3, [r7, #1]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800146c:	e003      	b.n	8001476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	041a      	lsls	r2, r3, #16
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	619a      	str	r2, [r3, #24]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001482:	b480      	push	{r7}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001494:	887a      	ldrh	r2, [r7, #2]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4013      	ands	r3, r2
 800149a:	041a      	lsls	r2, r3, #16
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43d9      	mvns	r1, r3
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	400b      	ands	r3, r1
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	619a      	str	r2, [r3, #24]
}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014c2:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	4013      	ands	r3, r2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d006      	beq.n	80014dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ce:	4a05      	ldr	r2, [pc, #20]	@ (80014e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f806 	bl	80014e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40013c00 	.word	0x40013c00

080014e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e267      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d075      	beq.n	800160a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800151e:	4b88      	ldr	r3, [pc, #544]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b04      	cmp	r3, #4
 8001528:	d00c      	beq.n	8001544 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800152a:	4b85      	ldr	r3, [pc, #532]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001532:	2b08      	cmp	r3, #8
 8001534:	d112      	bne.n	800155c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001536:	4b82      	ldr	r3, [pc, #520]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800153e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001542:	d10b      	bne.n	800155c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	4b7e      	ldr	r3, [pc, #504]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d05b      	beq.n	8001608 <HAL_RCC_OscConfig+0x108>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d157      	bne.n	8001608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e242      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001564:	d106      	bne.n	8001574 <HAL_RCC_OscConfig+0x74>
 8001566:	4b76      	ldr	r3, [pc, #472]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a75      	ldr	r2, [pc, #468]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800156c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e01d      	b.n	80015b0 <HAL_RCC_OscConfig+0xb0>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0x98>
 800157e:	4b70      	ldr	r3, [pc, #448]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a6f      	ldr	r2, [pc, #444]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001584:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b6d      	ldr	r3, [pc, #436]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a6c      	ldr	r2, [pc, #432]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e00b      	b.n	80015b0 <HAL_RCC_OscConfig+0xb0>
 8001598:	4b69      	ldr	r3, [pc, #420]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a68      	ldr	r2, [pc, #416]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800159e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b66      	ldr	r3, [pc, #408]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a65      	ldr	r2, [pc, #404]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80015aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d013      	beq.n	80015e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fcc0 	bl	8000f3c <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fcbc 	bl	8000f3c <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	@ 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e207      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0xc0>
 80015de:	e014      	b.n	800160a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fcac 	bl	8000f3c <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fca8 	bl	8000f3c <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	@ 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e1f3      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	4b51      	ldr	r3, [pc, #324]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0xe8>
 8001606:	e000      	b.n	800160a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d063      	beq.n	80016de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001616:	4b4a      	ldr	r3, [pc, #296]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00b      	beq.n	800163a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001622:	4b47      	ldr	r3, [pc, #284]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800162a:	2b08      	cmp	r3, #8
 800162c:	d11c      	bne.n	8001668 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162e:	4b44      	ldr	r3, [pc, #272]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d116      	bne.n	8001668 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163a:	4b41      	ldr	r3, [pc, #260]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d005      	beq.n	8001652 <HAL_RCC_OscConfig+0x152>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e1c7      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001652:	4b3b      	ldr	r3, [pc, #236]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4937      	ldr	r1, [pc, #220]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001666:	e03a      	b.n	80016de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001670:	4b34      	ldr	r3, [pc, #208]	@ (8001744 <HAL_RCC_OscConfig+0x244>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001676:	f7ff fc61 	bl	8000f3c <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167e:	f7ff fc5d 	bl	8000f3c <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e1a8      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001690:	4b2b      	ldr	r3, [pc, #172]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169c:	4b28      	ldr	r3, [pc, #160]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4925      	ldr	r1, [pc, #148]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
 80016b0:	e015      	b.n	80016de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b2:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <HAL_RCC_OscConfig+0x244>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fc40 	bl	8000f3c <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c0:	f7ff fc3c 	bl	8000f3c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e187      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d036      	beq.n	8001758 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d016      	beq.n	8001720 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f2:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <HAL_RCC_OscConfig+0x248>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f8:	f7ff fc20 	bl	8000f3c <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001700:	f7ff fc1c 	bl	8000f3c <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e167      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x200>
 800171e:	e01b      	b.n	8001758 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001720:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <HAL_RCC_OscConfig+0x248>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001726:	f7ff fc09 	bl	8000f3c <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172c:	e00e      	b.n	800174c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172e:	f7ff fc05 	bl	8000f3c <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d907      	bls.n	800174c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e150      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
 8001740:	40023800 	.word	0x40023800
 8001744:	42470000 	.word	0x42470000
 8001748:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174c:	4b88      	ldr	r3, [pc, #544]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1ea      	bne.n	800172e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 8097 	beq.w	8001894 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176a:	4b81      	ldr	r3, [pc, #516]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10f      	bne.n	8001796 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	4b7d      	ldr	r3, [pc, #500]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	4a7c      	ldr	r2, [pc, #496]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001784:	6413      	str	r3, [r2, #64]	@ 0x40
 8001786:	4b7a      	ldr	r3, [pc, #488]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001792:	2301      	movs	r3, #1
 8001794:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001796:	4b77      	ldr	r3, [pc, #476]	@ (8001974 <HAL_RCC_OscConfig+0x474>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d118      	bne.n	80017d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a2:	4b74      	ldr	r3, [pc, #464]	@ (8001974 <HAL_RCC_OscConfig+0x474>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a73      	ldr	r2, [pc, #460]	@ (8001974 <HAL_RCC_OscConfig+0x474>)
 80017a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ae:	f7ff fbc5 	bl	8000f3c <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b6:	f7ff fbc1 	bl	8000f3c <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e10c      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001974 <HAL_RCC_OscConfig+0x474>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d106      	bne.n	80017ea <HAL_RCC_OscConfig+0x2ea>
 80017dc:	4b64      	ldr	r3, [pc, #400]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80017de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e0:	4a63      	ldr	r2, [pc, #396]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e8:	e01c      	b.n	8001824 <HAL_RCC_OscConfig+0x324>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0x30c>
 80017f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f6:	4a5e      	ldr	r2, [pc, #376]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80017fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001802:	4a5b      	ldr	r2, [pc, #364]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6713      	str	r3, [r2, #112]	@ 0x70
 800180a:	e00b      	b.n	8001824 <HAL_RCC_OscConfig+0x324>
 800180c:	4b58      	ldr	r3, [pc, #352]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800180e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001810:	4a57      	ldr	r2, [pc, #348]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001812:	f023 0301 	bic.w	r3, r3, #1
 8001816:	6713      	str	r3, [r2, #112]	@ 0x70
 8001818:	4b55      	ldr	r3, [pc, #340]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181c:	4a54      	ldr	r2, [pc, #336]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800181e:	f023 0304 	bic.w	r3, r3, #4
 8001822:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d015      	beq.n	8001858 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182c:	f7ff fb86 	bl	8000f3c <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001832:	e00a      	b.n	800184a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001834:	f7ff fb82 	bl	8000f3c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e0cb      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184a:	4b49      	ldr	r3, [pc, #292]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0ee      	beq.n	8001834 <HAL_RCC_OscConfig+0x334>
 8001856:	e014      	b.n	8001882 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001858:	f7ff fb70 	bl	8000f3c <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185e:	e00a      	b.n	8001876 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001860:	f7ff fb6c 	bl	8000f3c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e0b5      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001876:	4b3e      	ldr	r3, [pc, #248]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1ee      	bne.n	8001860 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001882:	7dfb      	ldrb	r3, [r7, #23]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d105      	bne.n	8001894 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001888:	4b39      	ldr	r3, [pc, #228]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	4a38      	ldr	r2, [pc, #224]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800188e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001892:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80a1 	beq.w	80019e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800189e:	4b34      	ldr	r3, [pc, #208]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d05c      	beq.n	8001964 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d141      	bne.n	8001936 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b2:	4b31      	ldr	r3, [pc, #196]	@ (8001978 <HAL_RCC_OscConfig+0x478>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fb40 	bl	8000f3c <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff fb3c 	bl	8000f3c <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e087      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d2:	4b27      	ldr	r3, [pc, #156]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69da      	ldr	r2, [r3, #28]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	019b      	lsls	r3, r3, #6
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f4:	085b      	lsrs	r3, r3, #1
 80018f6:	3b01      	subs	r3, #1
 80018f8:	041b      	lsls	r3, r3, #16
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001900:	061b      	lsls	r3, r3, #24
 8001902:	491b      	ldr	r1, [pc, #108]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001908:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <HAL_RCC_OscConfig+0x478>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff fb15 	bl	8000f3c <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff fb11 	bl	8000f3c <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e05c      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x416>
 8001934:	e054      	b.n	80019e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <HAL_RCC_OscConfig+0x478>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fafe 	bl	8000f3c <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fafa 	bl	8000f3c <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e045      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x444>
 8001962:	e03d      	b.n	80019e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d107      	bne.n	800197c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e038      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
 8001970:	40023800 	.word	0x40023800
 8001974:	40007000 	.word	0x40007000
 8001978:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800197c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <HAL_RCC_OscConfig+0x4ec>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d028      	beq.n	80019dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d121      	bne.n	80019dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d11a      	bne.n	80019dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019ac:	4013      	ands	r3, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d111      	bne.n	80019dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c2:	085b      	lsrs	r3, r3, #1
 80019c4:	3b01      	subs	r3, #1
 80019c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d107      	bne.n	80019dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800

080019f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0cc      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a04:	4b68      	ldr	r3, [pc, #416]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d90c      	bls.n	8001a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b65      	ldr	r3, [pc, #404]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b63      	ldr	r3, [pc, #396]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0b8      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d020      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a44:	4b59      	ldr	r3, [pc, #356]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4a58      	ldr	r2, [pc, #352]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a5c:	4b53      	ldr	r3, [pc, #332]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4a52      	ldr	r2, [pc, #328]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a68:	4b50      	ldr	r3, [pc, #320]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	494d      	ldr	r1, [pc, #308]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d044      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	4b47      	ldr	r3, [pc, #284]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d119      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e07f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d003      	beq.n	8001aae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aae:	4b3f      	ldr	r3, [pc, #252]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e06f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001abe:	4b3b      	ldr	r3, [pc, #236]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e067      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ace:	4b37      	ldr	r3, [pc, #220]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f023 0203 	bic.w	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4934      	ldr	r1, [pc, #208]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae0:	f7ff fa2c 	bl	8000f3c <HAL_GetTick>
 8001ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae8:	f7ff fa28 	bl	8000f3c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e04f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	4b2b      	ldr	r3, [pc, #172]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 020c 	and.w	r2, r3, #12
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d1eb      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b10:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d20c      	bcs.n	8001b38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b20      	ldr	r3, [pc, #128]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e032      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b44:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4916      	ldr	r1, [pc, #88]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d009      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b62:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	490e      	ldr	r1, [pc, #56]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b76:	f000 f821 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	490a      	ldr	r1, [pc, #40]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	5ccb      	ldrb	r3, [r1, r3]
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	4a09      	ldr	r2, [pc, #36]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b92:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff f8b4 	bl	8000d04 <HAL_InitTick>

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023c00 	.word	0x40023c00
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	08008468 	.word	0x08008468
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bc0:	b094      	sub	sp, #80	@ 0x50
 8001bc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bd4:	4b79      	ldr	r3, [pc, #484]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d00d      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x40>
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	f200 80e1 	bhi.w	8001da8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d003      	beq.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bee:	e0db      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf0:	4b73      	ldr	r3, [pc, #460]	@ (8001dc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bf4:	e0db      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bf6:	4b73      	ldr	r3, [pc, #460]	@ (8001dc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bfa:	e0d8      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bfc:	4b6f      	ldr	r3, [pc, #444]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c06:	4b6d      	ldr	r3, [pc, #436]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d063      	beq.n	8001cda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c12:	4b6a      	ldr	r3, [pc, #424]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	099b      	lsrs	r3, r3, #6
 8001c18:	2200      	movs	r2, #0
 8001c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c24:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c26:	2300      	movs	r3, #0
 8001c28:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c2e:	4622      	mov	r2, r4
 8001c30:	462b      	mov	r3, r5
 8001c32:	f04f 0000 	mov.w	r0, #0
 8001c36:	f04f 0100 	mov.w	r1, #0
 8001c3a:	0159      	lsls	r1, r3, #5
 8001c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c40:	0150      	lsls	r0, r2, #5
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4621      	mov	r1, r4
 8001c48:	1a51      	subs	r1, r2, r1
 8001c4a:	6139      	str	r1, [r7, #16]
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c60:	4659      	mov	r1, fp
 8001c62:	018b      	lsls	r3, r1, #6
 8001c64:	4651      	mov	r1, sl
 8001c66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c6a:	4651      	mov	r1, sl
 8001c6c:	018a      	lsls	r2, r1, #6
 8001c6e:	4651      	mov	r1, sl
 8001c70:	ebb2 0801 	subs.w	r8, r2, r1
 8001c74:	4659      	mov	r1, fp
 8001c76:	eb63 0901 	sbc.w	r9, r3, r1
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c8e:	4690      	mov	r8, r2
 8001c90:	4699      	mov	r9, r3
 8001c92:	4623      	mov	r3, r4
 8001c94:	eb18 0303 	adds.w	r3, r8, r3
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	462b      	mov	r3, r5
 8001c9c:	eb49 0303 	adc.w	r3, r9, r3
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cae:	4629      	mov	r1, r5
 8001cb0:	024b      	lsls	r3, r1, #9
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cb8:	4621      	mov	r1, r4
 8001cba:	024a      	lsls	r2, r1, #9
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ccc:	f7fe faca 	bl	8000264 <__aeabi_uldivmod>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cd8:	e058      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cda:	4b38      	ldr	r3, [pc, #224]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	099b      	lsrs	r3, r3, #6
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cea:	623b      	str	r3, [r7, #32]
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cf4:	4642      	mov	r2, r8
 8001cf6:	464b      	mov	r3, r9
 8001cf8:	f04f 0000 	mov.w	r0, #0
 8001cfc:	f04f 0100 	mov.w	r1, #0
 8001d00:	0159      	lsls	r1, r3, #5
 8001d02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d06:	0150      	lsls	r0, r2, #5
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4641      	mov	r1, r8
 8001d0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d12:	4649      	mov	r1, r9
 8001d14:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d2c:	ebb2 040a 	subs.w	r4, r2, sl
 8001d30:	eb63 050b 	sbc.w	r5, r3, fp
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	00eb      	lsls	r3, r5, #3
 8001d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d42:	00e2      	lsls	r2, r4, #3
 8001d44:	4614      	mov	r4, r2
 8001d46:	461d      	mov	r5, r3
 8001d48:	4643      	mov	r3, r8
 8001d4a:	18e3      	adds	r3, r4, r3
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	464b      	mov	r3, r9
 8001d50:	eb45 0303 	adc.w	r3, r5, r3
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d62:	4629      	mov	r1, r5
 8001d64:	028b      	lsls	r3, r1, #10
 8001d66:	4621      	mov	r1, r4
 8001d68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	028a      	lsls	r2, r1, #10
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d76:	2200      	movs	r2, #0
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	61fa      	str	r2, [r7, #28]
 8001d7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d80:	f7fe fa70 	bl	8000264 <__aeabi_uldivmod>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4613      	mov	r3, r2
 8001d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	0c1b      	lsrs	r3, r3, #16
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	3301      	adds	r3, #1
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001da6:	e002      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001da8:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001daa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3750      	adds	r7, #80	@ 0x50
 8001db4:	46bd      	mov	sp, r7
 8001db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	00f42400 	.word	0x00f42400
 8001dc4:	007a1200 	.word	0x007a1200

08001dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	@ (8001ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000000 	.word	0x20000000

08001de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001de4:	f7ff fff0 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	0a9b      	lsrs	r3, r3, #10
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	4903      	ldr	r1, [pc, #12]	@ (8001e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800
 8001e04:	08008478 	.word	0x08008478

08001e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e0c:	f7ff ffdc 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b05      	ldr	r3, [pc, #20]	@ (8001e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	0b5b      	lsrs	r3, r3, #13
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	4903      	ldr	r1, [pc, #12]	@ (8001e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	08008478 	.word	0x08008478

08001e30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	220f      	movs	r2, #15
 8001e3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e40:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <HAL_RCC_GetClockConfig+0x5c>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0203 	and.w	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <HAL_RCC_GetClockConfig+0x5c>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e58:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <HAL_RCC_GetClockConfig+0x5c>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <HAL_RCC_GetClockConfig+0x5c>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	08db      	lsrs	r3, r3, #3
 8001e6a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e72:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <HAL_RCC_GetClockConfig+0x60>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0207 	and.w	r2, r3, #7
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	601a      	str	r2, [r3, #0]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40023c00 	.word	0x40023c00

08001e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e041      	b.n	8001f2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f839 	bl	8001f32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3304      	adds	r3, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	f000 f9c0 	bl	8002258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d001      	beq.n	8001f60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e04e      	b.n	8001ffe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a23      	ldr	r2, [pc, #140]	@ (800200c <HAL_TIM_Base_Start_IT+0xc4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d022      	beq.n	8001fc8 <HAL_TIM_Base_Start_IT+0x80>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f8a:	d01d      	beq.n	8001fc8 <HAL_TIM_Base_Start_IT+0x80>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1f      	ldr	r2, [pc, #124]	@ (8002010 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d018      	beq.n	8001fc8 <HAL_TIM_Base_Start_IT+0x80>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002014 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d013      	beq.n	8001fc8 <HAL_TIM_Base_Start_IT+0x80>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8002018 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00e      	beq.n	8001fc8 <HAL_TIM_Base_Start_IT+0x80>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1b      	ldr	r2, [pc, #108]	@ (800201c <HAL_TIM_Base_Start_IT+0xd4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d009      	beq.n	8001fc8 <HAL_TIM_Base_Start_IT+0x80>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a19      	ldr	r2, [pc, #100]	@ (8002020 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d004      	beq.n	8001fc8 <HAL_TIM_Base_Start_IT+0x80>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a18      	ldr	r2, [pc, #96]	@ (8002024 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d111      	bne.n	8001fec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d010      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0201 	orr.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fea:	e007      	b.n	8001ffc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40010000 	.word	0x40010000
 8002010:	40000400 	.word	0x40000400
 8002014:	40000800 	.word	0x40000800
 8002018:	40000c00 	.word	0x40000c00
 800201c:	40010400 	.word	0x40010400
 8002020:	40014000 	.word	0x40014000
 8002024:	40001800 	.word	0x40001800

08002028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d020      	beq.n	800208c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d01b      	beq.n	800208c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0202 	mvn.w	r2, #2
 800205c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f8d2 	bl	800221c <HAL_TIM_IC_CaptureCallback>
 8002078:	e005      	b.n	8002086 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f8c4 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f8d5 	bl	8002230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b00      	cmp	r3, #0
 8002094:	d020      	beq.n	80020d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01b      	beq.n	80020d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0204 	mvn.w	r2, #4
 80020a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2202      	movs	r2, #2
 80020ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f8ac 	bl	800221c <HAL_TIM_IC_CaptureCallback>
 80020c4:	e005      	b.n	80020d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f89e 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f8af 	bl	8002230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d020      	beq.n	8002124 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01b      	beq.n	8002124 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0208 	mvn.w	r2, #8
 80020f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2204      	movs	r2, #4
 80020fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f886 	bl	800221c <HAL_TIM_IC_CaptureCallback>
 8002110:	e005      	b.n	800211e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f878 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f889 	bl	8002230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	2b00      	cmp	r3, #0
 800212c:	d020      	beq.n	8002170 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01b      	beq.n	8002170 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0210 	mvn.w	r2, #16
 8002140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2208      	movs	r2, #8
 8002146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f860 	bl	800221c <HAL_TIM_IC_CaptureCallback>
 800215c:	e005      	b.n	800216a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f852 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f863 	bl	8002230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00c      	beq.n	8002194 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d007      	beq.n	8002194 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0201 	mvn.w	r2, #1
 800218c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7fe fd30 	bl	8000bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00c      	beq.n	80021b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f906 	bl	80023c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00c      	beq.n	80021dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f834 	bl	8002244 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00c      	beq.n	8002200 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d007      	beq.n	8002200 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0220 	mvn.w	r2, #32
 80021f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f8d8 	bl	80023b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002200:	bf00      	nop
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a46      	ldr	r2, [pc, #280]	@ (8002384 <TIM_Base_SetConfig+0x12c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d013      	beq.n	8002298 <TIM_Base_SetConfig+0x40>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002276:	d00f      	beq.n	8002298 <TIM_Base_SetConfig+0x40>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a43      	ldr	r2, [pc, #268]	@ (8002388 <TIM_Base_SetConfig+0x130>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00b      	beq.n	8002298 <TIM_Base_SetConfig+0x40>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a42      	ldr	r2, [pc, #264]	@ (800238c <TIM_Base_SetConfig+0x134>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d007      	beq.n	8002298 <TIM_Base_SetConfig+0x40>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a41      	ldr	r2, [pc, #260]	@ (8002390 <TIM_Base_SetConfig+0x138>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d003      	beq.n	8002298 <TIM_Base_SetConfig+0x40>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a40      	ldr	r2, [pc, #256]	@ (8002394 <TIM_Base_SetConfig+0x13c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d108      	bne.n	80022aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800229e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a35      	ldr	r2, [pc, #212]	@ (8002384 <TIM_Base_SetConfig+0x12c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d02b      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b8:	d027      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a32      	ldr	r2, [pc, #200]	@ (8002388 <TIM_Base_SetConfig+0x130>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d023      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a31      	ldr	r2, [pc, #196]	@ (800238c <TIM_Base_SetConfig+0x134>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d01f      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a30      	ldr	r2, [pc, #192]	@ (8002390 <TIM_Base_SetConfig+0x138>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01b      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002394 <TIM_Base_SetConfig+0x13c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d017      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a2e      	ldr	r2, [pc, #184]	@ (8002398 <TIM_Base_SetConfig+0x140>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a2d      	ldr	r2, [pc, #180]	@ (800239c <TIM_Base_SetConfig+0x144>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00f      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a2c      	ldr	r2, [pc, #176]	@ (80023a0 <TIM_Base_SetConfig+0x148>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00b      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a2b      	ldr	r2, [pc, #172]	@ (80023a4 <TIM_Base_SetConfig+0x14c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a2a      	ldr	r2, [pc, #168]	@ (80023a8 <TIM_Base_SetConfig+0x150>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d003      	beq.n	800230a <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a29      	ldr	r2, [pc, #164]	@ (80023ac <TIM_Base_SetConfig+0x154>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d108      	bne.n	800231c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a10      	ldr	r2, [pc, #64]	@ (8002384 <TIM_Base_SetConfig+0x12c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d003      	beq.n	8002350 <TIM_Base_SetConfig+0xf8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a12      	ldr	r2, [pc, #72]	@ (8002394 <TIM_Base_SetConfig+0x13c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d103      	bne.n	8002358 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b01      	cmp	r3, #1
 8002368:	d105      	bne.n	8002376 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f023 0201 	bic.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	611a      	str	r2, [r3, #16]
  }
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40010000 	.word	0x40010000
 8002388:	40000400 	.word	0x40000400
 800238c:	40000800 	.word	0x40000800
 8002390:	40000c00 	.word	0x40000c00
 8002394:	40010400 	.word	0x40010400
 8002398:	40014000 	.word	0x40014000
 800239c:	40014400 	.word	0x40014400
 80023a0:	40014800 	.word	0x40014800
 80023a4:	40001800 	.word	0x40001800
 80023a8:	40001c00 	.word	0x40001c00
 80023ac:	40002000 	.word	0x40002000

080023b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e042      	b.n	8002470 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fe fc38 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2224      	movs	r2, #36	@ 0x24
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800241a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f82b 	bl	8002478 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800247c:	b0c0      	sub	sp, #256	@ 0x100
 800247e:	af00      	add	r7, sp, #0
 8002480:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002494:	68d9      	ldr	r1, [r3, #12]
 8002496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	ea40 0301 	orr.w	r3, r0, r1
 80024a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80024d0:	f021 010c 	bic.w	r1, r1, #12
 80024d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80024de:	430b      	orrs	r3, r1
 80024e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80024ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f2:	6999      	ldr	r1, [r3, #24]
 80024f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	ea40 0301 	orr.w	r3, r0, r1
 80024fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b8f      	ldr	r3, [pc, #572]	@ (8002744 <UART_SetConfig+0x2cc>)
 8002508:	429a      	cmp	r2, r3
 800250a:	d005      	beq.n	8002518 <UART_SetConfig+0xa0>
 800250c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b8d      	ldr	r3, [pc, #564]	@ (8002748 <UART_SetConfig+0x2d0>)
 8002514:	429a      	cmp	r2, r3
 8002516:	d104      	bne.n	8002522 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002518:	f7ff fc76 	bl	8001e08 <HAL_RCC_GetPCLK2Freq>
 800251c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002520:	e003      	b.n	800252a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002522:	f7ff fc5d 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002526:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800252a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002534:	f040 810c 	bne.w	8002750 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800253c:	2200      	movs	r2, #0
 800253e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002542:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002546:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800254a:	4622      	mov	r2, r4
 800254c:	462b      	mov	r3, r5
 800254e:	1891      	adds	r1, r2, r2
 8002550:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002552:	415b      	adcs	r3, r3
 8002554:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002556:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800255a:	4621      	mov	r1, r4
 800255c:	eb12 0801 	adds.w	r8, r2, r1
 8002560:	4629      	mov	r1, r5
 8002562:	eb43 0901 	adc.w	r9, r3, r1
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002572:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002576:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800257a:	4690      	mov	r8, r2
 800257c:	4699      	mov	r9, r3
 800257e:	4623      	mov	r3, r4
 8002580:	eb18 0303 	adds.w	r3, r8, r3
 8002584:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002588:	462b      	mov	r3, r5
 800258a:	eb49 0303 	adc.w	r3, r9, r3
 800258e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800259e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80025a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80025a6:	460b      	mov	r3, r1
 80025a8:	18db      	adds	r3, r3, r3
 80025aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80025ac:	4613      	mov	r3, r2
 80025ae:	eb42 0303 	adc.w	r3, r2, r3
 80025b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80025b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80025b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80025bc:	f7fd fe52 	bl	8000264 <__aeabi_uldivmod>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4b61      	ldr	r3, [pc, #388]	@ (800274c <UART_SetConfig+0x2d4>)
 80025c6:	fba3 2302 	umull	r2, r3, r3, r2
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	011c      	lsls	r4, r3, #4
 80025ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025d2:	2200      	movs	r2, #0
 80025d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80025dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80025e0:	4642      	mov	r2, r8
 80025e2:	464b      	mov	r3, r9
 80025e4:	1891      	adds	r1, r2, r2
 80025e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80025e8:	415b      	adcs	r3, r3
 80025ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025f0:	4641      	mov	r1, r8
 80025f2:	eb12 0a01 	adds.w	sl, r2, r1
 80025f6:	4649      	mov	r1, r9
 80025f8:	eb43 0b01 	adc.w	fp, r3, r1
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002608:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800260c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002610:	4692      	mov	sl, r2
 8002612:	469b      	mov	fp, r3
 8002614:	4643      	mov	r3, r8
 8002616:	eb1a 0303 	adds.w	r3, sl, r3
 800261a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800261e:	464b      	mov	r3, r9
 8002620:	eb4b 0303 	adc.w	r3, fp, r3
 8002624:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002634:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002638:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800263c:	460b      	mov	r3, r1
 800263e:	18db      	adds	r3, r3, r3
 8002640:	643b      	str	r3, [r7, #64]	@ 0x40
 8002642:	4613      	mov	r3, r2
 8002644:	eb42 0303 	adc.w	r3, r2, r3
 8002648:	647b      	str	r3, [r7, #68]	@ 0x44
 800264a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800264e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002652:	f7fd fe07 	bl	8000264 <__aeabi_uldivmod>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4611      	mov	r1, r2
 800265c:	4b3b      	ldr	r3, [pc, #236]	@ (800274c <UART_SetConfig+0x2d4>)
 800265e:	fba3 2301 	umull	r2, r3, r3, r1
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2264      	movs	r2, #100	@ 0x64
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	1acb      	subs	r3, r1, r3
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002672:	4b36      	ldr	r3, [pc, #216]	@ (800274c <UART_SetConfig+0x2d4>)
 8002674:	fba3 2302 	umull	r2, r3, r3, r2
 8002678:	095b      	lsrs	r3, r3, #5
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002680:	441c      	add	r4, r3
 8002682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002686:	2200      	movs	r2, #0
 8002688:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800268c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002690:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002694:	4642      	mov	r2, r8
 8002696:	464b      	mov	r3, r9
 8002698:	1891      	adds	r1, r2, r2
 800269a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800269c:	415b      	adcs	r3, r3
 800269e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026a4:	4641      	mov	r1, r8
 80026a6:	1851      	adds	r1, r2, r1
 80026a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80026aa:	4649      	mov	r1, r9
 80026ac:	414b      	adcs	r3, r1
 80026ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80026bc:	4659      	mov	r1, fp
 80026be:	00cb      	lsls	r3, r1, #3
 80026c0:	4651      	mov	r1, sl
 80026c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026c6:	4651      	mov	r1, sl
 80026c8:	00ca      	lsls	r2, r1, #3
 80026ca:	4610      	mov	r0, r2
 80026cc:	4619      	mov	r1, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	4642      	mov	r2, r8
 80026d2:	189b      	adds	r3, r3, r2
 80026d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026d8:	464b      	mov	r3, r9
 80026da:	460a      	mov	r2, r1
 80026dc:	eb42 0303 	adc.w	r3, r2, r3
 80026e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80026f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80026f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80026f8:	460b      	mov	r3, r1
 80026fa:	18db      	adds	r3, r3, r3
 80026fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026fe:	4613      	mov	r3, r2
 8002700:	eb42 0303 	adc.w	r3, r2, r3
 8002704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002706:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800270a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800270e:	f7fd fda9 	bl	8000264 <__aeabi_uldivmod>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <UART_SetConfig+0x2d4>)
 8002718:	fba3 1302 	umull	r1, r3, r3, r2
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	2164      	movs	r1, #100	@ 0x64
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	3332      	adds	r3, #50	@ 0x32
 800272a:	4a08      	ldr	r2, [pc, #32]	@ (800274c <UART_SetConfig+0x2d4>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	f003 0207 	and.w	r2, r3, #7
 8002736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4422      	add	r2, r4
 800273e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002740:	e106      	b.n	8002950 <UART_SetConfig+0x4d8>
 8002742:	bf00      	nop
 8002744:	40011000 	.word	0x40011000
 8002748:	40011400 	.word	0x40011400
 800274c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002754:	2200      	movs	r2, #0
 8002756:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800275a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800275e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002762:	4642      	mov	r2, r8
 8002764:	464b      	mov	r3, r9
 8002766:	1891      	adds	r1, r2, r2
 8002768:	6239      	str	r1, [r7, #32]
 800276a:	415b      	adcs	r3, r3
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
 800276e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002772:	4641      	mov	r1, r8
 8002774:	1854      	adds	r4, r2, r1
 8002776:	4649      	mov	r1, r9
 8002778:	eb43 0501 	adc.w	r5, r3, r1
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	00eb      	lsls	r3, r5, #3
 8002786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800278a:	00e2      	lsls	r2, r4, #3
 800278c:	4614      	mov	r4, r2
 800278e:	461d      	mov	r5, r3
 8002790:	4643      	mov	r3, r8
 8002792:	18e3      	adds	r3, r4, r3
 8002794:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002798:	464b      	mov	r3, r9
 800279a:	eb45 0303 	adc.w	r3, r5, r3
 800279e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80027a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027be:	4629      	mov	r1, r5
 80027c0:	008b      	lsls	r3, r1, #2
 80027c2:	4621      	mov	r1, r4
 80027c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027c8:	4621      	mov	r1, r4
 80027ca:	008a      	lsls	r2, r1, #2
 80027cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80027d0:	f7fd fd48 	bl	8000264 <__aeabi_uldivmod>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4b60      	ldr	r3, [pc, #384]	@ (800295c <UART_SetConfig+0x4e4>)
 80027da:	fba3 2302 	umull	r2, r3, r3, r2
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	011c      	lsls	r4, r3, #4
 80027e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027e6:	2200      	movs	r2, #0
 80027e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80027f4:	4642      	mov	r2, r8
 80027f6:	464b      	mov	r3, r9
 80027f8:	1891      	adds	r1, r2, r2
 80027fa:	61b9      	str	r1, [r7, #24]
 80027fc:	415b      	adcs	r3, r3
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002804:	4641      	mov	r1, r8
 8002806:	1851      	adds	r1, r2, r1
 8002808:	6139      	str	r1, [r7, #16]
 800280a:	4649      	mov	r1, r9
 800280c:	414b      	adcs	r3, r1
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800281c:	4659      	mov	r1, fp
 800281e:	00cb      	lsls	r3, r1, #3
 8002820:	4651      	mov	r1, sl
 8002822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002826:	4651      	mov	r1, sl
 8002828:	00ca      	lsls	r2, r1, #3
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	4603      	mov	r3, r0
 8002830:	4642      	mov	r2, r8
 8002832:	189b      	adds	r3, r3, r2
 8002834:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002838:	464b      	mov	r3, r9
 800283a:	460a      	mov	r2, r1
 800283c:	eb42 0303 	adc.w	r3, r2, r3
 8002840:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800284e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800285c:	4649      	mov	r1, r9
 800285e:	008b      	lsls	r3, r1, #2
 8002860:	4641      	mov	r1, r8
 8002862:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002866:	4641      	mov	r1, r8
 8002868:	008a      	lsls	r2, r1, #2
 800286a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800286e:	f7fd fcf9 	bl	8000264 <__aeabi_uldivmod>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4611      	mov	r1, r2
 8002878:	4b38      	ldr	r3, [pc, #224]	@ (800295c <UART_SetConfig+0x4e4>)
 800287a:	fba3 2301 	umull	r2, r3, r3, r1
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2264      	movs	r2, #100	@ 0x64
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	1acb      	subs	r3, r1, r3
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	3332      	adds	r3, #50	@ 0x32
 800288c:	4a33      	ldr	r2, [pc, #204]	@ (800295c <UART_SetConfig+0x4e4>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002898:	441c      	add	r4, r3
 800289a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800289e:	2200      	movs	r2, #0
 80028a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80028a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80028a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80028a8:	4642      	mov	r2, r8
 80028aa:	464b      	mov	r3, r9
 80028ac:	1891      	adds	r1, r2, r2
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	415b      	adcs	r3, r3
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028b8:	4641      	mov	r1, r8
 80028ba:	1851      	adds	r1, r2, r1
 80028bc:	6039      	str	r1, [r7, #0]
 80028be:	4649      	mov	r1, r9
 80028c0:	414b      	adcs	r3, r1
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028d0:	4659      	mov	r1, fp
 80028d2:	00cb      	lsls	r3, r1, #3
 80028d4:	4651      	mov	r1, sl
 80028d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028da:	4651      	mov	r1, sl
 80028dc:	00ca      	lsls	r2, r1, #3
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	4642      	mov	r2, r8
 80028e6:	189b      	adds	r3, r3, r2
 80028e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028ea:	464b      	mov	r3, r9
 80028ec:	460a      	mov	r2, r1
 80028ee:	eb42 0303 	adc.w	r3, r2, r3
 80028f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80028fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800290c:	4649      	mov	r1, r9
 800290e:	008b      	lsls	r3, r1, #2
 8002910:	4641      	mov	r1, r8
 8002912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002916:	4641      	mov	r1, r8
 8002918:	008a      	lsls	r2, r1, #2
 800291a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800291e:	f7fd fca1 	bl	8000264 <__aeabi_uldivmod>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4b0d      	ldr	r3, [pc, #52]	@ (800295c <UART_SetConfig+0x4e4>)
 8002928:	fba3 1302 	umull	r1, r3, r3, r2
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	2164      	movs	r1, #100	@ 0x64
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	3332      	adds	r3, #50	@ 0x32
 800293a:	4a08      	ldr	r2, [pc, #32]	@ (800295c <UART_SetConfig+0x4e4>)
 800293c:	fba2 2303 	umull	r2, r3, r2, r3
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	f003 020f 	and.w	r2, r3, #15
 8002946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4422      	add	r2, r4
 800294e:	609a      	str	r2, [r3, #8]
}
 8002950:	bf00      	nop
 8002952:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002956:	46bd      	mov	sp, r7
 8002958:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800295c:	51eb851f 	.word	0x51eb851f

08002960 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f103 0208 	add.w	r2, r3, #8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f103 0208 	add.w	r2, r3, #8
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f103 0208 	add.w	r2, r3, #8
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80029ba:	b480      	push	{r7}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	601a      	str	r2, [r3, #0]
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a18:	d103      	bne.n	8002a22 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	e00c      	b.n	8002a3c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3308      	adds	r3, #8
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	e002      	b.n	8002a30 <vListInsert+0x2e>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d2f6      	bcs.n	8002a2a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	601a      	str	r2, [r3, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6892      	ldr	r2, [r2, #8]
 8002a8a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6852      	ldr	r2, [r2, #4]
 8002a94:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d103      	bne.n	8002aa8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	1e5a      	subs	r2, r3, #1
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10b      	bne.n	8002af4 <xQueueGenericReset+0x2c>
        __asm volatile
 8002adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae0:	f383 8811 	msr	BASEPRI, r3
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	60bb      	str	r3, [r7, #8]
    }
 8002aee:	bf00      	nop
 8002af0:	bf00      	nop
 8002af2:	e7fd      	b.n	8002af0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002af4:	f002 fac2 	bl	800507c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b00:	68f9      	ldr	r1, [r7, #12]
 8002b02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	441a      	add	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b24:	3b01      	subs	r3, #1
 8002b26:	68f9      	ldr	r1, [r7, #12]
 8002b28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	441a      	add	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	22ff      	movs	r2, #255	@ 0xff
 8002b38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	22ff      	movs	r2, #255	@ 0xff
 8002b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d114      	bne.n	8002b74 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d01a      	beq.n	8002b88 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3310      	adds	r3, #16
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 f9e2 	bl	8003f20 <xTaskRemoveFromEventList>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d012      	beq.n	8002b88 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002b62:	4b0d      	ldr	r3, [pc, #52]	@ (8002b98 <xQueueGenericReset+0xd0>)
 8002b64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	e009      	b.n	8002b88 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3310      	adds	r3, #16
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fef1 	bl	8002960 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3324      	adds	r3, #36	@ 0x24
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff feec 	bl	8002960 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002b88:	f002 faaa 	bl	80050e0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002b8c:	2301      	movs	r3, #1
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	e000ed04 	.word	0xe000ed04

08002b9c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08c      	sub	sp, #48	@ 0x30
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10b      	bne.n	8002bc8 <xQueueGenericCreate+0x2c>
        __asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	61bb      	str	r3, [r7, #24]
    }
 8002bc2:	bf00      	nop
 8002bc4:	bf00      	nop
 8002bc6:	e7fd      	b.n	8002bc4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	fb02 f303 	mul.w	r3, r2, r3
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d006      	beq.n	8002be6 <xQueueGenericCreate+0x4a>
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d101      	bne.n	8002bea <xQueueGenericCreate+0x4e>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <xQueueGenericCreate+0x50>
 8002bea:	2300      	movs	r3, #0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10b      	bne.n	8002c08 <xQueueGenericCreate+0x6c>
        __asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	617b      	str	r3, [r7, #20]
    }
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	e7fd      	b.n	8002c04 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002c0e:	d90b      	bls.n	8002c28 <xQueueGenericCreate+0x8c>
        __asm volatile
 8002c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c14:	f383 8811 	msr	BASEPRI, r3
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	613b      	str	r3, [r7, #16]
    }
 8002c22:	bf00      	nop
 8002c24:	bf00      	nop
 8002c26:	e7fd      	b.n	8002c24 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	3350      	adds	r3, #80	@ 0x50
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f002 fb57 	bl	80052e0 <pvPortMalloc>
 8002c32:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00d      	beq.n	8002c56 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3350      	adds	r3, #80	@ 0x50
 8002c42:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c44:	79fa      	ldrb	r2, [r7, #7]
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f805 	bl	8002c60 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002c56:	6a3b      	ldr	r3, [r7, #32]
    }
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3728      	adds	r7, #40	@ 0x28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d103      	bne.n	8002c7c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e002      	b.n	8002c82 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c8e:	2101      	movs	r1, #1
 8002c90:	69b8      	ldr	r0, [r7, #24]
 8002c92:	f7ff ff19 	bl	8002ac8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	68f9      	ldr	r1, [r7, #12]
 8002ca4:	2073      	movs	r0, #115	@ 0x73
 8002ca6:	f004 fb01 	bl	80072ac <SEGGER_SYSVIEW_RecordU32x3>
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b090      	sub	sp, #64	@ 0x40
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8002cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10b      	bne.n	8002ce8 <xQueueGenericSend+0x34>
        __asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002ce2:	bf00      	nop
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d103      	bne.n	8002cf6 <xQueueGenericSend+0x42>
 8002cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <xQueueGenericSend+0x46>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <xQueueGenericSend+0x48>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <xQueueGenericSend+0x64>
        __asm volatile
 8002d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002d12:	bf00      	nop
 8002d14:	bf00      	nop
 8002d16:	e7fd      	b.n	8002d14 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d103      	bne.n	8002d26 <xQueueGenericSend+0x72>
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <xQueueGenericSend+0x76>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <xQueueGenericSend+0x78>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <xQueueGenericSend+0x94>
        __asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	623b      	str	r3, [r7, #32]
    }
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d48:	f001 fa8e 	bl	8004268 <xTaskGetSchedulerState>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <xQueueGenericSend+0xa4>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <xQueueGenericSend+0xa8>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <xQueueGenericSend+0xaa>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10b      	bne.n	8002d7a <xQueueGenericSend+0xc6>
        __asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	61fb      	str	r3, [r7, #28]
    }
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	e7fd      	b.n	8002d76 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002d7a:	f002 f97f 	bl	800507c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d302      	bcc.n	8002d90 <xQueueGenericSend+0xdc>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d136      	bne.n	8002dfe <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 8002d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d92:	4618      	mov	r0, r3
 8002d94:	f005 f8c6 	bl	8007f24 <SEGGER_SYSVIEW_ShrinkId>
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	460b      	mov	r3, r1
 8002da2:	4601      	mov	r1, r0
 8002da4:	205a      	movs	r0, #90	@ 0x5a
 8002da6:	f004 faf7 	bl	8007398 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002db0:	f000 fa80 	bl	80032b4 <prvCopyDataToQueue>
 8002db4:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d010      	beq.n	8002de0 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc0:	3324      	adds	r3, #36	@ 0x24
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f001 f8ac 	bl	8003f20 <xTaskRemoveFromEventList>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d013      	beq.n	8002df6 <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002dce:	4b4d      	ldr	r3, [pc, #308]	@ (8002f04 <xQueueGenericSend+0x250>)
 8002dd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	e00a      	b.n	8002df6 <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d007      	beq.n	8002df6 <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002de6:	4b47      	ldr	r3, [pc, #284]	@ (8002f04 <xQueueGenericSend+0x250>)
 8002de8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002df6:	f002 f973 	bl	80050e0 <vPortExitCritical>
                return pdPASS;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e07d      	b.n	8002efa <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d110      	bne.n	8002e26 <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002e04:	f002 f96c 	bl	80050e0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f005 f88a 	bl	8007f24 <SEGGER_SYSVIEW_ShrinkId>
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4601      	mov	r1, r0
 8002e1c:	205a      	movs	r0, #90	@ 0x5a
 8002e1e:	f004 fabb 	bl	8007398 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e069      	b.n	8002efa <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d106      	bne.n	8002e3a <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	4618      	mov	r0, r3
 8002e32:	f001 f8dd 	bl	8003ff0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e36:	2301      	movs	r3, #1
 8002e38:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e3a:	f002 f951 	bl	80050e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e3e:	f000 fe1f 	bl	8003a80 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e42:	f002 f91b 	bl	800507c <vPortEnterCritical>
 8002e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e4c:	b25b      	sxtb	r3, r3
 8002e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e52:	d103      	bne.n	8002e5c <xQueueGenericSend+0x1a8>
 8002e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e62:	b25b      	sxtb	r3, r3
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d103      	bne.n	8002e72 <xQueueGenericSend+0x1be>
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e72:	f002 f935 	bl	80050e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e76:	1d3a      	adds	r2, r7, #4
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f001 f8cc 	bl	800401c <xTaskCheckForTimeOut>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d124      	bne.n	8002ed4 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e8c:	f000 fb0a 	bl	80034a4 <prvIsQueueFull>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d018      	beq.n	8002ec8 <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e98:	3310      	adds	r3, #16
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 ffe8 	bl	8003e74 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002ea4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ea6:	f000 fa95 	bl	80033d4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002eaa:	f000 fdf7 	bl	8003a9c <xTaskResumeAll>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f47f af62 	bne.w	8002d7a <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8002eb6:	4b13      	ldr	r3, [pc, #76]	@ (8002f04 <xQueueGenericSend+0x250>)
 8002eb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	e758      	b.n	8002d7a <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002ec8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eca:	f000 fa83 	bl	80033d4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ece:	f000 fde5 	bl	8003a9c <xTaskResumeAll>
 8002ed2:	e752      	b.n	8002d7a <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002ed4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ed6:	f000 fa7d 	bl	80033d4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002eda:	f000 fddf 	bl	8003a9c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f005 f81f 	bl	8007f24 <SEGGER_SYSVIEW_ShrinkId>
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4601      	mov	r1, r0
 8002ef2:	205a      	movs	r0, #90	@ 0x5a
 8002ef4:	f004 fa50 	bl	8007398 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002ef8:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3738      	adds	r7, #56	@ 0x38
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	e000ed04 	.word	0xe000ed04

08002f08 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b090      	sub	sp, #64	@ 0x40
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8002f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10b      	bne.n	8002f38 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	e7fd      	b.n	8002f34 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d103      	bne.n	8002f46 <xQueueGenericSendFromISR+0x3e>
 8002f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <xQueueGenericSendFromISR+0x42>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <xQueueGenericSendFromISR+0x44>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10b      	bne.n	8002f68 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002f62:	bf00      	nop
 8002f64:	bf00      	nop
 8002f66:	e7fd      	b.n	8002f64 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d103      	bne.n	8002f76 <xQueueGenericSendFromISR+0x6e>
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <xQueueGenericSendFromISR+0x72>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <xQueueGenericSendFromISR+0x74>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10b      	bne.n	8002f98 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	623b      	str	r3, [r7, #32]
    }
 8002f92:	bf00      	nop
 8002f94:	bf00      	nop
 8002f96:	e7fd      	b.n	8002f94 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f98:	f002 f960 	bl	800525c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002f9c:	f3ef 8211 	mrs	r2, BASEPRI
 8002fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	61fa      	str	r2, [r7, #28]
 8002fb2:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002fb4:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fb6:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d302      	bcc.n	8002fca <xQueueGenericSendFromISR+0xc2>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d149      	bne.n	800305e <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fd0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f004 ffa1 	bl	8007f24 <SEGGER_SYSVIEW_ShrinkId>
 8002fe2:	4601      	mov	r1, r0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2060      	movs	r0, #96	@ 0x60
 8002fea:	f004 f905 	bl	80071f8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002ff4:	f000 f95e 	bl	80032b4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002ff8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d112      	bne.n	8003028 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003006:	2b00      	cmp	r3, #0
 8003008:	d026      	beq.n	8003058 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800300a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300c:	3324      	adds	r3, #36	@ 0x24
 800300e:	4618      	mov	r0, r3
 8003010:	f000 ff86 	bl	8003f20 <xTaskRemoveFromEventList>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d01e      	beq.n	8003058 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d01b      	beq.n	8003058 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	e017      	b.n	8003058 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003028:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800302c:	2b7f      	cmp	r3, #127	@ 0x7f
 800302e:	d10b      	bne.n	8003048 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8003030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	617b      	str	r3, [r7, #20]
    }
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	e7fd      	b.n	8003044 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003048:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800304c:	3301      	adds	r3, #1
 800304e:	b2db      	uxtb	r3, r3
 8003050:	b25a      	sxtb	r2, r3
 8003052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8003058:	2301      	movs	r3, #1
 800305a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 800305c:	e00b      	b.n	8003076 <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800305e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003060:	4618      	mov	r0, r3
 8003062:	f004 ff5f 	bl	8007f24 <SEGGER_SYSVIEW_ShrinkId>
 8003066:	4601      	mov	r1, r0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	461a      	mov	r2, r3
 800306c:	2060      	movs	r0, #96	@ 0x60
 800306e:	f004 f8c3 	bl	80071f8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8003072:	2300      	movs	r3, #0
 8003074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003078:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003080:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003084:	4618      	mov	r0, r3
 8003086:	3740      	adds	r7, #64	@ 0x40
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b08f      	sub	sp, #60	@ 0x3c
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003098:	2300      	movs	r3, #0
 800309a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80030a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <xQueueReceive+0x32>
        __asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	623b      	str	r3, [r7, #32]
    }
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	e7fd      	b.n	80030ba <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d103      	bne.n	80030cc <xQueueReceive+0x40>
 80030c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <xQueueReceive+0x44>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <xQueueReceive+0x46>
 80030d0:	2300      	movs	r3, #0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10b      	bne.n	80030ee <xQueueReceive+0x62>
        __asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	61fb      	str	r3, [r7, #28]
    }
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	e7fd      	b.n	80030ea <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030ee:	f001 f8bb 	bl	8004268 <xTaskGetSchedulerState>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d102      	bne.n	80030fe <xQueueReceive+0x72>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <xQueueReceive+0x76>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <xQueueReceive+0x78>
 8003102:	2300      	movs	r3, #0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10b      	bne.n	8003120 <xQueueReceive+0x94>
        __asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	61bb      	str	r3, [r7, #24]
    }
 800311a:	bf00      	nop
 800311c:	bf00      	nop
 800311e:	e7fd      	b.n	800311c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003120:	f001 ffac 	bl	800507c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312c:	2b00      	cmp	r3, #0
 800312e:	d02f      	beq.n	8003190 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003134:	f000 f928 	bl	8003388 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8003138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313a:	4618      	mov	r0, r3
 800313c:	f004 fef2 	bl	8007f24 <SEGGER_SYSVIEW_ShrinkId>
 8003140:	4604      	mov	r4, r0
 8003142:	2000      	movs	r0, #0
 8003144:	f004 feee 	bl	8007f24 <SEGGER_SYSVIEW_ShrinkId>
 8003148:	4602      	mov	r2, r0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2101      	movs	r1, #1
 800314e:	9100      	str	r1, [sp, #0]
 8003150:	4621      	mov	r1, r4
 8003152:	205c      	movs	r0, #92	@ 0x5c
 8003154:	f004 f920 	bl	8007398 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	1e5a      	subs	r2, r3, #1
 800315c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00f      	beq.n	8003188 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316a:	3310      	adds	r3, #16
 800316c:	4618      	mov	r0, r3
 800316e:	f000 fed7 	bl	8003f20 <xTaskRemoveFromEventList>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d007      	beq.n	8003188 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003178:	4b4d      	ldr	r3, [pc, #308]	@ (80032b0 <xQueueReceive+0x224>)
 800317a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003188:	f001 ffaa 	bl	80050e0 <vPortExitCritical>
                return pdPASS;
 800318c:	2301      	movs	r3, #1
 800318e:	e08a      	b.n	80032a6 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d113      	bne.n	80031be <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003196:	f001 ffa3 	bl	80050e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800319a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319c:	4618      	mov	r0, r3
 800319e:	f004 fec1 	bl	8007f24 <SEGGER_SYSVIEW_ShrinkId>
 80031a2:	4604      	mov	r4, r0
 80031a4:	2000      	movs	r0, #0
 80031a6:	f004 febd 	bl	8007f24 <SEGGER_SYSVIEW_ShrinkId>
 80031aa:	4602      	mov	r2, r0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2101      	movs	r1, #1
 80031b0:	9100      	str	r1, [sp, #0]
 80031b2:	4621      	mov	r1, r4
 80031b4:	205c      	movs	r0, #92	@ 0x5c
 80031b6:	f004 f8ef 	bl	8007398 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80031ba:	2300      	movs	r3, #0
 80031bc:	e073      	b.n	80032a6 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80031be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d106      	bne.n	80031d2 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80031c4:	f107 0310 	add.w	r3, r7, #16
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 ff11 	bl	8003ff0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80031ce:	2301      	movs	r3, #1
 80031d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80031d2:	f001 ff85 	bl	80050e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80031d6:	f000 fc53 	bl	8003a80 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80031da:	f001 ff4f 	bl	800507c <vPortEnterCritical>
 80031de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031e4:	b25b      	sxtb	r3, r3
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d103      	bne.n	80031f4 <xQueueReceive+0x168>
 80031ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031fa:	b25b      	sxtb	r3, r3
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003200:	d103      	bne.n	800320a <xQueueReceive+0x17e>
 8003202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800320a:	f001 ff69 	bl	80050e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800320e:	1d3a      	adds	r2, r7, #4
 8003210:	f107 0310 	add.w	r3, r7, #16
 8003214:	4611      	mov	r1, r2
 8003216:	4618      	mov	r0, r3
 8003218:	f000 ff00 	bl	800401c <xTaskCheckForTimeOut>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d124      	bne.n	800326c <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003222:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003224:	f000 f928 	bl	8003478 <prvIsQueueEmpty>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d018      	beq.n	8003260 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800322e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003230:	3324      	adds	r3, #36	@ 0x24
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	4611      	mov	r1, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fe1c 	bl	8003e74 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800323c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800323e:	f000 f8c9 	bl	80033d4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003242:	f000 fc2b 	bl	8003a9c <xTaskResumeAll>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	f47f af69 	bne.w	8003120 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800324e:	4b18      	ldr	r3, [pc, #96]	@ (80032b0 <xQueueReceive+0x224>)
 8003250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	e75f      	b.n	8003120 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003262:	f000 f8b7 	bl	80033d4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003266:	f000 fc19 	bl	8003a9c <xTaskResumeAll>
 800326a:	e759      	b.n	8003120 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800326c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800326e:	f000 f8b1 	bl	80033d4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003272:	f000 fc13 	bl	8003a9c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003276:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003278:	f000 f8fe 	bl	8003478 <prvIsQueueEmpty>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	f43f af4e 	beq.w	8003120 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003286:	4618      	mov	r0, r3
 8003288:	f004 fe4c 	bl	8007f24 <SEGGER_SYSVIEW_ShrinkId>
 800328c:	4604      	mov	r4, r0
 800328e:	2000      	movs	r0, #0
 8003290:	f004 fe48 	bl	8007f24 <SEGGER_SYSVIEW_ShrinkId>
 8003294:	4602      	mov	r2, r0
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2101      	movs	r1, #1
 800329a:	9100      	str	r1, [sp, #0]
 800329c:	4621      	mov	r1, r4
 800329e:	205c      	movs	r0, #92	@ 0x5c
 80032a0:	f004 f87a 	bl	8007398 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80032a4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3734      	adds	r7, #52	@ 0x34
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd90      	pop	{r4, r7, pc}
 80032ae:	bf00      	nop
 80032b0:	e000ed04 	.word	0xe000ed04

080032b4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10d      	bne.n	80032ee <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d14d      	bne.n	8003376 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 ffe0 	bl	80042a4 <xTaskPriorityDisinherit>
 80032e4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	e043      	b.n	8003376 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d119      	bne.n	8003328 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6858      	ldr	r0, [r3, #4]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fc:	461a      	mov	r2, r3
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	f004 ffd6 	bl	80082b0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330c:	441a      	add	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	429a      	cmp	r2, r3
 800331c:	d32b      	bcc.n	8003376 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	e026      	b.n	8003376 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	68d8      	ldr	r0, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	461a      	mov	r2, r3
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	f004 ffbc 	bl	80082b0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	425b      	negs	r3, r3
 8003342:	441a      	add	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d207      	bcs.n	8003364 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335c:	425b      	negs	r3, r3
 800335e:	441a      	add	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d105      	bne.n	8003376 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	3b01      	subs	r3, #1
 8003374:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800337e:	697b      	ldr	r3, [r7, #20]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d018      	beq.n	80033cc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	441a      	add	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d303      	bcc.n	80033bc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68d9      	ldr	r1, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	461a      	mov	r2, r3
 80033c6:	6838      	ldr	r0, [r7, #0]
 80033c8:	f004 ff72 	bl	80082b0 <memcpy>
    }
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80033dc:	f001 fe4e 	bl	800507c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033e6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80033e8:	e011      	b.n	800340e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d012      	beq.n	8003418 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3324      	adds	r3, #36	@ 0x24
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fd92 	bl	8003f20 <xTaskRemoveFromEventList>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003402:	f000 fe73 	bl	80040ec <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	3b01      	subs	r3, #1
 800340a:	b2db      	uxtb	r3, r3
 800340c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800340e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003412:	2b00      	cmp	r3, #0
 8003414:	dce9      	bgt.n	80033ea <prvUnlockQueue+0x16>
 8003416:	e000      	b.n	800341a <prvUnlockQueue+0x46>
                        break;
 8003418:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	22ff      	movs	r2, #255	@ 0xff
 800341e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003422:	f001 fe5d 	bl	80050e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003426:	f001 fe29 	bl	800507c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003430:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003432:	e011      	b.n	8003458 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d012      	beq.n	8003462 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3310      	adds	r3, #16
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fd6d 	bl	8003f20 <xTaskRemoveFromEventList>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800344c:	f000 fe4e 	bl	80040ec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003450:	7bbb      	ldrb	r3, [r7, #14]
 8003452:	3b01      	subs	r3, #1
 8003454:	b2db      	uxtb	r3, r3
 8003456:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800345c:	2b00      	cmp	r3, #0
 800345e:	dce9      	bgt.n	8003434 <prvUnlockQueue+0x60>
 8003460:	e000      	b.n	8003464 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003462:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	22ff      	movs	r2, #255	@ 0xff
 8003468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800346c:	f001 fe38 	bl	80050e0 <vPortExitCritical>
}
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003480:	f001 fdfc 	bl	800507c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800348c:	2301      	movs	r3, #1
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	e001      	b.n	8003496 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003496:	f001 fe23 	bl	80050e0 <vPortExitCritical>

    return xReturn;
 800349a:	68fb      	ldr	r3, [r7, #12]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80034ac:	f001 fde6 	bl	800507c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d102      	bne.n	80034c2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80034bc:	2301      	movs	r3, #1
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	e001      	b.n	80034c6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80034c6:	f001 fe0b 	bl	80050e0 <vPortExitCritical>

    return xReturn;
 80034ca:	68fb      	ldr	r3, [r7, #12]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	e01e      	b.n	8003522 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80034e4:	4a13      	ldr	r2, [pc, #76]	@ (8003534 <vQueueAddToRegistry+0x60>)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d115      	bne.n	800351c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80034f0:	4910      	ldr	r1, [pc, #64]	@ (8003534 <vQueueAddToRegistry+0x60>)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80034fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003534 <vQueueAddToRegistry+0x60>)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4413      	add	r3, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4618      	mov	r0, r3
 800350a:	f004 fd0b 	bl	8007f24 <SEGGER_SYSVIEW_ShrinkId>
 800350e:	4601      	mov	r1, r0
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	2071      	movs	r0, #113	@ 0x71
 8003516:	f003 fe6f 	bl	80071f8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800351a:	e006      	b.n	800352a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3301      	adds	r3, #1
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b07      	cmp	r3, #7
 8003526:	d9dd      	bls.n	80034e4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	200000dc 	.word	0x200000dc

08003538 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003548:	f001 fd98 	bl	800507c <vPortEnterCritical>
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003552:	b25b      	sxtb	r3, r3
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d103      	bne.n	8003562 <vQueueWaitForMessageRestricted+0x2a>
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003568:	b25b      	sxtb	r3, r3
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356e:	d103      	bne.n	8003578 <vQueueWaitForMessageRestricted+0x40>
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003578:	f001 fdb2 	bl	80050e0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003580:	2b00      	cmp	r3, #0
 8003582:	d106      	bne.n	8003592 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	3324      	adds	r3, #36	@ 0x24
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fc97 	bl	8003ec0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003592:	6978      	ldr	r0, [r7, #20]
 8003594:	f7ff ff1e 	bl	80033d4 <prvUnlockQueue>
    }
 8003598:	bf00      	nop
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08c      	sub	sp, #48	@ 0x30
 80035a4:	af04      	add	r7, sp, #16
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 fe93 	bl	80052e0 <pvPortMalloc>
 80035ba:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00e      	beq.n	80035e0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035c2:	2058      	movs	r0, #88	@ 0x58
 80035c4:	f001 fe8c 	bl	80052e0 <pvPortMalloc>
 80035c8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80035d6:	e005      	b.n	80035e4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80035d8:	6978      	ldr	r0, [r7, #20]
 80035da:	f001 ff63 	bl	80054a4 <vPortFree>
 80035de:	e001      	b.n	80035e4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d013      	beq.n	8003612 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035ea:	88fa      	ldrh	r2, [r7, #6]
 80035ec:	2300      	movs	r3, #0
 80035ee:	9303      	str	r3, [sp, #12]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	9302      	str	r3, [sp, #8]
 80035f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f80e 	bl	8003622 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003606:	69f8      	ldr	r0, [r7, #28]
 8003608:	f000 f8a2 	bl	8003750 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800360c:	2301      	movs	r3, #1
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	e002      	b.n	8003618 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003612:	f04f 33ff 	mov.w	r3, #4294967295
 8003616:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003618:	69bb      	ldr	r3, [r7, #24]
    }
 800361a:	4618      	mov	r0, r3
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b088      	sub	sp, #32
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
 800362e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003632:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	461a      	mov	r2, r3
 800363a:	21a5      	movs	r1, #165	@ 0xa5
 800363c:	f004 fe0c 	bl	8008258 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003642:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800364a:	3b01      	subs	r3, #1
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	f023 0307 	bic.w	r3, r3, #7
 8003658:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00b      	beq.n	800367c <prvInitialiseNewTask+0x5a>
        __asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	617b      	str	r3, [r7, #20]
    }
 8003676:	bf00      	nop
 8003678:	bf00      	nop
 800367a:	e7fd      	b.n	8003678 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01f      	beq.n	80036c2 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	e012      	b.n	80036ae <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	4413      	add	r3, r2
 800368e:	7819      	ldrb	r1, [r3, #0]
 8003690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	4413      	add	r3, r2
 8003696:	3334      	adds	r3, #52	@ 0x34
 8003698:	460a      	mov	r2, r1
 800369a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d006      	beq.n	80036b6 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	3301      	adds	r3, #1
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	2b09      	cmp	r3, #9
 80036b2:	d9e9      	bls.n	8003688 <prvInitialiseNewTask+0x66>
 80036b4:	e000      	b.n	80036b8 <prvInitialiseNewTask+0x96>
            {
                break;
 80036b6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80036c0:	e003      	b.n	80036ca <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d901      	bls.n	80036d4 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036d0:	2304      	movs	r3, #4
 80036d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80036d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80036da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036de:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80036e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e2:	2200      	movs	r2, #0
 80036e4:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e8:	3304      	adds	r3, #4
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff f958 	bl	80029a0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f2:	3318      	adds	r3, #24
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff f953 	bl	80029a0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036fe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003702:	f1c3 0205 	rsb	r2, r3, #5
 8003706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003708:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800370a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800370e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003712:	3350      	adds	r3, #80	@ 0x50
 8003714:	2204      	movs	r2, #4
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f004 fd9d 	bl	8008258 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800371e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003720:	3354      	adds	r3, #84	@ 0x54
 8003722:	2201      	movs	r2, #1
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f004 fd96 	bl	8008258 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	68f9      	ldr	r1, [r7, #12]
 8003730:	69b8      	ldr	r0, [r7, #24]
 8003732:	f001 fb73 	bl	8004e1c <pxPortInitialiseStack>
 8003736:	4602      	mov	r2, r0
 8003738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800373c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003746:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003748:	bf00      	nop
 800374a:	3720      	adds	r7, #32
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003750:	b5b0      	push	{r4, r5, r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af02      	add	r7, sp, #8
 8003756:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003758:	f001 fc90 	bl	800507c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800375c:	4b3b      	ldr	r3, [pc, #236]	@ (800384c <prvAddNewTaskToReadyList+0xfc>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3301      	adds	r3, #1
 8003762:	4a3a      	ldr	r2, [pc, #232]	@ (800384c <prvAddNewTaskToReadyList+0xfc>)
 8003764:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003766:	4b3a      	ldr	r3, [pc, #232]	@ (8003850 <prvAddNewTaskToReadyList+0x100>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800376e:	4a38      	ldr	r2, [pc, #224]	@ (8003850 <prvAddNewTaskToReadyList+0x100>)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003774:	4b35      	ldr	r3, [pc, #212]	@ (800384c <prvAddNewTaskToReadyList+0xfc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d110      	bne.n	800379e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800377c:	f000 fcda 	bl	8004134 <prvInitialiseTaskLists>
 8003780:	e00d      	b.n	800379e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003782:	4b34      	ldr	r3, [pc, #208]	@ (8003854 <prvAddNewTaskToReadyList+0x104>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800378a:	4b31      	ldr	r3, [pc, #196]	@ (8003850 <prvAddNewTaskToReadyList+0x100>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003794:	429a      	cmp	r2, r3
 8003796:	d802      	bhi.n	800379e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003798:	4a2d      	ldr	r2, [pc, #180]	@ (8003850 <prvAddNewTaskToReadyList+0x100>)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800379e:	4b2e      	ldr	r3, [pc, #184]	@ (8003858 <prvAddNewTaskToReadyList+0x108>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3301      	adds	r3, #1
 80037a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003858 <prvAddNewTaskToReadyList+0x108>)
 80037a6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003858 <prvAddNewTaskToReadyList+0x108>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d016      	beq.n	80037e4 <prvAddNewTaskToReadyList+0x94>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f004 fa8d 	bl	8007cd8 <SEGGER_SYSVIEW_OnTaskCreate>
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ce:	461d      	mov	r5, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461c      	mov	r4, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037da:	1ae3      	subs	r3, r4, r3
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	462b      	mov	r3, r5
 80037e0:	f002 f830 	bl	8005844 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f004 fafa 	bl	8007de0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f0:	2201      	movs	r2, #1
 80037f2:	409a      	lsls	r2, r3
 80037f4:	4b19      	ldr	r3, [pc, #100]	@ (800385c <prvAddNewTaskToReadyList+0x10c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	4a18      	ldr	r2, [pc, #96]	@ (800385c <prvAddNewTaskToReadyList+0x10c>)
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4a15      	ldr	r2, [pc, #84]	@ (8003860 <prvAddNewTaskToReadyList+0x110>)
 800380c:	441a      	add	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3304      	adds	r3, #4
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f7ff f8d0 	bl	80029ba <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800381a:	f001 fc61 	bl	80050e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800381e:	4b0d      	ldr	r3, [pc, #52]	@ (8003854 <prvAddNewTaskToReadyList+0x104>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00e      	beq.n	8003844 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003826:	4b0a      	ldr	r3, [pc, #40]	@ (8003850 <prvAddNewTaskToReadyList+0x100>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003830:	429a      	cmp	r2, r3
 8003832:	d207      	bcs.n	8003844 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003834:	4b0b      	ldr	r3, [pc, #44]	@ (8003864 <prvAddNewTaskToReadyList+0x114>)
 8003836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bdb0      	pop	{r4, r5, r7, pc}
 800384c:	200001f4 	.word	0x200001f4
 8003850:	2000011c 	.word	0x2000011c
 8003854:	20000200 	.word	0x20000200
 8003858:	20000210 	.word	0x20000210
 800385c:	200001fc 	.word	0x200001fc
 8003860:	20000120 	.word	0x20000120
 8003864:	e000ed04 	.word	0xe000ed04

08003868 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003870:	f001 fc04 	bl	800507c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <vTaskDelete+0x18>
 800387a:	4b46      	ldr	r3, [pc, #280]	@ (8003994 <vTaskDelete+0x12c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	e000      	b.n	8003882 <vTaskDelete+0x1a>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	3304      	adds	r3, #4
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff f8f3 	bl	8002a74 <uxListRemove>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d115      	bne.n	80038c0 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003898:	493f      	ldr	r1, [pc, #252]	@ (8003998 <vTaskDelete+0x130>)
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10a      	bne.n	80038c0 <vTaskDelete+0x58>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ae:	2201      	movs	r2, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43da      	mvns	r2, r3
 80038b6:	4b39      	ldr	r3, [pc, #228]	@ (800399c <vTaskDelete+0x134>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4013      	ands	r3, r2
 80038bc:	4a37      	ldr	r2, [pc, #220]	@ (800399c <vTaskDelete+0x134>)
 80038be:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3318      	adds	r3, #24
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff f8d1 	bl	8002a74 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80038d2:	4b33      	ldr	r3, [pc, #204]	@ (80039a0 <vTaskDelete+0x138>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3301      	adds	r3, #1
 80038d8:	4a31      	ldr	r2, [pc, #196]	@ (80039a0 <vTaskDelete+0x138>)
 80038da:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80038dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003994 <vTaskDelete+0x12c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d118      	bne.n	8003918 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	3304      	adds	r3, #4
 80038ea:	4619      	mov	r1, r3
 80038ec:	482d      	ldr	r0, [pc, #180]	@ (80039a4 <vTaskDelete+0x13c>)
 80038ee:	f7ff f864 	bl	80029ba <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80038f2:	4b2d      	ldr	r3, [pc, #180]	@ (80039a8 <vTaskDelete+0x140>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	4a2b      	ldr	r2, [pc, #172]	@ (80039a8 <vTaskDelete+0x140>)
 80038fa:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4618      	mov	r0, r3
 8003900:	f004 fb10 	bl	8007f24 <SEGGER_SYSVIEW_ShrinkId>
 8003904:	4603      	mov	r3, r0
 8003906:	4619      	mov	r1, r3
 8003908:	2022      	movs	r0, #34	@ 0x22
 800390a:	f003 fc39 	bl	8007180 <SEGGER_SYSVIEW_RecordU32>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4618      	mov	r0, r3
 8003912:	f001 ffff 	bl	8005914 <SYSVIEW_DeleteTask>
 8003916:	e016      	b.n	8003946 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003918:	4b24      	ldr	r3, [pc, #144]	@ (80039ac <vTaskDelete+0x144>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3b01      	subs	r3, #1
 800391e:	4a23      	ldr	r2, [pc, #140]	@ (80039ac <vTaskDelete+0x144>)
 8003920:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4618      	mov	r0, r3
 8003926:	f004 fafd 	bl	8007f24 <SEGGER_SYSVIEW_ShrinkId>
 800392a:	4603      	mov	r3, r0
 800392c:	4619      	mov	r1, r3
 800392e:	2022      	movs	r0, #34	@ 0x22
 8003930:	f003 fc26 	bl	8007180 <SEGGER_SYSVIEW_RecordU32>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4618      	mov	r0, r3
 8003938:	f001 ffec 	bl	8005914 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fc67 	bl	8004210 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8003942:	f000 fc75 	bl	8004230 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003946:	f001 fbcb 	bl	80050e0 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800394a:	4b19      	ldr	r3, [pc, #100]	@ (80039b0 <vTaskDelete+0x148>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01c      	beq.n	800398c <vTaskDelete+0x124>
        {
            if( pxTCB == pxCurrentTCB )
 8003952:	4b10      	ldr	r3, [pc, #64]	@ (8003994 <vTaskDelete+0x12c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	429a      	cmp	r2, r3
 800395a:	d117      	bne.n	800398c <vTaskDelete+0x124>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800395c:	4b15      	ldr	r3, [pc, #84]	@ (80039b4 <vTaskDelete+0x14c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00b      	beq.n	800397c <vTaskDelete+0x114>
        __asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	60bb      	str	r3, [r7, #8]
    }
 8003976:	bf00      	nop
 8003978:	bf00      	nop
 800397a:	e7fd      	b.n	8003978 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 800397c:	4b0e      	ldr	r3, [pc, #56]	@ (80039b8 <vTaskDelete+0x150>)
 800397e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800398c:	bf00      	nop
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	2000011c 	.word	0x2000011c
 8003998:	20000120 	.word	0x20000120
 800399c:	200001fc 	.word	0x200001fc
 80039a0:	20000210 	.word	0x20000210
 80039a4:	200001c8 	.word	0x200001c8
 80039a8:	200001dc 	.word	0x200001dc
 80039ac:	200001f4 	.word	0x200001f4
 80039b0:	20000200 	.word	0x20000200
 80039b4:	2000021c 	.word	0x2000021c
 80039b8:	e000ed04 	.word	0xe000ed04

080039bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80039c2:	4b27      	ldr	r3, [pc, #156]	@ (8003a60 <vTaskStartScheduler+0xa4>)
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	2300      	movs	r3, #0
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	2300      	movs	r3, #0
 80039cc:	2282      	movs	r2, #130	@ 0x82
 80039ce:	4925      	ldr	r1, [pc, #148]	@ (8003a64 <vTaskStartScheduler+0xa8>)
 80039d0:	4825      	ldr	r0, [pc, #148]	@ (8003a68 <vTaskStartScheduler+0xac>)
 80039d2:	f7ff fde5 	bl	80035a0 <xTaskCreate>
 80039d6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d102      	bne.n	80039e4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80039de:	f000 feff 	bl	80047e0 <xTimerCreateTimerTask>
 80039e2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d124      	bne.n	8003a34 <vTaskStartScheduler+0x78>
        __asm volatile
 80039ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ee:	f383 8811 	msr	BASEPRI, r3
 80039f2:	f3bf 8f6f 	isb	sy
 80039f6:	f3bf 8f4f 	dsb	sy
 80039fa:	60bb      	str	r3, [r7, #8]
    }
 80039fc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80039fe:	4b1b      	ldr	r3, [pc, #108]	@ (8003a6c <vTaskStartScheduler+0xb0>)
 8003a00:	f04f 32ff 	mov.w	r2, #4294967295
 8003a04:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003a06:	4b1a      	ldr	r3, [pc, #104]	@ (8003a70 <vTaskStartScheduler+0xb4>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a0c:	4b19      	ldr	r3, [pc, #100]	@ (8003a74 <vTaskStartScheduler+0xb8>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003a12:	4b19      	ldr	r3, [pc, #100]	@ (8003a78 <vTaskStartScheduler+0xbc>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4b12      	ldr	r3, [pc, #72]	@ (8003a60 <vTaskStartScheduler+0xa4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d102      	bne.n	8003a24 <vTaskStartScheduler+0x68>
 8003a1e:	f004 f93f 	bl	8007ca0 <SEGGER_SYSVIEW_OnIdle>
 8003a22:	e004      	b.n	8003a2e <vTaskStartScheduler+0x72>
 8003a24:	4b14      	ldr	r3, [pc, #80]	@ (8003a78 <vTaskStartScheduler+0xbc>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f004 f997 	bl	8007d5c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003a2e:	f001 fa81 	bl	8004f34 <xPortStartScheduler>
 8003a32:	e00f      	b.n	8003a54 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3a:	d10b      	bne.n	8003a54 <vTaskStartScheduler+0x98>
        __asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	607b      	str	r3, [r7, #4]
    }
 8003a4e:	bf00      	nop
 8003a50:	bf00      	nop
 8003a52:	e7fd      	b.n	8003a50 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003a54:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <vTaskStartScheduler+0xc0>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20000218 	.word	0x20000218
 8003a64:	08008388 	.word	0x08008388
 8003a68:	08004105 	.word	0x08004105
 8003a6c:	20000214 	.word	0x20000214
 8003a70:	20000200 	.word	0x20000200
 8003a74:	200001f8 	.word	0x200001f8
 8003a78:	2000011c 	.word	0x2000011c
 8003a7c:	2000000c 	.word	0x2000000c

08003a80 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003a84:	4b04      	ldr	r3, [pc, #16]	@ (8003a98 <vTaskSuspendAll+0x18>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	4a03      	ldr	r2, [pc, #12]	@ (8003a98 <vTaskSuspendAll+0x18>)
 8003a8c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003a8e:	bf00      	nop
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	2000021c 	.word	0x2000021c

08003a9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003aaa:	4b44      	ldr	r3, [pc, #272]	@ (8003bbc <xTaskResumeAll+0x120>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10b      	bne.n	8003aca <xTaskResumeAll+0x2e>
        __asm volatile
 8003ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab6:	f383 8811 	msr	BASEPRI, r3
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	603b      	str	r3, [r7, #0]
    }
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	e7fd      	b.n	8003ac6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003aca:	f001 fad7 	bl	800507c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003ace:	4b3b      	ldr	r3, [pc, #236]	@ (8003bbc <xTaskResumeAll+0x120>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	4a39      	ldr	r2, [pc, #228]	@ (8003bbc <xTaskResumeAll+0x120>)
 8003ad6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ad8:	4b38      	ldr	r3, [pc, #224]	@ (8003bbc <xTaskResumeAll+0x120>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d165      	bne.n	8003bac <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ae0:	4b37      	ldr	r3, [pc, #220]	@ (8003bc0 <xTaskResumeAll+0x124>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d061      	beq.n	8003bac <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ae8:	e032      	b.n	8003b50 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aea:	4b36      	ldr	r3, [pc, #216]	@ (8003bc4 <xTaskResumeAll+0x128>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3318      	adds	r3, #24
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe ffbc 	bl	8002a74 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe ffb7 	bl	8002a74 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f004 f969 	bl	8007de0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b12:	2201      	movs	r2, #1
 8003b14:	409a      	lsls	r2, r3
 8003b16:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc8 <xTaskResumeAll+0x12c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003bc8 <xTaskResumeAll+0x12c>)
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4a27      	ldr	r2, [pc, #156]	@ (8003bcc <xTaskResumeAll+0x130>)
 8003b2e:	441a      	add	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4619      	mov	r1, r3
 8003b36:	4610      	mov	r0, r2
 8003b38:	f7fe ff3f 	bl	80029ba <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b40:	4b23      	ldr	r3, [pc, #140]	@ (8003bd0 <xTaskResumeAll+0x134>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8003b4a:	4b22      	ldr	r3, [pc, #136]	@ (8003bd4 <xTaskResumeAll+0x138>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b50:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc4 <xTaskResumeAll+0x128>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1c8      	bne.n	8003aea <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003b5e:	f000 fb67 	bl	8004230 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b62:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd8 <xTaskResumeAll+0x13c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d010      	beq.n	8003b90 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003b6e:	f000 f859 	bl	8003c24 <xTaskIncrementTick>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8003b78:	4b16      	ldr	r3, [pc, #88]	@ (8003bd4 <xTaskResumeAll+0x138>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f1      	bne.n	8003b6e <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8003b8a:	4b13      	ldr	r3, [pc, #76]	@ (8003bd8 <xTaskResumeAll+0x13c>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003b90:	4b10      	ldr	r3, [pc, #64]	@ (8003bd4 <xTaskResumeAll+0x138>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d009      	beq.n	8003bac <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bdc <xTaskResumeAll+0x140>)
 8003b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003bac:	f001 fa98 	bl	80050e0 <vPortExitCritical>

    return xAlreadyYielded;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	2000021c 	.word	0x2000021c
 8003bc0:	200001f4 	.word	0x200001f4
 8003bc4:	200001b4 	.word	0x200001b4
 8003bc8:	200001fc 	.word	0x200001fc
 8003bcc:	20000120 	.word	0x20000120
 8003bd0:	2000011c 	.word	0x2000011c
 8003bd4:	20000208 	.word	0x20000208
 8003bd8:	20000204 	.word	0x20000204
 8003bdc:	e000ed04 	.word	0xe000ed04

08003be0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003be6:	4b05      	ldr	r3, [pc, #20]	@ (8003bfc <xTaskGetTickCount+0x1c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003bec:	687b      	ldr	r3, [r7, #4]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	200001f8 	.word	0x200001f8

08003c00 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c06:	f001 fb29 	bl	800525c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003c0e:	4b04      	ldr	r3, [pc, #16]	@ (8003c20 <xTaskGetTickCountFromISR+0x20>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003c14:	683b      	ldr	r3, [r7, #0]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	200001f8 	.word	0x200001f8

08003c24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c2e:	4b51      	ldr	r3, [pc, #324]	@ (8003d74 <xTaskIncrementTick+0x150>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f040 8093 	bne.w	8003d5e <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c38:	4b4f      	ldr	r3, [pc, #316]	@ (8003d78 <xTaskIncrementTick+0x154>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003c40:	4a4d      	ldr	r2, [pc, #308]	@ (8003d78 <xTaskIncrementTick+0x154>)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d121      	bne.n	8003c90 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003c4c:	4b4b      	ldr	r3, [pc, #300]	@ (8003d7c <xTaskIncrementTick+0x158>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <xTaskIncrementTick+0x4a>
        __asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	603b      	str	r3, [r7, #0]
    }
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	e7fd      	b.n	8003c6a <xTaskIncrementTick+0x46>
 8003c6e:	4b43      	ldr	r3, [pc, #268]	@ (8003d7c <xTaskIncrementTick+0x158>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	4b42      	ldr	r3, [pc, #264]	@ (8003d80 <xTaskIncrementTick+0x15c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a40      	ldr	r2, [pc, #256]	@ (8003d7c <xTaskIncrementTick+0x158>)
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	4a40      	ldr	r2, [pc, #256]	@ (8003d80 <xTaskIncrementTick+0x15c>)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	4b40      	ldr	r3, [pc, #256]	@ (8003d84 <xTaskIncrementTick+0x160>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3301      	adds	r3, #1
 8003c88:	4a3e      	ldr	r2, [pc, #248]	@ (8003d84 <xTaskIncrementTick+0x160>)
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	f000 fad0 	bl	8004230 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003c90:	4b3d      	ldr	r3, [pc, #244]	@ (8003d88 <xTaskIncrementTick+0x164>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d34c      	bcc.n	8003d34 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c9a:	4b38      	ldr	r3, [pc, #224]	@ (8003d7c <xTaskIncrementTick+0x158>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d104      	bne.n	8003cae <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ca4:	4b38      	ldr	r3, [pc, #224]	@ (8003d88 <xTaskIncrementTick+0x164>)
 8003ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8003caa:	601a      	str	r2, [r3, #0]
                    break;
 8003cac:	e042      	b.n	8003d34 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cae:	4b33      	ldr	r3, [pc, #204]	@ (8003d7c <xTaskIncrementTick+0x158>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d203      	bcs.n	8003cce <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003cc6:	4a30      	ldr	r2, [pc, #192]	@ (8003d88 <xTaskIncrementTick+0x164>)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ccc:	e032      	b.n	8003d34 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe fece 	bl	8002a74 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d004      	beq.n	8003cea <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	3318      	adds	r3, #24
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fe fec5 	bl	8002a74 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f004 f877 	bl	8007de0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	4b24      	ldr	r3, [pc, #144]	@ (8003d8c <xTaskIncrementTick+0x168>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	4a22      	ldr	r2, [pc, #136]	@ (8003d8c <xTaskIncrementTick+0x168>)
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4a1f      	ldr	r2, [pc, #124]	@ (8003d90 <xTaskIncrementTick+0x16c>)
 8003d12:	441a      	add	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	f7fe fe4d 	bl	80029ba <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d24:	4b1b      	ldr	r3, [pc, #108]	@ (8003d94 <xTaskIncrementTick+0x170>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d3b5      	bcc.n	8003c9a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d32:	e7b2      	b.n	8003c9a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d34:	4b17      	ldr	r3, [pc, #92]	@ (8003d94 <xTaskIncrementTick+0x170>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d3a:	4915      	ldr	r1, [pc, #84]	@ (8003d90 <xTaskIncrementTick+0x16c>)
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d901      	bls.n	8003d50 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003d50:	4b11      	ldr	r3, [pc, #68]	@ (8003d98 <xTaskIncrementTick+0x174>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	e004      	b.n	8003d68 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d9c <xTaskIncrementTick+0x178>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3301      	adds	r3, #1
 8003d64:	4a0d      	ldr	r2, [pc, #52]	@ (8003d9c <xTaskIncrementTick+0x178>)
 8003d66:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003d68:	697b      	ldr	r3, [r7, #20]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	2000021c 	.word	0x2000021c
 8003d78:	200001f8 	.word	0x200001f8
 8003d7c:	200001ac 	.word	0x200001ac
 8003d80:	200001b0 	.word	0x200001b0
 8003d84:	2000020c 	.word	0x2000020c
 8003d88:	20000214 	.word	0x20000214
 8003d8c:	200001fc 	.word	0x200001fc
 8003d90:	20000120 	.word	0x20000120
 8003d94:	2000011c 	.word	0x2000011c
 8003d98:	20000208 	.word	0x20000208
 8003d9c:	20000204 	.word	0x20000204

08003da0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003da6:	4b2d      	ldr	r3, [pc, #180]	@ (8003e5c <vTaskSwitchContext+0xbc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003dae:	4b2c      	ldr	r3, [pc, #176]	@ (8003e60 <vTaskSwitchContext+0xc0>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003db4:	e04e      	b.n	8003e54 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8003db6:	4b2a      	ldr	r3, [pc, #168]	@ (8003e60 <vTaskSwitchContext+0xc0>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dbc:	4b29      	ldr	r3, [pc, #164]	@ (8003e64 <vTaskSwitchContext+0xc4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	fab3 f383 	clz	r3, r3
 8003dc8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003dca:	7afb      	ldrb	r3, [r7, #11]
 8003dcc:	f1c3 031f 	rsb	r3, r3, #31
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	4925      	ldr	r1, [pc, #148]	@ (8003e68 <vTaskSwitchContext+0xc8>)
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10b      	bne.n	8003dfe <vTaskSwitchContext+0x5e>
        __asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	607b      	str	r3, [r7, #4]
    }
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	e7fd      	b.n	8003dfa <vTaskSwitchContext+0x5a>
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4a17      	ldr	r2, [pc, #92]	@ (8003e68 <vTaskSwitchContext+0xc8>)
 8003e0a:	4413      	add	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	605a      	str	r2, [r3, #4]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	3308      	adds	r3, #8
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d104      	bne.n	8003e2e <vTaskSwitchContext+0x8e>
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4a0d      	ldr	r2, [pc, #52]	@ (8003e6c <vTaskSwitchContext+0xcc>)
 8003e36:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003e38:	4b0c      	ldr	r3, [pc, #48]	@ (8003e6c <vTaskSwitchContext+0xcc>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e70 <vTaskSwitchContext+0xd0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d102      	bne.n	8003e4a <vTaskSwitchContext+0xaa>
 8003e44:	f003 ff2c 	bl	8007ca0 <SEGGER_SYSVIEW_OnIdle>
}
 8003e48:	e004      	b.n	8003e54 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003e4a:	4b08      	ldr	r3, [pc, #32]	@ (8003e6c <vTaskSwitchContext+0xcc>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f003 ff84 	bl	8007d5c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003e54:	bf00      	nop
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	2000021c 	.word	0x2000021c
 8003e60:	20000208 	.word	0x20000208
 8003e64:	200001fc 	.word	0x200001fc
 8003e68:	20000120 	.word	0x20000120
 8003e6c:	2000011c 	.word	0x2000011c
 8003e70:	20000218 	.word	0x20000218

08003e74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10b      	bne.n	8003e9c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	60fb      	str	r3, [r7, #12]
    }
 8003e96:	bf00      	nop
 8003e98:	bf00      	nop
 8003e9a:	e7fd      	b.n	8003e98 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e9c:	4b07      	ldr	r3, [pc, #28]	@ (8003ebc <vTaskPlaceOnEventList+0x48>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3318      	adds	r3, #24
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7fe fdac 	bl	8002a02 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003eaa:	2101      	movs	r1, #1
 8003eac:	6838      	ldr	r0, [r7, #0]
 8003eae:	f000 fc1f 	bl	80046f0 <prvAddCurrentTaskToDelayedList>
}
 8003eb2:	bf00      	nop
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	2000011c 	.word	0x2000011c

08003ec0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10b      	bne.n	8003eea <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	617b      	str	r3, [r7, #20]
    }
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	e7fd      	b.n	8003ee6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003eea:	4b0c      	ldr	r3, [pc, #48]	@ (8003f1c <vTaskPlaceOnEventListRestricted+0x5c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3318      	adds	r3, #24
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f7fe fd61 	bl	80029ba <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8003efe:	f04f 33ff 	mov.w	r3, #4294967295
 8003f02:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003f04:	2024      	movs	r0, #36	@ 0x24
 8003f06:	f003 f91d 	bl	8007144 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	68b8      	ldr	r0, [r7, #8]
 8003f0e:	f000 fbef 	bl	80046f0 <prvAddCurrentTaskToDelayedList>
    }
 8003f12:	bf00      	nop
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	2000011c 	.word	0x2000011c

08003f20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10b      	bne.n	8003f4e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	60fb      	str	r3, [r7, #12]
    }
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop
 8003f4c:	e7fd      	b.n	8003f4a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	3318      	adds	r3, #24
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe fd8e 	bl	8002a74 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f58:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd8 <xTaskRemoveFromEventList+0xb8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d120      	bne.n	8003fa2 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fe fd85 	bl	8002a74 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f003 ff37 	bl	8007de0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f76:	2201      	movs	r2, #1
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	4b18      	ldr	r3, [pc, #96]	@ (8003fdc <xTaskRemoveFromEventList+0xbc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	4a16      	ldr	r2, [pc, #88]	@ (8003fdc <xTaskRemoveFromEventList+0xbc>)
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4a13      	ldr	r2, [pc, #76]	@ (8003fe0 <xTaskRemoveFromEventList+0xc0>)
 8003f92:	441a      	add	r2, r3
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	3304      	adds	r3, #4
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	f7fe fd0d 	bl	80029ba <vListInsertEnd>
 8003fa0:	e005      	b.n	8003fae <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	3318      	adds	r3, #24
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	480e      	ldr	r0, [pc, #56]	@ (8003fe4 <xTaskRemoveFromEventList+0xc4>)
 8003faa:	f7fe fd06 	bl	80029ba <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe8 <xTaskRemoveFromEventList+0xc8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d905      	bls.n	8003fc8 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003fec <xTaskRemoveFromEventList+0xcc>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	e001      	b.n	8003fcc <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003fcc:	697b      	ldr	r3, [r7, #20]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	2000021c 	.word	0x2000021c
 8003fdc:	200001fc 	.word	0x200001fc
 8003fe0:	20000120 	.word	0x20000120
 8003fe4:	200001b4 	.word	0x200001b4
 8003fe8:	2000011c 	.word	0x2000011c
 8003fec:	20000208 	.word	0x20000208

08003ff0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ff8:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <vTaskInternalSetTimeOutState+0x24>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004000:	4b05      	ldr	r3, [pc, #20]	@ (8004018 <vTaskInternalSetTimeOutState+0x28>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	605a      	str	r2, [r3, #4]
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	2000020c 	.word	0x2000020c
 8004018:	200001f8 	.word	0x200001f8

0800401c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10b      	bne.n	8004044 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	613b      	str	r3, [r7, #16]
    }
 800403e:	bf00      	nop
 8004040:	bf00      	nop
 8004042:	e7fd      	b.n	8004040 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10b      	bne.n	8004062 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	60fb      	str	r3, [r7, #12]
    }
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	e7fd      	b.n	800405e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004062:	f001 f80b 	bl	800507c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004066:	4b1f      	ldr	r3, [pc, #124]	@ (80040e4 <xTaskCheckForTimeOut+0xc8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407e:	d102      	bne.n	8004086 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004080:	2300      	movs	r3, #0
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	e026      	b.n	80040d4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b17      	ldr	r3, [pc, #92]	@ (80040e8 <xTaskCheckForTimeOut+0xcc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d00a      	beq.n	80040a8 <xTaskCheckForTimeOut+0x8c>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	429a      	cmp	r2, r3
 800409a:	d305      	bcc.n	80040a8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800409c:	2301      	movs	r3, #1
 800409e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	e015      	b.n	80040d4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d20b      	bcs.n	80040ca <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	1ad2      	subs	r2, r2, r3
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff ff96 	bl	8003ff0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	e004      	b.n	80040d4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80040d0:	2301      	movs	r3, #1
 80040d2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80040d4:	f001 f804 	bl	80050e0 <vPortExitCritical>

    return xReturn;
 80040d8:	69fb      	ldr	r3, [r7, #28]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3720      	adds	r7, #32
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	200001f8 	.word	0x200001f8
 80040e8:	2000020c 	.word	0x2000020c

080040ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80040f0:	4b03      	ldr	r3, [pc, #12]	@ (8004100 <vTaskMissedYield+0x14>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
}
 80040f6:	bf00      	nop
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	20000208 	.word	0x20000208

08004104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800410c:	f000 f852 	bl	80041b4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004110:	4b06      	ldr	r3, [pc, #24]	@ (800412c <prvIdleTask+0x28>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d9f9      	bls.n	800410c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004118:	4b05      	ldr	r3, [pc, #20]	@ (8004130 <prvIdleTask+0x2c>)
 800411a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004128:	e7f0      	b.n	800410c <prvIdleTask+0x8>
 800412a:	bf00      	nop
 800412c:	20000120 	.word	0x20000120
 8004130:	e000ed04 	.word	0xe000ed04

08004134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	e00c      	b.n	800415a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4a12      	ldr	r2, [pc, #72]	@ (8004194 <prvInitialiseTaskLists+0x60>)
 800414c:	4413      	add	r3, r2
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe fc06 	bl	8002960 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3301      	adds	r3, #1
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b04      	cmp	r3, #4
 800415e:	d9ef      	bls.n	8004140 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004160:	480d      	ldr	r0, [pc, #52]	@ (8004198 <prvInitialiseTaskLists+0x64>)
 8004162:	f7fe fbfd 	bl	8002960 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004166:	480d      	ldr	r0, [pc, #52]	@ (800419c <prvInitialiseTaskLists+0x68>)
 8004168:	f7fe fbfa 	bl	8002960 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800416c:	480c      	ldr	r0, [pc, #48]	@ (80041a0 <prvInitialiseTaskLists+0x6c>)
 800416e:	f7fe fbf7 	bl	8002960 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004172:	480c      	ldr	r0, [pc, #48]	@ (80041a4 <prvInitialiseTaskLists+0x70>)
 8004174:	f7fe fbf4 	bl	8002960 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004178:	480b      	ldr	r0, [pc, #44]	@ (80041a8 <prvInitialiseTaskLists+0x74>)
 800417a:	f7fe fbf1 	bl	8002960 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800417e:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <prvInitialiseTaskLists+0x78>)
 8004180:	4a05      	ldr	r2, [pc, #20]	@ (8004198 <prvInitialiseTaskLists+0x64>)
 8004182:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004184:	4b0a      	ldr	r3, [pc, #40]	@ (80041b0 <prvInitialiseTaskLists+0x7c>)
 8004186:	4a05      	ldr	r2, [pc, #20]	@ (800419c <prvInitialiseTaskLists+0x68>)
 8004188:	601a      	str	r2, [r3, #0]
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000120 	.word	0x20000120
 8004198:	20000184 	.word	0x20000184
 800419c:	20000198 	.word	0x20000198
 80041a0:	200001b4 	.word	0x200001b4
 80041a4:	200001c8 	.word	0x200001c8
 80041a8:	200001e0 	.word	0x200001e0
 80041ac:	200001ac 	.word	0x200001ac
 80041b0:	200001b0 	.word	0x200001b0

080041b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041ba:	e019      	b.n	80041f0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80041bc:	f000 ff5e 	bl	800507c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041c0:	4b10      	ldr	r3, [pc, #64]	@ (8004204 <prvCheckTasksWaitingTermination+0x50>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fe fc51 	bl	8002a74 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80041d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004208 <prvCheckTasksWaitingTermination+0x54>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	4a0b      	ldr	r2, [pc, #44]	@ (8004208 <prvCheckTasksWaitingTermination+0x54>)
 80041da:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80041dc:	4b0b      	ldr	r3, [pc, #44]	@ (800420c <prvCheckTasksWaitingTermination+0x58>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	4a0a      	ldr	r2, [pc, #40]	@ (800420c <prvCheckTasksWaitingTermination+0x58>)
 80041e4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80041e6:	f000 ff7b 	bl	80050e0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f810 	bl	8004210 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041f0:	4b06      	ldr	r3, [pc, #24]	@ (800420c <prvCheckTasksWaitingTermination+0x58>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e1      	bne.n	80041bc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80041f8:	bf00      	nop
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	200001c8 	.word	0x200001c8
 8004208:	200001f4 	.word	0x200001f4
 800420c:	200001dc 	.word	0x200001dc

08004210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421c:	4618      	mov	r0, r3
 800421e:	f001 f941 	bl	80054a4 <vPortFree>
                vPortFree( pxTCB );
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f001 f93e 	bl	80054a4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004228:	bf00      	nop
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004234:	4b0a      	ldr	r3, [pc, #40]	@ (8004260 <prvResetNextTaskUnblockTime+0x30>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d104      	bne.n	8004248 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800423e:	4b09      	ldr	r3, [pc, #36]	@ (8004264 <prvResetNextTaskUnblockTime+0x34>)
 8004240:	f04f 32ff 	mov.w	r2, #4294967295
 8004244:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004246:	e005      	b.n	8004254 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004248:	4b05      	ldr	r3, [pc, #20]	@ (8004260 <prvResetNextTaskUnblockTime+0x30>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a04      	ldr	r2, [pc, #16]	@ (8004264 <prvResetNextTaskUnblockTime+0x34>)
 8004252:	6013      	str	r3, [r2, #0]
}
 8004254:	bf00      	nop
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	200001ac 	.word	0x200001ac
 8004264:	20000214 	.word	0x20000214

08004268 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800426e:	4b0b      	ldr	r3, [pc, #44]	@ (800429c <xTaskGetSchedulerState+0x34>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004276:	2301      	movs	r3, #1
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	e008      	b.n	800428e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800427c:	4b08      	ldr	r3, [pc, #32]	@ (80042a0 <xTaskGetSchedulerState+0x38>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d102      	bne.n	800428a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004284:	2302      	movs	r3, #2
 8004286:	607b      	str	r3, [r7, #4]
 8004288:	e001      	b.n	800428e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800428a:	2300      	movs	r3, #0
 800428c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800428e:	687b      	ldr	r3, [r7, #4]
    }
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	20000200 	.word	0x20000200
 80042a0:	2000021c 	.word	0x2000021c

080042a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d06a      	beq.n	8004390 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80042ba:	4b38      	ldr	r3, [pc, #224]	@ (800439c <xTaskPriorityDisinherit+0xf8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d00b      	beq.n	80042dc <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	60fb      	str	r3, [r7, #12]
    }
 80042d6:	bf00      	nop
 80042d8:	bf00      	nop
 80042da:	e7fd      	b.n	80042d8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10b      	bne.n	80042fc <xTaskPriorityDisinherit+0x58>
        __asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	60bb      	str	r3, [r7, #8]
    }
 80042f6:	bf00      	nop
 80042f8:	bf00      	nop
 80042fa:	e7fd      	b.n	80042f8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004300:	1e5a      	subs	r2, r3, #1
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800430e:	429a      	cmp	r2, r3
 8004310:	d03e      	beq.n	8004390 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d13a      	bne.n	8004390 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3304      	adds	r3, #4
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe fba8 	bl	8002a74 <uxListRemove>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10a      	bne.n	8004340 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432e:	2201      	movs	r2, #1
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	43da      	mvns	r2, r3
 8004336:	4b1a      	ldr	r3, [pc, #104]	@ (80043a0 <xTaskPriorityDisinherit+0xfc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4013      	ands	r3, r2
 800433c:	4a18      	ldr	r2, [pc, #96]	@ (80043a0 <xTaskPriorityDisinherit+0xfc>)
 800433e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4619      	mov	r1, r3
 8004344:	204a      	movs	r0, #74	@ 0x4a
 8004346:	f002 ff1b 	bl	8007180 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004356:	f1c3 0205 	rsb	r2, r3, #5
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004362:	2201      	movs	r2, #1
 8004364:	409a      	lsls	r2, r3
 8004366:	4b0e      	ldr	r3, [pc, #56]	@ (80043a0 <xTaskPriorityDisinherit+0xfc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4313      	orrs	r3, r2
 800436c:	4a0c      	ldr	r2, [pc, #48]	@ (80043a0 <xTaskPriorityDisinherit+0xfc>)
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4a09      	ldr	r2, [pc, #36]	@ (80043a4 <xTaskPriorityDisinherit+0x100>)
 800437e:	441a      	add	r2, r3
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	3304      	adds	r3, #4
 8004384:	4619      	mov	r1, r3
 8004386:	4610      	mov	r0, r2
 8004388:	f7fe fb17 	bl	80029ba <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800438c:	2301      	movs	r3, #1
 800438e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004390:	697b      	ldr	r3, [r7, #20]
    }
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	2000011c 	.word	0x2000011c
 80043a0:	200001fc 	.word	0x200001fc
 80043a4:	20000120 	.word	0x20000120

080043a8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	613b      	str	r3, [r7, #16]
    }
 80043ce:	bf00      	nop
 80043d0:	bf00      	nop
 80043d2:	e7fd      	b.n	80043d0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80043d4:	f000 fe52 	bl	800507c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80043d8:	4b36      	ldr	r3, [pc, #216]	@ (80044b4 <xTaskGenericNotifyWait+0x10c>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	3354      	adds	r3, #84	@ 0x54
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d022      	beq.n	8004430 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80043ea:	4b32      	ldr	r3, [pc, #200]	@ (80044b4 <xTaskGenericNotifyWait+0x10c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	3214      	adds	r2, #20
 80043f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	43d2      	mvns	r2, r2
 80043fa:	4011      	ands	r1, r2
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	3214      	adds	r2, #20
 8004400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004404:	4b2b      	ldr	r3, [pc, #172]	@ (80044b4 <xTaskGenericNotifyWait+0x10c>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	3354      	adds	r3, #84	@ 0x54
 800440e:	2201      	movs	r2, #1
 8004410:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00b      	beq.n	8004430 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004418:	2101      	movs	r1, #1
 800441a:	6a38      	ldr	r0, [r7, #32]
 800441c:	f000 f968 	bl	80046f0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8004420:	4b25      	ldr	r3, [pc, #148]	@ (80044b8 <xTaskGenericNotifyWait+0x110>)
 8004422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004430:	f000 fe56 	bl	80050e0 <vPortExitCritical>

        taskENTER_CRITICAL();
 8004434:	f000 fe22 	bl	800507c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	4613      	mov	r3, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	68b9      	ldr	r1, [r7, #8]
 8004444:	2040      	movs	r0, #64	@ 0x40
 8004446:	f002 ffa7 	bl	8007398 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <xTaskGenericNotifyWait+0xb8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004450:	4b18      	ldr	r3, [pc, #96]	@ (80044b4 <xTaskGenericNotifyWait+0x10c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	3214      	adds	r2, #20
 8004458:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004460:	4b14      	ldr	r3, [pc, #80]	@ (80044b4 <xTaskGenericNotifyWait+0x10c>)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	3354      	adds	r3, #84	@ 0x54
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d002      	beq.n	8004478 <xTaskGenericNotifyWait+0xd0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	e00e      	b.n	8004496 <xTaskGenericNotifyWait+0xee>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004478:	4b0e      	ldr	r3, [pc, #56]	@ (80044b4 <xTaskGenericNotifyWait+0x10c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	3214      	adds	r2, #20
 8004480:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	43d2      	mvns	r2, r2
 8004488:	4011      	ands	r1, r2
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	3214      	adds	r2, #20
 800448e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8004492:	2301      	movs	r3, #1
 8004494:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004496:	4b07      	ldr	r3, [pc, #28]	@ (80044b4 <xTaskGenericNotifyWait+0x10c>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4413      	add	r3, r2
 800449e:	3354      	adds	r3, #84	@ 0x54
 80044a0:	2200      	movs	r2, #0
 80044a2:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80044a4:	f000 fe1c 	bl	80050e0 <vPortExitCritical>

        return xReturn;
 80044a8:	697b      	ldr	r3, [r7, #20]
    }
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	2000011c 	.word	0x2000011c
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b092      	sub	sp, #72	@ 0x48
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80044ca:	2301      	movs	r3, #1
 80044cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10b      	bne.n	80044ec <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	e7fd      	b.n	80044e8 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00b      	beq.n	800450a <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	e7fd      	b.n	8004506 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800450a:	f000 fea7 	bl	800525c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 8004512:	f3ef 8211 	mrs	r2, BASEPRI
 8004516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	627a      	str	r2, [r7, #36]	@ 0x24
 8004528:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800452c:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800452e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004530:	2b00      	cmp	r3, #0
 8004532:	d006      	beq.n	8004542 <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	3214      	adds	r2, #20
 800453a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800453e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004540:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004542:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4413      	add	r3, r2
 8004548:	3354      	adds	r3, #84	@ 0x54
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004550:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	4413      	add	r3, r2
 8004556:	3354      	adds	r3, #84	@ 0x54
 8004558:	2202      	movs	r2, #2
 800455a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	2b04      	cmp	r3, #4
 8004560:	d83b      	bhi.n	80045da <xTaskGenericNotifyFromISR+0x11e>
 8004562:	a201      	add	r2, pc, #4	@ (adr r2, 8004568 <xTaskGenericNotifyFromISR+0xac>)
 8004564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004568:	080045fb 	.word	0x080045fb
 800456c:	0800457d 	.word	0x0800457d
 8004570:	08004599 	.word	0x08004599
 8004574:	080045b1 	.word	0x080045b1
 8004578:	080045bf 	.word	0x080045bf
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800457c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	3214      	adds	r2, #20
 8004582:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	ea42 0103 	orr.w	r1, r2, r3
 800458c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	3214      	adds	r2, #20
 8004592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004596:	e033      	b.n	8004600 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	3214      	adds	r2, #20
 800459e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a2:	1c59      	adds	r1, r3, #1
 80045a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	3214      	adds	r2, #20
 80045aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80045ae:	e027      	b.n	8004600 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80045b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	3214      	adds	r2, #20
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80045bc:	e020      	b.n	8004600 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80045be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d006      	beq.n	80045d4 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80045c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	3214      	adds	r2, #20
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80045d2:	e015      	b.n	8004600 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 80045d8:	e012      	b.n	8004600 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80045da:	4b3e      	ldr	r3, [pc, #248]	@ (80046d4 <xTaskGenericNotifyFromISR+0x218>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00d      	beq.n	80045fe <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	61fb      	str	r3, [r7, #28]
    }
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop
 80045f8:	e7fd      	b.n	80045f6 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 80045fa:	bf00      	nop
 80045fc:	e000      	b.n	8004600 <xTaskGenericNotifyFromISR+0x144>
                    break;
 80045fe:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8004600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004602:	4618      	mov	r0, r3
 8004604:	f003 fc8e 	bl	8007f24 <SEGGER_SYSVIEW_ShrinkId>
 8004608:	78f9      	ldrb	r1, [r7, #3]
 800460a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800460c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800460e:	9201      	str	r2, [sp, #4]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	460b      	mov	r3, r1
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	4601      	mov	r1, r0
 8004618:	203f      	movs	r0, #63	@ 0x3f
 800461a:	f002 ff4f 	bl	80074bc <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800461e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004622:	2b01      	cmp	r3, #1
 8004624:	d14a      	bne.n	80046bc <xTaskGenericNotifyFromISR+0x200>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <xTaskGenericNotifyFromISR+0x18a>
        __asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	61bb      	str	r3, [r7, #24]
    }
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	e7fd      	b.n	8004642 <xTaskGenericNotifyFromISR+0x186>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004646:	4b24      	ldr	r3, [pc, #144]	@ (80046d8 <xTaskGenericNotifyFromISR+0x21c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d120      	bne.n	8004690 <xTaskGenericNotifyFromISR+0x1d4>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800464e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004650:	3304      	adds	r3, #4
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe fa0e 	bl	8002a74 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465a:	4618      	mov	r0, r3
 800465c:	f003 fbc0 	bl	8007de0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004664:	2201      	movs	r2, #1
 8004666:	409a      	lsls	r2, r3
 8004668:	4b1c      	ldr	r3, [pc, #112]	@ (80046dc <xTaskGenericNotifyFromISR+0x220>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4313      	orrs	r3, r2
 800466e:	4a1b      	ldr	r2, [pc, #108]	@ (80046dc <xTaskGenericNotifyFromISR+0x220>)
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4a18      	ldr	r2, [pc, #96]	@ (80046e0 <xTaskGenericNotifyFromISR+0x224>)
 8004680:	441a      	add	r2, r3
 8004682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004684:	3304      	adds	r3, #4
 8004686:	4619      	mov	r1, r3
 8004688:	4610      	mov	r0, r2
 800468a:	f7fe f996 	bl	80029ba <vListInsertEnd>
 800468e:	e005      	b.n	800469c <xTaskGenericNotifyFromISR+0x1e0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004692:	3318      	adds	r3, #24
 8004694:	4619      	mov	r1, r3
 8004696:	4813      	ldr	r0, [pc, #76]	@ (80046e4 <xTaskGenericNotifyFromISR+0x228>)
 8004698:	f7fe f98f 	bl	80029ba <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800469c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a0:	4b11      	ldr	r3, [pc, #68]	@ (80046e8 <xTaskGenericNotifyFromISR+0x22c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d908      	bls.n	80046bc <xTaskGenericNotifyFromISR+0x200>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80046aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <xTaskGenericNotifyFromISR+0x1fa>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80046b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046b2:	2201      	movs	r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80046b6:	4b0d      	ldr	r3, [pc, #52]	@ (80046ec <xTaskGenericNotifyFromISR+0x230>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046be:	617b      	str	r3, [r7, #20]
        __asm volatile
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f383 8811 	msr	BASEPRI, r3
    }
 80046c6:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80046c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 80046ca:	4618      	mov	r0, r3
 80046cc:	3740      	adds	r7, #64	@ 0x40
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	200001f8 	.word	0x200001f8
 80046d8:	2000021c 	.word	0x2000021c
 80046dc:	200001fc 	.word	0x200001fc
 80046e0:	20000120 	.word	0x20000120
 80046e4:	200001b4 	.word	0x200001b4
 80046e8:	2000011c 	.word	0x2000011c
 80046ec:	20000208 	.word	0x20000208

080046f0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80046fa:	4b32      	ldr	r3, [pc, #200]	@ (80047c4 <prvAddCurrentTaskToDelayedList+0xd4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004700:	4b31      	ldr	r3, [pc, #196]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3304      	adds	r3, #4
 8004706:	4618      	mov	r0, r3
 8004708:	f7fe f9b4 	bl	8002a74 <uxListRemove>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004712:	4b2d      	ldr	r3, [pc, #180]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004718:	2201      	movs	r2, #1
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43da      	mvns	r2, r3
 8004720:	4b2a      	ldr	r3, [pc, #168]	@ (80047cc <prvAddCurrentTaskToDelayedList+0xdc>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4013      	ands	r3, r2
 8004726:	4a29      	ldr	r2, [pc, #164]	@ (80047cc <prvAddCurrentTaskToDelayedList+0xdc>)
 8004728:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004730:	d110      	bne.n	8004754 <prvAddCurrentTaskToDelayedList+0x64>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00d      	beq.n	8004754 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004738:	4b23      	ldr	r3, [pc, #140]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	211b      	movs	r1, #27
 800473e:	4618      	mov	r0, r3
 8004740:	f003 fb90 	bl	8007e64 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004744:	4b20      	ldr	r3, [pc, #128]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3304      	adds	r3, #4
 800474a:	4619      	mov	r1, r3
 800474c:	4820      	ldr	r0, [pc, #128]	@ (80047d0 <prvAddCurrentTaskToDelayedList+0xe0>)
 800474e:	f7fe f934 	bl	80029ba <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004752:	e032      	b.n	80047ba <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4413      	add	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800475c:	4b1a      	ldr	r3, [pc, #104]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	429a      	cmp	r2, r3
 800476a:	d20f      	bcs.n	800478c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800476c:	4b16      	ldr	r3, [pc, #88]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2104      	movs	r1, #4
 8004772:	4618      	mov	r0, r3
 8004774:	f003 fb76 	bl	8007e64 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004778:	4b16      	ldr	r3, [pc, #88]	@ (80047d4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4b12      	ldr	r3, [pc, #72]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3304      	adds	r3, #4
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f7fe f93c 	bl	8002a02 <vListInsert>
}
 800478a:	e016      	b.n	80047ba <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800478c:	4b0e      	ldr	r3, [pc, #56]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2104      	movs	r1, #4
 8004792:	4618      	mov	r0, r3
 8004794:	f003 fb66 	bl	8007e64 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004798:	4b0f      	ldr	r3, [pc, #60]	@ (80047d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4b0a      	ldr	r3, [pc, #40]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f7fe f92c 	bl	8002a02 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80047aa:	4b0c      	ldr	r3, [pc, #48]	@ (80047dc <prvAddCurrentTaskToDelayedList+0xec>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d202      	bcs.n	80047ba <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80047b4:	4a09      	ldr	r2, [pc, #36]	@ (80047dc <prvAddCurrentTaskToDelayedList+0xec>)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	6013      	str	r3, [r2, #0]
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	200001f8 	.word	0x200001f8
 80047c8:	2000011c 	.word	0x2000011c
 80047cc:	200001fc 	.word	0x200001fc
 80047d0:	200001e0 	.word	0x200001e0
 80047d4:	200001b0 	.word	0x200001b0
 80047d8:	200001ac 	.word	0x200001ac
 80047dc:	20000214 	.word	0x20000214

080047e0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80047ea:	f000 fae1 	bl	8004db0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80047ee:	4b12      	ldr	r3, [pc, #72]	@ (8004838 <xTimerCreateTimerTask+0x58>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80047f6:	4b11      	ldr	r3, [pc, #68]	@ (800483c <xTimerCreateTimerTask+0x5c>)
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	2302      	movs	r3, #2
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	2300      	movs	r3, #0
 8004800:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004804:	490e      	ldr	r1, [pc, #56]	@ (8004840 <xTimerCreateTimerTask+0x60>)
 8004806:	480f      	ldr	r0, [pc, #60]	@ (8004844 <xTimerCreateTimerTask+0x64>)
 8004808:	f7fe feca 	bl	80035a0 <xTaskCreate>
 800480c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10b      	bne.n	800482c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	603b      	str	r3, [r7, #0]
    }
 8004826:	bf00      	nop
 8004828:	bf00      	nop
 800482a:	e7fd      	b.n	8004828 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800482c:	687b      	ldr	r3, [r7, #4]
    }
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000250 	.word	0x20000250
 800483c:	20000254 	.word	0x20000254
 8004840:	08008390 	.word	0x08008390
 8004844:	08004981 	.word	0x08004981

08004848 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	@ 0x28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004856:	2300      	movs	r3, #0
 8004858:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10b      	bne.n	8004878 <xTimerGenericCommand+0x30>
        __asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	623b      	str	r3, [r7, #32]
    }
 8004872:	bf00      	nop
 8004874:	bf00      	nop
 8004876:	e7fd      	b.n	8004874 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004878:	4b19      	ldr	r3, [pc, #100]	@ (80048e0 <xTimerGenericCommand+0x98>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d02a      	beq.n	80048d6 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b05      	cmp	r3, #5
 8004890:	dc18      	bgt.n	80048c4 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004892:	f7ff fce9 	bl	8004268 <xTaskGetSchedulerState>
 8004896:	4603      	mov	r3, r0
 8004898:	2b02      	cmp	r3, #2
 800489a:	d109      	bne.n	80048b0 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800489c:	4b10      	ldr	r3, [pc, #64]	@ (80048e0 <xTimerGenericCommand+0x98>)
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	f107 0114 	add.w	r1, r7, #20
 80048a4:	2300      	movs	r3, #0
 80048a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a8:	f7fe fa04 	bl	8002cb4 <xQueueGenericSend>
 80048ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80048ae:	e012      	b.n	80048d6 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80048b0:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <xTimerGenericCommand+0x98>)
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	f107 0114 	add.w	r1, r7, #20
 80048b8:	2300      	movs	r3, #0
 80048ba:	2200      	movs	r2, #0
 80048bc:	f7fe f9fa 	bl	8002cb4 <xQueueGenericSend>
 80048c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80048c2:	e008      	b.n	80048d6 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80048c4:	4b06      	ldr	r3, [pc, #24]	@ (80048e0 <xTimerGenericCommand+0x98>)
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	f107 0114 	add.w	r1, r7, #20
 80048cc:	2300      	movs	r3, #0
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	f7fe fb1a 	bl	8002f08 <xQueueGenericSendFromISR>
 80048d4:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80048d8:	4618      	mov	r0, r3
 80048da:	3728      	adds	r7, #40	@ 0x28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	20000250 	.word	0x20000250

080048e4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ee:	4b23      	ldr	r3, [pc, #140]	@ (800497c <prvProcessExpiredTimer+0x98>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fe f8b9 	bl	8002a74 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d023      	beq.n	8004958 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	699a      	ldr	r2, [r3, #24]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	18d1      	adds	r1, r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	6978      	ldr	r0, [r7, #20]
 800491e:	f000 f8d5 	bl	8004acc <prvInsertTimerInActiveList>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d020      	beq.n	800496a <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004928:	2300      	movs	r3, #0
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	2300      	movs	r3, #0
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	2100      	movs	r1, #0
 8004932:	6978      	ldr	r0, [r7, #20]
 8004934:	f7ff ff88 	bl	8004848 <xTimerGenericCommand>
 8004938:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d114      	bne.n	800496a <prvProcessExpiredTimer+0x86>
        __asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	60fb      	str	r3, [r7, #12]
    }
 8004952:	bf00      	nop
 8004954:	bf00      	nop
 8004956:	e7fd      	b.n	8004954 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	b2da      	uxtb	r2, r3
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	6978      	ldr	r0, [r7, #20]
 8004970:	4798      	blx	r3
    }
 8004972:	bf00      	nop
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000248 	.word	0x20000248

08004980 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004988:	f107 0308 	add.w	r3, r7, #8
 800498c:	4618      	mov	r0, r3
 800498e:	f000 f859 	bl	8004a44 <prvGetNextExpireTime>
 8004992:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4619      	mov	r1, r3
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f805 	bl	80049a8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800499e:	f000 f8d7 	bl	8004b50 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049a2:	bf00      	nop
 80049a4:	e7f0      	b.n	8004988 <prvTimerTask+0x8>
	...

080049a8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80049b2:	f7ff f865 	bl	8003a80 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049b6:	f107 0308 	add.w	r3, r7, #8
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 f866 	bl	8004a8c <prvSampleTimeNow>
 80049c0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d130      	bne.n	8004a2a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <prvProcessTimerOrBlockTask+0x3c>
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d806      	bhi.n	80049e4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80049d6:	f7ff f861 	bl	8003a9c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049da:	68f9      	ldr	r1, [r7, #12]
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff ff81 	bl	80048e4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80049e2:	e024      	b.n	8004a2e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d008      	beq.n	80049fc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049ea:	4b13      	ldr	r3, [pc, #76]	@ (8004a38 <prvProcessTimerOrBlockTask+0x90>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <prvProcessTimerOrBlockTask+0x50>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <prvProcessTimerOrBlockTask+0x52>
 80049f8:	2300      	movs	r3, #0
 80049fa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049fc:	4b0f      	ldr	r3, [pc, #60]	@ (8004a3c <prvProcessTimerOrBlockTask+0x94>)
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	f7fe fd95 	bl	8003538 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004a0e:	f7ff f845 	bl	8003a9c <xTaskResumeAll>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004a18:	4b09      	ldr	r3, [pc, #36]	@ (8004a40 <prvProcessTimerOrBlockTask+0x98>)
 8004a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	f3bf 8f6f 	isb	sy
    }
 8004a28:	e001      	b.n	8004a2e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004a2a:	f7ff f837 	bl	8003a9c <xTaskResumeAll>
    }
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	2000024c 	.word	0x2000024c
 8004a3c:	20000250 	.word	0x20000250
 8004a40:	e000ed04 	.word	0xe000ed04

08004a44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a88 <prvGetNextExpireTime+0x44>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <prvGetNextExpireTime+0x16>
 8004a56:	2201      	movs	r2, #1
 8004a58:	e000      	b.n	8004a5c <prvGetNextExpireTime+0x18>
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d105      	bne.n	8004a74 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a68:	4b07      	ldr	r3, [pc, #28]	@ (8004a88 <prvGetNextExpireTime+0x44>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	e001      	b.n	8004a78 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004a78:	68fb      	ldr	r3, [r7, #12]
    }
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	20000248 	.word	0x20000248

08004a8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004a94:	f7ff f8a4 	bl	8003be0 <xTaskGetTickCount>
 8004a98:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac8 <prvSampleTimeNow+0x3c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d205      	bcs.n	8004ab0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004aa4:	f000 f91e 	bl	8004ce4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	e002      	b.n	8004ab6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004ab6:	4a04      	ldr	r2, [pc, #16]	@ (8004ac8 <prvSampleTimeNow+0x3c>)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004abc:	68fb      	ldr	r3, [r7, #12]
    }
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000258 	.word	0x20000258

08004acc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d812      	bhi.n	8004b18 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	1ad2      	subs	r2, r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d302      	bcc.n	8004b06 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004b00:	2301      	movs	r3, #1
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e01b      	b.n	8004b3e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b06:	4b10      	ldr	r3, [pc, #64]	@ (8004b48 <prvInsertTimerInActiveList+0x7c>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4610      	mov	r0, r2
 8004b12:	f7fd ff76 	bl	8002a02 <vListInsert>
 8004b16:	e012      	b.n	8004b3e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d206      	bcs.n	8004b2e <prvInsertTimerInActiveList+0x62>
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d302      	bcc.n	8004b2e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	e007      	b.n	8004b3e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b2e:	4b07      	ldr	r3, [pc, #28]	@ (8004b4c <prvInsertTimerInActiveList+0x80>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3304      	adds	r3, #4
 8004b36:	4619      	mov	r1, r3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	f7fd ff62 	bl	8002a02 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004b3e:	697b      	ldr	r3, [r7, #20]
    }
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	2000024c 	.word	0x2000024c
 8004b4c:	20000248 	.word	0x20000248

08004b50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08c      	sub	sp, #48	@ 0x30
 8004b54:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b56:	e0b2      	b.n	8004cbe <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f2c0 80af 	blt.w	8004cbe <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fd ff7f 	bl	8002a74 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b76:	1d3b      	adds	r3, r7, #4
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff ff87 	bl	8004a8c <prvSampleTimeNow>
 8004b7e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b09      	cmp	r3, #9
 8004b84:	f200 8098 	bhi.w	8004cb8 <prvProcessReceivedCommands+0x168>
 8004b88:	a201      	add	r2, pc, #4	@ (adr r2, 8004b90 <prvProcessReceivedCommands+0x40>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004bb9 	.word	0x08004bb9
 8004b94:	08004bb9 	.word	0x08004bb9
 8004b98:	08004bb9 	.word	0x08004bb9
 8004b9c:	08004c2f 	.word	0x08004c2f
 8004ba0:	08004c43 	.word	0x08004c43
 8004ba4:	08004c8f 	.word	0x08004c8f
 8004ba8:	08004bb9 	.word	0x08004bb9
 8004bac:	08004bb9 	.word	0x08004bb9
 8004bb0:	08004c2f 	.word	0x08004c2f
 8004bb4:	08004c43 	.word	0x08004c43
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bbe:	f043 0301 	orr.w	r3, r3, #1
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	18d1      	adds	r1, r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a3a      	ldr	r2, [r7, #32]
 8004bd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bd8:	f7ff ff78 	bl	8004acc <prvInsertTimerInActiveList>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d06c      	beq.n	8004cbc <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004be8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d061      	beq.n	8004cbc <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	441a      	add	r2, r3
 8004c00:	2300      	movs	r3, #0
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	2300      	movs	r3, #0
 8004c06:	2100      	movs	r1, #0
 8004c08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c0a:	f7ff fe1d 	bl	8004848 <xTimerGenericCommand>
 8004c0e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d152      	bne.n	8004cbc <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	61bb      	str	r3, [r7, #24]
    }
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	e7fd      	b.n	8004c2a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004c40:	e03d      	b.n	8004cbe <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10b      	bne.n	8004c7a <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	617b      	str	r3, [r7, #20]
    }
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
 8004c78:	e7fd      	b.n	8004c76 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	18d1      	adds	r1, r2, r3
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	6a3a      	ldr	r2, [r7, #32]
 8004c86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c88:	f7ff ff20 	bl	8004acc <prvInsertTimerInActiveList>
                        break;
 8004c8c:	e017      	b.n	8004cbe <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d103      	bne.n	8004ca4 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8004c9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c9e:	f000 fc01 	bl	80054a4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004ca2:	e00c      	b.n	8004cbe <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004caa:	f023 0301 	bic.w	r3, r3, #1
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004cb6:	e002      	b.n	8004cbe <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004cb8:	bf00      	nop
 8004cba:	e000      	b.n	8004cbe <prvProcessReceivedCommands+0x16e>
                        break;
 8004cbc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cbe:	4b08      	ldr	r3, [pc, #32]	@ (8004ce0 <prvProcessReceivedCommands+0x190>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f107 0108 	add.w	r1, r7, #8
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fe f9df 	bl	800308c <xQueueReceive>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f47f af41 	bne.w	8004b58 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004cd6:	bf00      	nop
 8004cd8:	bf00      	nop
 8004cda:	3728      	adds	r7, #40	@ 0x28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000250 	.word	0x20000250

08004ce4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cea:	e049      	b.n	8004d80 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cec:	4b2e      	ldr	r3, [pc, #184]	@ (8004da8 <prvSwitchTimerLists+0xc4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8004da8 <prvSwitchTimerLists+0xc4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fd feb5 	bl	8002a74 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d02f      	beq.n	8004d80 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4413      	add	r3, r2
 8004d28:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d90e      	bls.n	8004d50 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004da8 <prvSwitchTimerLists+0xc4>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4619      	mov	r1, r3
 8004d48:	4610      	mov	r0, r2
 8004d4a:	f7fd fe5a 	bl	8002a02 <vListInsert>
 8004d4e:	e017      	b.n	8004d80 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d50:	2300      	movs	r3, #0
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	2300      	movs	r3, #0
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	2100      	movs	r1, #0
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f7ff fd74 	bl	8004848 <xTimerGenericCommand>
 8004d60:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10b      	bne.n	8004d80 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	603b      	str	r3, [r7, #0]
    }
 8004d7a:	bf00      	nop
 8004d7c:	bf00      	nop
 8004d7e:	e7fd      	b.n	8004d7c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d80:	4b09      	ldr	r3, [pc, #36]	@ (8004da8 <prvSwitchTimerLists+0xc4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1b0      	bne.n	8004cec <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004d8a:	4b07      	ldr	r3, [pc, #28]	@ (8004da8 <prvSwitchTimerLists+0xc4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004d90:	4b06      	ldr	r3, [pc, #24]	@ (8004dac <prvSwitchTimerLists+0xc8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a04      	ldr	r2, [pc, #16]	@ (8004da8 <prvSwitchTimerLists+0xc4>)
 8004d96:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004d98:	4a04      	ldr	r2, [pc, #16]	@ (8004dac <prvSwitchTimerLists+0xc8>)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	6013      	str	r3, [r2, #0]
    }
 8004d9e:	bf00      	nop
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000248 	.word	0x20000248
 8004dac:	2000024c 	.word	0x2000024c

08004db0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004db4:	f000 f962 	bl	800507c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004db8:	4b12      	ldr	r3, [pc, #72]	@ (8004e04 <prvCheckForValidListAndQueue+0x54>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d11d      	bne.n	8004dfc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004dc0:	4811      	ldr	r0, [pc, #68]	@ (8004e08 <prvCheckForValidListAndQueue+0x58>)
 8004dc2:	f7fd fdcd 	bl	8002960 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004dc6:	4811      	ldr	r0, [pc, #68]	@ (8004e0c <prvCheckForValidListAndQueue+0x5c>)
 8004dc8:	f7fd fdca 	bl	8002960 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004dcc:	4b10      	ldr	r3, [pc, #64]	@ (8004e10 <prvCheckForValidListAndQueue+0x60>)
 8004dce:	4a0e      	ldr	r2, [pc, #56]	@ (8004e08 <prvCheckForValidListAndQueue+0x58>)
 8004dd0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004dd2:	4b10      	ldr	r3, [pc, #64]	@ (8004e14 <prvCheckForValidListAndQueue+0x64>)
 8004dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8004e0c <prvCheckForValidListAndQueue+0x5c>)
 8004dd6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004dd8:	2200      	movs	r2, #0
 8004dda:	210c      	movs	r1, #12
 8004ddc:	200a      	movs	r0, #10
 8004dde:	f7fd fedd 	bl	8002b9c <xQueueGenericCreate>
 8004de2:	4603      	mov	r3, r0
 8004de4:	4a07      	ldr	r2, [pc, #28]	@ (8004e04 <prvCheckForValidListAndQueue+0x54>)
 8004de6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004de8:	4b06      	ldr	r3, [pc, #24]	@ (8004e04 <prvCheckForValidListAndQueue+0x54>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d005      	beq.n	8004dfc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004df0:	4b04      	ldr	r3, [pc, #16]	@ (8004e04 <prvCheckForValidListAndQueue+0x54>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4908      	ldr	r1, [pc, #32]	@ (8004e18 <prvCheckForValidListAndQueue+0x68>)
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fe fb6c 	bl	80034d4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004dfc:	f000 f970 	bl	80050e0 <vPortExitCritical>
    }
 8004e00:	bf00      	nop
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20000250 	.word	0x20000250
 8004e08:	20000220 	.word	0x20000220
 8004e0c:	20000234 	.word	0x20000234
 8004e10:	20000248 	.word	0x20000248
 8004e14:	2000024c 	.word	0x2000024c
 8004e18:	08008398 	.word	0x08008398

08004e1c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3b04      	subs	r3, #4
 8004e2c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3b04      	subs	r3, #4
 8004e3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f023 0201 	bic.w	r2, r3, #1
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3b04      	subs	r3, #4
 8004e4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004e80 <pxPortInitialiseStack+0x64>)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3b14      	subs	r3, #20
 8004e56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3b04      	subs	r3, #4
 8004e62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f06f 0202 	mvn.w	r2, #2
 8004e6a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3b20      	subs	r3, #32
 8004e70:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004e72:	68fb      	ldr	r3, [r7, #12]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	08004e85 	.word	0x08004e85

08004e84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004e8e:	4b13      	ldr	r3, [pc, #76]	@ (8004edc <prvTaskExitError+0x58>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e96:	d00b      	beq.n	8004eb0 <prvTaskExitError+0x2c>
        __asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	60fb      	str	r3, [r7, #12]
    }
 8004eaa:	bf00      	nop
 8004eac:	bf00      	nop
 8004eae:	e7fd      	b.n	8004eac <prvTaskExitError+0x28>
        __asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	60bb      	str	r3, [r7, #8]
    }
 8004ec2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004ec4:	bf00      	nop
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0fc      	beq.n	8004ec6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000010 	.word	0x20000010

08004ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004ee0:	4b07      	ldr	r3, [pc, #28]	@ (8004f00 <pxCurrentTCBConst2>)
 8004ee2:	6819      	ldr	r1, [r3, #0]
 8004ee4:	6808      	ldr	r0, [r1, #0]
 8004ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eea:	f380 8809 	msr	PSP, r0
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f04f 0000 	mov.w	r0, #0
 8004ef6:	f380 8811 	msr	BASEPRI, r0
 8004efa:	4770      	bx	lr
 8004efc:	f3af 8000 	nop.w

08004f00 <pxCurrentTCBConst2>:
 8004f00:	2000011c 	.word	0x2000011c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004f04:	bf00      	nop
 8004f06:	bf00      	nop

08004f08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004f08:	4808      	ldr	r0, [pc, #32]	@ (8004f2c <prvPortStartFirstTask+0x24>)
 8004f0a:	6800      	ldr	r0, [r0, #0]
 8004f0c:	6800      	ldr	r0, [r0, #0]
 8004f0e:	f380 8808 	msr	MSP, r0
 8004f12:	f04f 0000 	mov.w	r0, #0
 8004f16:	f380 8814 	msr	CONTROL, r0
 8004f1a:	b662      	cpsie	i
 8004f1c:	b661      	cpsie	f
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	df00      	svc	0
 8004f28:	bf00      	nop
 8004f2a:	0000      	.short	0x0000
 8004f2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004f30:	bf00      	nop
 8004f32:	bf00      	nop

08004f34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f3a:	4b47      	ldr	r3, [pc, #284]	@ (8005058 <xPortStartScheduler+0x124>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a47      	ldr	r2, [pc, #284]	@ (800505c <xPortStartScheduler+0x128>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d10b      	bne.n	8004f5c <xPortStartScheduler+0x28>
        __asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	613b      	str	r3, [r7, #16]
    }
 8004f56:	bf00      	nop
 8004f58:	bf00      	nop
 8004f5a:	e7fd      	b.n	8004f58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f5c:	4b3e      	ldr	r3, [pc, #248]	@ (8005058 <xPortStartScheduler+0x124>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a3f      	ldr	r2, [pc, #252]	@ (8005060 <xPortStartScheduler+0x12c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d10b      	bne.n	8004f7e <xPortStartScheduler+0x4a>
        __asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	60fb      	str	r3, [r7, #12]
    }
 8004f78:	bf00      	nop
 8004f7a:	bf00      	nop
 8004f7c:	e7fd      	b.n	8004f7a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f7e:	4b39      	ldr	r3, [pc, #228]	@ (8005064 <xPortStartScheduler+0x130>)
 8004f80:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	22ff      	movs	r2, #255	@ 0xff
 8004f8e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	4b31      	ldr	r3, [pc, #196]	@ (8005068 <xPortStartScheduler+0x134>)
 8004fa4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fa6:	4b31      	ldr	r3, [pc, #196]	@ (800506c <xPortStartScheduler+0x138>)
 8004fa8:	2207      	movs	r2, #7
 8004faa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fac:	e009      	b.n	8004fc2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004fae:	4b2f      	ldr	r3, [pc, #188]	@ (800506c <xPortStartScheduler+0x138>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	4a2d      	ldr	r2, [pc, #180]	@ (800506c <xPortStartScheduler+0x138>)
 8004fb6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fca:	2b80      	cmp	r3, #128	@ 0x80
 8004fcc:	d0ef      	beq.n	8004fae <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fce:	4b27      	ldr	r3, [pc, #156]	@ (800506c <xPortStartScheduler+0x138>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f1c3 0307 	rsb	r3, r3, #7
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d00b      	beq.n	8004ff2 <xPortStartScheduler+0xbe>
        __asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	60bb      	str	r3, [r7, #8]
    }
 8004fec:	bf00      	nop
 8004fee:	bf00      	nop
 8004ff0:	e7fd      	b.n	8004fee <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800506c <xPortStartScheduler+0x138>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800506c <xPortStartScheduler+0x138>)
 8004ffa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800506c <xPortStartScheduler+0x138>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005004:	4a19      	ldr	r2, [pc, #100]	@ (800506c <xPortStartScheduler+0x138>)
 8005006:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	b2da      	uxtb	r2, r3
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005010:	4b17      	ldr	r3, [pc, #92]	@ (8005070 <xPortStartScheduler+0x13c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a16      	ldr	r2, [pc, #88]	@ (8005070 <xPortStartScheduler+0x13c>)
 8005016:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800501a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800501c:	4b14      	ldr	r3, [pc, #80]	@ (8005070 <xPortStartScheduler+0x13c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a13      	ldr	r2, [pc, #76]	@ (8005070 <xPortStartScheduler+0x13c>)
 8005022:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005026:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005028:	f000 f8e8 	bl	80051fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800502c:	4b11      	ldr	r3, [pc, #68]	@ (8005074 <xPortStartScheduler+0x140>)
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005032:	f000 f907 	bl	8005244 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005036:	4b10      	ldr	r3, [pc, #64]	@ (8005078 <xPortStartScheduler+0x144>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a0f      	ldr	r2, [pc, #60]	@ (8005078 <xPortStartScheduler+0x144>)
 800503c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005040:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005042:	f7ff ff61 	bl	8004f08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005046:	f7fe feab 	bl	8003da0 <vTaskSwitchContext>
    prvTaskExitError();
 800504a:	f7ff ff1b 	bl	8004e84 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	e000ed00 	.word	0xe000ed00
 800505c:	410fc271 	.word	0x410fc271
 8005060:	410fc270 	.word	0x410fc270
 8005064:	e000e400 	.word	0xe000e400
 8005068:	2000025c 	.word	0x2000025c
 800506c:	20000260 	.word	0x20000260
 8005070:	e000ed20 	.word	0xe000ed20
 8005074:	20000010 	.word	0x20000010
 8005078:	e000ef34 	.word	0xe000ef34

0800507c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
        __asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	607b      	str	r3, [r7, #4]
    }
 8005094:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005096:	4b10      	ldr	r3, [pc, #64]	@ (80050d8 <vPortEnterCritical+0x5c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3301      	adds	r3, #1
 800509c:	4a0e      	ldr	r2, [pc, #56]	@ (80050d8 <vPortEnterCritical+0x5c>)
 800509e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80050a0:	4b0d      	ldr	r3, [pc, #52]	@ (80050d8 <vPortEnterCritical+0x5c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d110      	bne.n	80050ca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050a8:	4b0c      	ldr	r3, [pc, #48]	@ (80050dc <vPortEnterCritical+0x60>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00b      	beq.n	80050ca <vPortEnterCritical+0x4e>
        __asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	603b      	str	r3, [r7, #0]
    }
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	e7fd      	b.n	80050c6 <vPortEnterCritical+0x4a>
    }
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20000010 	.word	0x20000010
 80050dc:	e000ed04 	.word	0xe000ed04

080050e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80050e6:	4b12      	ldr	r3, [pc, #72]	@ (8005130 <vPortExitCritical+0x50>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10b      	bne.n	8005106 <vPortExitCritical+0x26>
        __asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	607b      	str	r3, [r7, #4]
    }
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	e7fd      	b.n	8005102 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005106:	4b0a      	ldr	r3, [pc, #40]	@ (8005130 <vPortExitCritical+0x50>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3b01      	subs	r3, #1
 800510c:	4a08      	ldr	r2, [pc, #32]	@ (8005130 <vPortExitCritical+0x50>)
 800510e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005110:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <vPortExitCritical+0x50>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d105      	bne.n	8005124 <vPortExitCritical+0x44>
 8005118:	2300      	movs	r3, #0
 800511a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	f383 8811 	msr	BASEPRI, r3
    }
 8005122:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	20000010 	.word	0x20000010
	...

08005140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005140:	f3ef 8009 	mrs	r0, PSP
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	4b15      	ldr	r3, [pc, #84]	@ (80051a0 <pxCurrentTCBConst>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	f01e 0f10 	tst.w	lr, #16
 8005150:	bf08      	it	eq
 8005152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515a:	6010      	str	r0, [r2, #0]
 800515c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005160:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005164:	f380 8811 	msr	BASEPRI, r0
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f7fe fe16 	bl	8003da0 <vTaskSwitchContext>
 8005174:	f04f 0000 	mov.w	r0, #0
 8005178:	f380 8811 	msr	BASEPRI, r0
 800517c:	bc09      	pop	{r0, r3}
 800517e:	6819      	ldr	r1, [r3, #0]
 8005180:	6808      	ldr	r0, [r1, #0]
 8005182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005186:	f01e 0f10 	tst.w	lr, #16
 800518a:	bf08      	it	eq
 800518c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005190:	f380 8809 	msr	PSP, r0
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	f3af 8000 	nop.w

080051a0 <pxCurrentTCBConst>:
 80051a0:	2000011c 	.word	0x2000011c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop

080051a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
        __asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	607b      	str	r3, [r7, #4]
    }
 80051c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80051c2:	f002 fcf3 	bl	8007bac <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80051c6:	f7fe fd2d 	bl	8003c24 <xTaskIncrementTick>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d006      	beq.n	80051de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80051d0:	f002 fd4a 	bl	8007c68 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051d4:	4b08      	ldr	r3, [pc, #32]	@ (80051f8 <SysTick_Handler+0x50>)
 80051d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	e001      	b.n	80051e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80051de:	f002 fd27 	bl	8007c30 <SEGGER_SYSVIEW_RecordExitISR>
 80051e2:	2300      	movs	r3, #0
 80051e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	f383 8811 	msr	BASEPRI, r3
    }
 80051ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80051ee:	bf00      	nop
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	e000ed04 	.word	0xe000ed04

080051fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005200:	4b0b      	ldr	r3, [pc, #44]	@ (8005230 <vPortSetupTimerInterrupt+0x34>)
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005206:	4b0b      	ldr	r3, [pc, #44]	@ (8005234 <vPortSetupTimerInterrupt+0x38>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800520c:	4b0a      	ldr	r3, [pc, #40]	@ (8005238 <vPortSetupTimerInterrupt+0x3c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a0a      	ldr	r2, [pc, #40]	@ (800523c <vPortSetupTimerInterrupt+0x40>)
 8005212:	fba2 2303 	umull	r2, r3, r2, r3
 8005216:	099b      	lsrs	r3, r3, #6
 8005218:	4a09      	ldr	r2, [pc, #36]	@ (8005240 <vPortSetupTimerInterrupt+0x44>)
 800521a:	3b01      	subs	r3, #1
 800521c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800521e:	4b04      	ldr	r3, [pc, #16]	@ (8005230 <vPortSetupTimerInterrupt+0x34>)
 8005220:	2207      	movs	r2, #7
 8005222:	601a      	str	r2, [r3, #0]
}
 8005224:	bf00      	nop
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	e000e010 	.word	0xe000e010
 8005234:	e000e018 	.word	0xe000e018
 8005238:	20000000 	.word	0x20000000
 800523c:	10624dd3 	.word	0x10624dd3
 8005240:	e000e014 	.word	0xe000e014

08005244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005244:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005254 <vPortEnableVFP+0x10>
 8005248:	6801      	ldr	r1, [r0, #0]
 800524a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800524e:	6001      	str	r1, [r0, #0]
 8005250:	4770      	bx	lr
 8005252:	0000      	.short	0x0000
 8005254:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005258:	bf00      	nop
 800525a:	bf00      	nop

0800525c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005262:	f3ef 8305 	mrs	r3, IPSR
 8005266:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b0f      	cmp	r3, #15
 800526c:	d915      	bls.n	800529a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800526e:	4a18      	ldr	r2, [pc, #96]	@ (80052d0 <vPortValidateInterruptPriority+0x74>)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4413      	add	r3, r2
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005278:	4b16      	ldr	r3, [pc, #88]	@ (80052d4 <vPortValidateInterruptPriority+0x78>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	7afa      	ldrb	r2, [r7, #11]
 800527e:	429a      	cmp	r2, r3
 8005280:	d20b      	bcs.n	800529a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	607b      	str	r3, [r7, #4]
    }
 8005294:	bf00      	nop
 8005296:	bf00      	nop
 8005298:	e7fd      	b.n	8005296 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800529a:	4b0f      	ldr	r3, [pc, #60]	@ (80052d8 <vPortValidateInterruptPriority+0x7c>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052a2:	4b0e      	ldr	r3, [pc, #56]	@ (80052dc <vPortValidateInterruptPriority+0x80>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d90b      	bls.n	80052c2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80052aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	603b      	str	r3, [r7, #0]
    }
 80052bc:	bf00      	nop
 80052be:	bf00      	nop
 80052c0:	e7fd      	b.n	80052be <vPortValidateInterruptPriority+0x62>
    }
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	e000e3f0 	.word	0xe000e3f0
 80052d4:	2000025c 	.word	0x2000025c
 80052d8:	e000ed0c 	.word	0xe000ed0c
 80052dc:	20000260 	.word	0x20000260

080052e0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08a      	sub	sp, #40	@ 0x28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80052ec:	f7fe fbc8 	bl	8003a80 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80052f0:	4b66      	ldr	r3, [pc, #408]	@ (800548c <pvPortMalloc+0x1ac>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80052f8:	f000 f938 	bl	800556c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052fc:	4b64      	ldr	r3, [pc, #400]	@ (8005490 <pvPortMalloc+0x1b0>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4013      	ands	r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	f040 80a9 	bne.w	800545c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d02e      	beq.n	800536e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005310:	2208      	movs	r2, #8
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	429a      	cmp	r2, r3
 800531a:	d228      	bcs.n	800536e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800531c:	2208      	movs	r2, #8
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4413      	add	r3, r2
 8005322:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	2b00      	cmp	r3, #0
 800532c:	d022      	beq.n	8005374 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f023 0307 	bic.w	r3, r3, #7
 8005334:	3308      	adds	r3, #8
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d215      	bcs.n	8005368 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f023 0307 	bic.w	r3, r3, #7
 8005342:	3308      	adds	r3, #8
 8005344:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	2b00      	cmp	r3, #0
 800534e:	d011      	beq.n	8005374 <pvPortMalloc+0x94>
        __asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	617b      	str	r3, [r7, #20]
    }
 8005362:	bf00      	nop
 8005364:	bf00      	nop
 8005366:	e7fd      	b.n	8005364 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800536c:	e002      	b.n	8005374 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	e000      	b.n	8005376 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005374:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d06f      	beq.n	800545c <pvPortMalloc+0x17c>
 800537c:	4b45      	ldr	r3, [pc, #276]	@ (8005494 <pvPortMalloc+0x1b4>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	429a      	cmp	r2, r3
 8005384:	d86a      	bhi.n	800545c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005386:	4b44      	ldr	r3, [pc, #272]	@ (8005498 <pvPortMalloc+0x1b8>)
 8005388:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800538a:	4b43      	ldr	r3, [pc, #268]	@ (8005498 <pvPortMalloc+0x1b8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005390:	e004      	b.n	800539c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800539c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d903      	bls.n	80053ae <pvPortMalloc+0xce>
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1f1      	bne.n	8005392 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80053ae:	4b37      	ldr	r3, [pc, #220]	@ (800548c <pvPortMalloc+0x1ac>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d051      	beq.n	800545c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2208      	movs	r2, #8
 80053be:	4413      	add	r3, r2
 80053c0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	1ad2      	subs	r2, r2, r3
 80053d2:	2308      	movs	r3, #8
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d920      	bls.n	800541c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4413      	add	r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00b      	beq.n	8005404 <pvPortMalloc+0x124>
        __asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	613b      	str	r3, [r7, #16]
    }
 80053fe:	bf00      	nop
 8005400:	bf00      	nop
 8005402:	e7fd      	b.n	8005400 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	1ad2      	subs	r2, r2, r3
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005416:	69b8      	ldr	r0, [r7, #24]
 8005418:	f000 f90a 	bl	8005630 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800541c:	4b1d      	ldr	r3, [pc, #116]	@ (8005494 <pvPortMalloc+0x1b4>)
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	4a1b      	ldr	r2, [pc, #108]	@ (8005494 <pvPortMalloc+0x1b4>)
 8005428:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800542a:	4b1a      	ldr	r3, [pc, #104]	@ (8005494 <pvPortMalloc+0x1b4>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	4b1b      	ldr	r3, [pc, #108]	@ (800549c <pvPortMalloc+0x1bc>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d203      	bcs.n	800543e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005436:	4b17      	ldr	r3, [pc, #92]	@ (8005494 <pvPortMalloc+0x1b4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a18      	ldr	r2, [pc, #96]	@ (800549c <pvPortMalloc+0x1bc>)
 800543c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	4b13      	ldr	r3, [pc, #76]	@ (8005490 <pvPortMalloc+0x1b0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	431a      	orrs	r2, r3
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005452:	4b13      	ldr	r3, [pc, #76]	@ (80054a0 <pvPortMalloc+0x1c0>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3301      	adds	r3, #1
 8005458:	4a11      	ldr	r2, [pc, #68]	@ (80054a0 <pvPortMalloc+0x1c0>)
 800545a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800545c:	f7fe fb1e 	bl	8003a9c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00b      	beq.n	8005482 <pvPortMalloc+0x1a2>
        __asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	60fb      	str	r3, [r7, #12]
    }
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	e7fd      	b.n	800547e <pvPortMalloc+0x19e>
    return pvReturn;
 8005482:	69fb      	ldr	r3, [r7, #28]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3728      	adds	r7, #40	@ 0x28
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20012e6c 	.word	0x20012e6c
 8005490:	20012e80 	.word	0x20012e80
 8005494:	20012e70 	.word	0x20012e70
 8005498:	20012e64 	.word	0x20012e64
 800549c:	20012e74 	.word	0x20012e74
 80054a0:	20012e78 	.word	0x20012e78

080054a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d04f      	beq.n	8005556 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80054b6:	2308      	movs	r3, #8
 80054b8:	425b      	negs	r3, r3
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4413      	add	r3, r2
 80054be:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	4b25      	ldr	r3, [pc, #148]	@ (8005560 <vPortFree+0xbc>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4013      	ands	r3, r2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10b      	bne.n	80054ea <vPortFree+0x46>
        __asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	60fb      	str	r3, [r7, #12]
    }
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	e7fd      	b.n	80054e6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00b      	beq.n	800550a <vPortFree+0x66>
        __asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	60bb      	str	r3, [r7, #8]
    }
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	e7fd      	b.n	8005506 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	4b14      	ldr	r3, [pc, #80]	@ (8005560 <vPortFree+0xbc>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4013      	ands	r3, r2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01e      	beq.n	8005556 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d11a      	bne.n	8005556 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	4b0e      	ldr	r3, [pc, #56]	@ (8005560 <vPortFree+0xbc>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	43db      	mvns	r3, r3
 800552a:	401a      	ands	r2, r3
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005530:	f7fe faa6 	bl	8003a80 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	4b0a      	ldr	r3, [pc, #40]	@ (8005564 <vPortFree+0xc0>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4413      	add	r3, r2
 800553e:	4a09      	ldr	r2, [pc, #36]	@ (8005564 <vPortFree+0xc0>)
 8005540:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005542:	6938      	ldr	r0, [r7, #16]
 8005544:	f000 f874 	bl	8005630 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005548:	4b07      	ldr	r3, [pc, #28]	@ (8005568 <vPortFree+0xc4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3301      	adds	r3, #1
 800554e:	4a06      	ldr	r2, [pc, #24]	@ (8005568 <vPortFree+0xc4>)
 8005550:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005552:	f7fe faa3 	bl	8003a9c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005556:	bf00      	nop
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20012e80 	.word	0x20012e80
 8005564:	20012e70 	.word	0x20012e70
 8005568:	20012e7c 	.word	0x20012e7c

0800556c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005572:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8005576:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005578:	4b27      	ldr	r3, [pc, #156]	@ (8005618 <prvHeapInit+0xac>)
 800557a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00c      	beq.n	80055a0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3307      	adds	r3, #7
 800558a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0307 	bic.w	r3, r3, #7
 8005592:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	4a1f      	ldr	r2, [pc, #124]	@ (8005618 <prvHeapInit+0xac>)
 800559c:	4413      	add	r3, r2
 800559e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055a4:	4a1d      	ldr	r2, [pc, #116]	@ (800561c <prvHeapInit+0xb0>)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80055aa:	4b1c      	ldr	r3, [pc, #112]	@ (800561c <prvHeapInit+0xb0>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	4413      	add	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80055b8:	2208      	movs	r2, #8
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0307 	bic.w	r3, r3, #7
 80055c6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4a15      	ldr	r2, [pc, #84]	@ (8005620 <prvHeapInit+0xb4>)
 80055cc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80055ce:	4b14      	ldr	r3, [pc, #80]	@ (8005620 <prvHeapInit+0xb4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2200      	movs	r2, #0
 80055d4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80055d6:	4b12      	ldr	r3, [pc, #72]	@ (8005620 <prvHeapInit+0xb4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	1ad2      	subs	r2, r2, r3
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005620 <prvHeapInit+0xb4>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005624 <prvHeapInit+0xb8>)
 80055fa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4a09      	ldr	r2, [pc, #36]	@ (8005628 <prvHeapInit+0xbc>)
 8005602:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005604:	4b09      	ldr	r3, [pc, #36]	@ (800562c <prvHeapInit+0xc0>)
 8005606:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800560a:	601a      	str	r2, [r3, #0]
}
 800560c:	bf00      	nop
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	20000264 	.word	0x20000264
 800561c:	20012e64 	.word	0x20012e64
 8005620:	20012e6c 	.word	0x20012e6c
 8005624:	20012e74 	.word	0x20012e74
 8005628:	20012e70 	.word	0x20012e70
 800562c:	20012e80 	.word	0x20012e80

08005630 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005638:	4b28      	ldr	r3, [pc, #160]	@ (80056dc <prvInsertBlockIntoFreeList+0xac>)
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	e002      	b.n	8005644 <prvInsertBlockIntoFreeList+0x14>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	429a      	cmp	r2, r3
 800564c:	d8f7      	bhi.n	800563e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	4413      	add	r3, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	429a      	cmp	r2, r3
 800565e:	d108      	bne.n	8005672 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	441a      	add	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	441a      	add	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	429a      	cmp	r2, r3
 8005684:	d118      	bne.n	80056b8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4b15      	ldr	r3, [pc, #84]	@ (80056e0 <prvInsertBlockIntoFreeList+0xb0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d00d      	beq.n	80056ae <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	441a      	add	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e008      	b.n	80056c0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056ae:	4b0c      	ldr	r3, [pc, #48]	@ (80056e0 <prvInsertBlockIntoFreeList+0xb0>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	e003      	b.n	80056c0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d002      	beq.n	80056ce <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80056ce:	bf00      	nop
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	20012e64 	.word	0x20012e64
 80056e0:	20012e6c 	.word	0x20012e6c

080056e4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80056e8:	4803      	ldr	r0, [pc, #12]	@ (80056f8 <_cbSendSystemDesc+0x14>)
 80056ea:	f002 fa09 	bl	8007b00 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80056ee:	4803      	ldr	r0, [pc, #12]	@ (80056fc <_cbSendSystemDesc+0x18>)
 80056f0:	f002 fa06 	bl	8007b00 <SEGGER_SYSVIEW_SendSysDesc>
}
 80056f4:	bf00      	nop
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	080083a0 	.word	0x080083a0
 80056fc:	080083e0 	.word	0x080083e0

08005700 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005704:	4b06      	ldr	r3, [pc, #24]	@ (8005720 <SEGGER_SYSVIEW_Conf+0x20>)
 8005706:	6818      	ldr	r0, [r3, #0]
 8005708:	4b05      	ldr	r3, [pc, #20]	@ (8005720 <SEGGER_SYSVIEW_Conf+0x20>)
 800570a:	6819      	ldr	r1, [r3, #0]
 800570c:	4b05      	ldr	r3, [pc, #20]	@ (8005724 <SEGGER_SYSVIEW_Conf+0x24>)
 800570e:	4a06      	ldr	r2, [pc, #24]	@ (8005728 <SEGGER_SYSVIEW_Conf+0x28>)
 8005710:	f001 fcc4 	bl	800709c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005714:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8005718:	f001 fd04 	bl	8007124 <SEGGER_SYSVIEW_SetRAMBase>
}
 800571c:	bf00      	nop
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20000000 	.word	0x20000000
 8005724:	080056e5 	.word	0x080056e5
 8005728:	08008480 	.word	0x08008480

0800572c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800572c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800572e:	b085      	sub	sp, #20
 8005730:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005732:	2300      	movs	r3, #0
 8005734:	607b      	str	r3, [r7, #4]
 8005736:	e033      	b.n	80057a0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005738:	491e      	ldr	r1, [pc, #120]	@ (80057b4 <_cbSendTaskList+0x88>)
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	491a      	ldr	r1, [pc, #104]	@ (80057b4 <_cbSendTaskList+0x88>)
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	3304      	adds	r3, #4
 8005758:	6819      	ldr	r1, [r3, #0]
 800575a:	4c16      	ldr	r4, [pc, #88]	@ (80057b4 <_cbSendTaskList+0x88>)
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4423      	add	r3, r4
 8005768:	3308      	adds	r3, #8
 800576a:	681c      	ldr	r4, [r3, #0]
 800576c:	4d11      	ldr	r5, [pc, #68]	@ (80057b4 <_cbSendTaskList+0x88>)
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	4613      	mov	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	442b      	add	r3, r5
 800577a:	330c      	adds	r3, #12
 800577c:	681d      	ldr	r5, [r3, #0]
 800577e:	4e0d      	ldr	r6, [pc, #52]	@ (80057b4 <_cbSendTaskList+0x88>)
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4433      	add	r3, r6
 800578c:	3310      	adds	r3, #16
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	462b      	mov	r3, r5
 8005794:	4622      	mov	r2, r4
 8005796:	f000 f979 	bl	8005a8c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3301      	adds	r3, #1
 800579e:	607b      	str	r3, [r7, #4]
 80057a0:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <_cbSendTaskList+0x8c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d3c6      	bcc.n	8005738 <_cbSendTaskList+0xc>
  }
}
 80057aa:	bf00      	nop
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057b4:	20012e84 	.word	0x20012e84
 80057b8:	20012f24 	.word	0x20012f24

080057bc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80057bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057c0:	b082      	sub	sp, #8
 80057c2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80057c4:	f7fe fa1c 	bl	8003c00 <xTaskGetTickCountFromISR>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2200      	movs	r2, #0
 80057cc:	469a      	mov	sl, r3
 80057ce:	4693      	mov	fp, r2
 80057d0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80057d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	f04f 0a00 	mov.w	sl, #0
 80057e0:	f04f 0b00 	mov.w	fp, #0
 80057e4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80057e8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80057ec:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80057f0:	4652      	mov	r2, sl
 80057f2:	465b      	mov	r3, fp
 80057f4:	1a14      	subs	r4, r2, r0
 80057f6:	eb63 0501 	sbc.w	r5, r3, r1
 80057fa:	f04f 0200 	mov.w	r2, #0
 80057fe:	f04f 0300 	mov.w	r3, #0
 8005802:	00ab      	lsls	r3, r5, #2
 8005804:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005808:	00a2      	lsls	r2, r4, #2
 800580a:	4614      	mov	r4, r2
 800580c:	461d      	mov	r5, r3
 800580e:	eb14 0800 	adds.w	r8, r4, r0
 8005812:	eb45 0901 	adc.w	r9, r5, r1
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800582a:	4690      	mov	r8, r2
 800582c:	4699      	mov	r9, r3
 800582e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005832:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005836:	4610      	mov	r0, r2
 8005838:	4619      	mov	r1, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005844 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
 8005850:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005852:	2205      	movs	r2, #5
 8005854:	492b      	ldr	r1, [pc, #172]	@ (8005904 <SYSVIEW_AddTask+0xc0>)
 8005856:	68b8      	ldr	r0, [r7, #8]
 8005858:	f002 fcee 	bl	8008238 <memcmp>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d04b      	beq.n	80058fa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005862:	4b29      	ldr	r3, [pc, #164]	@ (8005908 <SYSVIEW_AddTask+0xc4>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b07      	cmp	r3, #7
 8005868:	d903      	bls.n	8005872 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800586a:	4828      	ldr	r0, [pc, #160]	@ (800590c <SYSVIEW_AddTask+0xc8>)
 800586c:	f002 fc5a 	bl	8008124 <SEGGER_SYSVIEW_Warn>
    return;
 8005870:	e044      	b.n	80058fc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005872:	4b25      	ldr	r3, [pc, #148]	@ (8005908 <SYSVIEW_AddTask+0xc4>)
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4926      	ldr	r1, [pc, #152]	@ (8005910 <SYSVIEW_AddTask+0xcc>)
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005886:	4b20      	ldr	r3, [pc, #128]	@ (8005908 <SYSVIEW_AddTask+0xc4>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	4921      	ldr	r1, [pc, #132]	@ (8005910 <SYSVIEW_AddTask+0xcc>)
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	3304      	adds	r3, #4
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800589c:	4b1a      	ldr	r3, [pc, #104]	@ (8005908 <SYSVIEW_AddTask+0xc4>)
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	491b      	ldr	r1, [pc, #108]	@ (8005910 <SYSVIEW_AddTask+0xcc>)
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	440b      	add	r3, r1
 80058ac:	3308      	adds	r3, #8
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80058b2:	4b15      	ldr	r3, [pc, #84]	@ (8005908 <SYSVIEW_AddTask+0xc4>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	4916      	ldr	r1, [pc, #88]	@ (8005910 <SYSVIEW_AddTask+0xcc>)
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	440b      	add	r3, r1
 80058c2:	330c      	adds	r3, #12
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80058c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005908 <SYSVIEW_AddTask+0xc4>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4910      	ldr	r1, [pc, #64]	@ (8005910 <SYSVIEW_AddTask+0xcc>)
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	440b      	add	r3, r1
 80058d8:	3310      	adds	r3, #16
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80058de:	4b0a      	ldr	r3, [pc, #40]	@ (8005908 <SYSVIEW_AddTask+0xc4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3301      	adds	r3, #1
 80058e4:	4a08      	ldr	r2, [pc, #32]	@ (8005908 <SYSVIEW_AddTask+0xc4>)
 80058e6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f8ca 	bl	8005a8c <SYSVIEW_SendTaskInfo>
 80058f8:	e000      	b.n	80058fc <SYSVIEW_AddTask+0xb8>
    return;
 80058fa:	bf00      	nop

}
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	080083f0 	.word	0x080083f0
 8005908:	20012f24 	.word	0x20012f24
 800590c:	080083f8 	.word	0x080083f8
 8005910:	20012e84 	.word	0x20012e84

08005914 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800591c:	4b59      	ldr	r3, [pc, #356]	@ (8005a84 <SYSVIEW_DeleteTask+0x170>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 80ab 	beq.w	8005a7c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	e00d      	b.n	8005948 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800592c:	4956      	ldr	r1, [pc, #344]	@ (8005a88 <SYSVIEW_DeleteTask+0x174>)
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	429a      	cmp	r2, r3
 8005940:	d008      	beq.n	8005954 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3301      	adds	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	4b4e      	ldr	r3, [pc, #312]	@ (8005a84 <SYSVIEW_DeleteTask+0x170>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	429a      	cmp	r2, r3
 8005950:	d3ec      	bcc.n	800592c <SYSVIEW_DeleteTask+0x18>
 8005952:	e000      	b.n	8005956 <SYSVIEW_DeleteTask+0x42>
      break;
 8005954:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8005956:	4b4b      	ldr	r3, [pc, #300]	@ (8005a84 <SYSVIEW_DeleteTask+0x170>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3b01      	subs	r3, #1
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	429a      	cmp	r2, r3
 8005960:	d111      	bne.n	8005986 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4a46      	ldr	r2, [pc, #280]	@ (8005a88 <SYSVIEW_DeleteTask+0x174>)
 800596e:	4413      	add	r3, r2
 8005970:	2214      	movs	r2, #20
 8005972:	2100      	movs	r1, #0
 8005974:	4618      	mov	r0, r3
 8005976:	f002 fc6f 	bl	8008258 <memset>
    _NumTasks--;
 800597a:	4b42      	ldr	r3, [pc, #264]	@ (8005a84 <SYSVIEW_DeleteTask+0x170>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3b01      	subs	r3, #1
 8005980:	4a40      	ldr	r2, [pc, #256]	@ (8005a84 <SYSVIEW_DeleteTask+0x170>)
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	e07b      	b.n	8005a7e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8005986:	4b3f      	ldr	r3, [pc, #252]	@ (8005a84 <SYSVIEW_DeleteTask+0x170>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	429a      	cmp	r2, r3
 800598e:	d276      	bcs.n	8005a7e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005990:	4b3c      	ldr	r3, [pc, #240]	@ (8005a84 <SYSVIEW_DeleteTask+0x170>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	1e5a      	subs	r2, r3, #1
 8005996:	493c      	ldr	r1, [pc, #240]	@ (8005a88 <SYSVIEW_DeleteTask+0x174>)
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	6819      	ldr	r1, [r3, #0]
 80059a4:	4838      	ldr	r0, [pc, #224]	@ (8005a88 <SYSVIEW_DeleteTask+0x174>)
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4403      	add	r3, r0
 80059b2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80059b4:	4b33      	ldr	r3, [pc, #204]	@ (8005a84 <SYSVIEW_DeleteTask+0x170>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	1e5a      	subs	r2, r3, #1
 80059ba:	4933      	ldr	r1, [pc, #204]	@ (8005a88 <SYSVIEW_DeleteTask+0x174>)
 80059bc:	4613      	mov	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	440b      	add	r3, r1
 80059c6:	3304      	adds	r3, #4
 80059c8:	6819      	ldr	r1, [r3, #0]
 80059ca:	482f      	ldr	r0, [pc, #188]	@ (8005a88 <SYSVIEW_DeleteTask+0x174>)
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4403      	add	r3, r0
 80059d8:	3304      	adds	r3, #4
 80059da:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80059dc:	4b29      	ldr	r3, [pc, #164]	@ (8005a84 <SYSVIEW_DeleteTask+0x170>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	1e5a      	subs	r2, r3, #1
 80059e2:	4929      	ldr	r1, [pc, #164]	@ (8005a88 <SYSVIEW_DeleteTask+0x174>)
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	3308      	adds	r3, #8
 80059f0:	6819      	ldr	r1, [r3, #0]
 80059f2:	4825      	ldr	r0, [pc, #148]	@ (8005a88 <SYSVIEW_DeleteTask+0x174>)
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4403      	add	r3, r0
 8005a00:	3308      	adds	r3, #8
 8005a02:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8005a04:	4b1f      	ldr	r3, [pc, #124]	@ (8005a84 <SYSVIEW_DeleteTask+0x170>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	1e5a      	subs	r2, r3, #1
 8005a0a:	491f      	ldr	r1, [pc, #124]	@ (8005a88 <SYSVIEW_DeleteTask+0x174>)
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	330c      	adds	r3, #12
 8005a18:	6819      	ldr	r1, [r3, #0]
 8005a1a:	481b      	ldr	r0, [pc, #108]	@ (8005a88 <SYSVIEW_DeleteTask+0x174>)
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4403      	add	r3, r0
 8005a28:	330c      	adds	r3, #12
 8005a2a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8005a2c:	4b15      	ldr	r3, [pc, #84]	@ (8005a84 <SYSVIEW_DeleteTask+0x170>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	1e5a      	subs	r2, r3, #1
 8005a32:	4915      	ldr	r1, [pc, #84]	@ (8005a88 <SYSVIEW_DeleteTask+0x174>)
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	3310      	adds	r3, #16
 8005a40:	6819      	ldr	r1, [r3, #0]
 8005a42:	4811      	ldr	r0, [pc, #68]	@ (8005a88 <SYSVIEW_DeleteTask+0x174>)
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4403      	add	r3, r0
 8005a50:	3310      	adds	r3, #16
 8005a52:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005a54:	4b0b      	ldr	r3, [pc, #44]	@ (8005a84 <SYSVIEW_DeleteTask+0x170>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	1e5a      	subs	r2, r3, #1
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4a09      	ldr	r2, [pc, #36]	@ (8005a88 <SYSVIEW_DeleteTask+0x174>)
 8005a64:	4413      	add	r3, r2
 8005a66:	2214      	movs	r2, #20
 8005a68:	2100      	movs	r1, #0
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f002 fbf4 	bl	8008258 <memset>
    _NumTasks--;
 8005a70:	4b04      	ldr	r3, [pc, #16]	@ (8005a84 <SYSVIEW_DeleteTask+0x170>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	4a03      	ldr	r2, [pc, #12]	@ (8005a84 <SYSVIEW_DeleteTask+0x170>)
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	e000      	b.n	8005a7e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8005a7c:	bf00      	nop
  }
}
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	20012f24 	.word	0x20012f24
 8005a88:	20012e84 	.word	0x20012e84

08005a8c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08a      	sub	sp, #40	@ 0x28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005a9a:	f107 0314 	add.w	r3, r7, #20
 8005a9e:	2214      	movs	r2, #20
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f002 fbd8 	bl	8008258 <memset>
  TaskInfo.TaskID     = TaskID;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aba:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005abc:	f107 0314 	add.w	r3, r7, #20
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f001 ff25 	bl	8007910 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005ac6:	bf00      	nop
 8005ac8:	3728      	adds	r7, #40	@ 0x28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <__NVIC_EnableIRQ>:
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	db0b      	blt.n	8005afa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ae2:	79fb      	ldrb	r3, [r7, #7]
 8005ae4:	f003 021f 	and.w	r2, r3, #31
 8005ae8:	4907      	ldr	r1, [pc, #28]	@ (8005b08 <__NVIC_EnableIRQ+0x38>)
 8005aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aee:	095b      	lsrs	r3, r3, #5
 8005af0:	2001      	movs	r0, #1
 8005af2:	fa00 f202 	lsl.w	r2, r0, r2
 8005af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	e000e100 	.word	0xe000e100

08005b0c <__NVIC_SetPriority>:
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	4603      	mov	r3, r0
 8005b14:	6039      	str	r1, [r7, #0]
 8005b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	db0a      	blt.n	8005b36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	490c      	ldr	r1, [pc, #48]	@ (8005b58 <__NVIC_SetPriority+0x4c>)
 8005b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b2a:	0112      	lsls	r2, r2, #4
 8005b2c:	b2d2      	uxtb	r2, r2
 8005b2e:	440b      	add	r3, r1
 8005b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005b34:	e00a      	b.n	8005b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	4908      	ldr	r1, [pc, #32]	@ (8005b5c <__NVIC_SetPriority+0x50>)
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	3b04      	subs	r3, #4
 8005b44:	0112      	lsls	r2, r2, #4
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	440b      	add	r3, r1
 8005b4a:	761a      	strb	r2, [r3, #24]
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	e000e100 	.word	0xe000e100
 8005b5c:	e000ed00 	.word	0xe000ed00

08005b60 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005b66:	f002 fb39 	bl	80081dc <SEGGER_SYSVIEW_IsStarted>
 8005b6a:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8005b72:	f001 fd51 	bl	8007618 <SEGGER_SYSVIEW_Start>
  }
}
 8005b76:	bf00      	nop
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	4603      	mov	r3, r0
 8005b88:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005bbc <_cbOnUARTRx+0x3c>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d806      	bhi.n	8005ba0 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8005b92:	4b0a      	ldr	r3, [pc, #40]	@ (8005bbc <_cbOnUARTRx+0x3c>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	3301      	adds	r3, #1
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	4b08      	ldr	r3, [pc, #32]	@ (8005bbc <_cbOnUARTRx+0x3c>)
 8005b9c:	701a      	strb	r2, [r3, #0]
    goto Done;
 8005b9e:	e009      	b.n	8005bb4 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005ba0:	f7ff ffde 	bl	8005b60 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005ba4:	4b05      	ldr	r3, [pc, #20]	@ (8005bbc <_cbOnUARTRx+0x3c>)
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	1dfb      	adds	r3, r7, #7
 8005bac:	2201      	movs	r2, #1
 8005bae:	4619      	mov	r1, r3
 8005bb0:	f000 fb9a 	bl	80062e8 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005bb4:	bf00      	nop
}
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20000014 	.word	0x20000014

08005bc0 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005bc8:	4b14      	ldr	r3, [pc, #80]	@ (8005c1c <_cbOnUARTTx+0x5c>)
 8005bca:	785b      	ldrb	r3, [r3, #1]
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d80f      	bhi.n	8005bf0 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005bd0:	4b12      	ldr	r3, [pc, #72]	@ (8005c1c <_cbOnUARTTx+0x5c>)
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4b12      	ldr	r3, [pc, #72]	@ (8005c20 <_cbOnUARTTx+0x60>)
 8005bd8:	5c9a      	ldrb	r2, [r3, r2]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8005bde:	4b0f      	ldr	r3, [pc, #60]	@ (8005c1c <_cbOnUARTTx+0x5c>)
 8005be0:	785b      	ldrb	r3, [r3, #1]
 8005be2:	3301      	adds	r3, #1
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c1c <_cbOnUARTTx+0x5c>)
 8005be8:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005bea:	2301      	movs	r3, #1
 8005bec:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005bee:	e00f      	b.n	8005c10 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8005c1c <_cbOnUARTTx+0x5c>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fa19 	bl	8006030 <SEGGER_RTT_ReadUpBufferNoLock>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	da02      	bge.n	8005c0e <_cbOnUARTTx+0x4e>
    r = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	e000      	b.n	8005c10 <_cbOnUARTTx+0x50>
  }
Done:
 8005c0e:	bf00      	nop
  return r;
 8005c10:	68fb      	ldr	r3, [r7, #12]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000014 	.word	0x20000014
 8005c20:	08008488 	.word	0x08008488

08005c24 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005c2c:	4a04      	ldr	r2, [pc, #16]	@ (8005c40 <SEGGER_UART_init+0x1c>)
 8005c2e:	4905      	ldr	r1, [pc, #20]	@ (8005c44 <SEGGER_UART_init+0x20>)
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f863 	bl	8005cfc <HIF_UART_Init>
}
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	08005b81 	.word	0x08005b81
 8005c44:	08005bc1 	.word	0x08005bc1

08005c48 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8005cc8 <USART2_IRQHandler+0x80>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d011      	beq.n	8005c82 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8005ccc <USART2_IRQHandler+0x84>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f003 030b 	and.w	r3, r3, #11
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d108      	bne.n	8005c82 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005c70:	4b17      	ldr	r3, [pc, #92]	@ (8005cd0 <USART2_IRQHandler+0x88>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d004      	beq.n	8005c82 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005c78:	4b15      	ldr	r3, [pc, #84]	@ (8005cd0 <USART2_IRQHandler+0x88>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	79fa      	ldrb	r2, [r7, #7]
 8005c7e:	4610      	mov	r0, r2
 8005c80:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01a      	beq.n	8005cc2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005c8c:	4b11      	ldr	r3, [pc, #68]	@ (8005cd4 <USART2_IRQHandler+0x8c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d015      	beq.n	8005cc0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005c94:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd4 <USART2_IRQHandler+0x8c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	1dfa      	adds	r2, r7, #7
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	4798      	blx	r3
 8005c9e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d106      	bne.n	8005cb4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd8 <USART2_IRQHandler+0x90>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a0b      	ldr	r2, [pc, #44]	@ (8005cd8 <USART2_IRQHandler+0x90>)
 8005cac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	e006      	b.n	8005cc2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005cb4:	4b04      	ldr	r3, [pc, #16]	@ (8005cc8 <USART2_IRQHandler+0x80>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005cb8:	79fa      	ldrb	r2, [r7, #7]
 8005cba:	4b04      	ldr	r3, [pc, #16]	@ (8005ccc <USART2_IRQHandler+0x84>)
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	e000      	b.n	8005cc2 <USART2_IRQHandler+0x7a>
      return;
 8005cc0:	bf00      	nop
    }
  }
}
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	40004400 	.word	0x40004400
 8005ccc:	40004404 	.word	0x40004404
 8005cd0:	20012f28 	.word	0x20012f28
 8005cd4:	20012f2c 	.word	0x20012f2c
 8005cd8:	4000440c 	.word	0x4000440c

08005cdc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005ce0:	4b05      	ldr	r3, [pc, #20]	@ (8005cf8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a04      	ldr	r2, [pc, #16]	@ (8005cf8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cea:	6013      	str	r3, [r2, #0]
}
 8005cec:	bf00      	nop
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	4000440c 	.word	0x4000440c

08005cfc <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005d08:	4b2e      	ldr	r3, [pc, #184]	@ (8005dc4 <HIF_UART_Init+0xc8>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a2d      	ldr	r2, [pc, #180]	@ (8005dc4 <HIF_UART_Init+0xc8>)
 8005d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d12:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005d14:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc8 <HIF_UART_Init+0xcc>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a2b      	ldr	r2, [pc, #172]	@ (8005dc8 <HIF_UART_Init+0xcc>)
 8005d1a:	f043 0301 	orr.w	r3, r3, #1
 8005d1e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005d20:	4b2a      	ldr	r3, [pc, #168]	@ (8005dcc <HIF_UART_Init+0xd0>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d2c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8005d34:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005d36:	4a25      	ldr	r2, [pc, #148]	@ (8005dcc <HIF_UART_Init+0xd0>)
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005d3c:	4b24      	ldr	r3, [pc, #144]	@ (8005dd0 <HIF_UART_Init+0xd4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d48:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005d50:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005d52:	4a1f      	ldr	r2, [pc, #124]	@ (8005dd0 <HIF_UART_Init+0xd4>)
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005d58:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd4 <HIF_UART_Init+0xd8>)
 8005d5a:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8005d5e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005d60:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd8 <HIF_UART_Init+0xdc>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005d66:	4b1d      	ldr	r3, [pc, #116]	@ (8005ddc <HIF_UART_Init+0xe0>)
 8005d68:	2280      	movs	r2, #128	@ 0x80
 8005d6a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005d72:	4a1b      	ldr	r2, [pc, #108]	@ (8005de0 <HIF_UART_Init+0xe4>)
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	085b      	lsrs	r3, r3, #1
 8005d82:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d8a:	d302      	bcc.n	8005d92 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005d8c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005d90:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d004      	beq.n	8005da2 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	4a11      	ldr	r2, [pc, #68]	@ (8005de4 <HIF_UART_Init+0xe8>)
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005da2:	4a11      	ldr	r2, [pc, #68]	@ (8005de8 <HIF_UART_Init+0xec>)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005da8:	4a10      	ldr	r2, [pc, #64]	@ (8005dec <HIF_UART_Init+0xf0>)
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005dae:	2106      	movs	r1, #6
 8005db0:	2026      	movs	r0, #38	@ 0x26
 8005db2:	f7ff feab 	bl	8005b0c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005db6:	2026      	movs	r0, #38	@ 0x26
 8005db8:	f7ff fe8a 	bl	8005ad0 <__NVIC_EnableIRQ>
}
 8005dbc:	bf00      	nop
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40023840 	.word	0x40023840
 8005dc8:	40023830 	.word	0x40023830
 8005dcc:	40020020 	.word	0x40020020
 8005dd0:	40020000 	.word	0x40020000
 8005dd4:	4000440c 	.word	0x4000440c
 8005dd8:	40004410 	.word	0x40004410
 8005ddc:	40004414 	.word	0x40004414
 8005de0:	0501bd00 	.word	0x0501bd00
 8005de4:	40004408 	.word	0x40004408
 8005de8:	20012f28 	.word	0x20012f28
 8005dec:	20012f2c 	.word	0x20012f2c

08005df0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005df6:	4b24      	ldr	r3, [pc, #144]	@ (8005e88 <_DoInit+0x98>)
 8005df8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2203      	movs	r2, #3
 8005dfe:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2203      	movs	r2, #3
 8005e04:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a20      	ldr	r2, [pc, #128]	@ (8005e8c <_DoInit+0x9c>)
 8005e0a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a20      	ldr	r2, [pc, #128]	@ (8005e90 <_DoInit+0xa0>)
 8005e10:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e18:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a17      	ldr	r2, [pc, #92]	@ (8005e8c <_DoInit+0x9c>)
 8005e30:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a17      	ldr	r2, [pc, #92]	@ (8005e94 <_DoInit+0xa4>)
 8005e36:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2210      	movs	r2, #16
 8005e3c:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3307      	adds	r3, #7
 8005e54:	4a10      	ldr	r2, [pc, #64]	@ (8005e98 <_DoInit+0xa8>)
 8005e56:	6810      	ldr	r0, [r2, #0]
 8005e58:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005e5a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a0e      	ldr	r2, [pc, #56]	@ (8005e9c <_DoInit+0xac>)
 8005e62:	6810      	ldr	r0, [r2, #0]
 8005e64:	6018      	str	r0, [r3, #0]
 8005e66:	8891      	ldrh	r1, [r2, #4]
 8005e68:	7992      	ldrb	r2, [r2, #6]
 8005e6a:	8099      	strh	r1, [r3, #4]
 8005e6c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005e6e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005e78:	f3bf 8f5f 	dmb	sy
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	20012f30 	.word	0x20012f30
 8005e8c:	08008448 	.word	0x08008448
 8005e90:	20012fd8 	.word	0x20012fd8
 8005e94:	200133d8 	.word	0x200133d8
 8005e98:	08008454 	.word	0x08008454
 8005e9c:	08008458 	.word	0x08008458

08005ea0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08a      	sub	sp, #40	@ 0x28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005eac:	2300      	movs	r3, #0
 8005eae:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d905      	bls.n	8005ed0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ece:	e007      	b.n	8005ee0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	69b9      	ldr	r1, [r7, #24]
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	1acb      	subs	r3, r1, r3
 8005eda:	4413      	add	r3, r2
 8005edc:	3b01      	subs	r3, #1
 8005ede:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eea:	4293      	cmp	r3, r2
 8005eec:	bf28      	it	cs
 8005eee:	4613      	movcs	r3, r2
 8005ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	bf28      	it	cs
 8005efa:	4613      	movcs	r3, r2
 8005efc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	4413      	add	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	6978      	ldr	r0, [r7, #20]
 8005f0e:	f002 f9cf 	bl	80082b0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005f12:	6a3a      	ldr	r2, [r7, #32]
 8005f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f16:	4413      	add	r3, r2
 8005f18:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1e:	4413      	add	r3, r2
 8005f20:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2e:	4413      	add	r3, r2
 8005f30:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d101      	bne.n	8005f40 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f40:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1b2      	bne.n	8005eb6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005f50:	6a3b      	ldr	r3, [r7, #32]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3728      	adds	r7, #40	@ 0x28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b088      	sub	sp, #32
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d911      	bls.n	8005fa2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4413      	add	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	68b9      	ldr	r1, [r7, #8]
 8005f8c:	6938      	ldr	r0, [r7, #16]
 8005f8e:	f002 f98f 	bl	80082b0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f92:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	441a      	add	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005fa0:	e01f      	b.n	8005fe2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	4413      	add	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	6938      	ldr	r0, [r7, #16]
 8005fb6:	f002 f97b 	bl	80082b0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	4413      	add	r3, r2
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6938      	ldr	r0, [r7, #16]
 8005fd4:	f002 f96c 	bl	80082b0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005fd8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	60da      	str	r2, [r3, #12]
}
 8005fe2:	bf00      	nop
 8005fe4:	3720      	adds	r7, #32
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005fea:	b480      	push	{r7}
 8005fec:	b087      	sub	sp, #28
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	429a      	cmp	r2, r3
 8006004:	d808      	bhi.n	8006018 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1ad2      	subs	r2, r2, r3
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	4413      	add	r3, r2
 8006012:	3b01      	subs	r3, #1
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	e004      	b.n	8006022 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	617b      	str	r3, [r7, #20]
  }
  return r;
 8006022:	697b      	ldr	r3, [r7, #20]
}
 8006024:	4618      	mov	r0, r3
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006030:	b580      	push	{r7, lr}
 8006032:	b08c      	sub	sp, #48	@ 0x30
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800603c:	4b3e      	ldr	r3, [pc, #248]	@ (8006138 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800603e:	623b      	str	r3, [r7, #32]
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800604a:	f7ff fed1 	bl	8005df0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	4613      	mov	r3, r2
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	4413      	add	r3, r2
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	4a37      	ldr	r2, [pc, #220]	@ (8006138 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800605c:	4413      	add	r3, r2
 800605e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006070:	2300      	movs	r3, #0
 8006072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006074:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	429a      	cmp	r2, r3
 800607a:	d92b      	bls.n	80060d4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4293      	cmp	r3, r2
 800608c:	bf28      	it	cs
 800608e:	4613      	movcs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006098:	4413      	add	r3, r2
 800609a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	6939      	ldr	r1, [r7, #16]
 80060a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80060a2:	f002 f905 	bl	80082b0 <memcpy>
    NumBytesRead += NumBytesRem;
 80060a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	4413      	add	r3, r2
 80060ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80060ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	4413      	add	r3, r2
 80060b4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80060be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	4413      	add	r3, r2
 80060c4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d101      	bne.n	80060d4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80060d0:	2300      	movs	r3, #0
 80060d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4293      	cmp	r3, r2
 80060e2:	bf28      	it	cs
 80060e4:	4613      	movcs	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d019      	beq.n	8006122 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f4:	4413      	add	r3, r2
 80060f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	6939      	ldr	r1, [r7, #16]
 80060fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80060fe:	f002 f8d7 	bl	80082b0 <memcpy>
    NumBytesRead += NumBytesRem;
 8006102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	4413      	add	r3, r2
 8006108:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800610a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	4413      	add	r3, r2
 8006110:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800611a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	4413      	add	r3, r2
 8006120:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8006122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800612c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800612e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006130:	4618      	mov	r0, r3
 8006132:	3730      	adds	r7, #48	@ 0x30
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	20012f30 	.word	0x20012f30

0800613c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800613c:	b580      	push	{r7, lr}
 800613e:	b08c      	sub	sp, #48	@ 0x30
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006148:	4b3e      	ldr	r3, [pc, #248]	@ (8006244 <SEGGER_RTT_ReadNoLock+0x108>)
 800614a:	623b      	str	r3, [r7, #32]
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <SEGGER_RTT_ReadNoLock+0x1e>
 8006156:	f7ff fe4b 	bl	8005df0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4613      	mov	r3, r2
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	4413      	add	r3, r2
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	3360      	adds	r3, #96	@ 0x60
 8006166:	4a37      	ldr	r2, [pc, #220]	@ (8006244 <SEGGER_RTT_ReadNoLock+0x108>)
 8006168:	4413      	add	r3, r2
 800616a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800617c:	2300      	movs	r3, #0
 800617e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006180:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	429a      	cmp	r2, r3
 8006186:	d92b      	bls.n	80061e0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4293      	cmp	r3, r2
 8006198:	bf28      	it	cs
 800619a:	4613      	movcs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a4:	4413      	add	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	6939      	ldr	r1, [r7, #16]
 80061ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80061ae:	f002 f87f 	bl	80082b0 <memcpy>
    NumBytesRead += NumBytesRem;
 80061b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	4413      	add	r3, r2
 80061b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80061ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	4413      	add	r3, r2
 80061c0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80061ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	4413      	add	r3, r2
 80061d0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061d8:	429a      	cmp	r2, r3
 80061da:	d101      	bne.n	80061e0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80061dc:	2300      	movs	r3, #0
 80061de:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4293      	cmp	r3, r2
 80061ee:	bf28      	it	cs
 80061f0:	4613      	movcs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d019      	beq.n	800622e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006200:	4413      	add	r3, r2
 8006202:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	6939      	ldr	r1, [r7, #16]
 8006208:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800620a:	f002 f851 	bl	80082b0 <memcpy>
    NumBytesRead += NumBytesRem;
 800620e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	4413      	add	r3, r2
 8006214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8006216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	4413      	add	r3, r2
 800621c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	4413      	add	r3, r2
 800622c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800622e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006238:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800623a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800623c:	4618      	mov	r0, r3
 800623e:	3730      	adds	r7, #48	@ 0x30
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	20012f30 	.word	0x20012f30

08006248 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4613      	mov	r3, r2
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	4413      	add	r3, r2
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	3360      	adds	r3, #96	@ 0x60
 8006264:	4a1f      	ldr	r2, [pc, #124]	@ (80062e4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8006266:	4413      	add	r3, r2
 8006268:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	2b02      	cmp	r3, #2
 8006270:	d029      	beq.n	80062c6 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8006272:	2b02      	cmp	r3, #2
 8006274:	d82e      	bhi.n	80062d4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800627a:	2b01      	cmp	r3, #1
 800627c:	d013      	beq.n	80062a6 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800627e:	e029      	b.n	80062d4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006280:	6978      	ldr	r0, [r7, #20]
 8006282:	f7ff feb2 	bl	8005fea <_GetAvailWriteSpace>
 8006286:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	429a      	cmp	r2, r3
 800628e:	d202      	bcs.n	8006296 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8006290:	2300      	movs	r3, #0
 8006292:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8006294:	e021      	b.n	80062da <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	69b9      	ldr	r1, [r7, #24]
 800629e:	6978      	ldr	r0, [r7, #20]
 80062a0:	f7ff fe5b 	bl	8005f5a <_WriteNoCheck>
    break;
 80062a4:	e019      	b.n	80062da <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80062a6:	6978      	ldr	r0, [r7, #20]
 80062a8:	f7ff fe9f 	bl	8005fea <_GetAvailWriteSpace>
 80062ac:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	4293      	cmp	r3, r2
 80062b4:	bf28      	it	cs
 80062b6:	4613      	movcs	r3, r2
 80062b8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	69b9      	ldr	r1, [r7, #24]
 80062be:	6978      	ldr	r0, [r7, #20]
 80062c0:	f7ff fe4b 	bl	8005f5a <_WriteNoCheck>
    break;
 80062c4:	e009      	b.n	80062da <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	69b9      	ldr	r1, [r7, #24]
 80062ca:	6978      	ldr	r0, [r7, #20]
 80062cc:	f7ff fde8 	bl	8005ea0 <_WriteBlocking>
 80062d0:	61f8      	str	r0, [r7, #28]
    break;
 80062d2:	e002      	b.n	80062da <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80062d4:	2300      	movs	r3, #0
 80062d6:	61fb      	str	r3, [r7, #28]
    break;
 80062d8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80062da:	69fb      	ldr	r3, [r7, #28]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3720      	adds	r7, #32
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20012f30 	.word	0x20012f30

080062e8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80062f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006330 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80062f6:	61fb      	str	r3, [r7, #28]
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8006302:	f7ff fd75 	bl	8005df0 <_DoInit>
  SEGGER_RTT_LOCK();
 8006306:	f3ef 8311 	mrs	r3, BASEPRI
 800630a:	f04f 0120 	mov.w	r1, #32
 800630e:	f381 8811 	msr	BASEPRI, r1
 8006312:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f7ff ff95 	bl	8006248 <SEGGER_RTT_WriteDownBufferNoLock>
 800631e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8006326:	697b      	ldr	r3, [r7, #20]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3720      	adds	r7, #32
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	20012f30 	.word	0x20012f30

08006334 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006342:	4b3d      	ldr	r3, [pc, #244]	@ (8006438 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006344:	61bb      	str	r3, [r7, #24]
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <SEGGER_RTT_AllocUpBuffer+0x20>
 8006350:	f7ff fd4e 	bl	8005df0 <_DoInit>
  SEGGER_RTT_LOCK();
 8006354:	f3ef 8311 	mrs	r3, BASEPRI
 8006358:	f04f 0120 	mov.w	r1, #32
 800635c:	f381 8811 	msr	BASEPRI, r1
 8006360:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006362:	4b35      	ldr	r3, [pc, #212]	@ (8006438 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006364:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8006366:	2300      	movs	r3, #0
 8006368:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800636a:	6939      	ldr	r1, [r7, #16]
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	4613      	mov	r3, r2
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	4413      	add	r3, r2
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	440b      	add	r3, r1
 800637a:	3304      	adds	r3, #4
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d008      	beq.n	8006394 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	3301      	adds	r3, #1
 8006386:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	429a      	cmp	r2, r3
 8006390:	dbeb      	blt.n	800636a <SEGGER_RTT_AllocUpBuffer+0x36>
 8006392:	e000      	b.n	8006396 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8006394:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	429a      	cmp	r2, r3
 800639e:	da3f      	bge.n	8006420 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80063a0:	6939      	ldr	r1, [r7, #16]
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	4613      	mov	r3, r2
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	4413      	add	r3, r2
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	440b      	add	r3, r1
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80063b4:	6939      	ldr	r1, [r7, #16]
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	4613      	mov	r3, r2
 80063bc:	005b      	lsls	r3, r3, #1
 80063be:	4413      	add	r3, r2
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	440b      	add	r3, r1
 80063c4:	3304      	adds	r3, #4
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80063ca:	6939      	ldr	r1, [r7, #16]
 80063cc:	69fa      	ldr	r2, [r7, #28]
 80063ce:	4613      	mov	r3, r2
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	4413      	add	r3, r2
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	440b      	add	r3, r1
 80063d8:	3320      	adds	r3, #32
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80063de:	6939      	ldr	r1, [r7, #16]
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	4613      	mov	r3, r2
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	4413      	add	r3, r2
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	440b      	add	r3, r1
 80063ec:	3328      	adds	r3, #40	@ 0x28
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80063f2:	6939      	ldr	r1, [r7, #16]
 80063f4:	69fa      	ldr	r2, [r7, #28]
 80063f6:	4613      	mov	r3, r2
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	4413      	add	r3, r2
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	440b      	add	r3, r1
 8006400:	3324      	adds	r3, #36	@ 0x24
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006406:	6939      	ldr	r1, [r7, #16]
 8006408:	69fa      	ldr	r2, [r7, #28]
 800640a:	4613      	mov	r3, r2
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	4413      	add	r3, r2
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	440b      	add	r3, r1
 8006414:	332c      	adds	r3, #44	@ 0x2c
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800641a:	f3bf 8f5f 	dmb	sy
 800641e:	e002      	b.n	8006426 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006420:	f04f 33ff 	mov.w	r3, #4294967295
 8006424:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800642c:	69fb      	ldr	r3, [r7, #28]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3720      	adds	r7, #32
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20012f30 	.word	0x20012f30

0800643c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800644a:	4b33      	ldr	r3, [pc, #204]	@ (8006518 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006458:	f7ff fcca 	bl	8005df0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800645c:	4b2e      	ldr	r3, [pc, #184]	@ (8006518 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800645e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	461a      	mov	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4293      	cmp	r3, r2
 800646a:	d24d      	bcs.n	8006508 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800646c:	f3ef 8311 	mrs	r3, BASEPRI
 8006470:	f04f 0120 	mov.w	r1, #32
 8006474:	f381 8811 	msr	BASEPRI, r1
 8006478:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d031      	beq.n	80064e4 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8006480:	6979      	ldr	r1, [r7, #20]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4613      	mov	r3, r2
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	4413      	add	r3, r2
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	440b      	add	r3, r1
 800648e:	3360      	adds	r3, #96	@ 0x60
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8006494:	6979      	ldr	r1, [r7, #20]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4613      	mov	r3, r2
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	4413      	add	r3, r2
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	440b      	add	r3, r1
 80064a2:	3364      	adds	r3, #100	@ 0x64
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80064a8:	6979      	ldr	r1, [r7, #20]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4613      	mov	r3, r2
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	4413      	add	r3, r2
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	440b      	add	r3, r1
 80064b6:	3368      	adds	r3, #104	@ 0x68
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80064bc:	6979      	ldr	r1, [r7, #20]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	4613      	mov	r3, r2
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	4413      	add	r3, r2
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	440b      	add	r3, r1
 80064ca:	3370      	adds	r3, #112	@ 0x70
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80064d0:	6979      	ldr	r1, [r7, #20]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4613      	mov	r3, r2
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	4413      	add	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	440b      	add	r3, r1
 80064de:	336c      	adds	r3, #108	@ 0x6c
 80064e0:	2200      	movs	r2, #0
 80064e2:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80064e4:	6979      	ldr	r1, [r7, #20]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4613      	mov	r3, r2
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	4413      	add	r3, r2
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	440b      	add	r3, r1
 80064f2:	3374      	adds	r3, #116	@ 0x74
 80064f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064f6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80064f8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006502:	2300      	movs	r3, #0
 8006504:	61fb      	str	r3, [r7, #28]
 8006506:	e002      	b.n	800650e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8006508:	f04f 33ff 	mov.w	r3, #4294967295
 800650c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800650e:	69fb      	ldr	r3, [r7, #28]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3720      	adds	r7, #32
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20012f30 	.word	0x20012f30

0800651c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006528:	2300      	movs	r3, #0
 800652a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800652c:	e002      	b.n	8006534 <_EncodeStr+0x18>
    Len++;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	3301      	adds	r3, #1
 8006532:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	4413      	add	r3, r2
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1f6      	bne.n	800652e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	429a      	cmp	r2, r3
 8006546:	d901      	bls.n	800654c <_EncodeStr+0x30>
    Len = Limit;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	2bfe      	cmp	r3, #254	@ 0xfe
 8006550:	d806      	bhi.n	8006560 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	60fa      	str	r2, [r7, #12]
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]
 800655e:	e011      	b.n	8006584 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	60fa      	str	r2, [r7, #12]
 8006566:	22ff      	movs	r2, #255	@ 0xff
 8006568:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	60fa      	str	r2, [r7, #12]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	0a19      	lsrs	r1, r3, #8
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	60fa      	str	r2, [r7, #12]
 8006580:	b2ca      	uxtb	r2, r1
 8006582:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006584:	2300      	movs	r3, #0
 8006586:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006588:	e00a      	b.n	80065a0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	1c53      	adds	r3, r2, #1
 800658e:	60bb      	str	r3, [r7, #8]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	1c59      	adds	r1, r3, #1
 8006594:	60f9      	str	r1, [r7, #12]
 8006596:	7812      	ldrb	r2, [r2, #0]
 8006598:	701a      	strb	r2, [r3, #0]
    n++;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	3301      	adds	r3, #1
 800659e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d3f0      	bcc.n	800658a <_EncodeStr+0x6e>
  }
  return pPayload;
 80065a8:	68fb      	ldr	r3, [r7, #12]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3304      	adds	r3, #4
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
	...

080065d0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80065d6:	4b35      	ldr	r3, [pc, #212]	@ (80066ac <_HandleIncomingPacket+0xdc>)
 80065d8:	7e1b      	ldrb	r3, [r3, #24]
 80065da:	4618      	mov	r0, r3
 80065dc:	1cfb      	adds	r3, r7, #3
 80065de:	2201      	movs	r2, #1
 80065e0:	4619      	mov	r1, r3
 80065e2:	f7ff fdab 	bl	800613c <SEGGER_RTT_ReadNoLock>
 80065e6:	4603      	mov	r3, r0
 80065e8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	dd59      	ble.n	80066a4 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	2b80      	cmp	r3, #128	@ 0x80
 80065f4:	d032      	beq.n	800665c <_HandleIncomingPacket+0x8c>
 80065f6:	2b80      	cmp	r3, #128	@ 0x80
 80065f8:	dc42      	bgt.n	8006680 <_HandleIncomingPacket+0xb0>
 80065fa:	2b07      	cmp	r3, #7
 80065fc:	dc16      	bgt.n	800662c <_HandleIncomingPacket+0x5c>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	dd3e      	ble.n	8006680 <_HandleIncomingPacket+0xb0>
 8006602:	3b01      	subs	r3, #1
 8006604:	2b06      	cmp	r3, #6
 8006606:	d83b      	bhi.n	8006680 <_HandleIncomingPacket+0xb0>
 8006608:	a201      	add	r2, pc, #4	@ (adr r2, 8006610 <_HandleIncomingPacket+0x40>)
 800660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660e:	bf00      	nop
 8006610:	08006633 	.word	0x08006633
 8006614:	08006639 	.word	0x08006639
 8006618:	0800663f 	.word	0x0800663f
 800661c:	08006645 	.word	0x08006645
 8006620:	0800664b 	.word	0x0800664b
 8006624:	08006651 	.word	0x08006651
 8006628:	08006657 	.word	0x08006657
 800662c:	2b7f      	cmp	r3, #127	@ 0x7f
 800662e:	d034      	beq.n	800669a <_HandleIncomingPacket+0xca>
 8006630:	e026      	b.n	8006680 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006632:	f000 fff1 	bl	8007618 <SEGGER_SYSVIEW_Start>
      break;
 8006636:	e035      	b.n	80066a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006638:	f001 f8aa 	bl	8007790 <SEGGER_SYSVIEW_Stop>
      break;
 800663c:	e032      	b.n	80066a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800663e:	f001 fa83 	bl	8007b48 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006642:	e02f      	b.n	80066a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006644:	f001 fa48 	bl	8007ad8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006648:	e02c      	b.n	80066a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800664a:	f001 f8c7 	bl	80077dc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800664e:	e029      	b.n	80066a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006650:	f001 fd16 	bl	8008080 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006654:	e026      	b.n	80066a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006656:	f001 fcf5 	bl	8008044 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800665a:	e023      	b.n	80066a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800665c:	4b13      	ldr	r3, [pc, #76]	@ (80066ac <_HandleIncomingPacket+0xdc>)
 800665e:	7e1b      	ldrb	r3, [r3, #24]
 8006660:	4618      	mov	r0, r3
 8006662:	1cfb      	adds	r3, r7, #3
 8006664:	2201      	movs	r2, #1
 8006666:	4619      	mov	r1, r3
 8006668:	f7ff fd68 	bl	800613c <SEGGER_RTT_ReadNoLock>
 800666c:	4603      	mov	r3, r0
 800666e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	dd13      	ble.n	800669e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	4618      	mov	r0, r3
 800667a:	f001 fc63 	bl	8007f44 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800667e:	e00e      	b.n	800669e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	b25b      	sxtb	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	da0c      	bge.n	80066a2 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006688:	4b08      	ldr	r3, [pc, #32]	@ (80066ac <_HandleIncomingPacket+0xdc>)
 800668a:	7e1b      	ldrb	r3, [r3, #24]
 800668c:	4618      	mov	r0, r3
 800668e:	1cfb      	adds	r3, r7, #3
 8006690:	2201      	movs	r2, #1
 8006692:	4619      	mov	r1, r3
 8006694:	f7ff fd52 	bl	800613c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006698:	e003      	b.n	80066a2 <_HandleIncomingPacket+0xd2>
      break;
 800669a:	bf00      	nop
 800669c:	e002      	b.n	80066a4 <_HandleIncomingPacket+0xd4>
      break;
 800669e:	bf00      	nop
 80066a0:	e000      	b.n	80066a4 <_HandleIncomingPacket+0xd4>
      break;
 80066a2:	bf00      	nop
    }
  }
}
 80066a4:	bf00      	nop
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	200143f0 	.word	0x200143f0

080066b0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08c      	sub	sp, #48	@ 0x30
 80066b4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80066b6:	2301      	movs	r3, #1
 80066b8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80066ba:	1d3b      	adds	r3, r7, #4
 80066bc:	3301      	adds	r3, #1
 80066be:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066c4:	4b32      	ldr	r3, [pc, #200]	@ (8006790 <_TrySendOverflowPacket+0xe0>)
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066ca:	e00b      	b.n	80066e4 <_TrySendOverflowPacket+0x34>
 80066cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d2:	1c59      	adds	r1, r3, #1
 80066d4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80066d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]
 80066de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e0:	09db      	lsrs	r3, r3, #7
 80066e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80066e8:	d8f0      	bhi.n	80066cc <_TrySendOverflowPacket+0x1c>
 80066ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80066fa:	4b26      	ldr	r3, [pc, #152]	@ (8006794 <_TrySendOverflowPacket+0xe4>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006700:	4b23      	ldr	r3, [pc, #140]	@ (8006790 <_TrySendOverflowPacket+0xe0>)
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	627b      	str	r3, [r7, #36]	@ 0x24
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	623b      	str	r3, [r7, #32]
 8006712:	e00b      	b.n	800672c <_TrySendOverflowPacket+0x7c>
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	b2da      	uxtb	r2, r3
 8006718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671a:	1c59      	adds	r1, r3, #1
 800671c:	6279      	str	r1, [r7, #36]	@ 0x24
 800671e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006722:	b2d2      	uxtb	r2, r2
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	09db      	lsrs	r3, r3, #7
 800672a:	623b      	str	r3, [r7, #32]
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006730:	d8f0      	bhi.n	8006714 <_TrySendOverflowPacket+0x64>
 8006732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	627a      	str	r2, [r7, #36]	@ 0x24
 8006738:	6a3a      	ldr	r2, [r7, #32]
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006740:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8006742:	4b13      	ldr	r3, [pc, #76]	@ (8006790 <_TrySendOverflowPacket+0xe0>)
 8006744:	785b      	ldrb	r3, [r3, #1]
 8006746:	4618      	mov	r0, r3
 8006748:	1d3b      	adds	r3, r7, #4
 800674a:	69fa      	ldr	r2, [r7, #28]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	461a      	mov	r2, r3
 8006750:	1d3b      	adds	r3, r7, #4
 8006752:	4619      	mov	r1, r3
 8006754:	f7f9 fd3c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006758:	4603      	mov	r3, r0
 800675a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800675c:	f7ff fabe 	bl	8005cdc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d009      	beq.n	800677a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006766:	4a0a      	ldr	r2, [pc, #40]	@ (8006790 <_TrySendOverflowPacket+0xe0>)
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800676c:	4b08      	ldr	r3, [pc, #32]	@ (8006790 <_TrySendOverflowPacket+0xe0>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	3b01      	subs	r3, #1
 8006772:	b2da      	uxtb	r2, r3
 8006774:	4b06      	ldr	r3, [pc, #24]	@ (8006790 <_TrySendOverflowPacket+0xe0>)
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	e004      	b.n	8006784 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800677a:	4b05      	ldr	r3, [pc, #20]	@ (8006790 <_TrySendOverflowPacket+0xe0>)
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	3301      	adds	r3, #1
 8006780:	4a03      	ldr	r2, [pc, #12]	@ (8006790 <_TrySendOverflowPacket+0xe0>)
 8006782:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006784:	693b      	ldr	r3, [r7, #16]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3730      	adds	r7, #48	@ 0x30
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	200143f0 	.word	0x200143f0
 8006794:	e0001004 	.word	0xe0001004

08006798 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006798:	b580      	push	{r7, lr}
 800679a:	b08a      	sub	sp, #40	@ 0x28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80067a4:	4b6d      	ldr	r3, [pc, #436]	@ (800695c <_SendPacket+0x1c4>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d010      	beq.n	80067ce <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80067ac:	4b6b      	ldr	r3, [pc, #428]	@ (800695c <_SendPacket+0x1c4>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 80a5 	beq.w	8006900 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80067b6:	4b69      	ldr	r3, [pc, #420]	@ (800695c <_SendPacket+0x1c4>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d109      	bne.n	80067d2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80067be:	f7ff ff77 	bl	80066b0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80067c2:	4b66      	ldr	r3, [pc, #408]	@ (800695c <_SendPacket+0x1c4>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	f040 809c 	bne.w	8006904 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80067cc:	e001      	b.n	80067d2 <_SendPacket+0x3a>
    goto Send;
 80067ce:	bf00      	nop
 80067d0:	e000      	b.n	80067d4 <_SendPacket+0x3c>
Send:
 80067d2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b1f      	cmp	r3, #31
 80067d8:	d809      	bhi.n	80067ee <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80067da:	4b60      	ldr	r3, [pc, #384]	@ (800695c <_SendPacket+0x1c4>)
 80067dc:	69da      	ldr	r2, [r3, #28]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	fa22 f303 	lsr.w	r3, r2, r3
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f040 808d 	bne.w	8006908 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b17      	cmp	r3, #23
 80067f2:	d807      	bhi.n	8006804 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	e03d      	b.n	8006880 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006810:	d912      	bls.n	8006838 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	09da      	lsrs	r2, r3, #7
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3b01      	subs	r3, #1
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	b2db      	uxtb	r3, r3
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	3a01      	subs	r2, #1
 800682a:	60fa      	str	r2, [r7, #12]
 800682c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006830:	b2da      	uxtb	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	e006      	b.n	8006846 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3b01      	subs	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	b2da      	uxtb	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b7f      	cmp	r3, #127	@ 0x7f
 800684a:	d912      	bls.n	8006872 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	09da      	lsrs	r2, r3, #7
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3b01      	subs	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	b2db      	uxtb	r3, r3
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	3a01      	subs	r2, #1
 8006864:	60fa      	str	r2, [r7, #12]
 8006866:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800686a:	b2da      	uxtb	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	e006      	b.n	8006880 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3b01      	subs	r3, #1
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	b2da      	uxtb	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006880:	4b37      	ldr	r3, [pc, #220]	@ (8006960 <_SendPacket+0x1c8>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006886:	4b35      	ldr	r3, [pc, #212]	@ (800695c <_SendPacket+0x1c4>)
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	627b      	str	r3, [r7, #36]	@ 0x24
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	623b      	str	r3, [r7, #32]
 8006898:	e00b      	b.n	80068b2 <_SendPacket+0x11a>
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	b2da      	uxtb	r2, r3
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	1c59      	adds	r1, r3, #1
 80068a2:	6279      	str	r1, [r7, #36]	@ 0x24
 80068a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068a8:	b2d2      	uxtb	r2, r2
 80068aa:	701a      	strb	r2, [r3, #0]
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	09db      	lsrs	r3, r3, #7
 80068b0:	623b      	str	r3, [r7, #32]
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80068b6:	d8f0      	bhi.n	800689a <_SendPacket+0x102>
 80068b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80068be:	6a3a      	ldr	r2, [r7, #32]
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	701a      	strb	r2, [r3, #0]
 80068c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80068c8:	4b24      	ldr	r3, [pc, #144]	@ (800695c <_SendPacket+0x1c4>)
 80068ca:	785b      	ldrb	r3, [r3, #1]
 80068cc:	4618      	mov	r0, r3
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	461a      	mov	r2, r3
 80068d6:	68f9      	ldr	r1, [r7, #12]
 80068d8:	f7f9 fc7a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80068dc:	4603      	mov	r3, r0
 80068de:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80068e0:	f7ff f9fc 	bl	8005cdc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80068ea:	4a1c      	ldr	r2, [pc, #112]	@ (800695c <_SendPacket+0x1c4>)
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	60d3      	str	r3, [r2, #12]
 80068f0:	e00b      	b.n	800690a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80068f2:	4b1a      	ldr	r3, [pc, #104]	@ (800695c <_SendPacket+0x1c4>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	3301      	adds	r3, #1
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	4b18      	ldr	r3, [pc, #96]	@ (800695c <_SendPacket+0x1c4>)
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	e004      	b.n	800690a <_SendPacket+0x172>
    goto SendDone;
 8006900:	bf00      	nop
 8006902:	e002      	b.n	800690a <_SendPacket+0x172>
      goto SendDone;
 8006904:	bf00      	nop
 8006906:	e000      	b.n	800690a <_SendPacket+0x172>
      goto SendDone;
 8006908:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800690a:	4b14      	ldr	r3, [pc, #80]	@ (800695c <_SendPacket+0x1c4>)
 800690c:	7e1b      	ldrb	r3, [r3, #24]
 800690e:	4619      	mov	r1, r3
 8006910:	4a14      	ldr	r2, [pc, #80]	@ (8006964 <_SendPacket+0x1cc>)
 8006912:	460b      	mov	r3, r1
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	440b      	add	r3, r1
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	4413      	add	r3, r2
 800691c:	336c      	adds	r3, #108	@ 0x6c
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	4b0e      	ldr	r3, [pc, #56]	@ (800695c <_SendPacket+0x1c4>)
 8006922:	7e1b      	ldrb	r3, [r3, #24]
 8006924:	4618      	mov	r0, r3
 8006926:	490f      	ldr	r1, [pc, #60]	@ (8006964 <_SendPacket+0x1cc>)
 8006928:	4603      	mov	r3, r0
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	4403      	add	r3, r0
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	440b      	add	r3, r1
 8006932:	3370      	adds	r3, #112	@ 0x70
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	429a      	cmp	r2, r3
 8006938:	d00b      	beq.n	8006952 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800693a:	4b08      	ldr	r3, [pc, #32]	@ (800695c <_SendPacket+0x1c4>)
 800693c:	789b      	ldrb	r3, [r3, #2]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d107      	bne.n	8006952 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006942:	4b06      	ldr	r3, [pc, #24]	@ (800695c <_SendPacket+0x1c4>)
 8006944:	2201      	movs	r2, #1
 8006946:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006948:	f7ff fe42 	bl	80065d0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800694c:	4b03      	ldr	r3, [pc, #12]	@ (800695c <_SendPacket+0x1c4>)
 800694e:	2200      	movs	r2, #0
 8006950:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006952:	bf00      	nop
 8006954:	3728      	adds	r7, #40	@ 0x28
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	200143f0 	.word	0x200143f0
 8006960:	e0001004 	.word	0xe0001004
 8006964:	20012f30 	.word	0x20012f30

08006968 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006968:	b580      	push	{r7, lr}
 800696a:	b08a      	sub	sp, #40	@ 0x28
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	3301      	adds	r3, #1
 800697e:	2b80      	cmp	r3, #128	@ 0x80
 8006980:	d80a      	bhi.n	8006998 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	1c59      	adds	r1, r3, #1
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6051      	str	r1, [r2, #4]
 800698c:	78fa      	ldrb	r2, [r7, #3]
 800698e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	2b80      	cmp	r3, #128	@ 0x80
 800699e:	d15a      	bne.n	8006a56 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691a      	ldr	r2, [r3, #16]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	623b      	str	r3, [r7, #32]
 80069c0:	e00b      	b.n	80069da <_StoreChar+0x72>
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	1c59      	adds	r1, r3, #1
 80069ca:	6279      	str	r1, [r7, #36]	@ 0x24
 80069cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	09db      	lsrs	r3, r3, #7
 80069d8:	623b      	str	r3, [r7, #32]
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80069de:	d8f0      	bhi.n	80069c2 <_StoreChar+0x5a>
 80069e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e2:	1c5a      	adds	r2, r3, #1
 80069e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80069e6:	6a3a      	ldr	r2, [r7, #32]
 80069e8:	b2d2      	uxtb	r2, r2
 80069ea:	701a      	strb	r2, [r3, #0]
 80069ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ee:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	61fb      	str	r3, [r7, #28]
 80069f4:	2300      	movs	r3, #0
 80069f6:	61bb      	str	r3, [r7, #24]
 80069f8:	e00b      	b.n	8006a12 <_StoreChar+0xaa>
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	1c59      	adds	r1, r3, #1
 8006a02:	61f9      	str	r1, [r7, #28]
 8006a04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a08:	b2d2      	uxtb	r2, r2
 8006a0a:	701a      	strb	r2, [r3, #0]
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	09db      	lsrs	r3, r3, #7
 8006a10:	61bb      	str	r3, [r7, #24]
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a16:	d8f0      	bhi.n	80069fa <_StoreChar+0x92>
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	61fa      	str	r2, [r7, #28]
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	b2d2      	uxtb	r2, r2
 8006a22:	701a      	strb	r2, [r3, #0]
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	221a      	movs	r2, #26
 8006a2e:	6939      	ldr	r1, [r7, #16]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff feb1 	bl	8006798 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff fdbb 	bl	80065b6 <_PreparePacket>
 8006a40:	4602      	mov	r2, r0
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	611a      	str	r2, [r3, #16]
  }
}
 8006a56:	bf00      	nop
 8006a58:	3728      	adds	r7, #40	@ 0x28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
	...

08006a60 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08a      	sub	sp, #40	@ 0x28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
 8006a6c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006a72:	2301      	movs	r3, #1
 8006a74:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006a76:	2301      	movs	r3, #1
 8006a78:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006a7a:	e007      	b.n	8006a8c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006a7c:	6a3a      	ldr	r2, [r7, #32]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a84:	623b      	str	r3, [r7, #32]
    Width++;
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006a8c:	6a3a      	ldr	r2, [r7, #32]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d2f3      	bcs.n	8006a7c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d901      	bls.n	8006aa0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d000      	beq.n	8006aac <_PrintUnsigned+0x4c>
 8006aaa:	e01f      	b.n	8006aec <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8006aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01c      	beq.n	8006aec <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d005      	beq.n	8006ac8 <_PrintUnsigned+0x68>
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d102      	bne.n	8006ac8 <_PrintUnsigned+0x68>
        c = '0';
 8006ac2:	2330      	movs	r3, #48	@ 0x30
 8006ac4:	76fb      	strb	r3, [r7, #27]
 8006ac6:	e001      	b.n	8006acc <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8006ac8:	2320      	movs	r3, #32
 8006aca:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006acc:	e007      	b.n	8006ade <_PrintUnsigned+0x7e>
        FieldWidth--;
 8006ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8006ad4:	7efb      	ldrb	r3, [r7, #27]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f7ff ff45 	bl	8006968 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <_PrintUnsigned+0x8c>
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d3f0      	bcc.n	8006ace <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d903      	bls.n	8006afa <_PrintUnsigned+0x9a>
      NumDigits--;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	3b01      	subs	r3, #1
 8006af6:	603b      	str	r3, [r7, #0]
 8006af8:	e009      	b.n	8006b0e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b02:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d200      	bcs.n	8006b0e <_PrintUnsigned+0xae>
        break;
 8006b0c:	e005      	b.n	8006b1a <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	fb02 f303 	mul.w	r3, r2, r3
 8006b16:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006b18:	e7e8      	b.n	8006aec <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b22:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b28:	fb02 f303 	mul.w	r3, r2, r3
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006b32:	4a15      	ldr	r2, [pc, #84]	@ (8006b88 <_PrintUnsigned+0x128>)
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	4413      	add	r3, r2
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f7ff ff13 	bl	8006968 <_StoreChar>
    Digit /= Base;
 8006b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e3      	bne.n	8006b1a <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d011      	beq.n	8006b80 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00e      	beq.n	8006b80 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006b62:	e006      	b.n	8006b72 <_PrintUnsigned+0x112>
        FieldWidth--;
 8006b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b66:	3b01      	subs	r3, #1
 8006b68:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8006b6a:	2120      	movs	r1, #32
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7ff fefb 	bl	8006968 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <_PrintUnsigned+0x120>
 8006b78:	69fa      	ldr	r2, [r7, #28]
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d3f1      	bcc.n	8006b64 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8006b80:	bf00      	nop
 8006b82:	3728      	adds	r7, #40	@ 0x28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	08008498 	.word	0x08008498

08006b8c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b088      	sub	sp, #32
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	bfb8      	it	lt
 8006ba0:	425b      	neglt	r3, r3
 8006ba2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006ba8:	e007      	b.n	8006bba <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	fb92 f3f3 	sdiv	r3, r2, r3
 8006bb2:	613b      	str	r3, [r7, #16]
    Width++;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	daf3      	bge.n	8006baa <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d901      	bls.n	8006bce <_PrintInt+0x42>
    Width = NumDigits;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <_PrintInt+0x5e>
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	db04      	blt.n	8006be4 <_PrintInt+0x58>
 8006bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <_PrintInt+0x5e>
    FieldWidth--;
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <_PrintInt+0x6e>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d016      	beq.n	8006c28 <_PrintInt+0x9c>
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d111      	bne.n	8006c28 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00e      	beq.n	8006c28 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006c0a:	e006      	b.n	8006c1a <_PrintInt+0x8e>
        FieldWidth--;
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006c12:	2120      	movs	r1, #32
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f7ff fea7 	bl	8006968 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <_PrintInt+0x9c>
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d3f1      	bcc.n	8006c0c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	da07      	bge.n	8006c3e <_PrintInt+0xb2>
    v = -v;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	425b      	negs	r3, r3
 8006c32:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006c34:	212d      	movs	r1, #45	@ 0x2d
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f7ff fe96 	bl	8006968 <_StoreChar>
 8006c3c:	e008      	b.n	8006c50 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006c48:	212b      	movs	r1, #43	@ 0x2b
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f7ff fe8c 	bl	8006968 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d019      	beq.n	8006c8e <_PrintInt+0x102>
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d114      	bne.n	8006c8e <_PrintInt+0x102>
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d111      	bne.n	8006c8e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00e      	beq.n	8006c8e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006c70:	e006      	b.n	8006c80 <_PrintInt+0xf4>
        FieldWidth--;
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006c78:	2130      	movs	r1, #48	@ 0x30
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f7ff fe74 	bl	8006968 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <_PrintInt+0x102>
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d3f1      	bcc.n	8006c72 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006c8e:	68b9      	ldr	r1, [r7, #8]
 8006c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c92:	9301      	str	r3, [sp, #4]
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f7ff fedf 	bl	8006a60 <_PrintUnsigned>
}
 8006ca2:	bf00      	nop
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b098      	sub	sp, #96	@ 0x60
 8006cb0:	af02      	add	r7, sp, #8
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006cb8:	f3ef 8311 	mrs	r3, BASEPRI
 8006cbc:	f04f 0120 	mov.w	r1, #32
 8006cc0:	f381 8811 	msr	BASEPRI, r1
 8006cc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cc6:	48b7      	ldr	r0, [pc, #732]	@ (8006fa4 <_VPrintTarget+0x2f8>)
 8006cc8:	f7ff fc75 	bl	80065b6 <_PreparePacket>
 8006ccc:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006cce:	4bb5      	ldr	r3, [pc, #724]	@ (8006fa4 <_VPrintTarget+0x2f8>)
 8006cd0:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd8:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006cf2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 8183 	beq.w	8007002 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006cfc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d00:	2b25      	cmp	r3, #37	@ 0x25
 8006d02:	f040 8170 	bne.w	8006fe6 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006d06:	2300      	movs	r3, #0
 8006d08:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8006d16:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d1a:	3b23      	subs	r3, #35	@ 0x23
 8006d1c:	2b0d      	cmp	r3, #13
 8006d1e:	d83f      	bhi.n	8006da0 <_VPrintTarget+0xf4>
 8006d20:	a201      	add	r2, pc, #4	@ (adr r2, 8006d28 <_VPrintTarget+0x7c>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d91 	.word	0x08006d91
 8006d2c:	08006da1 	.word	0x08006da1
 8006d30:	08006da1 	.word	0x08006da1
 8006d34:	08006da1 	.word	0x08006da1
 8006d38:	08006da1 	.word	0x08006da1
 8006d3c:	08006da1 	.word	0x08006da1
 8006d40:	08006da1 	.word	0x08006da1
 8006d44:	08006da1 	.word	0x08006da1
 8006d48:	08006d81 	.word	0x08006d81
 8006d4c:	08006da1 	.word	0x08006da1
 8006d50:	08006d61 	.word	0x08006d61
 8006d54:	08006da1 	.word	0x08006da1
 8006d58:	08006da1 	.word	0x08006da1
 8006d5c:	08006d71 	.word	0x08006d71
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006d60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d62:	f043 0301 	orr.w	r3, r3, #1
 8006d66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	e01a      	b.n	8006da6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006d70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d72:	f043 0302 	orr.w	r3, r3, #2
 8006d76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	e012      	b.n	8006da6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006d80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d82:	f043 0304 	orr.w	r3, r3, #4
 8006d86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	e00a      	b.n	8006da6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006d90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d92:	f043 0308 	orr.w	r3, r3, #8
 8006d96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	e002      	b.n	8006da6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006da0:	2300      	movs	r3, #0
 8006da2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006da4:	bf00      	nop
        }
      } while (v);
 8006da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1b0      	bne.n	8006d0e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006dac:	2300      	movs	r3, #0
 8006dae:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006db8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006dbc:	2b2f      	cmp	r3, #47	@ 0x2f
 8006dbe:	d912      	bls.n	8006de6 <_VPrintTarget+0x13a>
 8006dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006dc4:	2b39      	cmp	r3, #57	@ 0x39
 8006dc6:	d80e      	bhi.n	8006de6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006dce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	461a      	mov	r2, r3
 8006dda:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006dde:	4413      	add	r3, r2
 8006de0:	3b30      	subs	r3, #48	@ 0x30
 8006de2:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006de4:	e7e4      	b.n	8006db0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006de6:	2300      	movs	r3, #0
 8006de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8006df2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006df6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006df8:	d11d      	bne.n	8006e36 <_VPrintTarget+0x18a>
        sFormat++;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006e08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006e0e:	d912      	bls.n	8006e36 <_VPrintTarget+0x18a>
 8006e10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e14:	2b39      	cmp	r3, #57	@ 0x39
 8006e16:	d80e      	bhi.n	8006e36 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006e1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	461a      	mov	r2, r3
 8006e2a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e2e:	4413      	add	r3, r2
 8006e30:	3b30      	subs	r3, #48	@ 0x30
 8006e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8006e34:	e7e4      	b.n	8006e00 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006e3e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e42:	2b6c      	cmp	r3, #108	@ 0x6c
 8006e44:	d003      	beq.n	8006e4e <_VPrintTarget+0x1a2>
 8006e46:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e4a:	2b68      	cmp	r3, #104	@ 0x68
 8006e4c:	d107      	bne.n	8006e5e <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006e5c:	e7ef      	b.n	8006e3e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006e5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e62:	2b25      	cmp	r3, #37	@ 0x25
 8006e64:	f000 80b3 	beq.w	8006fce <_VPrintTarget+0x322>
 8006e68:	2b25      	cmp	r3, #37	@ 0x25
 8006e6a:	f2c0 80b7 	blt.w	8006fdc <_VPrintTarget+0x330>
 8006e6e:	2b78      	cmp	r3, #120	@ 0x78
 8006e70:	f300 80b4 	bgt.w	8006fdc <_VPrintTarget+0x330>
 8006e74:	2b58      	cmp	r3, #88	@ 0x58
 8006e76:	f2c0 80b1 	blt.w	8006fdc <_VPrintTarget+0x330>
 8006e7a:	3b58      	subs	r3, #88	@ 0x58
 8006e7c:	2b20      	cmp	r3, #32
 8006e7e:	f200 80ad 	bhi.w	8006fdc <_VPrintTarget+0x330>
 8006e82:	a201      	add	r2, pc, #4	@ (adr r2, 8006e88 <_VPrintTarget+0x1dc>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006f7f 	.word	0x08006f7f
 8006e8c:	08006fdd 	.word	0x08006fdd
 8006e90:	08006fdd 	.word	0x08006fdd
 8006e94:	08006fdd 	.word	0x08006fdd
 8006e98:	08006fdd 	.word	0x08006fdd
 8006e9c:	08006fdd 	.word	0x08006fdd
 8006ea0:	08006fdd 	.word	0x08006fdd
 8006ea4:	08006fdd 	.word	0x08006fdd
 8006ea8:	08006fdd 	.word	0x08006fdd
 8006eac:	08006fdd 	.word	0x08006fdd
 8006eb0:	08006fdd 	.word	0x08006fdd
 8006eb4:	08006f0d 	.word	0x08006f0d
 8006eb8:	08006f33 	.word	0x08006f33
 8006ebc:	08006fdd 	.word	0x08006fdd
 8006ec0:	08006fdd 	.word	0x08006fdd
 8006ec4:	08006fdd 	.word	0x08006fdd
 8006ec8:	08006fdd 	.word	0x08006fdd
 8006ecc:	08006fdd 	.word	0x08006fdd
 8006ed0:	08006fdd 	.word	0x08006fdd
 8006ed4:	08006fdd 	.word	0x08006fdd
 8006ed8:	08006fdd 	.word	0x08006fdd
 8006edc:	08006fdd 	.word	0x08006fdd
 8006ee0:	08006fdd 	.word	0x08006fdd
 8006ee4:	08006fdd 	.word	0x08006fdd
 8006ee8:	08006fa9 	.word	0x08006fa9
 8006eec:	08006fdd 	.word	0x08006fdd
 8006ef0:	08006fdd 	.word	0x08006fdd
 8006ef4:	08006fdd 	.word	0x08006fdd
 8006ef8:	08006fdd 	.word	0x08006fdd
 8006efc:	08006f59 	.word	0x08006f59
 8006f00:	08006fdd 	.word	0x08006fdd
 8006f04:	08006fdd 	.word	0x08006fdd
 8006f08:	08006f7f 	.word	0x08006f7f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	1d19      	adds	r1, r3, #4
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	6011      	str	r1, [r2, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8006f20:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8006f24:	f107 0314 	add.w	r3, r7, #20
 8006f28:	4611      	mov	r1, r2
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7ff fd1c 	bl	8006968 <_StoreChar>
        break;
 8006f30:	e055      	b.n	8006fde <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	1d19      	adds	r1, r3, #4
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	6011      	str	r1, [r2, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006f40:	f107 0014 	add.w	r0, r7, #20
 8006f44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f46:	9301      	str	r3, [sp, #4]
 8006f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f4e:	220a      	movs	r2, #10
 8006f50:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f52:	f7ff fe1b 	bl	8006b8c <_PrintInt>
        break;
 8006f56:	e042      	b.n	8006fde <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	1d19      	adds	r1, r3, #4
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	6011      	str	r1, [r2, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006f66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f68:	f107 0014 	add.w	r0, r7, #20
 8006f6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f6e:	9301      	str	r3, [sp, #4]
 8006f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f76:	220a      	movs	r2, #10
 8006f78:	f7ff fd72 	bl	8006a60 <_PrintUnsigned>
        break;
 8006f7c:	e02f      	b.n	8006fde <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	1d19      	adds	r1, r3, #4
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	6011      	str	r1, [r2, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006f8c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f8e:	f107 0014 	add.w	r0, r7, #20
 8006f92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f94:	9301      	str	r3, [sp, #4]
 8006f96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f9c:	2210      	movs	r2, #16
 8006f9e:	f7ff fd5f 	bl	8006a60 <_PrintUnsigned>
        break;
 8006fa2:	e01c      	b.n	8006fde <_VPrintTarget+0x332>
 8006fa4:	20014420 	.word	0x20014420
      case 'p':
        v = va_arg(*pParamList, int);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	1d19      	adds	r1, r3, #4
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6011      	str	r1, [r2, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006fb6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006fb8:	f107 0014 	add.w	r0, r7, #20
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	9301      	str	r3, [sp, #4]
 8006fc0:	2308      	movs	r3, #8
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	2308      	movs	r3, #8
 8006fc6:	2210      	movs	r2, #16
 8006fc8:	f7ff fd4a 	bl	8006a60 <_PrintUnsigned>
        break;
 8006fcc:	e007      	b.n	8006fde <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006fce:	f107 0314 	add.w	r3, r7, #20
 8006fd2:	2125      	movs	r1, #37	@ 0x25
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff fcc7 	bl	8006968 <_StoreChar>
        break;
 8006fda:	e000      	b.n	8006fde <_VPrintTarget+0x332>
      default:
        break;
 8006fdc:	bf00      	nop
      }
      sFormat++;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	e007      	b.n	8006ff6 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006fe6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006fea:	f107 0314 	add.w	r3, r7, #20
 8006fee:	4611      	mov	r1, r2
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7ff fcb9 	bl	8006968 <_StoreChar>
    }
  } while (*sFormat);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f47f ae72 	bne.w	8006ce4 <_VPrintTarget+0x38>
 8007000:	e000      	b.n	8007004 <_VPrintTarget+0x358>
      break;
 8007002:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8007004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007006:	2b00      	cmp	r3, #0
 8007008:	d041      	beq.n	800708e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800700a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	643b      	str	r3, [r7, #64]	@ 0x40
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800701a:	e00b      	b.n	8007034 <_VPrintTarget+0x388>
 800701c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800701e:	b2da      	uxtb	r2, r3
 8007020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007022:	1c59      	adds	r1, r3, #1
 8007024:	6439      	str	r1, [r7, #64]	@ 0x40
 8007026:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800702a:	b2d2      	uxtb	r2, r2
 800702c:	701a      	strb	r2, [r3, #0]
 800702e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007030:	09db      	lsrs	r3, r3, #7
 8007032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007036:	2b7f      	cmp	r3, #127	@ 0x7f
 8007038:	d8f0      	bhi.n	800701c <_VPrintTarget+0x370>
 800703a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007040:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007042:	b2d2      	uxtb	r2, r2
 8007044:	701a      	strb	r2, [r3, #0]
 8007046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007048:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800704e:	2300      	movs	r3, #0
 8007050:	637b      	str	r3, [r7, #52]	@ 0x34
 8007052:	e00b      	b.n	800706c <_VPrintTarget+0x3c0>
 8007054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007056:	b2da      	uxtb	r2, r3
 8007058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705a:	1c59      	adds	r1, r3, #1
 800705c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800705e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007062:	b2d2      	uxtb	r2, r2
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007068:	09db      	lsrs	r3, r3, #7
 800706a:	637b      	str	r3, [r7, #52]	@ 0x34
 800706c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800706e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007070:	d8f0      	bhi.n	8007054 <_VPrintTarget+0x3a8>
 8007072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007078:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	701a      	strb	r2, [r3, #0]
 800707e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007080:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	69b9      	ldr	r1, [r7, #24]
 8007086:	221a      	movs	r2, #26
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff fb85 	bl	8006798 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8007094:	bf00      	nop
 8007096:	3758      	adds	r7, #88	@ 0x58
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
 80070a8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80070aa:	2300      	movs	r3, #0
 80070ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80070b0:	4917      	ldr	r1, [pc, #92]	@ (8007110 <SEGGER_SYSVIEW_Init+0x74>)
 80070b2:	4818      	ldr	r0, [pc, #96]	@ (8007114 <SEGGER_SYSVIEW_Init+0x78>)
 80070b4:	f7ff f93e 	bl	8006334 <SEGGER_RTT_AllocUpBuffer>
 80070b8:	4603      	mov	r3, r0
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	4b16      	ldr	r3, [pc, #88]	@ (8007118 <SEGGER_SYSVIEW_Init+0x7c>)
 80070be:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80070c0:	4b15      	ldr	r3, [pc, #84]	@ (8007118 <SEGGER_SYSVIEW_Init+0x7c>)
 80070c2:	785a      	ldrb	r2, [r3, #1]
 80070c4:	4b14      	ldr	r3, [pc, #80]	@ (8007118 <SEGGER_SYSVIEW_Init+0x7c>)
 80070c6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80070c8:	4b13      	ldr	r3, [pc, #76]	@ (8007118 <SEGGER_SYSVIEW_Init+0x7c>)
 80070ca:	7e1b      	ldrb	r3, [r3, #24]
 80070cc:	4618      	mov	r0, r3
 80070ce:	2300      	movs	r3, #0
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	2308      	movs	r3, #8
 80070d4:	4a11      	ldr	r2, [pc, #68]	@ (800711c <SEGGER_SYSVIEW_Init+0x80>)
 80070d6:	490f      	ldr	r1, [pc, #60]	@ (8007114 <SEGGER_SYSVIEW_Init+0x78>)
 80070d8:	f7ff f9b0 	bl	800643c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80070dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007118 <SEGGER_SYSVIEW_Init+0x7c>)
 80070de:	2200      	movs	r2, #0
 80070e0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80070e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007120 <SEGGER_SYSVIEW_Init+0x84>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007118 <SEGGER_SYSVIEW_Init+0x7c>)
 80070e8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80070ea:	4a0b      	ldr	r2, [pc, #44]	@ (8007118 <SEGGER_SYSVIEW_Init+0x7c>)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80070f0:	4a09      	ldr	r2, [pc, #36]	@ (8007118 <SEGGER_SYSVIEW_Init+0x7c>)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80070f6:	4a08      	ldr	r2, [pc, #32]	@ (8007118 <SEGGER_SYSVIEW_Init+0x7c>)
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80070fc:	4a06      	ldr	r2, [pc, #24]	@ (8007118 <SEGGER_SYSVIEW_Init+0x7c>)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007102:	4b05      	ldr	r3, [pc, #20]	@ (8007118 <SEGGER_SYSVIEW_Init+0x7c>)
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8007108:	bf00      	nop
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	200133e8 	.word	0x200133e8
 8007114:	08008460 	.word	0x08008460
 8007118:	200143f0 	.word	0x200143f0
 800711c:	200143e8 	.word	0x200143e8
 8007120:	e0001004 	.word	0xe0001004

08007124 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800712c:	4a04      	ldr	r2, [pc, #16]	@ (8007140 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6113      	str	r3, [r2, #16]
}
 8007132:	bf00      	nop
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	200143f0 	.word	0x200143f0

08007144 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800714c:	f3ef 8311 	mrs	r3, BASEPRI
 8007150:	f04f 0120 	mov.w	r1, #32
 8007154:	f381 8811 	msr	BASEPRI, r1
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	4808      	ldr	r0, [pc, #32]	@ (800717c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800715c:	f7ff fa2b 	bl	80065b6 <_PreparePacket>
 8007160:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	68b9      	ldr	r1, [r7, #8]
 8007166:	68b8      	ldr	r0, [r7, #8]
 8007168:	f7ff fb16 	bl	8006798 <_SendPacket>
  RECORD_END();
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f383 8811 	msr	BASEPRI, r3
}
 8007172:	bf00      	nop
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	20014420 	.word	0x20014420

08007180 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800718a:	f3ef 8311 	mrs	r3, BASEPRI
 800718e:	f04f 0120 	mov.w	r1, #32
 8007192:	f381 8811 	msr	BASEPRI, r1
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	4816      	ldr	r0, [pc, #88]	@ (80071f4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800719a:	f7ff fa0c 	bl	80065b6 <_PreparePacket>
 800719e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	61fb      	str	r3, [r7, #28]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	61bb      	str	r3, [r7, #24]
 80071ac:	e00b      	b.n	80071c6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	1c59      	adds	r1, r3, #1
 80071b6:	61f9      	str	r1, [r7, #28]
 80071b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	701a      	strb	r2, [r3, #0]
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	09db      	lsrs	r3, r3, #7
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80071ca:	d8f0      	bhi.n	80071ae <SEGGER_SYSVIEW_RecordU32+0x2e>
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	61fa      	str	r2, [r7, #28]
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	68f9      	ldr	r1, [r7, #12]
 80071e0:	6938      	ldr	r0, [r7, #16]
 80071e2:	f7ff fad9 	bl	8006798 <_SendPacket>
  RECORD_END();
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f383 8811 	msr	BASEPRI, r3
}
 80071ec:	bf00      	nop
 80071ee:	3720      	adds	r7, #32
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	20014420 	.word	0x20014420

080071f8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08c      	sub	sp, #48	@ 0x30
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007204:	f3ef 8311 	mrs	r3, BASEPRI
 8007208:	f04f 0120 	mov.w	r1, #32
 800720c:	f381 8811 	msr	BASEPRI, r1
 8007210:	61fb      	str	r3, [r7, #28]
 8007212:	4825      	ldr	r0, [pc, #148]	@ (80072a8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007214:	f7ff f9cf 	bl	80065b6 <_PreparePacket>
 8007218:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007226:	e00b      	b.n	8007240 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722a:	b2da      	uxtb	r2, r3
 800722c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800722e:	1c59      	adds	r1, r3, #1
 8007230:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007232:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007236:	b2d2      	uxtb	r2, r2
 8007238:	701a      	strb	r2, [r3, #0]
 800723a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723c:	09db      	lsrs	r3, r3, #7
 800723e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007242:	2b7f      	cmp	r3, #127	@ 0x7f
 8007244:	d8f0      	bhi.n	8007228 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800724c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800724e:	b2d2      	uxtb	r2, r2
 8007250:	701a      	strb	r2, [r3, #0]
 8007252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007254:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	627b      	str	r3, [r7, #36]	@ 0x24
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	623b      	str	r3, [r7, #32]
 800725e:	e00b      	b.n	8007278 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	b2da      	uxtb	r2, r3
 8007264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007266:	1c59      	adds	r1, r3, #1
 8007268:	6279      	str	r1, [r7, #36]	@ 0x24
 800726a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800726e:	b2d2      	uxtb	r2, r2
 8007270:	701a      	strb	r2, [r3, #0]
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	09db      	lsrs	r3, r3, #7
 8007276:	623b      	str	r3, [r7, #32]
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	2b7f      	cmp	r3, #127	@ 0x7f
 800727c:	d8f0      	bhi.n	8007260 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800727e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	627a      	str	r2, [r7, #36]	@ 0x24
 8007284:	6a3a      	ldr	r2, [r7, #32]
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	701a      	strb	r2, [r3, #0]
 800728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	6979      	ldr	r1, [r7, #20]
 8007292:	69b8      	ldr	r0, [r7, #24]
 8007294:	f7ff fa80 	bl	8006798 <_SendPacket>
  RECORD_END();
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	f383 8811 	msr	BASEPRI, r3
}
 800729e:	bf00      	nop
 80072a0:	3730      	adds	r7, #48	@ 0x30
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20014420 	.word	0x20014420

080072ac <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08e      	sub	sp, #56	@ 0x38
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80072ba:	f3ef 8311 	mrs	r3, BASEPRI
 80072be:	f04f 0120 	mov.w	r1, #32
 80072c2:	f381 8811 	msr	BASEPRI, r1
 80072c6:	61fb      	str	r3, [r7, #28]
 80072c8:	4832      	ldr	r0, [pc, #200]	@ (8007394 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80072ca:	f7ff f974 	bl	80065b6 <_PreparePacket>
 80072ce:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	633b      	str	r3, [r7, #48]	@ 0x30
 80072dc:	e00b      	b.n	80072f6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80072de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e4:	1c59      	adds	r1, r3, #1
 80072e6:	6379      	str	r1, [r7, #52]	@ 0x34
 80072e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	701a      	strb	r2, [r3, #0]
 80072f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f2:	09db      	lsrs	r3, r3, #7
 80072f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80072f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80072fa:	d8f0      	bhi.n	80072de <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80072fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	637a      	str	r2, [r7, #52]	@ 0x34
 8007302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007304:	b2d2      	uxtb	r2, r2
 8007306:	701a      	strb	r2, [r3, #0]
 8007308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800730a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007314:	e00b      	b.n	800732e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8007316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007318:	b2da      	uxtb	r2, r3
 800731a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731c:	1c59      	adds	r1, r3, #1
 800731e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007320:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007324:	b2d2      	uxtb	r2, r2
 8007326:	701a      	strb	r2, [r3, #0]
 8007328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732a:	09db      	lsrs	r3, r3, #7
 800732c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800732e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007330:	2b7f      	cmp	r3, #127	@ 0x7f
 8007332:	d8f0      	bhi.n	8007316 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800733a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800733c:	b2d2      	uxtb	r2, r2
 800733e:	701a      	strb	r2, [r3, #0]
 8007340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007342:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	627b      	str	r3, [r7, #36]	@ 0x24
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	623b      	str	r3, [r7, #32]
 800734c:	e00b      	b.n	8007366 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	b2da      	uxtb	r2, r3
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	1c59      	adds	r1, r3, #1
 8007356:	6279      	str	r1, [r7, #36]	@ 0x24
 8007358:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800735c:	b2d2      	uxtb	r2, r2
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	09db      	lsrs	r3, r3, #7
 8007364:	623b      	str	r3, [r7, #32]
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	2b7f      	cmp	r3, #127	@ 0x7f
 800736a:	d8f0      	bhi.n	800734e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800736c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	627a      	str	r2, [r7, #36]	@ 0x24
 8007372:	6a3a      	ldr	r2, [r7, #32]
 8007374:	b2d2      	uxtb	r2, r2
 8007376:	701a      	strb	r2, [r3, #0]
 8007378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	6979      	ldr	r1, [r7, #20]
 8007380:	69b8      	ldr	r0, [r7, #24]
 8007382:	f7ff fa09 	bl	8006798 <_SendPacket>
  RECORD_END();
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	f383 8811 	msr	BASEPRI, r3
}
 800738c:	bf00      	nop
 800738e:	3738      	adds	r7, #56	@ 0x38
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	20014420 	.word	0x20014420

08007398 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007398:	b580      	push	{r7, lr}
 800739a:	b090      	sub	sp, #64	@ 0x40
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80073a6:	f3ef 8311 	mrs	r3, BASEPRI
 80073aa:	f04f 0120 	mov.w	r1, #32
 80073ae:	f381 8811 	msr	BASEPRI, r1
 80073b2:	61fb      	str	r3, [r7, #28]
 80073b4:	4840      	ldr	r0, [pc, #256]	@ (80074b8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80073b6:	f7ff f8fe 	bl	80065b6 <_PreparePacket>
 80073ba:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073c8:	e00b      	b.n	80073e2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80073ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073d0:	1c59      	adds	r1, r3, #1
 80073d2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80073d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073d8:	b2d2      	uxtb	r2, r2
 80073da:	701a      	strb	r2, [r3, #0]
 80073dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073de:	09db      	lsrs	r3, r3, #7
 80073e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80073e6:	d8f0      	bhi.n	80073ca <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80073e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80073ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073f0:	b2d2      	uxtb	r2, r2
 80073f2:	701a      	strb	r2, [r3, #0]
 80073f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007400:	e00b      	b.n	800741a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007404:	b2da      	uxtb	r2, r3
 8007406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007408:	1c59      	adds	r1, r3, #1
 800740a:	6379      	str	r1, [r7, #52]	@ 0x34
 800740c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007410:	b2d2      	uxtb	r2, r2
 8007412:	701a      	strb	r2, [r3, #0]
 8007414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007416:	09db      	lsrs	r3, r3, #7
 8007418:	633b      	str	r3, [r7, #48]	@ 0x30
 800741a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741c:	2b7f      	cmp	r3, #127	@ 0x7f
 800741e:	d8f0      	bhi.n	8007402 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	637a      	str	r2, [r7, #52]	@ 0x34
 8007426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007428:	b2d2      	uxtb	r2, r2
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800742e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007438:	e00b      	b.n	8007452 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800743a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800743c:	b2da      	uxtb	r2, r3
 800743e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007440:	1c59      	adds	r1, r3, #1
 8007442:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007444:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007448:	b2d2      	uxtb	r2, r2
 800744a:	701a      	strb	r2, [r3, #0]
 800744c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744e:	09db      	lsrs	r3, r3, #7
 8007450:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007454:	2b7f      	cmp	r3, #127	@ 0x7f
 8007456:	d8f0      	bhi.n	800743a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800745e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007460:	b2d2      	uxtb	r2, r2
 8007462:	701a      	strb	r2, [r3, #0]
 8007464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007466:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	627b      	str	r3, [r7, #36]	@ 0x24
 800746c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800746e:	623b      	str	r3, [r7, #32]
 8007470:	e00b      	b.n	800748a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	b2da      	uxtb	r2, r3
 8007476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007478:	1c59      	adds	r1, r3, #1
 800747a:	6279      	str	r1, [r7, #36]	@ 0x24
 800747c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007480:	b2d2      	uxtb	r2, r2
 8007482:	701a      	strb	r2, [r3, #0]
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	09db      	lsrs	r3, r3, #7
 8007488:	623b      	str	r3, [r7, #32]
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	2b7f      	cmp	r3, #127	@ 0x7f
 800748e:	d8f0      	bhi.n	8007472 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	627a      	str	r2, [r7, #36]	@ 0x24
 8007496:	6a3a      	ldr	r2, [r7, #32]
 8007498:	b2d2      	uxtb	r2, r2
 800749a:	701a      	strb	r2, [r3, #0]
 800749c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	6979      	ldr	r1, [r7, #20]
 80074a4:	69b8      	ldr	r0, [r7, #24]
 80074a6:	f7ff f977 	bl	8006798 <_SendPacket>
  RECORD_END();
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	f383 8811 	msr	BASEPRI, r3
}
 80074b0:	bf00      	nop
 80074b2:	3740      	adds	r7, #64	@ 0x40
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	20014420 	.word	0x20014420

080074bc <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 80074bc:	b580      	push	{r7, lr}
 80074be:	b092      	sub	sp, #72	@ 0x48
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 80074ca:	f3ef 8311 	mrs	r3, BASEPRI
 80074ce:	f04f 0120 	mov.w	r1, #32
 80074d2:	f381 8811 	msr	BASEPRI, r1
 80074d6:	61fb      	str	r3, [r7, #28]
 80074d8:	484e      	ldr	r0, [pc, #312]	@ (8007614 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 80074da:	f7ff f86c 	bl	80065b6 <_PreparePacket>
 80074de:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80074ec:	e00b      	b.n	8007506 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 80074ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074f4:	1c59      	adds	r1, r3, #1
 80074f6:	6479      	str	r1, [r7, #68]	@ 0x44
 80074f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074fc:	b2d2      	uxtb	r2, r2
 80074fe:	701a      	strb	r2, [r3, #0]
 8007500:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007502:	09db      	lsrs	r3, r3, #7
 8007504:	643b      	str	r3, [r7, #64]	@ 0x40
 8007506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007508:	2b7f      	cmp	r3, #127	@ 0x7f
 800750a:	d8f0      	bhi.n	80074ee <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800750c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	647a      	str	r2, [r7, #68]	@ 0x44
 8007512:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007514:	b2d2      	uxtb	r2, r2
 8007516:	701a      	strb	r2, [r3, #0]
 8007518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800751a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007524:	e00b      	b.n	800753e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8007526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007528:	b2da      	uxtb	r2, r3
 800752a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800752c:	1c59      	adds	r1, r3, #1
 800752e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8007530:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007534:	b2d2      	uxtb	r2, r2
 8007536:	701a      	strb	r2, [r3, #0]
 8007538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753a:	09db      	lsrs	r3, r3, #7
 800753c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800753e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007540:	2b7f      	cmp	r3, #127	@ 0x7f
 8007542:	d8f0      	bhi.n	8007526 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8007544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800754a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800754c:	b2d2      	uxtb	r2, r2
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007552:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	637b      	str	r3, [r7, #52]	@ 0x34
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	633b      	str	r3, [r7, #48]	@ 0x30
 800755c:	e00b      	b.n	8007576 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800755e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007560:	b2da      	uxtb	r2, r3
 8007562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007564:	1c59      	adds	r1, r3, #1
 8007566:	6379      	str	r1, [r7, #52]	@ 0x34
 8007568:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800756c:	b2d2      	uxtb	r2, r2
 800756e:	701a      	strb	r2, [r3, #0]
 8007570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007572:	09db      	lsrs	r3, r3, #7
 8007574:	633b      	str	r3, [r7, #48]	@ 0x30
 8007576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007578:	2b7f      	cmp	r3, #127	@ 0x7f
 800757a:	d8f0      	bhi.n	800755e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 800757c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	637a      	str	r2, [r7, #52]	@ 0x34
 8007582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007584:	b2d2      	uxtb	r2, r2
 8007586:	701a      	strb	r2, [r3, #0]
 8007588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800758a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007592:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007594:	e00b      	b.n	80075ae <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8007596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007598:	b2da      	uxtb	r2, r3
 800759a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800759c:	1c59      	adds	r1, r3, #1
 800759e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80075a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075a4:	b2d2      	uxtb	r2, r2
 80075a6:	701a      	strb	r2, [r3, #0]
 80075a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075aa:	09db      	lsrs	r3, r3, #7
 80075ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80075b2:	d8f0      	bhi.n	8007596 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 80075b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075bc:	b2d2      	uxtb	r2, r2
 80075be:	701a      	strb	r2, [r3, #0]
 80075c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80075c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075ca:	623b      	str	r3, [r7, #32]
 80075cc:	e00b      	b.n	80075e6 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d4:	1c59      	adds	r1, r3, #1
 80075d6:	6279      	str	r1, [r7, #36]	@ 0x24
 80075d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075dc:	b2d2      	uxtb	r2, r2
 80075de:	701a      	strb	r2, [r3, #0]
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	09db      	lsrs	r3, r3, #7
 80075e4:	623b      	str	r3, [r7, #32]
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80075ea:	d8f0      	bhi.n	80075ce <SEGGER_SYSVIEW_RecordU32x5+0x112>
 80075ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ee:	1c5a      	adds	r2, r3, #1
 80075f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80075f2:	6a3a      	ldr	r2, [r7, #32]
 80075f4:	b2d2      	uxtb	r2, r2
 80075f6:	701a      	strb	r2, [r3, #0]
 80075f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	6979      	ldr	r1, [r7, #20]
 8007600:	69b8      	ldr	r0, [r7, #24]
 8007602:	f7ff f8c9 	bl	8006798 <_SendPacket>
  RECORD_END();
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	f383 8811 	msr	BASEPRI, r3
}
 800760c:	bf00      	nop
 800760e:	3748      	adds	r7, #72	@ 0x48
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	20014420 	.word	0x20014420

08007618 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007618:	b580      	push	{r7, lr}
 800761a:	b08c      	sub	sp, #48	@ 0x30
 800761c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800761e:	4b59      	ldr	r3, [pc, #356]	@ (8007784 <SEGGER_SYSVIEW_Start+0x16c>)
 8007620:	2201      	movs	r2, #1
 8007622:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007624:	f3ef 8311 	mrs	r3, BASEPRI
 8007628:	f04f 0120 	mov.w	r1, #32
 800762c:	f381 8811 	msr	BASEPRI, r1
 8007630:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007632:	4b54      	ldr	r3, [pc, #336]	@ (8007784 <SEGGER_SYSVIEW_Start+0x16c>)
 8007634:	785b      	ldrb	r3, [r3, #1]
 8007636:	220a      	movs	r2, #10
 8007638:	4953      	ldr	r1, [pc, #332]	@ (8007788 <SEGGER_SYSVIEW_Start+0x170>)
 800763a:	4618      	mov	r0, r3
 800763c:	f7f8 fdc8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8007646:	f7fe fb49 	bl	8005cdc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800764a:	200a      	movs	r0, #10
 800764c:	f7ff fd7a 	bl	8007144 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007650:	f3ef 8311 	mrs	r3, BASEPRI
 8007654:	f04f 0120 	mov.w	r1, #32
 8007658:	f381 8811 	msr	BASEPRI, r1
 800765c:	60bb      	str	r3, [r7, #8]
 800765e:	484b      	ldr	r0, [pc, #300]	@ (800778c <SEGGER_SYSVIEW_Start+0x174>)
 8007660:	f7fe ffa9 	bl	80065b6 <_PreparePacket>
 8007664:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800766e:	4b45      	ldr	r3, [pc, #276]	@ (8007784 <SEGGER_SYSVIEW_Start+0x16c>)
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007674:	e00b      	b.n	800768e <SEGGER_SYSVIEW_Start+0x76>
 8007676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007678:	b2da      	uxtb	r2, r3
 800767a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767c:	1c59      	adds	r1, r3, #1
 800767e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007680:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007684:	b2d2      	uxtb	r2, r2
 8007686:	701a      	strb	r2, [r3, #0]
 8007688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768a:	09db      	lsrs	r3, r3, #7
 800768c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800768e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007690:	2b7f      	cmp	r3, #127	@ 0x7f
 8007692:	d8f0      	bhi.n	8007676 <SEGGER_SYSVIEW_Start+0x5e>
 8007694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800769a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	701a      	strb	r2, [r3, #0]
 80076a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80076a8:	4b36      	ldr	r3, [pc, #216]	@ (8007784 <SEGGER_SYSVIEW_Start+0x16c>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	623b      	str	r3, [r7, #32]
 80076ae:	e00b      	b.n	80076c8 <SEGGER_SYSVIEW_Start+0xb0>
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b6:	1c59      	adds	r1, r3, #1
 80076b8:	6279      	str	r1, [r7, #36]	@ 0x24
 80076ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80076be:	b2d2      	uxtb	r2, r2
 80076c0:	701a      	strb	r2, [r3, #0]
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	09db      	lsrs	r3, r3, #7
 80076c6:	623b      	str	r3, [r7, #32]
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80076cc:	d8f0      	bhi.n	80076b0 <SEGGER_SYSVIEW_Start+0x98>
 80076ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d0:	1c5a      	adds	r2, r3, #1
 80076d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80076d4:	6a3a      	ldr	r2, [r7, #32]
 80076d6:	b2d2      	uxtb	r2, r2
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	61fb      	str	r3, [r7, #28]
 80076e2:	4b28      	ldr	r3, [pc, #160]	@ (8007784 <SEGGER_SYSVIEW_Start+0x16c>)
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	61bb      	str	r3, [r7, #24]
 80076e8:	e00b      	b.n	8007702 <SEGGER_SYSVIEW_Start+0xea>
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	1c59      	adds	r1, r3, #1
 80076f2:	61f9      	str	r1, [r7, #28]
 80076f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80076f8:	b2d2      	uxtb	r2, r2
 80076fa:	701a      	strb	r2, [r3, #0]
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	09db      	lsrs	r3, r3, #7
 8007700:	61bb      	str	r3, [r7, #24]
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	2b7f      	cmp	r3, #127	@ 0x7f
 8007706:	d8f0      	bhi.n	80076ea <SEGGER_SYSVIEW_Start+0xd2>
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	61fa      	str	r2, [r7, #28]
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	b2d2      	uxtb	r2, r2
 8007712:	701a      	strb	r2, [r3, #0]
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	2300      	movs	r3, #0
 800771e:	613b      	str	r3, [r7, #16]
 8007720:	e00b      	b.n	800773a <SEGGER_SYSVIEW_Start+0x122>
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	b2da      	uxtb	r2, r3
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	1c59      	adds	r1, r3, #1
 800772a:	6179      	str	r1, [r7, #20]
 800772c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007730:	b2d2      	uxtb	r2, r2
 8007732:	701a      	strb	r2, [r3, #0]
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	09db      	lsrs	r3, r3, #7
 8007738:	613b      	str	r3, [r7, #16]
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b7f      	cmp	r3, #127	@ 0x7f
 800773e:	d8f0      	bhi.n	8007722 <SEGGER_SYSVIEW_Start+0x10a>
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	1c5a      	adds	r2, r3, #1
 8007744:	617a      	str	r2, [r7, #20]
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	b2d2      	uxtb	r2, r2
 800774a:	701a      	strb	r2, [r3, #0]
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007750:	2218      	movs	r2, #24
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff f81f 	bl	8006798 <_SendPacket>
      RECORD_END();
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007760:	4b08      	ldr	r3, [pc, #32]	@ (8007784 <SEGGER_SYSVIEW_Start+0x16c>)
 8007762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007768:	4b06      	ldr	r3, [pc, #24]	@ (8007784 <SEGGER_SYSVIEW_Start+0x16c>)
 800776a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800776e:	f000 f9eb 	bl	8007b48 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007772:	f000 f9b1 	bl	8007ad8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007776:	f000 fc83 	bl	8008080 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800777a:	bf00      	nop
 800777c:	3730      	adds	r7, #48	@ 0x30
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	200143f0 	.word	0x200143f0
 8007788:	0800848c 	.word	0x0800848c
 800778c:	20014420 	.word	0x20014420

08007790 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007796:	f3ef 8311 	mrs	r3, BASEPRI
 800779a:	f04f 0120 	mov.w	r1, #32
 800779e:	f381 8811 	msr	BASEPRI, r1
 80077a2:	607b      	str	r3, [r7, #4]
 80077a4:	480b      	ldr	r0, [pc, #44]	@ (80077d4 <SEGGER_SYSVIEW_Stop+0x44>)
 80077a6:	f7fe ff06 	bl	80065b6 <_PreparePacket>
 80077aa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80077ac:	4b0a      	ldr	r3, [pc, #40]	@ (80077d8 <SEGGER_SYSVIEW_Stop+0x48>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d007      	beq.n	80077c4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80077b4:	220b      	movs	r2, #11
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6838      	ldr	r0, [r7, #0]
 80077ba:	f7fe ffed 	bl	8006798 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80077be:	4b06      	ldr	r3, [pc, #24]	@ (80077d8 <SEGGER_SYSVIEW_Stop+0x48>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f383 8811 	msr	BASEPRI, r3
}
 80077ca:	bf00      	nop
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	20014420 	.word	0x20014420
 80077d8:	200143f0 	.word	0x200143f0

080077dc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08c      	sub	sp, #48	@ 0x30
 80077e0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80077e2:	f3ef 8311 	mrs	r3, BASEPRI
 80077e6:	f04f 0120 	mov.w	r1, #32
 80077ea:	f381 8811 	msr	BASEPRI, r1
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	4845      	ldr	r0, [pc, #276]	@ (8007908 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80077f2:	f7fe fee0 	bl	80065b6 <_PreparePacket>
 80077f6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007800:	4b42      	ldr	r3, [pc, #264]	@ (800790c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007806:	e00b      	b.n	8007820 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780a:	b2da      	uxtb	r2, r3
 800780c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800780e:	1c59      	adds	r1, r3, #1
 8007810:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007812:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007816:	b2d2      	uxtb	r2, r2
 8007818:	701a      	strb	r2, [r3, #0]
 800781a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800781c:	09db      	lsrs	r3, r3, #7
 800781e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007822:	2b7f      	cmp	r3, #127	@ 0x7f
 8007824:	d8f0      	bhi.n	8007808 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800782c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800782e:	b2d2      	uxtb	r2, r2
 8007830:	701a      	strb	r2, [r3, #0]
 8007832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007834:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	627b      	str	r3, [r7, #36]	@ 0x24
 800783a:	4b34      	ldr	r3, [pc, #208]	@ (800790c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	623b      	str	r3, [r7, #32]
 8007840:	e00b      	b.n	800785a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	b2da      	uxtb	r2, r3
 8007846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007848:	1c59      	adds	r1, r3, #1
 800784a:	6279      	str	r1, [r7, #36]	@ 0x24
 800784c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007850:	b2d2      	uxtb	r2, r2
 8007852:	701a      	strb	r2, [r3, #0]
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	09db      	lsrs	r3, r3, #7
 8007858:	623b      	str	r3, [r7, #32]
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	2b7f      	cmp	r3, #127	@ 0x7f
 800785e:	d8f0      	bhi.n	8007842 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007862:	1c5a      	adds	r2, r3, #1
 8007864:	627a      	str	r2, [r7, #36]	@ 0x24
 8007866:	6a3a      	ldr	r2, [r7, #32]
 8007868:	b2d2      	uxtb	r2, r2
 800786a:	701a      	strb	r2, [r3, #0]
 800786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	61fb      	str	r3, [r7, #28]
 8007874:	4b25      	ldr	r3, [pc, #148]	@ (800790c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	61bb      	str	r3, [r7, #24]
 800787a:	e00b      	b.n	8007894 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	b2da      	uxtb	r2, r3
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	1c59      	adds	r1, r3, #1
 8007884:	61f9      	str	r1, [r7, #28]
 8007886:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	701a      	strb	r2, [r3, #0]
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	09db      	lsrs	r3, r3, #7
 8007892:	61bb      	str	r3, [r7, #24]
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	2b7f      	cmp	r3, #127	@ 0x7f
 8007898:	d8f0      	bhi.n	800787c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	1c5a      	adds	r2, r3, #1
 800789e:	61fa      	str	r2, [r7, #28]
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	b2d2      	uxtb	r2, r2
 80078a4:	701a      	strb	r2, [r3, #0]
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	617b      	str	r3, [r7, #20]
 80078ae:	2300      	movs	r3, #0
 80078b0:	613b      	str	r3, [r7, #16]
 80078b2:	e00b      	b.n	80078cc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	1c59      	adds	r1, r3, #1
 80078bc:	6179      	str	r1, [r7, #20]
 80078be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80078c2:	b2d2      	uxtb	r2, r2
 80078c4:	701a      	strb	r2, [r3, #0]
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	09db      	lsrs	r3, r3, #7
 80078ca:	613b      	str	r3, [r7, #16]
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80078d0:	d8f0      	bhi.n	80078b4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	617a      	str	r2, [r7, #20]
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	b2d2      	uxtb	r2, r2
 80078dc:	701a      	strb	r2, [r3, #0]
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80078e2:	2218      	movs	r2, #24
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	68b8      	ldr	r0, [r7, #8]
 80078e8:	f7fe ff56 	bl	8006798 <_SendPacket>
  RECORD_END();
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80078f2:	4b06      	ldr	r3, [pc, #24]	@ (800790c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80078f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80078fa:	4b04      	ldr	r3, [pc, #16]	@ (800790c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80078fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fe:	4798      	blx	r3
  }
}
 8007900:	bf00      	nop
 8007902:	3730      	adds	r7, #48	@ 0x30
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	20014420 	.word	0x20014420
 800790c:	200143f0 	.word	0x200143f0

08007910 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007910:	b580      	push	{r7, lr}
 8007912:	b092      	sub	sp, #72	@ 0x48
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007918:	f3ef 8311 	mrs	r3, BASEPRI
 800791c:	f04f 0120 	mov.w	r1, #32
 8007920:	f381 8811 	msr	BASEPRI, r1
 8007924:	617b      	str	r3, [r7, #20]
 8007926:	486a      	ldr	r0, [pc, #424]	@ (8007ad0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007928:	f7fe fe45 	bl	80065b6 <_PreparePacket>
 800792c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	647b      	str	r3, [r7, #68]	@ 0x44
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	4b66      	ldr	r3, [pc, #408]	@ (8007ad4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	643b      	str	r3, [r7, #64]	@ 0x40
 8007942:	e00b      	b.n	800795c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007946:	b2da      	uxtb	r2, r3
 8007948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800794a:	1c59      	adds	r1, r3, #1
 800794c:	6479      	str	r1, [r7, #68]	@ 0x44
 800794e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007952:	b2d2      	uxtb	r2, r2
 8007954:	701a      	strb	r2, [r3, #0]
 8007956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007958:	09db      	lsrs	r3, r3, #7
 800795a:	643b      	str	r3, [r7, #64]	@ 0x40
 800795c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800795e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007960:	d8f0      	bhi.n	8007944 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007962:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	647a      	str	r2, [r7, #68]	@ 0x44
 8007968:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800796a:	b2d2      	uxtb	r2, r2
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007970:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800797c:	e00b      	b.n	8007996 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800797e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007980:	b2da      	uxtb	r2, r3
 8007982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007984:	1c59      	adds	r1, r3, #1
 8007986:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8007988:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800798c:	b2d2      	uxtb	r2, r2
 800798e:	701a      	strb	r2, [r3, #0]
 8007990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007992:	09db      	lsrs	r3, r3, #7
 8007994:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007998:	2b7f      	cmp	r3, #127	@ 0x7f
 800799a:	d8f0      	bhi.n	800797e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800799c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80079a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079a4:	b2d2      	uxtb	r2, r2
 80079a6:	701a      	strb	r2, [r3, #0]
 80079a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079aa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	2220      	movs	r2, #32
 80079b2:	4619      	mov	r1, r3
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f7fe fdb1 	bl	800651c <_EncodeStr>
 80079ba:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80079bc:	2209      	movs	r2, #9
 80079be:	68f9      	ldr	r1, [r7, #12]
 80079c0:	6938      	ldr	r0, [r7, #16]
 80079c2:	f7fe fee9 	bl	8006798 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	4b40      	ldr	r3, [pc, #256]	@ (8007ad4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80079da:	e00b      	b.n	80079f4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80079dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e2:	1c59      	adds	r1, r3, #1
 80079e4:	6379      	str	r1, [r7, #52]	@ 0x34
 80079e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80079ea:	b2d2      	uxtb	r2, r2
 80079ec:	701a      	strb	r2, [r3, #0]
 80079ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f0:	09db      	lsrs	r3, r3, #7
 80079f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80079f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80079f8:	d8f0      	bhi.n	80079dc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80079fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8007a00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a02:	b2d2      	uxtb	r2, r2
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a14:	e00b      	b.n	8007a2e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1c:	1c59      	adds	r1, r3, #1
 8007a1e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007a20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007a24:	b2d2      	uxtb	r2, r2
 8007a26:	701a      	strb	r2, [r3, #0]
 8007a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2a:	09db      	lsrs	r3, r3, #7
 8007a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a30:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a32:	d8f0      	bhi.n	8007a16 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a3c:	b2d2      	uxtb	r2, r2
 8007a3e:	701a      	strb	r2, [r3, #0]
 8007a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a42:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	623b      	str	r3, [r7, #32]
 8007a4e:	e00b      	b.n	8007a68 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007a50:	6a3b      	ldr	r3, [r7, #32]
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a56:	1c59      	adds	r1, r3, #1
 8007a58:	6279      	str	r1, [r7, #36]	@ 0x24
 8007a5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007a5e:	b2d2      	uxtb	r2, r2
 8007a60:	701a      	strb	r2, [r3, #0]
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	09db      	lsrs	r3, r3, #7
 8007a66:	623b      	str	r3, [r7, #32]
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a6c:	d8f0      	bhi.n	8007a50 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a70:	1c5a      	adds	r2, r3, #1
 8007a72:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a74:	6a3a      	ldr	r2, [r7, #32]
 8007a76:	b2d2      	uxtb	r2, r2
 8007a78:	701a      	strb	r2, [r3, #0]
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	61fb      	str	r3, [r7, #28]
 8007a82:	2300      	movs	r3, #0
 8007a84:	61bb      	str	r3, [r7, #24]
 8007a86:	e00b      	b.n	8007aa0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	1c59      	adds	r1, r3, #1
 8007a90:	61f9      	str	r1, [r7, #28]
 8007a92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	701a      	strb	r2, [r3, #0]
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	09db      	lsrs	r3, r3, #7
 8007a9e:	61bb      	str	r3, [r7, #24]
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007aa4:	d8f0      	bhi.n	8007a88 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	61fa      	str	r2, [r7, #28]
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	b2d2      	uxtb	r2, r2
 8007ab0:	701a      	strb	r2, [r3, #0]
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007ab6:	2215      	movs	r2, #21
 8007ab8:	68f9      	ldr	r1, [r7, #12]
 8007aba:	6938      	ldr	r0, [r7, #16]
 8007abc:	f7fe fe6c 	bl	8006798 <_SendPacket>
  RECORD_END();
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f383 8811 	msr	BASEPRI, r3
}
 8007ac6:	bf00      	nop
 8007ac8:	3748      	adds	r7, #72	@ 0x48
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20014420 	.word	0x20014420
 8007ad4:	200143f0 	.word	0x200143f0

08007ad8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007adc:	4b07      	ldr	r3, [pc, #28]	@ (8007afc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d008      	beq.n	8007af6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007ae4:	4b05      	ldr	r3, [pc, #20]	@ (8007afc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007aee:	4b03      	ldr	r3, [pc, #12]	@ (8007afc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	4798      	blx	r3
  }
}
 8007af6:	bf00      	nop
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	200143f0 	.word	0x200143f0

08007b00 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007b08:	f3ef 8311 	mrs	r3, BASEPRI
 8007b0c:	f04f 0120 	mov.w	r1, #32
 8007b10:	f381 8811 	msr	BASEPRI, r1
 8007b14:	617b      	str	r3, [r7, #20]
 8007b16:	480b      	ldr	r0, [pc, #44]	@ (8007b44 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007b18:	f7fe fd4d 	bl	80065b6 <_PreparePacket>
 8007b1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007b1e:	2280      	movs	r2, #128	@ 0x80
 8007b20:	6879      	ldr	r1, [r7, #4]
 8007b22:	6938      	ldr	r0, [r7, #16]
 8007b24:	f7fe fcfa 	bl	800651c <_EncodeStr>
 8007b28:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007b2a:	220e      	movs	r2, #14
 8007b2c:	68f9      	ldr	r1, [r7, #12]
 8007b2e:	6938      	ldr	r0, [r7, #16]
 8007b30:	f7fe fe32 	bl	8006798 <_SendPacket>
  RECORD_END();
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f383 8811 	msr	BASEPRI, r3
}
 8007b3a:	bf00      	nop
 8007b3c:	3718      	adds	r7, #24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	20014420 	.word	0x20014420

08007b48 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007b48:	b590      	push	{r4, r7, lr}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007b4e:	4b15      	ldr	r3, [pc, #84]	@ (8007ba4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d01a      	beq.n	8007b8c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007b56:	4b13      	ldr	r3, [pc, #76]	@ (8007ba4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d015      	beq.n	8007b8c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007b60:	4b10      	ldr	r3, [pc, #64]	@ (8007ba4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4798      	blx	r3
 8007b68:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007b6c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007b6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b72:	f04f 0200 	mov.w	r2, #0
 8007b76:	f04f 0300 	mov.w	r3, #0
 8007b7a:	000a      	movs	r2, r1
 8007b7c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007b7e:	4613      	mov	r3, r2
 8007b80:	461a      	mov	r2, r3
 8007b82:	4621      	mov	r1, r4
 8007b84:	200d      	movs	r0, #13
 8007b86:	f7ff fb37 	bl	80071f8 <SEGGER_SYSVIEW_RecordU32x2>
 8007b8a:	e006      	b.n	8007b9a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007b8c:	4b06      	ldr	r3, [pc, #24]	@ (8007ba8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4619      	mov	r1, r3
 8007b92:	200c      	movs	r0, #12
 8007b94:	f7ff faf4 	bl	8007180 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007b98:	bf00      	nop
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd90      	pop	{r4, r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	200143f0 	.word	0x200143f0
 8007ba8:	e0001004 	.word	0xe0001004

08007bac <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007bb2:	f3ef 8311 	mrs	r3, BASEPRI
 8007bb6:	f04f 0120 	mov.w	r1, #32
 8007bba:	f381 8811 	msr	BASEPRI, r1
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	4819      	ldr	r0, [pc, #100]	@ (8007c28 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007bc2:	f7fe fcf8 	bl	80065b6 <_PreparePacket>
 8007bc6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007bcc:	4b17      	ldr	r3, [pc, #92]	@ (8007c2c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	617b      	str	r3, [r7, #20]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	613b      	str	r3, [r7, #16]
 8007bde:	e00b      	b.n	8007bf8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	1c59      	adds	r1, r3, #1
 8007be8:	6179      	str	r1, [r7, #20]
 8007bea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007bee:	b2d2      	uxtb	r2, r2
 8007bf0:	701a      	strb	r2, [r3, #0]
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	09db      	lsrs	r3, r3, #7
 8007bf6:	613b      	str	r3, [r7, #16]
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8007bfc:	d8f0      	bhi.n	8007be0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	617a      	str	r2, [r7, #20]
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	b2d2      	uxtb	r2, r2
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007c0e:	2202      	movs	r2, #2
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	68b8      	ldr	r0, [r7, #8]
 8007c14:	f7fe fdc0 	bl	8006798 <_SendPacket>
  RECORD_END();
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f383 8811 	msr	BASEPRI, r3
}
 8007c1e:	bf00      	nop
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	20014420 	.word	0x20014420
 8007c2c:	e000ed04 	.word	0xe000ed04

08007c30 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007c36:	f3ef 8311 	mrs	r3, BASEPRI
 8007c3a:	f04f 0120 	mov.w	r1, #32
 8007c3e:	f381 8811 	msr	BASEPRI, r1
 8007c42:	607b      	str	r3, [r7, #4]
 8007c44:	4807      	ldr	r0, [pc, #28]	@ (8007c64 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007c46:	f7fe fcb6 	bl	80065b6 <_PreparePacket>
 8007c4a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007c4c:	2203      	movs	r2, #3
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6838      	ldr	r0, [r7, #0]
 8007c52:	f7fe fda1 	bl	8006798 <_SendPacket>
  RECORD_END();
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f383 8811 	msr	BASEPRI, r3
}
 8007c5c:	bf00      	nop
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	20014420 	.word	0x20014420

08007c68 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8007c72:	f04f 0120 	mov.w	r1, #32
 8007c76:	f381 8811 	msr	BASEPRI, r1
 8007c7a:	607b      	str	r3, [r7, #4]
 8007c7c:	4807      	ldr	r0, [pc, #28]	@ (8007c9c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007c7e:	f7fe fc9a 	bl	80065b6 <_PreparePacket>
 8007c82:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007c84:	2212      	movs	r2, #18
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6838      	ldr	r0, [r7, #0]
 8007c8a:	f7fe fd85 	bl	8006798 <_SendPacket>
  RECORD_END();
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f383 8811 	msr	BASEPRI, r3
}
 8007c94:	bf00      	nop
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	20014420 	.word	0x20014420

08007ca0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007ca6:	f3ef 8311 	mrs	r3, BASEPRI
 8007caa:	f04f 0120 	mov.w	r1, #32
 8007cae:	f381 8811 	msr	BASEPRI, r1
 8007cb2:	607b      	str	r3, [r7, #4]
 8007cb4:	4807      	ldr	r0, [pc, #28]	@ (8007cd4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007cb6:	f7fe fc7e 	bl	80065b6 <_PreparePacket>
 8007cba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007cbc:	2211      	movs	r2, #17
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	6838      	ldr	r0, [r7, #0]
 8007cc2:	f7fe fd69 	bl	8006798 <_SendPacket>
  RECORD_END();
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f383 8811 	msr	BASEPRI, r3
}
 8007ccc:	bf00      	nop
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	20014420 	.word	0x20014420

08007cd8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007ce0:	f3ef 8311 	mrs	r3, BASEPRI
 8007ce4:	f04f 0120 	mov.w	r1, #32
 8007ce8:	f381 8811 	msr	BASEPRI, r1
 8007cec:	617b      	str	r3, [r7, #20]
 8007cee:	4819      	ldr	r0, [pc, #100]	@ (8007d54 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007cf0:	f7fe fc61 	bl	80065b6 <_PreparePacket>
 8007cf4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007cfa:	4b17      	ldr	r3, [pc, #92]	@ (8007d58 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	61fb      	str	r3, [r7, #28]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	61bb      	str	r3, [r7, #24]
 8007d0c:	e00b      	b.n	8007d26 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	1c59      	adds	r1, r3, #1
 8007d16:	61f9      	str	r1, [r7, #28]
 8007d18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007d1c:	b2d2      	uxtb	r2, r2
 8007d1e:	701a      	strb	r2, [r3, #0]
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	09db      	lsrs	r3, r3, #7
 8007d24:	61bb      	str	r3, [r7, #24]
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d2a:	d8f0      	bhi.n	8007d0e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	61fa      	str	r2, [r7, #28]
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	b2d2      	uxtb	r2, r2
 8007d36:	701a      	strb	r2, [r3, #0]
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007d3c:	2208      	movs	r2, #8
 8007d3e:	68f9      	ldr	r1, [r7, #12]
 8007d40:	6938      	ldr	r0, [r7, #16]
 8007d42:	f7fe fd29 	bl	8006798 <_SendPacket>
  RECORD_END();
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f383 8811 	msr	BASEPRI, r3
}
 8007d4c:	bf00      	nop
 8007d4e:	3720      	adds	r7, #32
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	20014420 	.word	0x20014420
 8007d58:	200143f0 	.word	0x200143f0

08007d5c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007d64:	f3ef 8311 	mrs	r3, BASEPRI
 8007d68:	f04f 0120 	mov.w	r1, #32
 8007d6c:	f381 8811 	msr	BASEPRI, r1
 8007d70:	617b      	str	r3, [r7, #20]
 8007d72:	4819      	ldr	r0, [pc, #100]	@ (8007dd8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007d74:	f7fe fc1f 	bl	80065b6 <_PreparePacket>
 8007d78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007d7e:	4b17      	ldr	r3, [pc, #92]	@ (8007ddc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	61fb      	str	r3, [r7, #28]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	61bb      	str	r3, [r7, #24]
 8007d90:	e00b      	b.n	8007daa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	1c59      	adds	r1, r3, #1
 8007d9a:	61f9      	str	r1, [r7, #28]
 8007d9c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007da0:	b2d2      	uxtb	r2, r2
 8007da2:	701a      	strb	r2, [r3, #0]
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	09db      	lsrs	r3, r3, #7
 8007da8:	61bb      	str	r3, [r7, #24]
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	2b7f      	cmp	r3, #127	@ 0x7f
 8007dae:	d8f0      	bhi.n	8007d92 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	61fa      	str	r2, [r7, #28]
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	b2d2      	uxtb	r2, r2
 8007dba:	701a      	strb	r2, [r3, #0]
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007dc0:	2204      	movs	r2, #4
 8007dc2:	68f9      	ldr	r1, [r7, #12]
 8007dc4:	6938      	ldr	r0, [r7, #16]
 8007dc6:	f7fe fce7 	bl	8006798 <_SendPacket>
  RECORD_END();
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f383 8811 	msr	BASEPRI, r3
}
 8007dd0:	bf00      	nop
 8007dd2:	3720      	adds	r7, #32
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	20014420 	.word	0x20014420
 8007ddc:	200143f0 	.word	0x200143f0

08007de0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b088      	sub	sp, #32
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007de8:	f3ef 8311 	mrs	r3, BASEPRI
 8007dec:	f04f 0120 	mov.w	r1, #32
 8007df0:	f381 8811 	msr	BASEPRI, r1
 8007df4:	617b      	str	r3, [r7, #20]
 8007df6:	4819      	ldr	r0, [pc, #100]	@ (8007e5c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007df8:	f7fe fbdd 	bl	80065b6 <_PreparePacket>
 8007dfc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007e02:	4b17      	ldr	r3, [pc, #92]	@ (8007e60 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	61fb      	str	r3, [r7, #28]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	61bb      	str	r3, [r7, #24]
 8007e14:	e00b      	b.n	8007e2e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	1c59      	adds	r1, r3, #1
 8007e1e:	61f9      	str	r1, [r7, #28]
 8007e20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007e24:	b2d2      	uxtb	r2, r2
 8007e26:	701a      	strb	r2, [r3, #0]
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	09db      	lsrs	r3, r3, #7
 8007e2c:	61bb      	str	r3, [r7, #24]
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e32:	d8f0      	bhi.n	8007e16 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	61fa      	str	r2, [r7, #28]
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	b2d2      	uxtb	r2, r2
 8007e3e:	701a      	strb	r2, [r3, #0]
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007e44:	2206      	movs	r2, #6
 8007e46:	68f9      	ldr	r1, [r7, #12]
 8007e48:	6938      	ldr	r0, [r7, #16]
 8007e4a:	f7fe fca5 	bl	8006798 <_SendPacket>
  RECORD_END();
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f383 8811 	msr	BASEPRI, r3
}
 8007e54:	bf00      	nop
 8007e56:	3720      	adds	r7, #32
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	20014420 	.word	0x20014420
 8007e60:	200143f0 	.word	0x200143f0

08007e64 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08a      	sub	sp, #40	@ 0x28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007e6e:	f3ef 8311 	mrs	r3, BASEPRI
 8007e72:	f04f 0120 	mov.w	r1, #32
 8007e76:	f381 8811 	msr	BASEPRI, r1
 8007e7a:	617b      	str	r3, [r7, #20]
 8007e7c:	4827      	ldr	r0, [pc, #156]	@ (8007f1c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007e7e:	f7fe fb9a 	bl	80065b6 <_PreparePacket>
 8007e82:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007e88:	4b25      	ldr	r3, [pc, #148]	@ (8007f20 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	623b      	str	r3, [r7, #32]
 8007e9a:	e00b      	b.n	8007eb4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea2:	1c59      	adds	r1, r3, #1
 8007ea4:	6279      	str	r1, [r7, #36]	@ 0x24
 8007ea6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007eaa:	b2d2      	uxtb	r2, r2
 8007eac:	701a      	strb	r2, [r3, #0]
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	09db      	lsrs	r3, r3, #7
 8007eb2:	623b      	str	r3, [r7, #32]
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8007eb8:	d8f0      	bhi.n	8007e9c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ec0:	6a3a      	ldr	r2, [r7, #32]
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	61fb      	str	r3, [r7, #28]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	61bb      	str	r3, [r7, #24]
 8007ed2:	e00b      	b.n	8007eec <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	1c59      	adds	r1, r3, #1
 8007edc:	61f9      	str	r1, [r7, #28]
 8007ede:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007ee2:	b2d2      	uxtb	r2, r2
 8007ee4:	701a      	strb	r2, [r3, #0]
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	09db      	lsrs	r3, r3, #7
 8007eea:	61bb      	str	r3, [r7, #24]
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ef0:	d8f0      	bhi.n	8007ed4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	1c5a      	adds	r2, r3, #1
 8007ef6:	61fa      	str	r2, [r7, #28]
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	b2d2      	uxtb	r2, r2
 8007efc:	701a      	strb	r2, [r3, #0]
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007f02:	2207      	movs	r2, #7
 8007f04:	68f9      	ldr	r1, [r7, #12]
 8007f06:	6938      	ldr	r0, [r7, #16]
 8007f08:	f7fe fc46 	bl	8006798 <_SendPacket>
  RECORD_END();
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f383 8811 	msr	BASEPRI, r3
}
 8007f12:	bf00      	nop
 8007f14:	3728      	adds	r7, #40	@ 0x28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20014420 	.word	0x20014420
 8007f20:	200143f0 	.word	0x200143f0

08007f24 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007f2c:	4b04      	ldr	r3, [pc, #16]	@ (8007f40 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	1ad3      	subs	r3, r2, r3
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	200143f0 	.word	0x200143f0

08007f44 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b08c      	sub	sp, #48	@ 0x30
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800803c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d06d      	beq.n	8008032 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007f56:	4b39      	ldr	r3, [pc, #228]	@ (800803c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f60:	e008      	b.n	8007f74 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d007      	beq.n	8007f7e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f70:	3301      	adds	r3, #1
 8007f72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f74:	79fb      	ldrb	r3, [r7, #7]
 8007f76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d3f2      	bcc.n	8007f62 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007f7c:	e000      	b.n	8007f80 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007f7e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d055      	beq.n	8008032 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007f86:	f3ef 8311 	mrs	r3, BASEPRI
 8007f8a:	f04f 0120 	mov.w	r1, #32
 8007f8e:	f381 8811 	msr	BASEPRI, r1
 8007f92:	617b      	str	r3, [r7, #20]
 8007f94:	482a      	ldr	r0, [pc, #168]	@ (8008040 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007f96:	f7fe fb0e 	bl	80065b6 <_PreparePacket>
 8007f9a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fa4:	79fb      	ldrb	r3, [r7, #7]
 8007fa6:	623b      	str	r3, [r7, #32]
 8007fa8:	e00b      	b.n	8007fc2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb0:	1c59      	adds	r1, r3, #1
 8007fb2:	6279      	str	r1, [r7, #36]	@ 0x24
 8007fb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007fb8:	b2d2      	uxtb	r2, r2
 8007fba:	701a      	strb	r2, [r3, #0]
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	09db      	lsrs	r3, r3, #7
 8007fc0:	623b      	str	r3, [r7, #32]
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8007fc6:	d8f0      	bhi.n	8007faa <SEGGER_SYSVIEW_SendModule+0x66>
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	627a      	str	r2, [r7, #36]	@ 0x24
 8007fce:	6a3a      	ldr	r2, [r7, #32]
 8007fd0:	b2d2      	uxtb	r2, r2
 8007fd2:	701a      	strb	r2, [r3, #0]
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	61fb      	str	r3, [r7, #28]
 8007fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	61bb      	str	r3, [r7, #24]
 8007fe2:	e00b      	b.n	8007ffc <SEGGER_SYSVIEW_SendModule+0xb8>
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	1c59      	adds	r1, r3, #1
 8007fec:	61f9      	str	r1, [r7, #28]
 8007fee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007ff2:	b2d2      	uxtb	r2, r2
 8007ff4:	701a      	strb	r2, [r3, #0]
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	09db      	lsrs	r3, r3, #7
 8007ffa:	61bb      	str	r3, [r7, #24]
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	2b7f      	cmp	r3, #127	@ 0x7f
 8008000:	d8f0      	bhi.n	8007fe4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	1c5a      	adds	r2, r3, #1
 8008006:	61fa      	str	r2, [r7, #28]
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	b2d2      	uxtb	r2, r2
 800800c:	701a      	strb	r2, [r3, #0]
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2280      	movs	r2, #128	@ 0x80
 8008018:	4619      	mov	r1, r3
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f7fe fa7e 	bl	800651c <_EncodeStr>
 8008020:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8008022:	2216      	movs	r2, #22
 8008024:	68f9      	ldr	r1, [r7, #12]
 8008026:	6938      	ldr	r0, [r7, #16]
 8008028:	f7fe fbb6 	bl	8006798 <_SendPacket>
      RECORD_END();
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8008032:	bf00      	nop
 8008034:	3730      	adds	r7, #48	@ 0x30
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	20014418 	.word	0x20014418
 8008040:	20014420 	.word	0x20014420

08008044 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800804a:	4b0c      	ldr	r3, [pc, #48]	@ (800807c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00f      	beq.n	8008072 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8008052:	4b0a      	ldr	r3, [pc, #40]	@ (800807c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1f2      	bne.n	8008058 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008072:	bf00      	nop
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20014418 	.word	0x20014418

08008080 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008086:	f3ef 8311 	mrs	r3, BASEPRI
 800808a:	f04f 0120 	mov.w	r1, #32
 800808e:	f381 8811 	msr	BASEPRI, r1
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	4817      	ldr	r0, [pc, #92]	@ (80080f4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8008096:	f7fe fa8e 	bl	80065b6 <_PreparePacket>
 800809a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	617b      	str	r3, [r7, #20]
 80080a4:	4b14      	ldr	r3, [pc, #80]	@ (80080f8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	613b      	str	r3, [r7, #16]
 80080aa:	e00b      	b.n	80080c4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	1c59      	adds	r1, r3, #1
 80080b4:	6179      	str	r1, [r7, #20]
 80080b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80080ba:	b2d2      	uxtb	r2, r2
 80080bc:	701a      	strb	r2, [r3, #0]
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	09db      	lsrs	r3, r3, #7
 80080c2:	613b      	str	r3, [r7, #16]
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80080c8:	d8f0      	bhi.n	80080ac <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	617a      	str	r2, [r7, #20]
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	b2d2      	uxtb	r2, r2
 80080d4:	701a      	strb	r2, [r3, #0]
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80080da:	221b      	movs	r2, #27
 80080dc:	6879      	ldr	r1, [r7, #4]
 80080de:	68b8      	ldr	r0, [r7, #8]
 80080e0:	f7fe fb5a 	bl	8006798 <_SendPacket>
  RECORD_END();
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f383 8811 	msr	BASEPRI, r3
}
 80080ea:	bf00      	nop
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	20014420 	.word	0x20014420
 80080f8:	2001441c 	.word	0x2001441c

080080fc <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80080fc:	b40f      	push	{r0, r1, r2, r3}
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8008104:	f107 0314 	add.w	r3, r7, #20
 8008108:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800810a:	1d3b      	adds	r3, r7, #4
 800810c:	461a      	mov	r2, r3
 800810e:	2100      	movs	r1, #0
 8008110:	6938      	ldr	r0, [r7, #16]
 8008112:	f7fe fdcb 	bl	8006cac <_VPrintTarget>
  va_end(ParamList);
}
 8008116:	bf00      	nop
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008120:	b004      	add	sp, #16
 8008122:	4770      	bx	lr

08008124 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008124:	b580      	push	{r7, lr}
 8008126:	b08a      	sub	sp, #40	@ 0x28
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800812c:	f3ef 8311 	mrs	r3, BASEPRI
 8008130:	f04f 0120 	mov.w	r1, #32
 8008134:	f381 8811 	msr	BASEPRI, r1
 8008138:	617b      	str	r3, [r7, #20]
 800813a:	4827      	ldr	r0, [pc, #156]	@ (80081d8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800813c:	f7fe fa3b 	bl	80065b6 <_PreparePacket>
 8008140:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008142:	2280      	movs	r2, #128	@ 0x80
 8008144:	6879      	ldr	r1, [r7, #4]
 8008146:	6938      	ldr	r0, [r7, #16]
 8008148:	f7fe f9e8 	bl	800651c <_EncodeStr>
 800814c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	627b      	str	r3, [r7, #36]	@ 0x24
 8008152:	2301      	movs	r3, #1
 8008154:	623b      	str	r3, [r7, #32]
 8008156:	e00b      	b.n	8008170 <SEGGER_SYSVIEW_Warn+0x4c>
 8008158:	6a3b      	ldr	r3, [r7, #32]
 800815a:	b2da      	uxtb	r2, r3
 800815c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815e:	1c59      	adds	r1, r3, #1
 8008160:	6279      	str	r1, [r7, #36]	@ 0x24
 8008162:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008166:	b2d2      	uxtb	r2, r2
 8008168:	701a      	strb	r2, [r3, #0]
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	09db      	lsrs	r3, r3, #7
 800816e:	623b      	str	r3, [r7, #32]
 8008170:	6a3b      	ldr	r3, [r7, #32]
 8008172:	2b7f      	cmp	r3, #127	@ 0x7f
 8008174:	d8f0      	bhi.n	8008158 <SEGGER_SYSVIEW_Warn+0x34>
 8008176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008178:	1c5a      	adds	r2, r3, #1
 800817a:	627a      	str	r2, [r7, #36]	@ 0x24
 800817c:	6a3a      	ldr	r2, [r7, #32]
 800817e:	b2d2      	uxtb	r2, r2
 8008180:	701a      	strb	r2, [r3, #0]
 8008182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008184:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	61fb      	str	r3, [r7, #28]
 800818a:	2300      	movs	r3, #0
 800818c:	61bb      	str	r3, [r7, #24]
 800818e:	e00b      	b.n	80081a8 <SEGGER_SYSVIEW_Warn+0x84>
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	b2da      	uxtb	r2, r3
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	1c59      	adds	r1, r3, #1
 8008198:	61f9      	str	r1, [r7, #28]
 800819a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800819e:	b2d2      	uxtb	r2, r2
 80081a0:	701a      	strb	r2, [r3, #0]
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	09db      	lsrs	r3, r3, #7
 80081a6:	61bb      	str	r3, [r7, #24]
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80081ac:	d8f0      	bhi.n	8008190 <SEGGER_SYSVIEW_Warn+0x6c>
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	61fa      	str	r2, [r7, #28]
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	b2d2      	uxtb	r2, r2
 80081b8:	701a      	strb	r2, [r3, #0]
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80081be:	221a      	movs	r2, #26
 80081c0:	68f9      	ldr	r1, [r7, #12]
 80081c2:	6938      	ldr	r0, [r7, #16]
 80081c4:	f7fe fae8 	bl	8006798 <_SendPacket>
  RECORD_END();
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f383 8811 	msr	BASEPRI, r3
}
 80081ce:	bf00      	nop
 80081d0:	3728      	adds	r7, #40	@ 0x28
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	20014420 	.word	0x20014420

080081dc <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80081e0:	4b13      	ldr	r3, [pc, #76]	@ (8008230 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80081e2:	7e1b      	ldrb	r3, [r3, #24]
 80081e4:	4619      	mov	r1, r3
 80081e6:	4a13      	ldr	r2, [pc, #76]	@ (8008234 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80081e8:	460b      	mov	r3, r1
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	440b      	add	r3, r1
 80081ee:	00db      	lsls	r3, r3, #3
 80081f0:	4413      	add	r3, r2
 80081f2:	336c      	adds	r3, #108	@ 0x6c
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	4b0e      	ldr	r3, [pc, #56]	@ (8008230 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80081f8:	7e1b      	ldrb	r3, [r3, #24]
 80081fa:	4618      	mov	r0, r3
 80081fc:	490d      	ldr	r1, [pc, #52]	@ (8008234 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80081fe:	4603      	mov	r3, r0
 8008200:	005b      	lsls	r3, r3, #1
 8008202:	4403      	add	r3, r0
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	440b      	add	r3, r1
 8008208:	3370      	adds	r3, #112	@ 0x70
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	429a      	cmp	r2, r3
 800820e:	d00b      	beq.n	8008228 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8008210:	4b07      	ldr	r3, [pc, #28]	@ (8008230 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8008212:	789b      	ldrb	r3, [r3, #2]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d107      	bne.n	8008228 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8008218:	4b05      	ldr	r3, [pc, #20]	@ (8008230 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800821a:	2201      	movs	r2, #1
 800821c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800821e:	f7fe f9d7 	bl	80065d0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8008222:	4b03      	ldr	r3, [pc, #12]	@ (8008230 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8008224:	2200      	movs	r2, #0
 8008226:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8008228:	4b01      	ldr	r3, [pc, #4]	@ (8008230 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800822a:	781b      	ldrb	r3, [r3, #0]
}
 800822c:	4618      	mov	r0, r3
 800822e:	bd80      	pop	{r7, pc}
 8008230:	200143f0 	.word	0x200143f0
 8008234:	20012f30 	.word	0x20012f30

08008238 <memcmp>:
 8008238:	b510      	push	{r4, lr}
 800823a:	3901      	subs	r1, #1
 800823c:	4402      	add	r2, r0
 800823e:	4290      	cmp	r0, r2
 8008240:	d101      	bne.n	8008246 <memcmp+0xe>
 8008242:	2000      	movs	r0, #0
 8008244:	e005      	b.n	8008252 <memcmp+0x1a>
 8008246:	7803      	ldrb	r3, [r0, #0]
 8008248:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800824c:	42a3      	cmp	r3, r4
 800824e:	d001      	beq.n	8008254 <memcmp+0x1c>
 8008250:	1b18      	subs	r0, r3, r4
 8008252:	bd10      	pop	{r4, pc}
 8008254:	3001      	adds	r0, #1
 8008256:	e7f2      	b.n	800823e <memcmp+0x6>

08008258 <memset>:
 8008258:	4402      	add	r2, r0
 800825a:	4603      	mov	r3, r0
 800825c:	4293      	cmp	r3, r2
 800825e:	d100      	bne.n	8008262 <memset+0xa>
 8008260:	4770      	bx	lr
 8008262:	f803 1b01 	strb.w	r1, [r3], #1
 8008266:	e7f9      	b.n	800825c <memset+0x4>

08008268 <__libc_init_array>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	4d0d      	ldr	r5, [pc, #52]	@ (80082a0 <__libc_init_array+0x38>)
 800826c:	4c0d      	ldr	r4, [pc, #52]	@ (80082a4 <__libc_init_array+0x3c>)
 800826e:	1b64      	subs	r4, r4, r5
 8008270:	10a4      	asrs	r4, r4, #2
 8008272:	2600      	movs	r6, #0
 8008274:	42a6      	cmp	r6, r4
 8008276:	d109      	bne.n	800828c <__libc_init_array+0x24>
 8008278:	4d0b      	ldr	r5, [pc, #44]	@ (80082a8 <__libc_init_array+0x40>)
 800827a:	4c0c      	ldr	r4, [pc, #48]	@ (80082ac <__libc_init_array+0x44>)
 800827c:	f000 f826 	bl	80082cc <_init>
 8008280:	1b64      	subs	r4, r4, r5
 8008282:	10a4      	asrs	r4, r4, #2
 8008284:	2600      	movs	r6, #0
 8008286:	42a6      	cmp	r6, r4
 8008288:	d105      	bne.n	8008296 <__libc_init_array+0x2e>
 800828a:	bd70      	pop	{r4, r5, r6, pc}
 800828c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008290:	4798      	blx	r3
 8008292:	3601      	adds	r6, #1
 8008294:	e7ee      	b.n	8008274 <__libc_init_array+0xc>
 8008296:	f855 3b04 	ldr.w	r3, [r5], #4
 800829a:	4798      	blx	r3
 800829c:	3601      	adds	r6, #1
 800829e:	e7f2      	b.n	8008286 <__libc_init_array+0x1e>
 80082a0:	080084b0 	.word	0x080084b0
 80082a4:	080084b0 	.word	0x080084b0
 80082a8:	080084b0 	.word	0x080084b0
 80082ac:	080084b4 	.word	0x080084b4

080082b0 <memcpy>:
 80082b0:	440a      	add	r2, r1
 80082b2:	4291      	cmp	r1, r2
 80082b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80082b8:	d100      	bne.n	80082bc <memcpy+0xc>
 80082ba:	4770      	bx	lr
 80082bc:	b510      	push	{r4, lr}
 80082be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082c6:	4291      	cmp	r1, r2
 80082c8:	d1f9      	bne.n	80082be <memcpy+0xe>
 80082ca:	bd10      	pop	{r4, pc}

080082cc <_init>:
 80082cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ce:	bf00      	nop
 80082d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082d2:	bc08      	pop	{r3}
 80082d4:	469e      	mov	lr, r3
 80082d6:	4770      	bx	lr

080082d8 <_fini>:
 80082d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082da:	bf00      	nop
 80082dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082de:	bc08      	pop	{r3}
 80082e0:	469e      	mov	lr, r3
 80082e2:	4770      	bx	lr
