
002_MPU_6050_PWM_LED_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08009380  08009380  0000a380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009510  08009510  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  08009510  08009510  0000a510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009518  08009518  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009518  08009518  0000a518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800951c  0800951c  0000a51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009520  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b074  2**0
                  CONTENTS
 10 .bss          00004c58  20000074  20000074  0000b074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004ccc  20004ccc  0000b074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019c54  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003956  00000000  00000000  00024cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001670  00000000  00000000  00028650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001147  00000000  00000000  00029cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e5e  00000000  00000000  0002ae07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019fd4  00000000  00000000  0004fc65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d93b4  00000000  00000000  00069c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00142fed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006828  00000000  00000000  00143030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00149858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009368 	.word	0x08009368

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009368 	.word	0x08009368

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b96a 	b.w	8000ea8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	460c      	mov	r4, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14e      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	458c      	cmp	ip, r1
 8000bfc:	4686      	mov	lr, r0
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	d962      	bls.n	8000cca <__udivmoddi4+0xde>
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	4091      	lsls	r1, r2
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c14:	4319      	orrs	r1, r3
 8000c16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1e:	fa1f f68c 	uxth.w	r6, ip
 8000c22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c32:	fb04 f106 	mul.w	r1, r4, r6
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c42:	f080 8112 	bcs.w	8000e6a <__udivmoddi4+0x27e>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 810f 	bls.w	8000e6a <__udivmoddi4+0x27e>
 8000c4c:	3c02      	subs	r4, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb00 f606 	mul.w	r6, r0, r6
 8000c66:	429e      	cmp	r6, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x94>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c72:	f080 80fc 	bcs.w	8000e6e <__udivmoddi4+0x282>
 8000c76:	429e      	cmp	r6, r3
 8000c78:	f240 80f9 	bls.w	8000e6e <__udivmoddi4+0x282>
 8000c7c:	4463      	add	r3, ip
 8000c7e:	3802      	subs	r0, #2
 8000c80:	1b9b      	subs	r3, r3, r6
 8000c82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c86:	2100      	movs	r1, #0
 8000c88:	b11d      	cbz	r5, 8000c92 <__udivmoddi4+0xa6>
 8000c8a:	40d3      	lsrs	r3, r2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d905      	bls.n	8000ca6 <__udivmoddi4+0xba>
 8000c9a:	b10d      	cbz	r5, 8000ca0 <__udivmoddi4+0xb4>
 8000c9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e7f5      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000ca6:	fab3 f183 	clz	r1, r3
 8000caa:	2900      	cmp	r1, #0
 8000cac:	d146      	bne.n	8000d3c <__udivmoddi4+0x150>
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xcc>
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	f0c0 80f0 	bcc.w	8000e98 <__udivmoddi4+0x2ac>
 8000cb8:	1a86      	subs	r6, r0, r2
 8000cba:	eb64 0303 	sbc.w	r3, r4, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	2d00      	cmp	r5, #0
 8000cc2:	d0e6      	beq.n	8000c92 <__udivmoddi4+0xa6>
 8000cc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc8:	e7e3      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	f040 8090 	bne.w	8000df0 <__udivmoddi4+0x204>
 8000cd0:	eba1 040c 	sub.w	r4, r1, ip
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa1f f78c 	uxth.w	r7, ip
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb07 f006 	mul.w	r0, r7, r6
 8000cf2:	4298      	cmp	r0, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x11c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x11a>
 8000d00:	4298      	cmp	r0, r3
 8000d02:	f200 80cd 	bhi.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d06:	4626      	mov	r6, r4
 8000d08:	1a1c      	subs	r4, r3, r0
 8000d0a:	fa1f f38e 	uxth.w	r3, lr
 8000d0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d12:	fb08 4410 	mls	r4, r8, r0, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb00 f707 	mul.w	r7, r0, r7
 8000d1e:	429f      	cmp	r7, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x148>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x146>
 8000d2c:	429f      	cmp	r7, r3
 8000d2e:	f200 80b0 	bhi.w	8000e92 <__udivmoddi4+0x2a6>
 8000d32:	4620      	mov	r0, r4
 8000d34:	1bdb      	subs	r3, r3, r7
 8000d36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0x9c>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa22 f706 	lsr.w	r7, r2, r6
 8000d46:	431f      	orrs	r7, r3
 8000d48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d50:	ea43 030c 	orr.w	r3, r3, ip
 8000d54:	40f4      	lsrs	r4, r6
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	0c38      	lsrs	r0, r7, #16
 8000d5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d60:	fbb4 fef0 	udiv	lr, r4, r0
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fb00 441e 	mls	r4, r0, lr, r4
 8000d6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d70:	fb0e f90c 	mul.w	r9, lr, ip
 8000d74:	45a1      	cmp	r9, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	d90a      	bls.n	8000d92 <__udivmoddi4+0x1a6>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d82:	f080 8084 	bcs.w	8000e8e <__udivmoddi4+0x2a2>
 8000d86:	45a1      	cmp	r9, r4
 8000d88:	f240 8081 	bls.w	8000e8e <__udivmoddi4+0x2a2>
 8000d8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	eba4 0409 	sub.w	r4, r4, r9
 8000d96:	fa1f f983 	uxth.w	r9, r3
 8000d9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000da2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x1d2>
 8000dae:	193c      	adds	r4, r7, r4
 8000db0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db4:	d267      	bcs.n	8000e86 <__udivmoddi4+0x29a>
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d965      	bls.n	8000e86 <__udivmoddi4+0x29a>
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc6:	eba4 040c 	sub.w	r4, r4, ip
 8000dca:	429c      	cmp	r4, r3
 8000dcc:	46ce      	mov	lr, r9
 8000dce:	469c      	mov	ip, r3
 8000dd0:	d351      	bcc.n	8000e76 <__udivmoddi4+0x28a>
 8000dd2:	d04e      	beq.n	8000e72 <__udivmoddi4+0x286>
 8000dd4:	b155      	cbz	r5, 8000dec <__udivmoddi4+0x200>
 8000dd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dda:	eb64 040c 	sbc.w	r4, r4, ip
 8000dde:	fa04 f606 	lsl.w	r6, r4, r6
 8000de2:	40cb      	lsrs	r3, r1
 8000de4:	431e      	orrs	r6, r3
 8000de6:	40cc      	lsrs	r4, r1
 8000de8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	e750      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000e00:	4094      	lsls	r4, r2
 8000e02:	430c      	orrs	r4, r1
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e0c:	fa1f f78c 	uxth.w	r7, ip
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3110 	mls	r1, r8, r0, r3
 8000e18:	0c23      	lsrs	r3, r4, #16
 8000e1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1e:	fb00 f107 	mul.w	r1, r0, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x24c>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2e:	d22c      	bcs.n	8000e8a <__udivmoddi4+0x29e>
 8000e30:	4299      	cmp	r1, r3
 8000e32:	d92a      	bls.n	8000e8a <__udivmoddi4+0x29e>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e40:	fb08 3311 	mls	r3, r8, r1, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb01 f307 	mul.w	r3, r1, r7
 8000e4c:	42a3      	cmp	r3, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x276>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e58:	d213      	bcs.n	8000e82 <__udivmoddi4+0x296>
 8000e5a:	42a3      	cmp	r3, r4
 8000e5c:	d911      	bls.n	8000e82 <__udivmoddi4+0x296>
 8000e5e:	3902      	subs	r1, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	1ae4      	subs	r4, r4, r3
 8000e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e68:	e739      	b.n	8000cde <__udivmoddi4+0xf2>
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	e6f0      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e706      	b.n	8000c80 <__udivmoddi4+0x94>
 8000e72:	45c8      	cmp	r8, r9
 8000e74:	d2ae      	bcs.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7e:	3801      	subs	r0, #1
 8000e80:	e7a8      	b.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e82:	4631      	mov	r1, r6
 8000e84:	e7ed      	b.n	8000e62 <__udivmoddi4+0x276>
 8000e86:	4603      	mov	r3, r0
 8000e88:	e799      	b.n	8000dbe <__udivmoddi4+0x1d2>
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	e7d4      	b.n	8000e38 <__udivmoddi4+0x24c>
 8000e8e:	46d6      	mov	lr, sl
 8000e90:	e77f      	b.n	8000d92 <__udivmoddi4+0x1a6>
 8000e92:	4463      	add	r3, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e74d      	b.n	8000d34 <__udivmoddi4+0x148>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	4623      	mov	r3, r4
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e70f      	b.n	8000cc0 <__udivmoddi4+0xd4>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	e730      	b.n	8000d08 <__udivmoddi4+0x11c>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MPU6050_read_byte>:




MPU6050_status_t MPU6050_read_byte(I2C_HandleTypeDef *hi2c,uint8_t reg_addr,uint8_t *data)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	@ 0x28
 8000eb0:	af04      	add	r7, sp, #16
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = \
			HAL_I2C_Mem_Read(hi2c,MPU6050_i2c_addr<<1,reg_addr,1,data,1,I2C_TIMEOUT);
 8000eba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <MPU6050_read_byte+0x48>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	b299      	uxth	r1, r3
 8000ec2:	7afb      	ldrb	r3, [r7, #11]
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f001 fe42 	bl	8002b60 <HAL_I2C_Mem_Read>
 8000edc:	4603      	mov	r3, r0
 8000ede:	75fb      	strb	r3, [r7, #23]

	return (status == HAL_OK) ? MPU6050_ok : MPU6050_err;
 8000ee0:	7dfb      	ldrb	r3, [r7, #23]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	bf14      	ite	ne
 8000ee6:	2301      	movne	r3, #1
 8000ee8:	2300      	moveq	r3, #0
 8000eea:	b2db      	uxtb	r3, r3
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000090 	.word	0x20000090

08000ef8 <MPU6050_read>:



MPU6050_status_t MPU6050_read(I2C_HandleTypeDef *hi2c,uint8_t reg_base_addr,uint8_t *buffer,uint32_t nbytes)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	@ 0x28
 8000efc:	af04      	add	r7, sp, #16
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	460b      	mov	r3, r1
 8000f06:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = \
			HAL_I2C_Mem_Read(hi2c,MPU6050_i2c_addr<<1,reg_base_addr,1,buffer,nbytes,I2C_TIMEOUT);
 8000f08:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MPU6050_read+0x4c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	b299      	uxth	r1, r3
 8000f10:	7afb      	ldrb	r3, [r7, #11]
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f1c:	9002      	str	r0, [sp, #8]
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2301      	movs	r3, #1
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f001 fe1a 	bl	8002b60 <HAL_I2C_Mem_Read>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	75fb      	strb	r3, [r7, #23]

	return (status == HAL_OK) ? MPU6050_ok : MPU6050_err;
 8000f30:	7dfb      	ldrb	r3, [r7, #23]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	bf14      	ite	ne
 8000f36:	2301      	movne	r3, #1
 8000f38:	2300      	moveq	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000090 	.word	0x20000090

08000f48 <MPU6050_write_byte>:

MPU6050_status_t MPU6050_write_byte(I2C_HandleTypeDef *hi2c,uint8_t reg_addr,uint8_t data)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af04      	add	r7, sp, #16
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	70fb      	strb	r3, [r7, #3]
 8000f54:	4613      	mov	r3, r2
 8000f56:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = \
			HAL_I2C_Mem_Read(hi2c,MPU6050_i2c_addr<<1,reg_addr,1,&data,1,I2C_TIMEOUT);
 8000f58:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <MPU6050_write_byte+0x4c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	b299      	uxth	r1, r3
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	1cbb      	adds	r3, r7, #2
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2301      	movs	r3, #1
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f001 fdf3 	bl	8002b60 <HAL_I2C_Mem_Read>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	73fb      	strb	r3, [r7, #15]

	return (status == HAL_OK) ? MPU6050_ok : MPU6050_err;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	bf14      	ite	ne
 8000f84:	2301      	movne	r3, #1
 8000f86:	2300      	moveq	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000090 	.word	0x20000090

08000f98 <MPU6050_init>:


MPU6050_status_t MPU6050_init(I2C_HandleTypeDef *hi2c,uint8_t i2c_dev_addr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]

	MPU6050_i2c_addr = i2c_dev_addr;
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8001014 <MPU6050_init+0x7c>)
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	7013      	strb	r3, [r2, #0]

	//1.read 1 byte from sensor
	uint8_t read_byte = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	73bb      	strb	r3, [r7, #14]
	if(MPU6050_read_byte(hi2c,MPU6050_REG_WHOAMI,&read_byte)!= MPU6050_ok)
 8000fae:	f107 030e 	add.w	r3, r7, #14
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	2175      	movs	r1, #117	@ 0x75
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff78 	bl	8000eac <MPU6050_read_byte>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MPU6050_init+0x2e>
	{
		return MPU6050_err;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e022      	b.n	800100c <MPU6050_init+0x74>
	}

	if(read_byte == 0x68 || read_byte == 0x98)
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	2b68      	cmp	r3, #104	@ 0x68
 8000fca:	d002      	beq.n	8000fd2 <MPU6050_init+0x3a>
 8000fcc:	7bbb      	ldrb	r3, [r7, #14]
 8000fce:	2b98      	cmp	r3, #152	@ 0x98
 8000fd0:	d111      	bne.n	8000ff6 <MPU6050_init+0x5e>
	{
		printf("valid MPU6050 found at address %x\n",MPU6050_i2c_addr);
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <MPU6050_init+0x7c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480f      	ldr	r0, [pc, #60]	@ (8001018 <MPU6050_init+0x80>)
 8000fda:	f007 f887 	bl	80080ec <iprintf>
		printf("Invalid MPU6050 found at address %x\n",MPU6050_i2c_addr);
		return MPU6050_err;

	}

	uint8_t data = 0x00;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
	if(MPU6050_write_byte(hi2c,MPU6050_REG_PWMGMT_1,data)!= MPU6050_ok)
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	216b      	movs	r1, #107	@ 0x6b
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ffad 	bl	8000f48 <MPU6050_write_byte>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d108      	bne.n	8001006 <MPU6050_init+0x6e>
 8000ff4:	e009      	b.n	800100a <MPU6050_init+0x72>
		printf("Invalid MPU6050 found at address %x\n",MPU6050_i2c_addr);
 8000ff6:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <MPU6050_init+0x7c>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4807      	ldr	r0, [pc, #28]	@ (800101c <MPU6050_init+0x84>)
 8000ffe:	f007 f875 	bl	80080ec <iprintf>
		return MPU6050_err;
 8001002:	2301      	movs	r3, #1
 8001004:	e002      	b.n	800100c <MPU6050_init+0x74>
	{
		return MPU6050_err;
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <MPU6050_init+0x74>
	}

	return MPU6050_ok;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000090 	.word	0x20000090
 8001018:	08009380 	.word	0x08009380
 800101c:	080093a4 	.word	0x080093a4

08001020 <MPU6050_read_accelerometer_data>:




MPU6050_status_t MPU6050_read_accelerometer_data(I2C_HandleTypeDef *hi2c,uint8_t i2c_dev_addr,mpu6050_accel_data_t *accel_data)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	460b      	mov	r3, r1
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	72fb      	strb	r3, [r7, #11]
	uint8_t raw_data[6];
	MPU6050_status_t status = MPU6050_read(hi2c,MPU6050_REG_ACCEL_START,raw_data,sizeof(raw_data));
 800102e:	f107 0210 	add.w	r2, r7, #16
 8001032:	2306      	movs	r3, #6
 8001034:	213b      	movs	r1, #59	@ 0x3b
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f7ff ff5e 	bl	8000ef8 <MPU6050_read>
 800103c:	4603      	mov	r3, r0
 800103e:	75fb      	strb	r3, [r7, #23]

	if(status != MPU6050_ok)
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MPU6050_read_accelerometer_data+0x2a>
	{
		return status;
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	e01b      	b.n	8001082 <MPU6050_read_accelerometer_data+0x62>
	}

	accel_data->x = (int16_t)(raw_data[0]<< 8 | raw_data[1]);
 800104a:	7c3b      	ldrb	r3, [r7, #16]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	7c7b      	ldrb	r3, [r7, #17]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21a      	sxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	801a      	strh	r2, [r3, #0]
	accel_data->y = (int16_t)(raw_data[2]<< 8 | raw_data[3]);
 800105c:	7cbb      	ldrb	r3, [r7, #18]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	7cfb      	ldrb	r3, [r7, #19]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21a      	sxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	805a      	strh	r2, [r3, #2]
	accel_data->z = (int16_t)(raw_data[4]<< 8 | raw_data[5]);
 800106e:	7d3b      	ldrb	r3, [r7, #20]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	7d7b      	ldrb	r3, [r7, #21]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21a      	sxth	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	809a      	strh	r2, [r3, #4]

	return MPU6050_ok;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <mpu6050_accelerometer_calibration>:


mpu6050_accel_data_t mpu6050_accelerometer_calibration(const mpu6050_accel_data_t *error_offset,mpu6050_accel_data_t *raw_data)
{
 800108a:	b480      	push	{r7}
 800108c:	b087      	sub	sp, #28
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
	mpu6050_accel_data_t accel_calibrated;

	accel_calibrated.x = raw_data->x - error_offset->x;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109c:	b29a      	uxth	r2, r3
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	823b      	strh	r3, [r7, #16]
	accel_calibrated.y = raw_data->y - error_offset->y;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	827b      	strh	r3, [r7, #18]
	accel_calibrated.z = raw_data->z - error_offset->z;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	b29b      	uxth	r3, r3
 80010da:	b21b      	sxth	r3, r3
 80010dc:	82bb      	strh	r3, [r7, #20]

	return accel_calibrated;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	461a      	mov	r2, r3
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	6010      	str	r0, [r2, #0]
 80010ea:	889b      	ldrh	r3, [r3, #4]
 80010ec:	8093      	strh	r3, [r2, #4]

}
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <mpu6050_interrupt_config>:



MPU6050_status_t mpu6050_interrupt_config(I2C_HandleTypeDef *hi2c,mpu6050_interrupt_config_t level)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	460b      	mov	r3, r1
 8001104:	70fb      	strb	r3, [r7, #3]
	uint8_t int_cfg = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]

	if(MPU6050_read_byte(hi2c,MPU6050_REG_INT_PIN_CFG,&int_cfg)!= MPU6050_ok)
 800110a:	f107 030f 	add.w	r3, r7, #15
 800110e:	461a      	mov	r2, r3
 8001110:	2137      	movs	r1, #55	@ 0x37
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff feca 	bl	8000eac <MPU6050_read_byte>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <mpu6050_interrupt_config+0x28>
	{
		return MPU6050_err;
 800111e:	2301      	movs	r3, #1
 8001120:	e010      	b.n	8001144 <mpu6050_interrupt_config+0x4a>
	}



	int_cfg &= ~0x80;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001128:	b2db      	uxtb	r3, r3
 800112a:	73fb      	strb	r3, [r7, #15]
	int_cfg |= (uint8_t)level;
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	4313      	orrs	r3, r2
 8001132:	b2db      	uxtb	r3, r3
 8001134:	73fb      	strb	r3, [r7, #15]

	//write the updated configuration back to the register
	return MPU6050_write_byte(hi2c,MPU6050_REG_INT_PIN_CFG,int_cfg);
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	461a      	mov	r2, r3
 800113a:	2137      	movs	r1, #55	@ 0x37
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff03 	bl	8000f48 <MPU6050_write_byte>
 8001142:	4603      	mov	r3, r0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <mpu6050_enable_interrupt>:

MPU6050_status_t mpu6050_enable_interrupt(I2C_HandleTypeDef *hi2c,mpu6050_interrupt_t interrupt)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
	uint8_t current_int_settings = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]
			if(MPU6050_read_byte(hi2c,MPU6050_REG_INT_EN,&current_int_settings) != MPU6050_ok)
 800115c:	f107 030f 	add.w	r3, r7, #15
 8001160:	461a      	mov	r2, r3
 8001162:	2138      	movs	r1, #56	@ 0x38
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fea1 	bl	8000eac <MPU6050_read_byte>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <mpu6050_enable_interrupt+0x28>
			{
				return MPU6050_err;
 8001170:	2301      	movs	r3, #1
 8001172:	e00b      	b.n	800118c <mpu6050_enable_interrupt+0x40>
			}

			current_int_settings |= (uint8_t)interrupt;
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	4313      	orrs	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	73fb      	strb	r3, [r7, #15]
			return MPU6050_write_byte(hi2c,MPU6050_REG_INT_EN,current_int_settings);
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	461a      	mov	r2, r3
 8001182:	2138      	movs	r1, #56	@ 0x38
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fedf 	bl	8000f48 <MPU6050_write_byte>
 800118a:	4603      	mov	r3, r0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <mpu6050_disable_interrupt>:

MPU6050_status_t mpu6050_disable_interrupt(I2C_HandleTypeDef *hi2c,mpu6050_interrupt_t interrupt)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
	uint8_t current_int_settings = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]
		if(interrupt != (uint8_t)ALL_INT)
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	2bff      	cmp	r3, #255	@ 0xff
 80011a8:	d006      	beq.n	80011b8 <mpu6050_disable_interrupt+0x24>
		{
			MPU6050_read_byte(hi2c,MPU6050_REG_INT_EN,&current_int_settings);
 80011aa:	f107 030f 	add.w	r3, r7, #15
 80011ae:	461a      	mov	r2, r3
 80011b0:	2138      	movs	r1, #56	@ 0x38
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fe7a 	bl	8000eac <MPU6050_read_byte>
		}

		current_int_settings &= ~interrupt;
 80011b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011bc:	43db      	mvns	r3, r3
 80011be:	b25a      	sxtb	r2, r3
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	4013      	ands	r3, r2
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	73fb      	strb	r3, [r7, #15]
		return MPU6050_write_byte(hi2c,MPU6050_REG_INT_EN,current_int_settings);
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	461a      	mov	r2, r3
 80011d0:	2138      	movs	r1, #56	@ 0x38
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff feb8 	bl	8000f48 <MPU6050_write_byte>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <mpu6050_configure_low_pass_filter>:

MPU6050_status_t mpu6050_configure_low_pass_filter \
(\
		I2C_HandleTypeDef *hi2c, mpu6050_dlpf_config_t dlpf \
)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	460b      	mov	r3, r1
 80011ec:	70fb      	strb	r3, [r7, #3]

	uint8_t value = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	73fb      	strb	r3, [r7, #15]

	if (MPU6050_read_byte(hi2c, MPU6050_REG_CONFIG, &value) != MPU6050_ok){
 80011f2:	f107 030f 	add.w	r3, r7, #15
 80011f6:	461a      	mov	r2, r3
 80011f8:	211a      	movs	r1, #26
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fe56 	bl	8000eac <MPU6050_read_byte>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <mpu6050_configure_low_pass_filter+0x28>
		return MPU6050_err;
 8001206:	2301      	movs	r3, #1
 8001208:	e015      	b.n	8001236 <mpu6050_configure_low_pass_filter+0x54>
	}

	value &= ~(0x7);
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	f023 0307 	bic.w	r3, r3, #7
 8001210:	b2db      	uxtb	r3, r3
 8001212:	73fb      	strb	r3, [r7, #15]
	value |= (uint8_t)dlpf;
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	4313      	orrs	r3, r2
 800121a:	b2db      	uxtb	r3, r3
 800121c:	73fb      	strb	r3, [r7, #15]
	if (MPU6050_write_byte(hi2c, MPU6050_REG_CONFIG, value) != MPU6050_ok){
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	461a      	mov	r2, r3
 8001222:	211a      	movs	r1, #26
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff fe8f 	bl	8000f48 <MPU6050_write_byte>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <mpu6050_configure_low_pass_filter+0x52>
		return MPU6050_err;
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <mpu6050_configure_low_pass_filter+0x54>
	}

	return MPU6050_ok;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <get_interrupt_status>:




static MPU6050_status_t get_interrupt_status(I2C_HandleTypeDef *hi2c, uint8_t *data) {
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]
	//read the interrupt status register MPU6050_REG_INT_STATUS
	return MPU6050_read_byte(hi2c, MPU6050_REG_INT_STATUS, data);
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	213a      	movs	r1, #58	@ 0x3a
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff fe2d 	bl	8000eac <MPU6050_read_byte>
 8001252:	4603      	mov	r3, r0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <get_interrupt_setting>:

static MPU6050_status_t get_interrupt_setting(I2C_HandleTypeDef *hi2c, uint8_t *data) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	//read the interrupt status register MPU6050_REG_INT_STATUS
	return MPU6050_read_byte(hi2c, MPU6050_REG_INT_EN, data);
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	2138      	movs	r1, #56	@ 0x38
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fe1e 	bl	8000eac <MPU6050_read_byte>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <mpu6050_interrupt_handle>:

void mpu6050_interrupt_handle(I2C_HandleTypeDef *hi2c)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
	//read the interrupt status register of the sensor
	uint8_t int_status = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	73bb      	strb	r3, [r7, #14]
	uint8_t int_en_status;
	uint8_t int_settings = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	73fb      	strb	r3, [r7, #15]
	get_interrupt_status(hi2c,&int_status);
 800128a:	f107 030e 	add.w	r3, r7, #14
 800128e:	4619      	mov	r1, r3
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ffd4 	bl	800123e <get_interrupt_status>
	get_interrupt_setting(hi2c,&int_status);
 8001296:	f107 030e 	add.w	r3, r7, #14
 800129a:	4619      	mov	r1, r3
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ffdd 	bl	800125c <get_interrupt_setting>

	if((int_settings & MOT_INT) && (int_status & MOT_INT))
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d007      	beq.n	80012bc <mpu6050_interrupt_handle+0x42>
 80012ac:	7bbb      	ldrb	r3, [r7, #14]
 80012ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <mpu6050_interrupt_handle+0x42>
	{
		mpu6050_motion_detection_callback();
 80012b6:	f000 f811 	bl	80012dc <mpu6050_motion_detection_callback>
	}
	else
	{

	}
}
 80012ba:	e00b      	b.n	80012d4 <mpu6050_interrupt_handle+0x5a>
	else if((int_settings & RAW_RDY_INT)&&(int_status & RAW_RDY_INT))
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d006      	beq.n	80012d4 <mpu6050_interrupt_handle+0x5a>
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <mpu6050_interrupt_handle+0x5a>
		mpu6050_raw_data_ready_callback();
 80012d0:	f000 f83a 	bl	8001348 <mpu6050_raw_data_ready_callback>
}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <mpu6050_motion_detection_callback>:


__weak mpu6050_motion_detection_callback(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <HAL_TIM_PWM_PulseFinishedCallback>:
  g_channel_3_state = 8;
}
#endif

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7f1b      	ldrb	r3, [r3, #28]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d102      	bne.n	8001302 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
  {
	  g_channel_2_state = 0;
 80012fc:	4b07      	ldr	r3, [pc, #28]	@ (800131c <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]

  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7f1b      	ldrb	r3, [r3, #28]
 8001306:	2b04      	cmp	r3, #4
 8001308:	d102      	bne.n	8001310 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
  {
	  g_channel_3_state = 0;
 800130a:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
  }
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	20000000 	.word	0x20000000
 8001320:	20000004 	.word	0x20000004

08001324 <HAL_GPIO_EXTI_Callback>:
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == mpu6050int_Pin)
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d102      	bne.n	800133a <HAL_GPIO_EXTI_Callback+0x16>
	{
		mpu6050_interrupt_handle(&hi2c1);
 8001334:	4803      	ldr	r0, [pc, #12]	@ (8001344 <HAL_GPIO_EXTI_Callback+0x20>)
 8001336:	f7ff ffa0 	bl	800127a <mpu6050_interrupt_handle>
	}
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200000a0 	.word	0x200000a0

08001348 <mpu6050_raw_data_ready_callback>:

//this is the ISR function
void mpu6050_raw_data_ready_callback()
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]

	if(SensorReadTaskHandle)
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <mpu6050_raw_data_ready_callback+0x44>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d013      	beq.n	8001382 <mpu6050_raw_data_ready_callback+0x3a>
	{
		xTaskNotifyFromISR(SensorReadTaskHandle, 0 , eNoAction ,&xHigherPriorityTaskWoken);
 800135a:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <mpu6050_raw_data_ready_callback+0x44>)
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2300      	movs	r3, #0
 8001364:	2200      	movs	r2, #0
 8001366:	2100      	movs	r1, #0
 8001368:	f005 fd28 	bl	8006dbc <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <mpu6050_raw_data_ready_callback+0x3a>
 8001372:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <mpu6050_raw_data_ready_callback+0x48>)
 8001374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	f3bf 8f4f 	dsb	sy
 800137e:	f3bf 8f6f 	isb	sy
	}

}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000013c 	.word	0x2000013c
 8001390:	e000ed04 	.word	0xe000ed04

08001394 <kalman_filter_init>:


#include "kalman_filter.h"


void kalman_filter_init(KalmanFilter* kf) {
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

    kf->q_angle = 0.001f;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a0f      	ldr	r2, [pc, #60]	@ (80013dc <kalman_filter_init+0x48>)
 80013a0:	601a      	str	r2, [r3, #0]
    kf->r_measure = 0.03f;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a0e      	ldr	r2, [pc, #56]	@ (80013e0 <kalman_filter_init+0x4c>)
 80013a6:	605a      	str	r2, [r3, #4]
    kf->angle = 0.0f;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
    kf->p[0][0] = 0.0f;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
    kf->p[0][1] = 0.0f;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
    kf->p[1][0] = 0.0f;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
    kf->p[1][1] = 0.0f;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	3a83126f 	.word	0x3a83126f
 80013e0:	3cf5c28f 	.word	0x3cf5c28f

080013e4 <kalman_filter_get_angle>:

float kalman_filter_get_angle(KalmanFilter* kf, float new_angle, float dt) {
 80013e4:	b480      	push	{r7}
 80013e6:	b08b      	sub	sp, #44	@ 0x2c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80013f0:	edc7 0a01 	vstr	s1, [r7, #4]
    // Step 1: Predict
    kf->angle += 0.0f; // No gyroscope rate, angle remains the same
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80013fa:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8001594 <kalman_filter_get_angle+0x1b0>
 80013fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	edc3 7a02 	vstr	s15, [r3, #8]

    kf->p[0][0] += dt * (dt * kf->p[1][1] - kf->p[0][1] - kf->p[1][0] + kf->q_angle);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	ed93 7a03 	vldr	s14, [r3, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	edd3 6a06 	vldr	s13, [r3, #24]
 8001414:	edd7 7a01 	vldr	s15, [r7, #4]
 8001418:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001422:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	edd3 7a05 	vldr	s15, [r3, #20]
 800142c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800143a:	edd7 7a01 	vldr	s15, [r7, #4]
 800143e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->p[0][1] -= dt * kf->p[1][1];
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	edd3 6a06 	vldr	s13, [r3, #24]
 8001458:	edd7 7a01 	vldr	s15, [r7, #4]
 800145c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->p[1][0] -= dt * kf->p[1][1];
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	edd3 6a06 	vldr	s13, [r3, #24]
 8001476:	edd7 7a01 	vldr	s15, [r7, #4]
 800147a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800147e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->p[1][1] += 0.0f; // No process noise for bias
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	edd3 7a06 	vldr	s15, [r3, #24]
 800148e:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001594 <kalman_filter_get_angle+0x1b0>
 8001492:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	edc3 7a06 	vstr	s15, [r3, #24]

    // Step 2: Update
    float s = kf->p[0][0] + kf->r_measure;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	ed93 7a03 	vldr	s14, [r3, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float k[2];
    k[0] = kf->p[0][0] / s;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	edd3 6a03 	vldr	s13, [r3, #12]
 80014b6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014be:	edc7 7a04 	vstr	s15, [r7, #16]
    k[1] = kf->p[1][0] / s;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	edd3 6a05 	vldr	s13, [r3, #20]
 80014c8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d0:	edc7 7a05 	vstr	s15, [r7, #20]

    float y = new_angle - kf->angle;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80014da:	ed97 7a02 	vldr	s14, [r7, #8]
 80014de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e2:	edc7 7a08 	vstr	s15, [r7, #32]
    kf->angle += k[0] * y;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80014ec:	edd7 6a04 	vldr	s13, [r7, #16]
 80014f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80014f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	edc3 7a02 	vstr	s15, [r3, #8]

    float p00_temp = kf->p[0][0];
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	61fb      	str	r3, [r7, #28]
    float p01_temp = kf->p[0][1];
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	61bb      	str	r3, [r7, #24]

    kf->p[0][0] -= k[0] * p00_temp;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	ed93 7a03 	vldr	s14, [r3, #12]
 8001514:	edd7 6a04 	vldr	s13, [r7, #16]
 8001518:	edd7 7a07 	vldr	s15, [r7, #28]
 800151c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->p[0][1] -= k[0] * p01_temp;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001530:	edd7 6a04 	vldr	s13, [r7, #16]
 8001534:	edd7 7a06 	vldr	s15, [r7, #24]
 8001538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800153c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->p[1][0] -= k[1] * p00_temp;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	ed93 7a05 	vldr	s14, [r3, #20]
 800154c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001550:	edd7 7a07 	vldr	s15, [r7, #28]
 8001554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->p[1][1] -= k[1] * p01_temp;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	ed93 7a06 	vldr	s14, [r3, #24]
 8001568:	edd7 6a05 	vldr	s13, [r7, #20]
 800156c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	edc3 7a06 	vstr	s15, [r3, #24]

    return kf->angle;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	ee07 3a90 	vmov	s15, r3
}
 8001586:	eeb0 0a67 	vmov.f32	s0, s15
 800158a:	372c      	adds	r7, #44	@ 0x2c
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	00000000 	.word	0x00000000

08001598 <map>:
#define ANGLE_POS_MIN 0
#define ANGLE_POS_MAX 90


long map(long x,long in_min,long in_max, long out_min,long out_max)
{
 8001598:	b480      	push	{r7}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	603b      	str	r3, [r7, #0]
	//perform mapping

	long result = (x- in_min)*(out_max - out_min)/(in_max - in_min)+out_min;
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	6a39      	ldr	r1, [r7, #32]
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	1a8a      	subs	r2, r1, r2
 80015b2:	fb03 f202 	mul.w	r2, r3, r2
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	1acb      	subs	r3, r1, r3
 80015bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	617b      	str	r3, [r7, #20]

	//clamp the result to the output range
	if(result > out_max)
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dd02      	ble.n	80015d4 <map+0x3c>
	{
		result = out_max;
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	e005      	b.n	80015e0 <map+0x48>
	}

	else if (result < out_min)
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	da01      	bge.n	80015e0 <map+0x48>
	{
		result = out_min;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	617b      	str	r3, [r7, #20]
	}

	return result;
 80015e0:	697b      	ldr	r3, [r7, #20]

}
 80015e2:	4618      	mov	r0, r3
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <change_pwm_duty_cycle>:


void change_pwm_duty_cycle(uint32_t pwm_pulse,uint8_t timer_channel)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
	__HAL_TIM_SET_COMPARE(&htim4,timer_channel,pwm_pulse);
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d104      	bne.n	800160c <change_pwm_duty_cycle+0x1c>
 8001602:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <change_pwm_duty_cycle+0x50>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800160a:	e013      	b.n	8001634 <change_pwm_duty_cycle+0x44>
	__HAL_TIM_SET_COMPARE(&htim4,timer_channel,pwm_pulse);
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	2b04      	cmp	r3, #4
 8001610:	d104      	bne.n	800161c <change_pwm_duty_cycle+0x2c>
 8001612:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <change_pwm_duty_cycle+0x50>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800161a:	e00b      	b.n	8001634 <change_pwm_duty_cycle+0x44>
	__HAL_TIM_SET_COMPARE(&htim4,timer_channel,pwm_pulse);
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	2b08      	cmp	r3, #8
 8001620:	d104      	bne.n	800162c <change_pwm_duty_cycle+0x3c>
 8001622:	4b07      	ldr	r3, [pc, #28]	@ (8001640 <change_pwm_duty_cycle+0x50>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800162a:	e003      	b.n	8001634 <change_pwm_duty_cycle+0x44>
	__HAL_TIM_SET_COMPARE(&htim4,timer_channel,pwm_pulse);
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <change_pwm_duty_cycle+0x50>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	200000f4 	.word	0x200000f4

08001644 <init_cycle_counter>:
uint32_t get_cycle_count(void) {
    return DWT->CYCCNT;
}


    void init_cycle_counter(void) {
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
            // Enable DWT (Data Watchpoint and Trace)
            CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001648:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <init_cycle_counter+0x2c>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	4a08      	ldr	r2, [pc, #32]	@ (8001670 <init_cycle_counter+0x2c>)
 800164e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001652:	60d3      	str	r3, [r2, #12]
            // Reset cycle counter
            DWT->CYCCNT = 0;
 8001654:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <init_cycle_counter+0x30>)
 8001656:	2200      	movs	r2, #0
 8001658:	605a      	str	r2, [r3, #4]
            // Enable cycle counter
            DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <init_cycle_counter+0x30>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <init_cycle_counter+0x30>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6013      	str	r3, [r2, #0]
        }
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000edf0 	.word	0xe000edf0
 8001674:	e0001000 	.word	0xe0001000

08001678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167c:	f000 fe3a 	bl	80022f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001680:	f000 f866 	bl	8001750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001684:	f000 f972 	bl	800196c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001688:	f000 f8c0 	bl	800180c <MX_I2C1_Init>
  MX_TIM4_Init();
 800168c:	f000 f8ec 	bl	8001868 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  init_cycle_counter();
 8001690:	f7ff ffd8 	bl	8001644 <init_cycle_counter>




  if(MPU6050_init(&hi2c1,MPU6050_I2C_addr)!= MPU6050_ok)
 8001694:	2168      	movs	r1, #104	@ 0x68
 8001696:	4826      	ldr	r0, [pc, #152]	@ (8001730 <main+0xb8>)
 8001698:	f7ff fc7e 	bl	8000f98 <MPU6050_init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <main+0x2e>
  {
	  Error_Handler();
 80016a2:	f000 fbb9 	bl	8001e18 <Error_Handler>
  }

  mpu6050_disable_interrupt(&hi2c1,ALL_INT);
 80016a6:	21ff      	movs	r1, #255	@ 0xff
 80016a8:	4821      	ldr	r0, [pc, #132]	@ (8001730 <main+0xb8>)
 80016aa:	f7ff fd73 	bl	8001194 <mpu6050_disable_interrupt>
  mpu6050_interrupt_config(&hi2c1,INT_LEVEL_ACTIVE_HIGH);
 80016ae:	2100      	movs	r1, #0
 80016b0:	481f      	ldr	r0, [pc, #124]	@ (8001730 <main+0xb8>)
 80016b2:	f7ff fd22 	bl	80010fa <mpu6050_interrupt_config>
  mpu6050_enable_interrupt(&hi2c1,RAW_RDY_INT);
 80016b6:	2101      	movs	r1, #1
 80016b8:	481d      	ldr	r0, [pc, #116]	@ (8001730 <main+0xb8>)
 80016ba:	f7ff fd47 	bl	800114c <mpu6050_enable_interrupt>

  if(mpu6050_configure_low_pass_filter(&hi2c1,DLPF_CFG_21HZ)!= MPU6050_ok)
 80016be:	2104      	movs	r1, #4
 80016c0:	481b      	ldr	r0, [pc, #108]	@ (8001730 <main+0xb8>)
 80016c2:	f7ff fd8e 	bl	80011e2 <mpu6050_configure_low_pass_filter>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <main+0x58>
  {
	  Error_Handler();
 80016cc:	f000 fba4 	bl	8001e18 <Error_Handler>
  }

  __HAL_TIM_ENABLE_IT(&htim4,TIM_IT_UPDATE);
 80016d0:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <main+0xbc>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <main+0xbc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	60da      	str	r2, [r3, #12]

  if(HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_2) != HAL_OK)
 80016e0:	2104      	movs	r1, #4
 80016e2:	4814      	ldr	r0, [pc, #80]	@ (8001734 <main+0xbc>)
 80016e4:	f002 fd14 	bl	8004110 <HAL_TIM_PWM_Start_IT>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <main+0x7a>
  {
	  Error_Handler();
 80016ee:	f000 fb93 	bl	8001e18 <Error_Handler>
  }

  if(HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_3) != HAL_OK)
 80016f2:	2108      	movs	r1, #8
 80016f4:	480f      	ldr	r0, [pc, #60]	@ (8001734 <main+0xbc>)
 80016f6:	f002 fd0b 	bl	8004110 <HAL_TIM_PWM_Start_IT>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <main+0x8c>
  {
	  Error_Handler();
 8001700:	f000 fb8a 	bl	8001e18 <Error_Handler>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001704:	f003 fca2 	bl	800504c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SensorReadTask */
  SensorReadTaskHandle = osThreadNew(sensor_read_task, NULL, &SensorReadTask_attributes);
 8001708:	4a0b      	ldr	r2, [pc, #44]	@ (8001738 <main+0xc0>)
 800170a:	2100      	movs	r1, #0
 800170c:	480b      	ldr	r0, [pc, #44]	@ (800173c <main+0xc4>)
 800170e:	f003 fcfc 	bl	800510a <osThreadNew>
 8001712:	4603      	mov	r3, r0
 8001714:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <main+0xc8>)
 8001716:	6013      	str	r3, [r2, #0]

  /* creation of PWM_Control_Tas */
  PWM_Control_TasHandle = osThreadNew(pwm_control_task, NULL, &PWM_Control_Tas_attributes);
 8001718:	4a0a      	ldr	r2, [pc, #40]	@ (8001744 <main+0xcc>)
 800171a:	2100      	movs	r1, #0
 800171c:	480a      	ldr	r0, [pc, #40]	@ (8001748 <main+0xd0>)
 800171e:	f003 fcf4 	bl	800510a <osThreadNew>
 8001722:	4603      	mov	r3, r0
 8001724:	4a09      	ldr	r2, [pc, #36]	@ (800174c <main+0xd4>)
 8001726:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001728:	f003 fcb4 	bl	8005094 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <main+0xb4>
 8001730:	200000a0 	.word	0x200000a0
 8001734:	200000f4 	.word	0x200000f4
 8001738:	08009404 	.word	0x08009404
 800173c:	08001c15 	.word	0x08001c15
 8001740:	2000013c 	.word	0x2000013c
 8001744:	08009428 	.word	0x08009428
 8001748:	08001c91 	.word	0x08001c91
 800174c:	20000140 	.word	0x20000140

08001750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b094      	sub	sp, #80	@ 0x50
 8001754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001756:	f107 0320 	add.w	r3, r7, #32
 800175a:	2230      	movs	r2, #48	@ 0x30
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f006 fd19 	bl	8008196 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	4b22      	ldr	r3, [pc, #136]	@ (8001804 <SystemClock_Config+0xb4>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	4a21      	ldr	r2, [pc, #132]	@ (8001804 <SystemClock_Config+0xb4>)
 800177e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001782:	6413      	str	r3, [r2, #64]	@ 0x40
 8001784:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <SystemClock_Config+0xb4>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	4b1c      	ldr	r3, [pc, #112]	@ (8001808 <SystemClock_Config+0xb8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a1b      	ldr	r2, [pc, #108]	@ (8001808 <SystemClock_Config+0xb8>)
 800179a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <SystemClock_Config+0xb8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ac:	2302      	movs	r3, #2
 80017ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b0:	2301      	movs	r3, #1
 80017b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b4:	2310      	movs	r3, #16
 80017b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017bc:	f107 0320 	add.w	r3, r7, #32
 80017c0:	4618      	mov	r0, r3
 80017c2:	f001 fed5 	bl	8003570 <HAL_RCC_OscConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80017cc:	f000 fb24 	bl	8001e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d0:	230f      	movs	r3, #15
 80017d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80017d8:	2380      	movs	r3, #128	@ 0x80
 80017da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017dc:	2300      	movs	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 f938 	bl	8003a60 <HAL_RCC_ClockConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80017f6:	f000 fb0f 	bl	8001e18 <Error_Handler>
  }
}
 80017fa:	bf00      	nop
 80017fc:	3750      	adds	r7, #80	@ 0x50
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40007000 	.word	0x40007000

0800180c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001810:	4b12      	ldr	r3, [pc, #72]	@ (800185c <MX_I2C1_Init+0x50>)
 8001812:	4a13      	ldr	r2, [pc, #76]	@ (8001860 <MX_I2C1_Init+0x54>)
 8001814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001816:	4b11      	ldr	r3, [pc, #68]	@ (800185c <MX_I2C1_Init+0x50>)
 8001818:	4a12      	ldr	r2, [pc, #72]	@ (8001864 <MX_I2C1_Init+0x58>)
 800181a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800181c:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <MX_I2C1_Init+0x50>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001822:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <MX_I2C1_Init+0x50>)
 8001824:	2200      	movs	r2, #0
 8001826:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <MX_I2C1_Init+0x50>)
 800182a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800182e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001830:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <MX_I2C1_Init+0x50>)
 8001832:	2200      	movs	r2, #0
 8001834:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <MX_I2C1_Init+0x50>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800183c:	4b07      	ldr	r3, [pc, #28]	@ (800185c <MX_I2C1_Init+0x50>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <MX_I2C1_Init+0x50>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001848:	4804      	ldr	r0, [pc, #16]	@ (800185c <MX_I2C1_Init+0x50>)
 800184a:	f001 f845 	bl	80028d8 <HAL_I2C_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001854:	f000 fae0 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200000a0 	.word	0x200000a0
 8001860:	40005400 	.word	0x40005400
 8001864:	000186a0 	.word	0x000186a0

08001868 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08e      	sub	sp, #56	@ 0x38
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	f107 0320 	add.w	r3, r7, #32
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
 8001894:	615a      	str	r2, [r3, #20]
 8001896:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001898:	4b32      	ldr	r3, [pc, #200]	@ (8001964 <MX_TIM4_Init+0xfc>)
 800189a:	4a33      	ldr	r2, [pc, #204]	@ (8001968 <MX_TIM4_Init+0x100>)
 800189c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 199;
 800189e:	4b31      	ldr	r3, [pc, #196]	@ (8001964 <MX_TIM4_Init+0xfc>)
 80018a0:	22c7      	movs	r2, #199	@ 0xc7
 80018a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001964 <MX_TIM4_Init+0xfc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 39;
 80018aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001964 <MX_TIM4_Init+0xfc>)
 80018ac:	2227      	movs	r2, #39	@ 0x27
 80018ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001964 <MX_TIM4_Init+0xfc>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001964 <MX_TIM4_Init+0xfc>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018bc:	4829      	ldr	r0, [pc, #164]	@ (8001964 <MX_TIM4_Init+0xfc>)
 80018be:	f002 fb0d 	bl	8003edc <HAL_TIM_Base_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80018c8:	f000 faa6 	bl	8001e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018d6:	4619      	mov	r1, r3
 80018d8:	4822      	ldr	r0, [pc, #136]	@ (8001964 <MX_TIM4_Init+0xfc>)
 80018da:	f002 fee1 	bl	80046a0 <HAL_TIM_ConfigClockSource>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80018e4:	f000 fa98 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018e8:	481e      	ldr	r0, [pc, #120]	@ (8001964 <MX_TIM4_Init+0xfc>)
 80018ea:	f002 fbb7 	bl	800405c <HAL_TIM_PWM_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80018f4:	f000 fa90 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018f8:	2320      	movs	r3, #32
 80018fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001900:	f107 0320 	add.w	r3, r7, #32
 8001904:	4619      	mov	r1, r3
 8001906:	4817      	ldr	r0, [pc, #92]	@ (8001964 <MX_TIM4_Init+0xfc>)
 8001908:	f003 facc 	bl	8004ea4 <HAL_TIMEx_MasterConfigSynchronization>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001912:	f000 fa81 	bl	8001e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001916:	2360      	movs	r3, #96	@ 0x60
 8001918:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 16;
 800191a:	2310      	movs	r3, #16
 800191c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2204      	movs	r2, #4
 800192a:	4619      	mov	r1, r3
 800192c:	480d      	ldr	r0, [pc, #52]	@ (8001964 <MX_TIM4_Init+0xfc>)
 800192e:	f002 fdf5 	bl	800451c <HAL_TIM_PWM_ConfigChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001938:	f000 fa6e 	bl	8001e18 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	2208      	movs	r2, #8
 8001944:	4619      	mov	r1, r3
 8001946:	4807      	ldr	r0, [pc, #28]	@ (8001964 <MX_TIM4_Init+0xfc>)
 8001948:	f002 fde8 	bl	800451c <HAL_TIM_PWM_ConfigChannel>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001952:	f000 fa61 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001956:	4803      	ldr	r0, [pc, #12]	@ (8001964 <MX_TIM4_Init+0xfc>)
 8001958:	f000 fb00 	bl	8001f5c <HAL_TIM_MspPostInit>

}
 800195c:	bf00      	nop
 800195e:	3738      	adds	r7, #56	@ 0x38
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200000f4 	.word	0x200000f4
 8001968:	40000800 	.word	0x40000800

0800196c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	@ 0x30
 8001970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001972:	f107 031c 	add.w	r3, r7, #28
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	4b9d      	ldr	r3, [pc, #628]	@ (8001bfc <MX_GPIO_Init+0x290>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a9c      	ldr	r2, [pc, #624]	@ (8001bfc <MX_GPIO_Init+0x290>)
 800198c:	f043 0310 	orr.w	r3, r3, #16
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b9a      	ldr	r3, [pc, #616]	@ (8001bfc <MX_GPIO_Init+0x290>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	61bb      	str	r3, [r7, #24]
 800199c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	4b96      	ldr	r3, [pc, #600]	@ (8001bfc <MX_GPIO_Init+0x290>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a95      	ldr	r2, [pc, #596]	@ (8001bfc <MX_GPIO_Init+0x290>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b93      	ldr	r3, [pc, #588]	@ (8001bfc <MX_GPIO_Init+0x290>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b8f      	ldr	r3, [pc, #572]	@ (8001bfc <MX_GPIO_Init+0x290>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a8e      	ldr	r2, [pc, #568]	@ (8001bfc <MX_GPIO_Init+0x290>)
 80019c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b8c      	ldr	r3, [pc, #560]	@ (8001bfc <MX_GPIO_Init+0x290>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b88      	ldr	r3, [pc, #544]	@ (8001bfc <MX_GPIO_Init+0x290>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a87      	ldr	r2, [pc, #540]	@ (8001bfc <MX_GPIO_Init+0x290>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e6:	4b85      	ldr	r3, [pc, #532]	@ (8001bfc <MX_GPIO_Init+0x290>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	4b81      	ldr	r3, [pc, #516]	@ (8001bfc <MX_GPIO_Init+0x290>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	4a80      	ldr	r2, [pc, #512]	@ (8001bfc <MX_GPIO_Init+0x290>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a02:	4b7e      	ldr	r3, [pc, #504]	@ (8001bfc <MX_GPIO_Init+0x290>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	4b7a      	ldr	r3, [pc, #488]	@ (8001bfc <MX_GPIO_Init+0x290>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	4a79      	ldr	r2, [pc, #484]	@ (8001bfc <MX_GPIO_Init+0x290>)
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1e:	4b77      	ldr	r3, [pc, #476]	@ (8001bfc <MX_GPIO_Init+0x290>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2108      	movs	r1, #8
 8001a2e:	4874      	ldr	r0, [pc, #464]	@ (8001c00 <MX_GPIO_Init+0x294>)
 8001a30:	f000 ff20 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	2101      	movs	r1, #1
 8001a38:	4872      	ldr	r0, [pc, #456]	@ (8001c04 <MX_GPIO_Init+0x298>)
 8001a3a:	f000 ff1b 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001a44:	4870      	ldr	r0, [pc, #448]	@ (8001c08 <MX_GPIO_Init+0x29c>)
 8001a46:	f000 ff15 	bl	8002874 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4867      	ldr	r0, [pc, #412]	@ (8001c00 <MX_GPIO_Init+0x294>)
 8001a62:	f000 fd6b 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001a66:	2301      	movs	r3, #1
 8001a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4861      	ldr	r0, [pc, #388]	@ (8001c04 <MX_GPIO_Init+0x298>)
 8001a7e:	f000 fd5d 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001a82:	2308      	movs	r3, #8
 8001a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a92:	2305      	movs	r3, #5
 8001a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4859      	ldr	r0, [pc, #356]	@ (8001c04 <MX_GPIO_Init+0x298>)
 8001a9e:	f000 fd4d 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aa6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4855      	ldr	r0, [pc, #340]	@ (8001c0c <MX_GPIO_Init+0x2a0>)
 8001ab8:	f000 fd40 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001abc:	2310      	movs	r3, #16
 8001abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001acc:	2306      	movs	r3, #6
 8001ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	484d      	ldr	r0, [pc, #308]	@ (8001c0c <MX_GPIO_Init+0x2a0>)
 8001ad8:	f000 fd30 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001adc:	23e0      	movs	r3, #224	@ 0xe0
 8001ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aec:	2305      	movs	r3, #5
 8001aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	4845      	ldr	r0, [pc, #276]	@ (8001c0c <MX_GPIO_Init+0x2a0>)
 8001af8:	f000 fd20 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001afc:	2304      	movs	r3, #4
 8001afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b00:	2300      	movs	r3, #0
 8001b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4840      	ldr	r0, [pc, #256]	@ (8001c10 <MX_GPIO_Init+0x2a4>)
 8001b10:	f000 fd14 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001b14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b26:	2305      	movs	r3, #5
 8001b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4837      	ldr	r0, [pc, #220]	@ (8001c10 <MX_GPIO_Init+0x2a4>)
 8001b32:	f000 fd03 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001b36:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001b3a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	482e      	ldr	r0, [pc, #184]	@ (8001c08 <MX_GPIO_Init+0x29c>)
 8001b50:	f000 fcf4 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001b54:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b66:	2306      	movs	r3, #6
 8001b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4824      	ldr	r0, [pc, #144]	@ (8001c04 <MX_GPIO_Init+0x298>)
 8001b72:	f000 fce3 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001b76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4820      	ldr	r0, [pc, #128]	@ (8001c0c <MX_GPIO_Init+0x2a0>)
 8001b8c:	f000 fcd6 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001b90:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ba2:	230a      	movs	r3, #10
 8001ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	4817      	ldr	r0, [pc, #92]	@ (8001c0c <MX_GPIO_Init+0x2a0>)
 8001bae:	f000 fcc5 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001bb2:	2320      	movs	r3, #32
 8001bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4810      	ldr	r0, [pc, #64]	@ (8001c08 <MX_GPIO_Init+0x29c>)
 8001bc6:	f000 fcb9 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : mpu6050int_Pin */
  GPIO_InitStruct.Pin = mpu6050int_Pin;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bce:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(mpu6050int_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4808      	ldr	r0, [pc, #32]	@ (8001c00 <MX_GPIO_Init+0x294>)
 8001be0:	f000 fcac 	bl	800253c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2105      	movs	r1, #5
 8001be8:	2006      	movs	r0, #6
 8001bea:	f000 fc7d 	bl	80024e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bee:	2006      	movs	r0, #6
 8001bf0:	f000 fc96 	bl	8002520 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bf4:	bf00      	nop
 8001bf6:	3730      	adds	r7, #48	@ 0x30
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40020800 	.word	0x40020800
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	40020400 	.word	0x40020400

08001c14 <sensor_read_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sensor_read_task */
void sensor_read_task(void *argument)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN 5 */

	mpu6050_accel_data_t g_accel_data;

	uint32_t acceldata_y_z = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]

  /* Infinite loop */
  for(;;)
  {
	  //sensor read
	  if(MPU6050_read_accelerometer_data(&hi2c1,MPU6050_I2C_addr,&g_accel_data) != MPU6050_ok)
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	461a      	mov	r2, r3
 8001c26:	2168      	movs	r1, #104	@ 0x68
 8001c28:	4816      	ldr	r0, [pc, #88]	@ (8001c84 <sensor_read_task+0x70>)
 8001c2a:	f7ff f9f9 	bl	8001020 <MPU6050_read_accelerometer_data>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <sensor_read_task+0x24>
	  	  {
	  		  Error_Handler();
 8001c34:	f000 f8f0 	bl	8001e18 <Error_Handler>
	  	  }

	  acceldata_y_z = g_accel_data.y;
 8001c38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c3c:	61fb      	str	r3, [r7, #28]
	  acceldata_y_z = (acceldata_y_z << 16) | g_accel_data.z;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	041b      	lsls	r3, r3, #16
 8001c42:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61fb      	str	r3, [r7, #28]

	  	  g_accel_data = mpu6050_accelerometer_calibration(&error_offset,&g_accel_data);
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	f107 0214 	add.w	r2, r7, #20
 8001c50:	490d      	ldr	r1, [pc, #52]	@ (8001c88 <sensor_read_task+0x74>)
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fa19 	bl	800108a <mpu6050_accelerometer_calibration>
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	463a      	mov	r2, r7
 8001c5e:	6810      	ldr	r0, [r2, #0]
 8001c60:	6018      	str	r0, [r3, #0]
 8001c62:	8892      	ldrh	r2, [r2, #4]
 8001c64:	809a      	strh	r2, [r3, #4]

	  	  //send notification to the pwm control task
	  	  xTaskNotify((TaskHandle_t)PWM_Control_TasHandle,acceldata_y_z, eSetValueWithOverwrite);
 8001c66:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <sensor_read_task+0x78>)
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	69f9      	ldr	r1, [r7, #28]
 8001c70:	f004 ffe2 	bl	8006c38 <xTaskGenericNotify>

	  	  //enter blocked state until a direct notification is received from the ISR
	  	  xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f004 ff7b 	bl	8006b78 <xTaskNotifyWait>
	  if(MPU6050_read_accelerometer_data(&hi2c1,MPU6050_I2C_addr,&g_accel_data) != MPU6050_ok)
 8001c82:	e7cd      	b.n	8001c20 <sensor_read_task+0xc>
 8001c84:	200000a0 	.word	0x200000a0
 8001c88:	0800944c 	.word	0x0800944c
 8001c8c:	20000140 	.word	0x20000140

08001c90 <pwm_control_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pwm_control_task */
void pwm_control_task(void *argument)
{
 8001c90:	b5b0      	push	{r4, r5, r7, lr}
 8001c92:	b094      	sub	sp, #80	@ 0x50
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pwm_control_task */

	  uint32_t  previous_tick = osKernelGetTickCount();
 8001c98:	f003 fa22 	bl	80050e0 <osKernelGetTickCount>
 8001c9c:	6478      	str	r0, [r7, #68]	@ 0x44
	  float roll_angle;
	  int16_t roll_angle_filtered;
	  mpu6050_accel_data_t g_accel_data;
	  float dt = 0;
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	643b      	str	r3, [r7, #64]	@ 0x40
	  uint32_t accel_data_y_z;

	  KalmanFilter kf;
	   kalman_filter_init(&kf);
 8001ca4:	f107 0308 	add.w	r3, r7, #8
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fb73 	bl	8001394 <kalman_filter_init>
  for(;;)
  {

	  //wakes upon notification
	  //enter blocked state until a direct notification is received from the Sensor read task
	  xTaskNotifyWait(0, ULONG_MAX, &accel_data_y_z, portMAX_DELAY);
 8001cae:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	f04f 31ff 	mov.w	r1, #4294967295
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f004 ff5c 	bl	8006b78 <xTaskNotifyWait>

	  g_accel_data.z = (int16_t)accel_data_y_z & 0xFFFF;
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	b21b      	sxth	r3, r3
 8001cc4:	85bb      	strh	r3, [r7, #44]	@ 0x2c

	  g_accel_data.y = (int16_t)(accel_data_y_z >>16) & 0xFFFF;
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	0c1b      	lsrs	r3, r3, #16
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	857b      	strh	r3, [r7, #42]	@ 0x2a

	  uint32_t current_tick = osKernelGetTickCount();
 8001cce:	f003 fa07 	bl	80050e0 <osKernelGetTickCount>
 8001cd2:	63f8      	str	r0, [r7, #60]	@ 0x3c

	  dt = (current_tick - previous_tick)/1000.0f;
 8001cd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ce2:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8001db8 <pwm_control_task+0x128>
 8001ce6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cea:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	  previous_tick = current_tick;
 8001cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cf0:	647b      	str	r3, [r7, #68]	@ 0x44

	  roll_angle = atan2(g_accel_data.y ,g_accel_data.z)*(180.0/M_PI);
 8001cf2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fc0c 	bl	8000514 <__aeabi_i2d>
 8001cfc:	4604      	mov	r4, r0
 8001cfe:	460d      	mov	r5, r1
 8001d00:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fc05 	bl	8000514 <__aeabi_i2d>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	ec43 2b11 	vmov	d1, r2, r3
 8001d12:	ec45 4b10 	vmov	d0, r4, r5
 8001d16:	f007 f8bb 	bl	8008e90 <atan2>
 8001d1a:	ec51 0b10 	vmov	r0, r1, d0
 8001d1e:	a324      	add	r3, pc, #144	@ (adr r3, 8001db0 <pwm_control_task+0x120>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	f7fe fc60 	bl	80005e8 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7fe fef4 	bl	8000b1c <__aeabi_d2f>
 8001d34:	4603      	mov	r3, r0
 8001d36:	63bb      	str	r3, [r7, #56]	@ 0x38
	  DEBUG_ROLL_ANGLE(roll_angle);
 8001d38:	4a20      	ldr	r2, [pc, #128]	@ (8001dbc <pwm_control_task+0x12c>)
 8001d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d3c:	6013      	str	r3, [r2, #0]
	  DEBUG_DT(dt * 1000);
 8001d3e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001d42:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001db8 <pwm_control_task+0x128>
 8001d46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <pwm_control_task+0x130>)
 8001d4c:	edc3 7a00 	vstr	s15, [r3]

	 roll_angle_filtered = kalman_filter_get_angle(&kf,roll_angle,dt);
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	edd7 0a10 	vldr	s1, [r7, #64]	@ 0x40
 8001d58:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fb41 	bl	80013e4 <kalman_filter_get_angle>
 8001d62:	eef0 7a40 	vmov.f32	s15, s0
 8001d66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d6a:	ee17 3a90 	vmov	r3, s15
 8001d6e:	86fb      	strh	r3, [r7, #54]	@ 0x36
	 DEBUG_ROLL_ANGLE_FILT(roll_angle_filtered);
 8001d70:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001d74:	4a13      	ldr	r2, [pc, #76]	@ (8001dc4 <pwm_control_task+0x134>)
 8001d76:	6013      	str	r3, [r2, #0]

	 uint8_t channel = (roll_angle_filtered < 0)? TIM_CHANNEL_2 : TIM_CHANNEL_3;
 8001d78:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	da01      	bge.n	8001d84 <pwm_control_task+0xf4>
 8001d80:	2304      	movs	r3, #4
 8001d82:	e000      	b.n	8001d86 <pwm_control_task+0xf6>
 8001d84:	2308      	movs	r3, #8
 8001d86:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	  roll_angle_filtered = (roll_angle_filtered < 0)? roll_angle_filtered : roll_angle_filtered;

	  uint32_t pwm_pulse = map(roll_angle_filtered ,ANGLE_POS_MIN,ANGLE_POS_MAX,PWM_PULSE_MIN,PWM_PULSE_MAX);
 8001d8a:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8001d8e:	2328      	movs	r3, #40	@ 0x28
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2300      	movs	r3, #0
 8001d94:	225a      	movs	r2, #90	@ 0x5a
 8001d96:	2100      	movs	r1, #0
 8001d98:	f7ff fbfe 	bl	8001598 <map>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	633b      	str	r3, [r7, #48]	@ 0x30

	  change_pwm_duty_cycle(pwm_pulse,channel);
 8001da0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001da4:	4619      	mov	r1, r3
 8001da6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001da8:	f7ff fc22 	bl	80015f0 <change_pwm_duty_cycle>
  {
 8001dac:	e77f      	b.n	8001cae <pwm_control_task+0x1e>
 8001dae:	bf00      	nop
 8001db0:	1a63c1f8 	.word	0x1a63c1f8
 8001db4:	404ca5dc 	.word	0x404ca5dc
 8001db8:	447a0000 	.word	0x447a0000
 8001dbc:	20000094 	.word	0x20000094
 8001dc0:	20000098 	.word	0x20000098
 8001dc4:	2000009c 	.word	0x2000009c

08001dc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */


	  if (htim->Instance == TIM6) {
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_TIM_PeriodElapsedCallback+0x16>
	    HAL_IncTick();
 8001dda:	f000 faad 	bl	8002338 <HAL_IncTick>
	  }

	  g_counter=0;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
	  g_channel_2_state = 16;
 8001de4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001de6:	2210      	movs	r2, #16
 8001de8:	601a      	str	r2, [r3, #0]
	  g_channel_3_state = 8;
 8001dea:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001dec:	2208      	movs	r2, #8
 8001dee:	601a      	str	r2, [r3, #0]


  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a04      	ldr	r2, [pc, #16]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d101      	bne.n	8001dfe <HAL_TIM_PeriodElapsedCallback+0x36>
    HAL_IncTick();
 8001dfa:	f000 fa9d 	bl	8002338 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40001000 	.word	0x40001000
 8001e0c:	20000144 	.word	0x20000144
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000004 	.word	0x20000004

08001e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e1c:	b672      	cpsid	i
}
 8001e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <Error_Handler+0x8>

08001e24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	4b12      	ldr	r3, [pc, #72]	@ (8001e78 <HAL_MspInit+0x54>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e32:	4a11      	ldr	r2, [pc, #68]	@ (8001e78 <HAL_MspInit+0x54>)
 8001e34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <HAL_MspInit+0x54>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <HAL_MspInit+0x54>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <HAL_MspInit+0x54>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e56:	4b08      	ldr	r3, [pc, #32]	@ (8001e78 <HAL_MspInit+0x54>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	210f      	movs	r1, #15
 8001e66:	f06f 0001 	mvn.w	r0, #1
 8001e6a:	f000 fb3d 	bl	80024e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800

08001e7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	@ 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a19      	ldr	r2, [pc, #100]	@ (8001f00 <HAL_I2C_MspInit+0x84>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d12c      	bne.n	8001ef8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <HAL_I2C_MspInit+0x88>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4a17      	ldr	r2, [pc, #92]	@ (8001f04 <HAL_I2C_MspInit+0x88>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <HAL_I2C_MspInit+0x88>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001eba:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec0:	2312      	movs	r3, #18
 8001ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	480c      	ldr	r0, [pc, #48]	@ (8001f08 <HAL_I2C_MspInit+0x8c>)
 8001ed8:	f000 fb30 	bl	800253c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <HAL_I2C_MspInit+0x88>)
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee4:	4a07      	ldr	r2, [pc, #28]	@ (8001f04 <HAL_I2C_MspInit+0x88>)
 8001ee6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eea:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eec:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_I2C_MspInit+0x88>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ef8:	bf00      	nop
 8001efa:	3728      	adds	r7, #40	@ 0x28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40005400 	.word	0x40005400
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020400 	.word	0x40020400

08001f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0e      	ldr	r2, [pc, #56]	@ (8001f54 <HAL_TIM_Base_MspInit+0x48>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d115      	bne.n	8001f4a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <HAL_TIM_Base_MspInit+0x4c>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	4a0c      	ldr	r2, [pc, #48]	@ (8001f58 <HAL_TIM_Base_MspInit+0x4c>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <HAL_TIM_Base_MspInit+0x4c>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2105      	movs	r1, #5
 8001f3e:	201e      	movs	r0, #30
 8001f40:	f000 fad2 	bl	80024e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f44:	201e      	movs	r0, #30
 8001f46:	f000 faeb 	bl	8002520 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40000800 	.word	0x40000800
 8001f58:	40023800 	.word	0x40023800

08001f5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a12      	ldr	r2, [pc, #72]	@ (8001fc4 <HAL_TIM_MspPostInit+0x68>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d11e      	bne.n	8001fbc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <HAL_TIM_MspPostInit+0x6c>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	4a10      	ldr	r2, [pc, #64]	@ (8001fc8 <HAL_TIM_MspPostInit+0x6c>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc8 <HAL_TIM_MspPostInit+0x6c>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001f9a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001f9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fac:	2302      	movs	r3, #2
 8001fae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4805      	ldr	r0, [pc, #20]	@ (8001fcc <HAL_TIM_MspPostInit+0x70>)
 8001fb8:	f000 fac0 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001fbc:	bf00      	nop
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40000800 	.word	0x40000800
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020400 	.word	0x40020400

08001fd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08e      	sub	sp, #56	@ 0x38
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	4b33      	ldr	r3, [pc, #204]	@ (80020b4 <HAL_InitTick+0xe4>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe8:	4a32      	ldr	r2, [pc, #200]	@ (80020b4 <HAL_InitTick+0xe4>)
 8001fea:	f043 0310 	orr.w	r3, r3, #16
 8001fee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff0:	4b30      	ldr	r3, [pc, #192]	@ (80020b4 <HAL_InitTick+0xe4>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ffc:	f107 0210 	add.w	r2, r7, #16
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f001 ff36 	bl	8003e78 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002012:	2b00      	cmp	r3, #0
 8002014:	d103      	bne.n	800201e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002016:	f001 ff1b 	bl	8003e50 <HAL_RCC_GetPCLK1Freq>
 800201a:	6378      	str	r0, [r7, #52]	@ 0x34
 800201c:	e004      	b.n	8002028 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800201e:	f001 ff17 	bl	8003e50 <HAL_RCC_GetPCLK1Freq>
 8002022:	4603      	mov	r3, r0
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800202a:	4a23      	ldr	r2, [pc, #140]	@ (80020b8 <HAL_InitTick+0xe8>)
 800202c:	fba2 2303 	umull	r2, r3, r2, r3
 8002030:	0c9b      	lsrs	r3, r3, #18
 8002032:	3b01      	subs	r3, #1
 8002034:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002036:	4b21      	ldr	r3, [pc, #132]	@ (80020bc <HAL_InitTick+0xec>)
 8002038:	4a21      	ldr	r2, [pc, #132]	@ (80020c0 <HAL_InitTick+0xf0>)
 800203a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800203c:	4b1f      	ldr	r3, [pc, #124]	@ (80020bc <HAL_InitTick+0xec>)
 800203e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002042:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002044:	4a1d      	ldr	r2, [pc, #116]	@ (80020bc <HAL_InitTick+0xec>)
 8002046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002048:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800204a:	4b1c      	ldr	r3, [pc, #112]	@ (80020bc <HAL_InitTick+0xec>)
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002050:	4b1a      	ldr	r3, [pc, #104]	@ (80020bc <HAL_InitTick+0xec>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002056:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <HAL_InitTick+0xec>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800205c:	4817      	ldr	r0, [pc, #92]	@ (80020bc <HAL_InitTick+0xec>)
 800205e:	f001 ff3d 	bl	8003edc <HAL_TIM_Base_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002068:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800206c:	2b00      	cmp	r3, #0
 800206e:	d11b      	bne.n	80020a8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002070:	4812      	ldr	r0, [pc, #72]	@ (80020bc <HAL_InitTick+0xec>)
 8002072:	f001 ff83 	bl	8003f7c <HAL_TIM_Base_Start_IT>
 8002076:	4603      	mov	r3, r0
 8002078:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800207c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002080:	2b00      	cmp	r3, #0
 8002082:	d111      	bne.n	80020a8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002084:	2036      	movs	r0, #54	@ 0x36
 8002086:	f000 fa4b 	bl	8002520 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0f      	cmp	r3, #15
 800208e:	d808      	bhi.n	80020a2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	2036      	movs	r0, #54	@ 0x36
 8002096:	f000 fa27 	bl	80024e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800209a:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <HAL_InitTick+0xf4>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	e002      	b.n	80020a8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80020a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3738      	adds	r7, #56	@ 0x38
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40023800 	.word	0x40023800
 80020b8:	431bde83 	.word	0x431bde83
 80020bc:	20000148 	.word	0x20000148
 80020c0:	40001000 	.word	0x40001000
 80020c4:	2000000c 	.word	0x2000000c

080020c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <NMI_Handler+0x4>

080020d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <HardFault_Handler+0x4>

080020d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <MemManage_Handler+0x4>

080020e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e4:	bf00      	nop
 80020e6:	e7fd      	b.n	80020e4 <BusFault_Handler+0x4>

080020e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <UsageFault_Handler+0x4>

080020f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002102:	2001      	movs	r0, #1
 8002104:	f000 fbd0 	bl	80028a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}

0800210c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002110:	4802      	ldr	r0, [pc, #8]	@ (800211c <TIM4_IRQHandler+0x10>)
 8002112:	f002 f913 	bl	800433c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200000f4 	.word	0x200000f4

08002120 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002124:	4802      	ldr	r0, [pc, #8]	@ (8002130 <TIM6_DAC_IRQHandler+0x10>)
 8002126:	f002 f909 	bl	800433c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000148 	.word	0x20000148

08002134 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	e00a      	b.n	800215c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002146:	f3af 8000 	nop.w
 800214a:	4601      	mov	r1, r0
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	60ba      	str	r2, [r7, #8]
 8002152:	b2ca      	uxtb	r2, r1
 8002154:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3301      	adds	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	429a      	cmp	r2, r3
 8002162:	dbf0      	blt.n	8002146 <_read+0x12>
  }

  return len;
 8002164:	687b      	ldr	r3, [r7, #4]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e009      	b.n	8002194 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	60ba      	str	r2, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3301      	adds	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	dbf1      	blt.n	8002180 <_write+0x12>
  }
  return len;
 800219c:	687b      	ldr	r3, [r7, #4]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_close>:

int _close(int file)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021ce:	605a      	str	r2, [r3, #4]
  return 0;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <_isatty>:

int _isatty(int file)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021e6:	2301      	movs	r3, #1
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002218:	4a14      	ldr	r2, [pc, #80]	@ (800226c <_sbrk+0x5c>)
 800221a:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <_sbrk+0x60>)
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002224:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <_sbrk+0x64>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800222c:	4b11      	ldr	r3, [pc, #68]	@ (8002274 <_sbrk+0x64>)
 800222e:	4a12      	ldr	r2, [pc, #72]	@ (8002278 <_sbrk+0x68>)
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002232:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	429a      	cmp	r2, r3
 800223e:	d207      	bcs.n	8002250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002240:	f006 f84e 	bl	80082e0 <__errno>
 8002244:	4603      	mov	r3, r0
 8002246:	220c      	movs	r2, #12
 8002248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800224a:	f04f 33ff 	mov.w	r3, #4294967295
 800224e:	e009      	b.n	8002264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002250:	4b08      	ldr	r3, [pc, #32]	@ (8002274 <_sbrk+0x64>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002256:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <_sbrk+0x64>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	4a05      	ldr	r2, [pc, #20]	@ (8002274 <_sbrk+0x64>)
 8002260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002262:	68fb      	ldr	r3, [r7, #12]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20020000 	.word	0x20020000
 8002270:	00000400 	.word	0x00000400
 8002274:	20000190 	.word	0x20000190
 8002278:	20004cd0 	.word	0x20004cd0

0800227c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002280:	4b06      	ldr	r3, [pc, #24]	@ (800229c <SystemInit+0x20>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002286:	4a05      	ldr	r2, [pc, #20]	@ (800229c <SystemInit+0x20>)
 8002288:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800228c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022a4:	f7ff ffea 	bl	800227c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a8:	480c      	ldr	r0, [pc, #48]	@ (80022dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022aa:	490d      	ldr	r1, [pc, #52]	@ (80022e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022ac:	4a0d      	ldr	r2, [pc, #52]	@ (80022e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b0:	e002      	b.n	80022b8 <LoopCopyDataInit>

080022b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b6:	3304      	adds	r3, #4

080022b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022bc:	d3f9      	bcc.n	80022b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022be:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022c0:	4c0a      	ldr	r4, [pc, #40]	@ (80022ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c4:	e001      	b.n	80022ca <LoopFillZerobss>

080022c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c8:	3204      	adds	r2, #4

080022ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022cc:	d3fb      	bcc.n	80022c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ce:	f006 f80d 	bl	80082ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022d2:	f7ff f9d1 	bl	8001678 <main>
  bx  lr    
 80022d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80022e4:	08009520 	.word	0x08009520
  ldr r2, =_sbss
 80022e8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80022ec:	20004ccc 	.word	0x20004ccc

080022f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f0:	e7fe      	b.n	80022f0 <ADC_IRQHandler>
	...

080022f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <HAL_Init+0x40>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002334 <HAL_Init+0x40>)
 80022fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002302:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <HAL_Init+0x40>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0a      	ldr	r2, [pc, #40]	@ (8002334 <HAL_Init+0x40>)
 800230a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800230e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002310:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <HAL_Init+0x40>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a07      	ldr	r2, [pc, #28]	@ (8002334 <HAL_Init+0x40>)
 8002316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800231a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800231c:	2003      	movs	r0, #3
 800231e:	f000 f8d8 	bl	80024d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002322:	200f      	movs	r0, #15
 8002324:	f7ff fe54 	bl	8001fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002328:	f7ff fd7c 	bl	8001e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40023c00 	.word	0x40023c00

08002338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_IncTick+0x20>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <HAL_IncTick+0x24>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4413      	add	r3, r2
 8002348:	4a04      	ldr	r2, [pc, #16]	@ (800235c <HAL_IncTick+0x24>)
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000010 	.word	0x20000010
 800235c:	20000194 	.word	0x20000194

08002360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return uwTick;
 8002364:	4b03      	ldr	r3, [pc, #12]	@ (8002374 <HAL_GetTick+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000194 	.word	0x20000194

08002378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002388:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002394:	4013      	ands	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023aa:	4a04      	ldr	r2, [pc, #16]	@ (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	60d3      	str	r3, [r2, #12]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c4:	4b04      	ldr	r3, [pc, #16]	@ (80023d8 <__NVIC_GetPriorityGrouping+0x18>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0307 	and.w	r3, r3, #7
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	db0b      	blt.n	8002406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	4907      	ldr	r1, [pc, #28]	@ (8002414 <__NVIC_EnableIRQ+0x38>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2001      	movs	r0, #1
 80023fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	2b00      	cmp	r3, #0
 800242a:	db0a      	blt.n	8002442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	490c      	ldr	r1, [pc, #48]	@ (8002464 <__NVIC_SetPriority+0x4c>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	0112      	lsls	r2, r2, #4
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	440b      	add	r3, r1
 800243c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002440:	e00a      	b.n	8002458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4908      	ldr	r1, [pc, #32]	@ (8002468 <__NVIC_SetPriority+0x50>)
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	3b04      	subs	r3, #4
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	440b      	add	r3, r1
 8002456:	761a      	strb	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000e100 	.word	0xe000e100
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	@ 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f1c3 0307 	rsb	r3, r3, #7
 8002486:	2b04      	cmp	r3, #4
 8002488:	bf28      	it	cs
 800248a:	2304      	movcs	r3, #4
 800248c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3304      	adds	r3, #4
 8002492:	2b06      	cmp	r3, #6
 8002494:	d902      	bls.n	800249c <NVIC_EncodePriority+0x30>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3b03      	subs	r3, #3
 800249a:	e000      	b.n	800249e <NVIC_EncodePriority+0x32>
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	401a      	ands	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b4:	f04f 31ff 	mov.w	r1, #4294967295
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43d9      	mvns	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	4313      	orrs	r3, r2
         );
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3724      	adds	r7, #36	@ 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ff4c 	bl	8002378 <__NVIC_SetPriorityGrouping>
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024fa:	f7ff ff61 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 80024fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	6978      	ldr	r0, [r7, #20]
 8002506:	f7ff ffb1 	bl	800246c <NVIC_EncodePriority>
 800250a:	4602      	mov	r2, r0
 800250c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002510:	4611      	mov	r1, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ff80 	bl	8002418 <__NVIC_SetPriority>
}
 8002518:	bf00      	nop
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ff54 	bl	80023dc <__NVIC_EnableIRQ>
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	@ 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	e16b      	b.n	8002830 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002558:	2201      	movs	r2, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	429a      	cmp	r2, r3
 8002572:	f040 815a 	bne.w	800282a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d005      	beq.n	800258e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258a:	2b02      	cmp	r3, #2
 800258c:	d130      	bne.n	80025f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	2203      	movs	r2, #3
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c4:	2201      	movs	r2, #1
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 0201 	and.w	r2, r3, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d017      	beq.n	800262c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d123      	bne.n	8002680 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	08da      	lsrs	r2, r3, #3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3208      	adds	r2, #8
 8002640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	220f      	movs	r2, #15
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	08da      	lsrs	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3208      	adds	r2, #8
 800267a:	69b9      	ldr	r1, [r7, #24]
 800267c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0203 	and.w	r2, r3, #3
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80b4 	beq.w	800282a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b60      	ldr	r3, [pc, #384]	@ (8002848 <HAL_GPIO_Init+0x30c>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	4a5f      	ldr	r2, [pc, #380]	@ (8002848 <HAL_GPIO_Init+0x30c>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002848 <HAL_GPIO_Init+0x30c>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026de:	4a5b      	ldr	r2, [pc, #364]	@ (800284c <HAL_GPIO_Init+0x310>)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	3302      	adds	r3, #2
 80026e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a52      	ldr	r2, [pc, #328]	@ (8002850 <HAL_GPIO_Init+0x314>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d02b      	beq.n	8002762 <HAL_GPIO_Init+0x226>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a51      	ldr	r2, [pc, #324]	@ (8002854 <HAL_GPIO_Init+0x318>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d025      	beq.n	800275e <HAL_GPIO_Init+0x222>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a50      	ldr	r2, [pc, #320]	@ (8002858 <HAL_GPIO_Init+0x31c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d01f      	beq.n	800275a <HAL_GPIO_Init+0x21e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4f      	ldr	r2, [pc, #316]	@ (800285c <HAL_GPIO_Init+0x320>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d019      	beq.n	8002756 <HAL_GPIO_Init+0x21a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4e      	ldr	r2, [pc, #312]	@ (8002860 <HAL_GPIO_Init+0x324>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <HAL_GPIO_Init+0x216>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4d      	ldr	r2, [pc, #308]	@ (8002864 <HAL_GPIO_Init+0x328>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00d      	beq.n	800274e <HAL_GPIO_Init+0x212>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4c      	ldr	r2, [pc, #304]	@ (8002868 <HAL_GPIO_Init+0x32c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d007      	beq.n	800274a <HAL_GPIO_Init+0x20e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4b      	ldr	r2, [pc, #300]	@ (800286c <HAL_GPIO_Init+0x330>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d101      	bne.n	8002746 <HAL_GPIO_Init+0x20a>
 8002742:	2307      	movs	r3, #7
 8002744:	e00e      	b.n	8002764 <HAL_GPIO_Init+0x228>
 8002746:	2308      	movs	r3, #8
 8002748:	e00c      	b.n	8002764 <HAL_GPIO_Init+0x228>
 800274a:	2306      	movs	r3, #6
 800274c:	e00a      	b.n	8002764 <HAL_GPIO_Init+0x228>
 800274e:	2305      	movs	r3, #5
 8002750:	e008      	b.n	8002764 <HAL_GPIO_Init+0x228>
 8002752:	2304      	movs	r3, #4
 8002754:	e006      	b.n	8002764 <HAL_GPIO_Init+0x228>
 8002756:	2303      	movs	r3, #3
 8002758:	e004      	b.n	8002764 <HAL_GPIO_Init+0x228>
 800275a:	2302      	movs	r3, #2
 800275c:	e002      	b.n	8002764 <HAL_GPIO_Init+0x228>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_GPIO_Init+0x228>
 8002762:	2300      	movs	r3, #0
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	f002 0203 	and.w	r2, r2, #3
 800276a:	0092      	lsls	r2, r2, #2
 800276c:	4093      	lsls	r3, r2
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002774:	4935      	ldr	r1, [pc, #212]	@ (800284c <HAL_GPIO_Init+0x310>)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	3302      	adds	r3, #2
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002782:	4b3b      	ldr	r3, [pc, #236]	@ (8002870 <HAL_GPIO_Init+0x334>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027a6:	4a32      	ldr	r2, [pc, #200]	@ (8002870 <HAL_GPIO_Init+0x334>)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027ac:	4b30      	ldr	r3, [pc, #192]	@ (8002870 <HAL_GPIO_Init+0x334>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027d0:	4a27      	ldr	r2, [pc, #156]	@ (8002870 <HAL_GPIO_Init+0x334>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027d6:	4b26      	ldr	r3, [pc, #152]	@ (8002870 <HAL_GPIO_Init+0x334>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002870 <HAL_GPIO_Init+0x334>)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002800:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <HAL_GPIO_Init+0x334>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002824:	4a12      	ldr	r2, [pc, #72]	@ (8002870 <HAL_GPIO_Init+0x334>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3301      	adds	r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b0f      	cmp	r3, #15
 8002834:	f67f ae90 	bls.w	8002558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	3724      	adds	r7, #36	@ 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
 800284c:	40013800 	.word	0x40013800
 8002850:	40020000 	.word	0x40020000
 8002854:	40020400 	.word	0x40020400
 8002858:	40020800 	.word	0x40020800
 800285c:	40020c00 	.word	0x40020c00
 8002860:	40021000 	.word	0x40021000
 8002864:	40021400 	.word	0x40021400
 8002868:	40021800 	.word	0x40021800
 800286c:	40021c00 	.word	0x40021c00
 8002870:	40013c00 	.word	0x40013c00

08002874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	807b      	strh	r3, [r7, #2]
 8002880:	4613      	mov	r3, r2
 8002882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002884:	787b      	ldrb	r3, [r7, #1]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002890:	e003      	b.n	800289a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002892:	887b      	ldrh	r3, [r7, #2]
 8002894:	041a      	lsls	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	619a      	str	r2, [r3, #24]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028b2:	4b08      	ldr	r3, [pc, #32]	@ (80028d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d006      	beq.n	80028cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028be:	4a05      	ldr	r2, [pc, #20]	@ (80028d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fd2c 	bl	8001324 <HAL_GPIO_EXTI_Callback>
  }
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40013c00 	.word	0x40013c00

080028d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e12b      	b.n	8002b42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff fabc 	bl	8001e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2224      	movs	r2, #36	@ 0x24
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0201 	bic.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800292a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800293a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800293c:	f001 fa88 	bl	8003e50 <HAL_RCC_GetPCLK1Freq>
 8002940:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4a81      	ldr	r2, [pc, #516]	@ (8002b4c <HAL_I2C_Init+0x274>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d807      	bhi.n	800295c <HAL_I2C_Init+0x84>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4a80      	ldr	r2, [pc, #512]	@ (8002b50 <HAL_I2C_Init+0x278>)
 8002950:	4293      	cmp	r3, r2
 8002952:	bf94      	ite	ls
 8002954:	2301      	movls	r3, #1
 8002956:	2300      	movhi	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	e006      	b.n	800296a <HAL_I2C_Init+0x92>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a7d      	ldr	r2, [pc, #500]	@ (8002b54 <HAL_I2C_Init+0x27c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	bf94      	ite	ls
 8002964:	2301      	movls	r3, #1
 8002966:	2300      	movhi	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e0e7      	b.n	8002b42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4a78      	ldr	r2, [pc, #480]	@ (8002b58 <HAL_I2C_Init+0x280>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0c9b      	lsrs	r3, r3, #18
 800297c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	430a      	orrs	r2, r1
 8002990:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4a6a      	ldr	r2, [pc, #424]	@ (8002b4c <HAL_I2C_Init+0x274>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d802      	bhi.n	80029ac <HAL_I2C_Init+0xd4>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3301      	adds	r3, #1
 80029aa:	e009      	b.n	80029c0 <HAL_I2C_Init+0xe8>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	4a69      	ldr	r2, [pc, #420]	@ (8002b5c <HAL_I2C_Init+0x284>)
 80029b8:	fba2 2303 	umull	r2, r3, r2, r3
 80029bc:	099b      	lsrs	r3, r3, #6
 80029be:	3301      	adds	r3, #1
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	495c      	ldr	r1, [pc, #368]	@ (8002b4c <HAL_I2C_Init+0x274>)
 80029dc:	428b      	cmp	r3, r1
 80029de:	d819      	bhi.n	8002a14 <HAL_I2C_Init+0x13c>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1e59      	subs	r1, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ee:	1c59      	adds	r1, r3, #1
 80029f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029f4:	400b      	ands	r3, r1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_I2C_Init+0x138>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1e59      	subs	r1, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0e:	e051      	b.n	8002ab4 <HAL_I2C_Init+0x1dc>
 8002a10:	2304      	movs	r3, #4
 8002a12:	e04f      	b.n	8002ab4 <HAL_I2C_Init+0x1dc>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d111      	bne.n	8002a40 <HAL_I2C_Init+0x168>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1e58      	subs	r0, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6859      	ldr	r1, [r3, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	440b      	add	r3, r1
 8002a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	e012      	b.n	8002a66 <HAL_I2C_Init+0x18e>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1e58      	subs	r0, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	0099      	lsls	r1, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a56:	3301      	adds	r3, #1
 8002a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Init+0x196>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e022      	b.n	8002ab4 <HAL_I2C_Init+0x1dc>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10e      	bne.n	8002a94 <HAL_I2C_Init+0x1bc>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1e58      	subs	r0, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6859      	ldr	r1, [r3, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	440b      	add	r3, r1
 8002a84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a92:	e00f      	b.n	8002ab4 <HAL_I2C_Init+0x1dc>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1e58      	subs	r0, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	0099      	lsls	r1, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	6809      	ldr	r1, [r1, #0]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ae2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6911      	ldr	r1, [r2, #16]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68d2      	ldr	r2, [r2, #12]
 8002aee:	4311      	orrs	r1, r2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	430b      	orrs	r3, r1
 8002af6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	000186a0 	.word	0x000186a0
 8002b50:	001e847f 	.word	0x001e847f
 8002b54:	003d08ff 	.word	0x003d08ff
 8002b58:	431bde83 	.word	0x431bde83
 8002b5c:	10624dd3 	.word	0x10624dd3

08002b60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08c      	sub	sp, #48	@ 0x30
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	4608      	mov	r0, r1
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	817b      	strh	r3, [r7, #10]
 8002b72:	460b      	mov	r3, r1
 8002b74:	813b      	strh	r3, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b7a:	f7ff fbf1 	bl	8002360 <HAL_GetTick>
 8002b7e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	f040 8214 	bne.w	8002fb6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	2319      	movs	r3, #25
 8002b94:	2201      	movs	r2, #1
 8002b96:	497b      	ldr	r1, [pc, #492]	@ (8002d84 <HAL_I2C_Mem_Read+0x224>)
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fafb 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e207      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_I2C_Mem_Read+0x56>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e200      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x458>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d007      	beq.n	8002bdc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2222      	movs	r2, #34	@ 0x22
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2240      	movs	r2, #64	@ 0x40
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4a5b      	ldr	r2, [pc, #364]	@ (8002d88 <HAL_I2C_Mem_Read+0x228>)
 8002c1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c1e:	88f8      	ldrh	r0, [r7, #6]
 8002c20:	893a      	ldrh	r2, [r7, #8]
 8002c22:	8979      	ldrh	r1, [r7, #10]
 8002c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f9c8 	bl	8002fc4 <I2C_RequestMemoryRead>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e1bc      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d113      	bne.n	8002c6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c46:	2300      	movs	r3, #0
 8002c48:	623b      	str	r3, [r7, #32]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	623b      	str	r3, [r7, #32]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	623b      	str	r3, [r7, #32]
 8002c5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	e190      	b.n	8002f90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d11b      	bne.n	8002cae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e170      	b.n	8002f90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d11b      	bne.n	8002cee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	e150      	b.n	8002f90 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d04:	e144      	b.n	8002f90 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	f200 80f1 	bhi.w	8002ef2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d123      	bne.n	8002d60 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fb9b 	bl	8003458 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e145      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d5e:	e117      	b.n	8002f90 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d14e      	bne.n	8002e06 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d6e:	2200      	movs	r2, #0
 8002d70:	4906      	ldr	r1, [pc, #24]	@ (8002d8c <HAL_I2C_Mem_Read+0x22c>)
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 fa0e 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e11a      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x458>
 8002d82:	bf00      	nop
 8002d84:	00100002 	.word	0x00100002
 8002d88:	ffff0000 	.word	0xffff0000
 8002d8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691a      	ldr	r2, [r3, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e04:	e0c4      	b.n	8002f90 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	496c      	ldr	r1, [pc, #432]	@ (8002fc0 <HAL_I2C_Mem_Read+0x460>)
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f9bf 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0cb      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691a      	ldr	r2, [r3, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e68:	2200      	movs	r2, #0
 8002e6a:	4955      	ldr	r1, [pc, #340]	@ (8002fc0 <HAL_I2C_Mem_Read+0x460>)
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f991 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e09d      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ef0:	e04e      	b.n	8002f90 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 faae 	bl	8003458 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e058      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d124      	bne.n	8002f90 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d107      	bne.n	8002f5e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f5c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f47f aeb6 	bne.w	8002d06 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e000      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002fb6:	2302      	movs	r3, #2
  }
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3728      	adds	r7, #40	@ 0x28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	00010004 	.word	0x00010004

08002fc4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	4608      	mov	r0, r1
 8002fce:	4611      	mov	r1, r2
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	817b      	strh	r3, [r7, #10]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	813b      	strh	r3, [r7, #8]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ffc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	2200      	movs	r2, #0
 8003006:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f8c2 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00d      	beq.n	8003032 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003024:	d103      	bne.n	800302e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800302c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e0aa      	b.n	8003188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003032:	897b      	ldrh	r3, [r7, #10]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003040:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	6a3a      	ldr	r2, [r7, #32]
 8003046:	4952      	ldr	r1, [pc, #328]	@ (8003190 <I2C_RequestMemoryRead+0x1cc>)
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f91d 	bl	8003288 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e097      	b.n	8003188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800306e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003070:	6a39      	ldr	r1, [r7, #32]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f9a8 	bl	80033c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00d      	beq.n	800309a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	2b04      	cmp	r3, #4
 8003084:	d107      	bne.n	8003096 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003094:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e076      	b.n	8003188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d105      	bne.n	80030ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030a0:	893b      	ldrh	r3, [r7, #8]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	611a      	str	r2, [r3, #16]
 80030aa:	e021      	b.n	80030f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030ac:	893b      	ldrh	r3, [r7, #8]
 80030ae:	0a1b      	lsrs	r3, r3, #8
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030bc:	6a39      	ldr	r1, [r7, #32]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f982 	bl	80033c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d107      	bne.n	80030e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e050      	b.n	8003188 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030e6:	893b      	ldrh	r3, [r7, #8]
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f2:	6a39      	ldr	r1, [r7, #32]
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f967 	bl	80033c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00d      	beq.n	800311c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	2b04      	cmp	r3, #4
 8003106:	d107      	bne.n	8003118 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003116:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e035      	b.n	8003188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800312a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800312c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	2200      	movs	r2, #0
 8003134:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f82b 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00d      	beq.n	8003160 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003152:	d103      	bne.n	800315c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800315a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e013      	b.n	8003188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003160:	897b      	ldrh	r3, [r7, #10]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	b2da      	uxtb	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	6a3a      	ldr	r2, [r7, #32]
 8003174:	4906      	ldr	r1, [pc, #24]	@ (8003190 <I2C_RequestMemoryRead+0x1cc>)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f886 	bl	8003288 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	00010002 	.word	0x00010002

08003194 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a4:	e048      	b.n	8003238 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d044      	beq.n	8003238 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ae:	f7ff f8d7 	bl	8002360 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d302      	bcc.n	80031c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d139      	bne.n	8003238 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	0c1b      	lsrs	r3, r3, #16
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d10d      	bne.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	43da      	mvns	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	4013      	ands	r3, r2
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	e00c      	b.n	8003204 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	43da      	mvns	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4013      	ands	r3, r2
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	429a      	cmp	r2, r3
 8003208:	d116      	bne.n	8003238 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	f043 0220 	orr.w	r2, r3, #32
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e023      	b.n	8003280 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	0c1b      	lsrs	r3, r3, #16
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d10d      	bne.n	800325e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	43da      	mvns	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4013      	ands	r3, r2
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	461a      	mov	r2, r3
 800325c:	e00c      	b.n	8003278 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	43da      	mvns	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4013      	ands	r3, r2
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	429a      	cmp	r2, r3
 800327c:	d093      	beq.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003296:	e071      	b.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a6:	d123      	bne.n	80032f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	f043 0204 	orr.w	r2, r3, #4
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e067      	b.n	80033c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f6:	d041      	beq.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f8:	f7ff f832 	bl	8002360 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	429a      	cmp	r2, r3
 8003306:	d302      	bcc.n	800330e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d136      	bne.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	0c1b      	lsrs	r3, r3, #16
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d10c      	bne.n	8003332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	43da      	mvns	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4013      	ands	r3, r2
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	bf14      	ite	ne
 800332a:	2301      	movne	r3, #1
 800332c:	2300      	moveq	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	e00b      	b.n	800334a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	43da      	mvns	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4013      	ands	r3, r2
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e021      	b.n	80033c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	0c1b      	lsrs	r3, r3, #16
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b01      	cmp	r3, #1
 8003384:	d10c      	bne.n	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	43da      	mvns	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4013      	ands	r3, r2
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf14      	ite	ne
 8003398:	2301      	movne	r3, #1
 800339a:	2300      	moveq	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e00b      	b.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	43da      	mvns	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4013      	ands	r3, r2
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bf14      	ite	ne
 80033b2:	2301      	movne	r3, #1
 80033b4:	2300      	moveq	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f47f af6d 	bne.w	8003298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d4:	e034      	b.n	8003440 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f89b 	bl	8003512 <I2C_IsAcknowledgeFailed>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e034      	b.n	8003450 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d028      	beq.n	8003440 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ee:	f7fe ffb7 	bl	8002360 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d11d      	bne.n	8003440 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340e:	2b80      	cmp	r3, #128	@ 0x80
 8003410:	d016      	beq.n	8003440 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342c:	f043 0220 	orr.w	r2, r3, #32
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e007      	b.n	8003450 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344a:	2b80      	cmp	r3, #128	@ 0x80
 800344c:	d1c3      	bne.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003464:	e049      	b.n	80034fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	2b10      	cmp	r3, #16
 8003472:	d119      	bne.n	80034a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0210 	mvn.w	r2, #16
 800347c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e030      	b.n	800350a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a8:	f7fe ff5a 	bl	8002360 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d302      	bcc.n	80034be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d11d      	bne.n	80034fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c8:	2b40      	cmp	r3, #64	@ 0x40
 80034ca:	d016      	beq.n	80034fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e6:	f043 0220 	orr.w	r2, r3, #32
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e007      	b.n	800350a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003504:	2b40      	cmp	r3, #64	@ 0x40
 8003506:	d1ae      	bne.n	8003466 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003524:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003528:	d11b      	bne.n	8003562 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003532:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354e:	f043 0204 	orr.w	r2, r3, #4
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e267      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d075      	beq.n	800367a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800358e:	4b88      	ldr	r3, [pc, #544]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b04      	cmp	r3, #4
 8003598:	d00c      	beq.n	80035b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800359a:	4b85      	ldr	r3, [pc, #532]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d112      	bne.n	80035cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035a6:	4b82      	ldr	r3, [pc, #520]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035b2:	d10b      	bne.n	80035cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b4:	4b7e      	ldr	r3, [pc, #504]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d05b      	beq.n	8003678 <HAL_RCC_OscConfig+0x108>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d157      	bne.n	8003678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e242      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d4:	d106      	bne.n	80035e4 <HAL_RCC_OscConfig+0x74>
 80035d6:	4b76      	ldr	r3, [pc, #472]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a75      	ldr	r2, [pc, #468]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e01d      	b.n	8003620 <HAL_RCC_OscConfig+0xb0>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0x98>
 80035ee:	4b70      	ldr	r3, [pc, #448]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a6f      	ldr	r2, [pc, #444]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	4b6d      	ldr	r3, [pc, #436]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a6c      	ldr	r2, [pc, #432]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	e00b      	b.n	8003620 <HAL_RCC_OscConfig+0xb0>
 8003608:	4b69      	ldr	r3, [pc, #420]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a68      	ldr	r2, [pc, #416]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800360e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	4b66      	ldr	r3, [pc, #408]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a65      	ldr	r2, [pc, #404]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800361a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800361e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d013      	beq.n	8003650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fe fe9a 	bl	8002360 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003630:	f7fe fe96 	bl	8002360 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	@ 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e207      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	4b5b      	ldr	r3, [pc, #364]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0xc0>
 800364e:	e014      	b.n	800367a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fe fe86 	bl	8002360 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003658:	f7fe fe82 	bl	8002360 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	@ 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e1f3      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	4b51      	ldr	r3, [pc, #324]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0xe8>
 8003676:	e000      	b.n	800367a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d063      	beq.n	800374e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003686:	4b4a      	ldr	r3, [pc, #296]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003692:	4b47      	ldr	r3, [pc, #284]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800369a:	2b08      	cmp	r3, #8
 800369c:	d11c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800369e:	4b44      	ldr	r3, [pc, #272]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d116      	bne.n	80036d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036aa:	4b41      	ldr	r3, [pc, #260]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_RCC_OscConfig+0x152>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d001      	beq.n	80036c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e1c7      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c2:	4b3b      	ldr	r3, [pc, #236]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4937      	ldr	r1, [pc, #220]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d6:	e03a      	b.n	800374e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e0:	4b34      	ldr	r3, [pc, #208]	@ (80037b4 <HAL_RCC_OscConfig+0x244>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7fe fe3b 	bl	8002360 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ee:	f7fe fe37 	bl	8002360 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e1a8      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	4b2b      	ldr	r3, [pc, #172]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370c:	4b28      	ldr	r3, [pc, #160]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4925      	ldr	r1, [pc, #148]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800371c:	4313      	orrs	r3, r2
 800371e:	600b      	str	r3, [r1, #0]
 8003720:	e015      	b.n	800374e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003722:	4b24      	ldr	r3, [pc, #144]	@ (80037b4 <HAL_RCC_OscConfig+0x244>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fe fe1a 	bl	8002360 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003730:	f7fe fe16 	bl	8002360 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e187      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	4b1b      	ldr	r3, [pc, #108]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d036      	beq.n	80037c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d016      	beq.n	8003790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003762:	4b15      	ldr	r3, [pc, #84]	@ (80037b8 <HAL_RCC_OscConfig+0x248>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fe fdfa 	bl	8002360 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003770:	f7fe fdf6 	bl	8002360 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e167      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	4b0b      	ldr	r3, [pc, #44]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x200>
 800378e:	e01b      	b.n	80037c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003790:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <HAL_RCC_OscConfig+0x248>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003796:	f7fe fde3 	bl	8002360 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800379c:	e00e      	b.n	80037bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800379e:	f7fe fddf 	bl	8002360 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d907      	bls.n	80037bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e150      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
 80037b0:	40023800 	.word	0x40023800
 80037b4:	42470000 	.word	0x42470000
 80037b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037bc:	4b88      	ldr	r3, [pc, #544]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1ea      	bne.n	800379e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8097 	beq.w	8003904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d6:	2300      	movs	r3, #0
 80037d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037da:	4b81      	ldr	r3, [pc, #516]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10f      	bne.n	8003806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	4b7d      	ldr	r3, [pc, #500]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	4a7c      	ldr	r2, [pc, #496]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037f6:	4b7a      	ldr	r3, [pc, #488]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003802:	2301      	movs	r3, #1
 8003804:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003806:	4b77      	ldr	r3, [pc, #476]	@ (80039e4 <HAL_RCC_OscConfig+0x474>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380e:	2b00      	cmp	r3, #0
 8003810:	d118      	bne.n	8003844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003812:	4b74      	ldr	r3, [pc, #464]	@ (80039e4 <HAL_RCC_OscConfig+0x474>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a73      	ldr	r2, [pc, #460]	@ (80039e4 <HAL_RCC_OscConfig+0x474>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800381e:	f7fe fd9f 	bl	8002360 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003826:	f7fe fd9b 	bl	8002360 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e10c      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003838:	4b6a      	ldr	r3, [pc, #424]	@ (80039e4 <HAL_RCC_OscConfig+0x474>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d106      	bne.n	800385a <HAL_RCC_OscConfig+0x2ea>
 800384c:	4b64      	ldr	r3, [pc, #400]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003850:	4a63      	ldr	r2, [pc, #396]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	6713      	str	r3, [r2, #112]	@ 0x70
 8003858:	e01c      	b.n	8003894 <HAL_RCC_OscConfig+0x324>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b05      	cmp	r3, #5
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x30c>
 8003862:	4b5f      	ldr	r3, [pc, #380]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003866:	4a5e      	ldr	r2, [pc, #376]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003868:	f043 0304 	orr.w	r3, r3, #4
 800386c:	6713      	str	r3, [r2, #112]	@ 0x70
 800386e:	4b5c      	ldr	r3, [pc, #368]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003872:	4a5b      	ldr	r2, [pc, #364]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6713      	str	r3, [r2, #112]	@ 0x70
 800387a:	e00b      	b.n	8003894 <HAL_RCC_OscConfig+0x324>
 800387c:	4b58      	ldr	r3, [pc, #352]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003880:	4a57      	ldr	r2, [pc, #348]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	6713      	str	r3, [r2, #112]	@ 0x70
 8003888:	4b55      	ldr	r3, [pc, #340]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388c:	4a54      	ldr	r2, [pc, #336]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 800388e:	f023 0304 	bic.w	r3, r3, #4
 8003892:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d015      	beq.n	80038c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7fe fd60 	bl	8002360 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a4:	f7fe fd5c 	bl	8002360 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e0cb      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ba:	4b49      	ldr	r3, [pc, #292]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0ee      	beq.n	80038a4 <HAL_RCC_OscConfig+0x334>
 80038c6:	e014      	b.n	80038f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c8:	f7fe fd4a 	bl	8002360 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d0:	f7fe fd46 	bl	8002360 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e0b5      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e6:	4b3e      	ldr	r3, [pc, #248]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1ee      	bne.n	80038d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d105      	bne.n	8003904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f8:	4b39      	ldr	r3, [pc, #228]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	4a38      	ldr	r2, [pc, #224]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003902:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80a1 	beq.w	8003a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800390e:	4b34      	ldr	r3, [pc, #208]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b08      	cmp	r3, #8
 8003918:	d05c      	beq.n	80039d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d141      	bne.n	80039a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b31      	ldr	r3, [pc, #196]	@ (80039e8 <HAL_RCC_OscConfig+0x478>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7fe fd1a 	bl	8002360 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003930:	f7fe fd16 	bl	8002360 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e087      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	4b27      	ldr	r3, [pc, #156]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395c:	019b      	lsls	r3, r3, #6
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	3b01      	subs	r3, #1
 8003968:	041b      	lsls	r3, r3, #16
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	491b      	ldr	r1, [pc, #108]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003978:	4b1b      	ldr	r3, [pc, #108]	@ (80039e8 <HAL_RCC_OscConfig+0x478>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7fe fcef 	bl	8002360 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003986:	f7fe fceb 	bl	8002360 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e05c      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003998:	4b11      	ldr	r3, [pc, #68]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x416>
 80039a4:	e054      	b.n	8003a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a6:	4b10      	ldr	r3, [pc, #64]	@ (80039e8 <HAL_RCC_OscConfig+0x478>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fe fcd8 	bl	8002360 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fe fcd4 	bl	8002360 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e045      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x444>
 80039d2:	e03d      	b.n	8003a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d107      	bne.n	80039ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e038      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40007000 	.word	0x40007000
 80039e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039ec:	4b1b      	ldr	r3, [pc, #108]	@ (8003a5c <HAL_RCC_OscConfig+0x4ec>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d028      	beq.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d121      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d11a      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d111      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	3b01      	subs	r3, #1
 8003a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d107      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800

08003a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0cc      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a74:	4b68      	ldr	r3, [pc, #416]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d90c      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a82:	4b65      	ldr	r3, [pc, #404]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8a:	4b63      	ldr	r3, [pc, #396]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0b8      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d020      	beq.n	8003aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab4:	4b59      	ldr	r3, [pc, #356]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4a58      	ldr	r2, [pc, #352]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003abe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003acc:	4b53      	ldr	r3, [pc, #332]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a52      	ldr	r2, [pc, #328]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad8:	4b50      	ldr	r3, [pc, #320]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	494d      	ldr	r1, [pc, #308]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d044      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d107      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b47      	ldr	r3, [pc, #284]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d119      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e07f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d003      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d107      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e06f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e067      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b3e:	4b37      	ldr	r3, [pc, #220]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f023 0203 	bic.w	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4934      	ldr	r1, [pc, #208]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b50:	f7fe fc06 	bl	8002360 <HAL_GetTick>
 8003b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b58:	f7fe fc02 	bl	8002360 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e04f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 020c 	and.w	r2, r3, #12
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d1eb      	bne.n	8003b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b80:	4b25      	ldr	r3, [pc, #148]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d20c      	bcs.n	8003ba8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b22      	ldr	r3, [pc, #136]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b20      	ldr	r3, [pc, #128]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e032      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb4:	4b19      	ldr	r3, [pc, #100]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4916      	ldr	r1, [pc, #88]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bd2:	4b12      	ldr	r3, [pc, #72]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	490e      	ldr	r1, [pc, #56]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003be6:	f000 f821 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8003bea:	4602      	mov	r2, r0
 8003bec:	4b0b      	ldr	r3, [pc, #44]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	091b      	lsrs	r3, r3, #4
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	490a      	ldr	r1, [pc, #40]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf8:	5ccb      	ldrb	r3, [r1, r3]
 8003bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfe:	4a09      	ldr	r2, [pc, #36]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c02:	4b09      	ldr	r3, [pc, #36]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe f9e2 	bl	8001fd0 <HAL_InitTick>

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023c00 	.word	0x40023c00
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	08009454 	.word	0x08009454
 8003c24:	20000008 	.word	0x20000008
 8003c28:	2000000c 	.word	0x2000000c

08003c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c30:	b094      	sub	sp, #80	@ 0x50
 8003c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c44:	4b79      	ldr	r3, [pc, #484]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d00d      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x40>
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	f200 80e1 	bhi.w	8003e18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0x34>
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d003      	beq.n	8003c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c5e:	e0db      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c60:	4b73      	ldr	r3, [pc, #460]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c64:	e0db      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c66:	4b73      	ldr	r3, [pc, #460]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c6a:	e0d8      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c6c:	4b6f      	ldr	r3, [pc, #444]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c76:	4b6d      	ldr	r3, [pc, #436]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d063      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c82:	4b6a      	ldr	r3, [pc, #424]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	099b      	lsrs	r3, r3, #6
 8003c88:	2200      	movs	r2, #0
 8003c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c96:	2300      	movs	r3, #0
 8003c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	462b      	mov	r3, r5
 8003ca2:	f04f 0000 	mov.w	r0, #0
 8003ca6:	f04f 0100 	mov.w	r1, #0
 8003caa:	0159      	lsls	r1, r3, #5
 8003cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cb0:	0150      	lsls	r0, r2, #5
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	1a51      	subs	r1, r2, r1
 8003cba:	6139      	str	r1, [r7, #16]
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cd0:	4659      	mov	r1, fp
 8003cd2:	018b      	lsls	r3, r1, #6
 8003cd4:	4651      	mov	r1, sl
 8003cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cda:	4651      	mov	r1, sl
 8003cdc:	018a      	lsls	r2, r1, #6
 8003cde:	4651      	mov	r1, sl
 8003ce0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ce4:	4659      	mov	r1, fp
 8003ce6:	eb63 0901 	sbc.w	r9, r3, r1
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cfe:	4690      	mov	r8, r2
 8003d00:	4699      	mov	r9, r3
 8003d02:	4623      	mov	r3, r4
 8003d04:	eb18 0303 	adds.w	r3, r8, r3
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	462b      	mov	r3, r5
 8003d0c:	eb49 0303 	adc.w	r3, r9, r3
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d1e:	4629      	mov	r1, r5
 8003d20:	024b      	lsls	r3, r1, #9
 8003d22:	4621      	mov	r1, r4
 8003d24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d28:	4621      	mov	r1, r4
 8003d2a:	024a      	lsls	r2, r1, #9
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	4619      	mov	r1, r3
 8003d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d32:	2200      	movs	r2, #0
 8003d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d3c:	f7fc ff3e 	bl	8000bbc <__aeabi_uldivmod>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4613      	mov	r3, r2
 8003d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d48:	e058      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d4a:	4b38      	ldr	r3, [pc, #224]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	099b      	lsrs	r3, r3, #6
 8003d50:	2200      	movs	r2, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	4611      	mov	r1, r2
 8003d56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d5a:	623b      	str	r3, [r7, #32]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d64:	4642      	mov	r2, r8
 8003d66:	464b      	mov	r3, r9
 8003d68:	f04f 0000 	mov.w	r0, #0
 8003d6c:	f04f 0100 	mov.w	r1, #0
 8003d70:	0159      	lsls	r1, r3, #5
 8003d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d76:	0150      	lsls	r0, r2, #5
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4641      	mov	r1, r8
 8003d7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d82:	4649      	mov	r1, r9
 8003d84:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d9c:	ebb2 040a 	subs.w	r4, r2, sl
 8003da0:	eb63 050b 	sbc.w	r5, r3, fp
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	00eb      	lsls	r3, r5, #3
 8003dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003db2:	00e2      	lsls	r2, r4, #3
 8003db4:	4614      	mov	r4, r2
 8003db6:	461d      	mov	r5, r3
 8003db8:	4643      	mov	r3, r8
 8003dba:	18e3      	adds	r3, r4, r3
 8003dbc:	603b      	str	r3, [r7, #0]
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	eb45 0303 	adc.w	r3, r5, r3
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	028b      	lsls	r3, r1, #10
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ddc:	4621      	mov	r1, r4
 8003dde:	028a      	lsls	r2, r1, #10
 8003de0:	4610      	mov	r0, r2
 8003de2:	4619      	mov	r1, r3
 8003de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003de6:	2200      	movs	r2, #0
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	61fa      	str	r2, [r7, #28]
 8003dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003df0:	f7fc fee4 	bl	8000bbc <__aeabi_uldivmod>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4613      	mov	r3, r2
 8003dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	0c1b      	lsrs	r3, r3, #16
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	3301      	adds	r3, #1
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003e0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e16:	e002      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e18:	4b05      	ldr	r3, [pc, #20]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3750      	adds	r7, #80	@ 0x50
 8003e24:	46bd      	mov	sp, r7
 8003e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	00f42400 	.word	0x00f42400
 8003e34:	007a1200 	.word	0x007a1200

08003e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e3c:	4b03      	ldr	r3, [pc, #12]	@ (8003e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20000008 	.word	0x20000008

08003e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e54:	f7ff fff0 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b05      	ldr	r3, [pc, #20]	@ (8003e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	0a9b      	lsrs	r3, r3, #10
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	4903      	ldr	r1, [pc, #12]	@ (8003e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e66:	5ccb      	ldrb	r3, [r1, r3]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40023800 	.word	0x40023800
 8003e74:	08009464 	.word	0x08009464

08003e78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	220f      	movs	r2, #15
 8003e86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e88:	4b12      	ldr	r3, [pc, #72]	@ (8003ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0203 	and.w	r2, r3, #3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e94:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003eac:	4b09      	ldr	r3, [pc, #36]	@ (8003ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	08db      	lsrs	r3, r3, #3
 8003eb2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003eba:	4b07      	ldr	r3, [pc, #28]	@ (8003ed8 <HAL_RCC_GetClockConfig+0x60>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0207 	and.w	r2, r3, #7
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	601a      	str	r2, [r3, #0]
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	40023c00 	.word	0x40023c00

08003edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e041      	b.n	8003f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fe f802 	bl	8001f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f000 fca6 	bl	800486c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d001      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e04e      	b.n	8004032 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a23      	ldr	r2, [pc, #140]	@ (8004040 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d022      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fbe:	d01d      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004044 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d018      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1e      	ldr	r2, [pc, #120]	@ (8004048 <HAL_TIM_Base_Start_IT+0xcc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d013      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800404c <HAL_TIM_Base_Start_IT+0xd0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00e      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8004050 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d009      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a19      	ldr	r2, [pc, #100]	@ (8004054 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d004      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a18      	ldr	r2, [pc, #96]	@ (8004058 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d111      	bne.n	8004020 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b06      	cmp	r3, #6
 800400c:	d010      	beq.n	8004030 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0201 	orr.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401e:	e007      	b.n	8004030 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40010000 	.word	0x40010000
 8004044:	40000400 	.word	0x40000400
 8004048:	40000800 	.word	0x40000800
 800404c:	40000c00 	.word	0x40000c00
 8004050:	40010400 	.word	0x40010400
 8004054:	40014000 	.word	0x40014000
 8004058:	40001800 	.word	0x40001800

0800405c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e041      	b.n	80040f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f839 	bl	80040fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3304      	adds	r3, #4
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f000 fbe6 	bl	800486c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d109      	bne.n	8004138 <HAL_TIM_PWM_Start_IT+0x28>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	e022      	b.n	800417e <HAL_TIM_PWM_Start_IT+0x6e>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b04      	cmp	r3, #4
 800413c:	d109      	bne.n	8004152 <HAL_TIM_PWM_Start_IT+0x42>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b01      	cmp	r3, #1
 8004148:	bf14      	ite	ne
 800414a:	2301      	movne	r3, #1
 800414c:	2300      	moveq	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	e015      	b.n	800417e <HAL_TIM_PWM_Start_IT+0x6e>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d109      	bne.n	800416c <HAL_TIM_PWM_Start_IT+0x5c>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	bf14      	ite	ne
 8004164:	2301      	movne	r3, #1
 8004166:	2300      	moveq	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e008      	b.n	800417e <HAL_TIM_PWM_Start_IT+0x6e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b01      	cmp	r3, #1
 8004176:	bf14      	ite	ne
 8004178:	2301      	movne	r3, #1
 800417a:	2300      	moveq	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e0c7      	b.n	8004316 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d104      	bne.n	8004196 <HAL_TIM_PWM_Start_IT+0x86>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004194:	e013      	b.n	80041be <HAL_TIM_PWM_Start_IT+0xae>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b04      	cmp	r3, #4
 800419a:	d104      	bne.n	80041a6 <HAL_TIM_PWM_Start_IT+0x96>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041a4:	e00b      	b.n	80041be <HAL_TIM_PWM_Start_IT+0xae>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d104      	bne.n	80041b6 <HAL_TIM_PWM_Start_IT+0xa6>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041b4:	e003      	b.n	80041be <HAL_TIM_PWM_Start_IT+0xae>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2202      	movs	r2, #2
 80041ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b0c      	cmp	r3, #12
 80041c2:	d841      	bhi.n	8004248 <HAL_TIM_PWM_Start_IT+0x138>
 80041c4:	a201      	add	r2, pc, #4	@ (adr r2, 80041cc <HAL_TIM_PWM_Start_IT+0xbc>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	08004201 	.word	0x08004201
 80041d0:	08004249 	.word	0x08004249
 80041d4:	08004249 	.word	0x08004249
 80041d8:	08004249 	.word	0x08004249
 80041dc:	08004213 	.word	0x08004213
 80041e0:	08004249 	.word	0x08004249
 80041e4:	08004249 	.word	0x08004249
 80041e8:	08004249 	.word	0x08004249
 80041ec:	08004225 	.word	0x08004225
 80041f0:	08004249 	.word	0x08004249
 80041f4:	08004249 	.word	0x08004249
 80041f8:	08004249 	.word	0x08004249
 80041fc:	08004237 	.word	0x08004237
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0202 	orr.w	r2, r2, #2
 800420e:	60da      	str	r2, [r3, #12]
      break;
 8004210:	e01d      	b.n	800424e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0204 	orr.w	r2, r2, #4
 8004220:	60da      	str	r2, [r3, #12]
      break;
 8004222:	e014      	b.n	800424e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0208 	orr.w	r2, r2, #8
 8004232:	60da      	str	r2, [r3, #12]
      break;
 8004234:	e00b      	b.n	800424e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0210 	orr.w	r2, r2, #16
 8004244:	60da      	str	r2, [r3, #12]
      break;
 8004246:	e002      	b.n	800424e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	73fb      	strb	r3, [r7, #15]
      break;
 800424c:	bf00      	nop
  }

  if (status == HAL_OK)
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d15f      	bne.n	8004314 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2201      	movs	r2, #1
 800425a:	6839      	ldr	r1, [r7, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fdfb 	bl	8004e58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2e      	ldr	r2, [pc, #184]	@ (8004320 <HAL_TIM_PWM_Start_IT+0x210>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d004      	beq.n	8004276 <HAL_TIM_PWM_Start_IT+0x166>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a2c      	ldr	r2, [pc, #176]	@ (8004324 <HAL_TIM_PWM_Start_IT+0x214>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d101      	bne.n	800427a <HAL_TIM_PWM_Start_IT+0x16a>
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <HAL_TIM_PWM_Start_IT+0x16c>
 800427a:	2300      	movs	r3, #0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800428e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a22      	ldr	r2, [pc, #136]	@ (8004320 <HAL_TIM_PWM_Start_IT+0x210>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d022      	beq.n	80042e0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a2:	d01d      	beq.n	80042e0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004328 <HAL_TIM_PWM_Start_IT+0x218>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d018      	beq.n	80042e0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1e      	ldr	r2, [pc, #120]	@ (800432c <HAL_TIM_PWM_Start_IT+0x21c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d013      	beq.n	80042e0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004330 <HAL_TIM_PWM_Start_IT+0x220>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00e      	beq.n	80042e0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a17      	ldr	r2, [pc, #92]	@ (8004324 <HAL_TIM_PWM_Start_IT+0x214>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d009      	beq.n	80042e0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a18      	ldr	r2, [pc, #96]	@ (8004334 <HAL_TIM_PWM_Start_IT+0x224>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d004      	beq.n	80042e0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a17      	ldr	r2, [pc, #92]	@ (8004338 <HAL_TIM_PWM_Start_IT+0x228>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d111      	bne.n	8004304 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b06      	cmp	r3, #6
 80042f0:	d010      	beq.n	8004314 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0201 	orr.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004302:	e007      	b.n	8004314 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004314:	7bfb      	ldrb	r3, [r7, #15]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40010000 	.word	0x40010000
 8004324:	40010400 	.word	0x40010400
 8004328:	40000400 	.word	0x40000400
 800432c:	40000800 	.word	0x40000800
 8004330:	40000c00 	.word	0x40000c00
 8004334:	40014000 	.word	0x40014000
 8004338:	40001800 	.word	0x40001800

0800433c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d020      	beq.n	80043a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01b      	beq.n	80043a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0202 	mvn.w	r2, #2
 8004370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fa5b 	bl	8004842 <HAL_TIM_IC_CaptureCallback>
 800438c:	e005      	b.n	800439a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fa4d 	bl	800482e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7fc ffa9 	bl	80012ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d020      	beq.n	80043ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01b      	beq.n	80043ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0204 	mvn.w	r2, #4
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2202      	movs	r2, #2
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fa35 	bl	8004842 <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fa27 	bl	800482e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7fc ff83 	bl	80012ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d020      	beq.n	8004438 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01b      	beq.n	8004438 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0208 	mvn.w	r2, #8
 8004408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2204      	movs	r2, #4
 800440e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fa0f 	bl	8004842 <HAL_TIM_IC_CaptureCallback>
 8004424:	e005      	b.n	8004432 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fa01 	bl	800482e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7fc ff5d 	bl	80012ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b00      	cmp	r3, #0
 8004440:	d020      	beq.n	8004484 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01b      	beq.n	8004484 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0210 	mvn.w	r2, #16
 8004454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2208      	movs	r2, #8
 800445a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f9e9 	bl	8004842 <HAL_TIM_IC_CaptureCallback>
 8004470:	e005      	b.n	800447e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f9db 	bl	800482e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7fc ff37 	bl	80012ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0201 	mvn.w	r2, #1
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fd fc90 	bl	8001dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00c      	beq.n	80044cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fd72 	bl	8004fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00c      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f9b3 	bl	8004856 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00c      	beq.n	8004514 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b00      	cmp	r3, #0
 8004502:	d007      	beq.n	8004514 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0220 	mvn.w	r2, #32
 800450c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fd44 	bl	8004f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004536:	2302      	movs	r3, #2
 8004538:	e0ae      	b.n	8004698 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b0c      	cmp	r3, #12
 8004546:	f200 809f 	bhi.w	8004688 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800454a:	a201      	add	r2, pc, #4	@ (adr r2, 8004550 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004550:	08004585 	.word	0x08004585
 8004554:	08004689 	.word	0x08004689
 8004558:	08004689 	.word	0x08004689
 800455c:	08004689 	.word	0x08004689
 8004560:	080045c5 	.word	0x080045c5
 8004564:	08004689 	.word	0x08004689
 8004568:	08004689 	.word	0x08004689
 800456c:	08004689 	.word	0x08004689
 8004570:	08004607 	.word	0x08004607
 8004574:	08004689 	.word	0x08004689
 8004578:	08004689 	.word	0x08004689
 800457c:	08004689 	.word	0x08004689
 8004580:	08004647 	.word	0x08004647
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fa1a 	bl	80049c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0208 	orr.w	r2, r2, #8
 800459e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0204 	bic.w	r2, r2, #4
 80045ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6999      	ldr	r1, [r3, #24]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	619a      	str	r2, [r3, #24]
      break;
 80045c2:	e064      	b.n	800468e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fa6a 	bl	8004aa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6999      	ldr	r1, [r3, #24]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	021a      	lsls	r2, r3, #8
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	619a      	str	r2, [r3, #24]
      break;
 8004604:	e043      	b.n	800468e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fabf 	bl	8004b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0208 	orr.w	r2, r2, #8
 8004620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0204 	bic.w	r2, r2, #4
 8004630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69d9      	ldr	r1, [r3, #28]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	61da      	str	r2, [r3, #28]
      break;
 8004644:	e023      	b.n	800468e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fb13 	bl	8004c78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69d9      	ldr	r1, [r3, #28]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	021a      	lsls	r2, r3, #8
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	61da      	str	r2, [r3, #28]
      break;
 8004686:	e002      	b.n	800468e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	75fb      	strb	r3, [r7, #23]
      break;
 800468c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004696:	7dfb      	ldrb	r3, [r7, #23]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_TIM_ConfigClockSource+0x1c>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e0b4      	b.n	8004826 <HAL_TIM_ConfigClockSource+0x186>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046f4:	d03e      	beq.n	8004774 <HAL_TIM_ConfigClockSource+0xd4>
 80046f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046fa:	f200 8087 	bhi.w	800480c <HAL_TIM_ConfigClockSource+0x16c>
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004702:	f000 8086 	beq.w	8004812 <HAL_TIM_ConfigClockSource+0x172>
 8004706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800470a:	d87f      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 800470c:	2b70      	cmp	r3, #112	@ 0x70
 800470e:	d01a      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0xa6>
 8004710:	2b70      	cmp	r3, #112	@ 0x70
 8004712:	d87b      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 8004714:	2b60      	cmp	r3, #96	@ 0x60
 8004716:	d050      	beq.n	80047ba <HAL_TIM_ConfigClockSource+0x11a>
 8004718:	2b60      	cmp	r3, #96	@ 0x60
 800471a:	d877      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 800471c:	2b50      	cmp	r3, #80	@ 0x50
 800471e:	d03c      	beq.n	800479a <HAL_TIM_ConfigClockSource+0xfa>
 8004720:	2b50      	cmp	r3, #80	@ 0x50
 8004722:	d873      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 8004724:	2b40      	cmp	r3, #64	@ 0x40
 8004726:	d058      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x13a>
 8004728:	2b40      	cmp	r3, #64	@ 0x40
 800472a:	d86f      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 800472c:	2b30      	cmp	r3, #48	@ 0x30
 800472e:	d064      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x15a>
 8004730:	2b30      	cmp	r3, #48	@ 0x30
 8004732:	d86b      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 8004734:	2b20      	cmp	r3, #32
 8004736:	d060      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x15a>
 8004738:	2b20      	cmp	r3, #32
 800473a:	d867      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 800473c:	2b00      	cmp	r3, #0
 800473e:	d05c      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x15a>
 8004740:	2b10      	cmp	r3, #16
 8004742:	d05a      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x15a>
 8004744:	e062      	b.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004756:	f000 fb5f 	bl	8004e18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004768:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	609a      	str	r2, [r3, #8]
      break;
 8004772:	e04f      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004784:	f000 fb48 	bl	8004e18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004796:	609a      	str	r2, [r3, #8]
      break;
 8004798:	e03c      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047a6:	461a      	mov	r2, r3
 80047a8:	f000 fabc 	bl	8004d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2150      	movs	r1, #80	@ 0x50
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fb15 	bl	8004de2 <TIM_ITRx_SetConfig>
      break;
 80047b8:	e02c      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047c6:	461a      	mov	r2, r3
 80047c8:	f000 fadb 	bl	8004d82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2160      	movs	r1, #96	@ 0x60
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fb05 	bl	8004de2 <TIM_ITRx_SetConfig>
      break;
 80047d8:	e01c      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e6:	461a      	mov	r2, r3
 80047e8:	f000 fa9c 	bl	8004d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2140      	movs	r1, #64	@ 0x40
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 faf5 	bl	8004de2 <TIM_ITRx_SetConfig>
      break;
 80047f8:	e00c      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f000 faec 	bl	8004de2 <TIM_ITRx_SetConfig>
      break;
 800480a:	e003      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
      break;
 8004810:	e000      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004812:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004824:	7bfb      	ldrb	r3, [r7, #15]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a46      	ldr	r2, [pc, #280]	@ (8004998 <TIM_Base_SetConfig+0x12c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d013      	beq.n	80048ac <TIM_Base_SetConfig+0x40>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800488a:	d00f      	beq.n	80048ac <TIM_Base_SetConfig+0x40>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a43      	ldr	r2, [pc, #268]	@ (800499c <TIM_Base_SetConfig+0x130>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d00b      	beq.n	80048ac <TIM_Base_SetConfig+0x40>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a42      	ldr	r2, [pc, #264]	@ (80049a0 <TIM_Base_SetConfig+0x134>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d007      	beq.n	80048ac <TIM_Base_SetConfig+0x40>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a41      	ldr	r2, [pc, #260]	@ (80049a4 <TIM_Base_SetConfig+0x138>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d003      	beq.n	80048ac <TIM_Base_SetConfig+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a40      	ldr	r2, [pc, #256]	@ (80049a8 <TIM_Base_SetConfig+0x13c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d108      	bne.n	80048be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a35      	ldr	r2, [pc, #212]	@ (8004998 <TIM_Base_SetConfig+0x12c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d02b      	beq.n	800491e <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048cc:	d027      	beq.n	800491e <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a32      	ldr	r2, [pc, #200]	@ (800499c <TIM_Base_SetConfig+0x130>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d023      	beq.n	800491e <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a31      	ldr	r2, [pc, #196]	@ (80049a0 <TIM_Base_SetConfig+0x134>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d01f      	beq.n	800491e <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a30      	ldr	r2, [pc, #192]	@ (80049a4 <TIM_Base_SetConfig+0x138>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d01b      	beq.n	800491e <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2f      	ldr	r2, [pc, #188]	@ (80049a8 <TIM_Base_SetConfig+0x13c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d017      	beq.n	800491e <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2e      	ldr	r2, [pc, #184]	@ (80049ac <TIM_Base_SetConfig+0x140>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2d      	ldr	r2, [pc, #180]	@ (80049b0 <TIM_Base_SetConfig+0x144>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00f      	beq.n	800491e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2c      	ldr	r2, [pc, #176]	@ (80049b4 <TIM_Base_SetConfig+0x148>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00b      	beq.n	800491e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2b      	ldr	r2, [pc, #172]	@ (80049b8 <TIM_Base_SetConfig+0x14c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d007      	beq.n	800491e <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2a      	ldr	r2, [pc, #168]	@ (80049bc <TIM_Base_SetConfig+0x150>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d003      	beq.n	800491e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a29      	ldr	r2, [pc, #164]	@ (80049c0 <TIM_Base_SetConfig+0x154>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d108      	bne.n	8004930 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a10      	ldr	r2, [pc, #64]	@ (8004998 <TIM_Base_SetConfig+0x12c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d003      	beq.n	8004964 <TIM_Base_SetConfig+0xf8>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a12      	ldr	r2, [pc, #72]	@ (80049a8 <TIM_Base_SetConfig+0x13c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d103      	bne.n	800496c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b01      	cmp	r3, #1
 800497c:	d105      	bne.n	800498a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f023 0201 	bic.w	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	611a      	str	r2, [r3, #16]
  }
}
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40010000 	.word	0x40010000
 800499c:	40000400 	.word	0x40000400
 80049a0:	40000800 	.word	0x40000800
 80049a4:	40000c00 	.word	0x40000c00
 80049a8:	40010400 	.word	0x40010400
 80049ac:	40014000 	.word	0x40014000
 80049b0:	40014400 	.word	0x40014400
 80049b4:	40014800 	.word	0x40014800
 80049b8:	40001800 	.word	0x40001800
 80049bc:	40001c00 	.word	0x40001c00
 80049c0:	40002000 	.word	0x40002000

080049c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	f023 0201 	bic.w	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0303 	bic.w	r3, r3, #3
 80049fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f023 0302 	bic.w	r3, r3, #2
 8004a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a20      	ldr	r2, [pc, #128]	@ (8004a9c <TIM_OC1_SetConfig+0xd8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_OC1_SetConfig+0x64>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a1f      	ldr	r2, [pc, #124]	@ (8004aa0 <TIM_OC1_SetConfig+0xdc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d10c      	bne.n	8004a42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f023 0308 	bic.w	r3, r3, #8
 8004a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f023 0304 	bic.w	r3, r3, #4
 8004a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a15      	ldr	r2, [pc, #84]	@ (8004a9c <TIM_OC1_SetConfig+0xd8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d003      	beq.n	8004a52 <TIM_OC1_SetConfig+0x8e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a14      	ldr	r2, [pc, #80]	@ (8004aa0 <TIM_OC1_SetConfig+0xdc>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d111      	bne.n	8004a76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	621a      	str	r2, [r3, #32]
}
 8004a90:	bf00      	nop
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40010400 	.word	0x40010400

08004aa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	f023 0210 	bic.w	r2, r3, #16
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	021b      	lsls	r3, r3, #8
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f023 0320 	bic.w	r3, r3, #32
 8004aee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a22      	ldr	r2, [pc, #136]	@ (8004b88 <TIM_OC2_SetConfig+0xe4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_OC2_SetConfig+0x68>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a21      	ldr	r2, [pc, #132]	@ (8004b8c <TIM_OC2_SetConfig+0xe8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d10d      	bne.n	8004b28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a17      	ldr	r2, [pc, #92]	@ (8004b88 <TIM_OC2_SetConfig+0xe4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_OC2_SetConfig+0x94>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a16      	ldr	r2, [pc, #88]	@ (8004b8c <TIM_OC2_SetConfig+0xe8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d113      	bne.n	8004b60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	621a      	str	r2, [r3, #32]
}
 8004b7a:	bf00      	nop
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40010000 	.word	0x40010000
 8004b8c:	40010400 	.word	0x40010400

08004b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0303 	bic.w	r3, r3, #3
 8004bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a21      	ldr	r2, [pc, #132]	@ (8004c70 <TIM_OC3_SetConfig+0xe0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d003      	beq.n	8004bf6 <TIM_OC3_SetConfig+0x66>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a20      	ldr	r2, [pc, #128]	@ (8004c74 <TIM_OC3_SetConfig+0xe4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d10d      	bne.n	8004c12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a16      	ldr	r2, [pc, #88]	@ (8004c70 <TIM_OC3_SetConfig+0xe0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <TIM_OC3_SetConfig+0x92>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a15      	ldr	r2, [pc, #84]	@ (8004c74 <TIM_OC3_SetConfig+0xe4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d113      	bne.n	8004c4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	621a      	str	r2, [r3, #32]
}
 8004c64:	bf00      	nop
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40010000 	.word	0x40010000
 8004c74:	40010400 	.word	0x40010400

08004c78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	031b      	lsls	r3, r3, #12
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a12      	ldr	r2, [pc, #72]	@ (8004d1c <TIM_OC4_SetConfig+0xa4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <TIM_OC4_SetConfig+0x68>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a11      	ldr	r2, [pc, #68]	@ (8004d20 <TIM_OC4_SetConfig+0xa8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d109      	bne.n	8004cf4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ce6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	019b      	lsls	r3, r3, #6
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	621a      	str	r2, [r3, #32]
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40010400 	.word	0x40010400

08004d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f023 0201 	bic.w	r2, r3, #1
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f023 030a 	bic.w	r3, r3, #10
 8004d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b087      	sub	sp, #28
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	f023 0210 	bic.w	r2, r3, #16
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004dac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	031b      	lsls	r3, r3, #12
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004dbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	621a      	str	r2, [r3, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b085      	sub	sp, #20
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f043 0307 	orr.w	r3, r3, #7
 8004e04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	609a      	str	r2, [r3, #8]
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	021a      	lsls	r2, r3, #8
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	609a      	str	r2, [r3, #8]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a1a      	ldr	r2, [r3, #32]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	401a      	ands	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a1a      	ldr	r2, [r3, #32]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 031f 	and.w	r3, r3, #31
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	431a      	orrs	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e05a      	b.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a21      	ldr	r2, [pc, #132]	@ (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d022      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f08:	d01d      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d018      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1b      	ldr	r2, [pc, #108]	@ (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1a      	ldr	r2, [pc, #104]	@ (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00e      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a18      	ldr	r2, [pc, #96]	@ (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d009      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a17      	ldr	r2, [pc, #92]	@ (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a15      	ldr	r2, [pc, #84]	@ (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d10c      	bne.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40000400 	.word	0x40000400
 8004f88:	40000800 	.word	0x40000800
 8004f8c:	40000c00 	.word	0x40000c00
 8004f90:	40010400 	.word	0x40010400
 8004f94:	40014000 	.word	0x40014000
 8004f98:	40001800 	.word	0x40001800

08004f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <__NVIC_SetPriority>:
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	6039      	str	r1, [r7, #0]
 8004fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	db0a      	blt.n	8004fee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	490c      	ldr	r1, [pc, #48]	@ (8005010 <__NVIC_SetPriority+0x4c>)
 8004fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe2:	0112      	lsls	r2, r2, #4
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004fec:	e00a      	b.n	8005004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	4908      	ldr	r1, [pc, #32]	@ (8005014 <__NVIC_SetPriority+0x50>)
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	3b04      	subs	r3, #4
 8004ffc:	0112      	lsls	r2, r2, #4
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	440b      	add	r3, r1
 8005002:	761a      	strb	r2, [r3, #24]
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	e000e100 	.word	0xe000e100
 8005014:	e000ed00 	.word	0xe000ed00

08005018 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800501c:	4b05      	ldr	r3, [pc, #20]	@ (8005034 <SysTick_Handler+0x1c>)
 800501e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005020:	f001 fd1c 	bl	8006a5c <xTaskGetSchedulerState>
 8005024:	4603      	mov	r3, r0
 8005026:	2b01      	cmp	r3, #1
 8005028:	d001      	beq.n	800502e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800502a:	f002 fd1d 	bl	8007a68 <xPortSysTickHandler>
  }
}
 800502e:	bf00      	nop
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	e000e010 	.word	0xe000e010

08005038 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800503c:	2100      	movs	r1, #0
 800503e:	f06f 0004 	mvn.w	r0, #4
 8005042:	f7ff ffbf 	bl	8004fc4 <__NVIC_SetPriority>
#endif
}
 8005046:	bf00      	nop
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005052:	f3ef 8305 	mrs	r3, IPSR
 8005056:	603b      	str	r3, [r7, #0]
  return(result);
 8005058:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800505e:	f06f 0305 	mvn.w	r3, #5
 8005062:	607b      	str	r3, [r7, #4]
 8005064:	e00c      	b.n	8005080 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005066:	4b0a      	ldr	r3, [pc, #40]	@ (8005090 <osKernelInitialize+0x44>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d105      	bne.n	800507a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800506e:	4b08      	ldr	r3, [pc, #32]	@ (8005090 <osKernelInitialize+0x44>)
 8005070:	2201      	movs	r2, #1
 8005072:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005074:	2300      	movs	r3, #0
 8005076:	607b      	str	r3, [r7, #4]
 8005078:	e002      	b.n	8005080 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800507a:	f04f 33ff 	mov.w	r3, #4294967295
 800507e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005080:	687b      	ldr	r3, [r7, #4]
}
 8005082:	4618      	mov	r0, r3
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	20000198 	.word	0x20000198

08005094 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800509a:	f3ef 8305 	mrs	r3, IPSR
 800509e:	603b      	str	r3, [r7, #0]
  return(result);
 80050a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80050a6:	f06f 0305 	mvn.w	r3, #5
 80050aa:	607b      	str	r3, [r7, #4]
 80050ac:	e010      	b.n	80050d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80050ae:	4b0b      	ldr	r3, [pc, #44]	@ (80050dc <osKernelStart+0x48>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d109      	bne.n	80050ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80050b6:	f7ff ffbf 	bl	8005038 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80050ba:	4b08      	ldr	r3, [pc, #32]	@ (80050dc <osKernelStart+0x48>)
 80050bc:	2202      	movs	r2, #2
 80050be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80050c0:	f001 f856 	bl	8006170 <vTaskStartScheduler>
      stat = osOK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	607b      	str	r3, [r7, #4]
 80050c8:	e002      	b.n	80050d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80050ca:	f04f 33ff 	mov.w	r3, #4294967295
 80050ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050d0:	687b      	ldr	r3, [r7, #4]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20000198 	.word	0x20000198

080050e0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e6:	f3ef 8305 	mrs	r3, IPSR
 80050ea:	603b      	str	r3, [r7, #0]
  return(result);
 80050ec:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80050f2:	f001 f969 	bl	80063c8 <xTaskGetTickCountFromISR>
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	e002      	b.n	8005100 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80050fa:	f001 f955 	bl	80063a8 <xTaskGetTickCount>
 80050fe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005100:	687b      	ldr	r3, [r7, #4]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800510a:	b580      	push	{r7, lr}
 800510c:	b08e      	sub	sp, #56	@ 0x38
 800510e:	af04      	add	r7, sp, #16
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005116:	2300      	movs	r3, #0
 8005118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800511a:	f3ef 8305 	mrs	r3, IPSR
 800511e:	617b      	str	r3, [r7, #20]
  return(result);
 8005120:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005122:	2b00      	cmp	r3, #0
 8005124:	d17e      	bne.n	8005224 <osThreadNew+0x11a>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d07b      	beq.n	8005224 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800512c:	2380      	movs	r3, #128	@ 0x80
 800512e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005130:	2318      	movs	r3, #24
 8005132:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005138:	f04f 33ff 	mov.w	r3, #4294967295
 800513c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d045      	beq.n	80051d0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <osThreadNew+0x48>
        name = attr->name;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <osThreadNew+0x6e>
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	2b38      	cmp	r3, #56	@ 0x38
 800516a:	d805      	bhi.n	8005178 <osThreadNew+0x6e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <osThreadNew+0x72>
        return (NULL);
 8005178:	2300      	movs	r3, #0
 800517a:	e054      	b.n	8005226 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	089b      	lsrs	r3, r3, #2
 800518a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00e      	beq.n	80051b2 <osThreadNew+0xa8>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	2ba7      	cmp	r3, #167	@ 0xa7
 800519a:	d90a      	bls.n	80051b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d006      	beq.n	80051b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <osThreadNew+0xa8>
        mem = 1;
 80051ac:	2301      	movs	r3, #1
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	e010      	b.n	80051d4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10c      	bne.n	80051d4 <osThreadNew+0xca>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d108      	bne.n	80051d4 <osThreadNew+0xca>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d104      	bne.n	80051d4 <osThreadNew+0xca>
          mem = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	61bb      	str	r3, [r7, #24]
 80051ce:	e001      	b.n	80051d4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d110      	bne.n	80051fc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051e2:	9202      	str	r2, [sp, #8]
 80051e4:	9301      	str	r3, [sp, #4]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	6a3a      	ldr	r2, [r7, #32]
 80051ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 fdff 	bl	8005df4 <xTaskCreateStatic>
 80051f6:	4603      	mov	r3, r0
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	e013      	b.n	8005224 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d110      	bne.n	8005224 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	b29a      	uxth	r2, r3
 8005206:	f107 0310 	add.w	r3, r7, #16
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 fe4d 	bl	8005eb4 <xTaskCreate>
 800521a:	4603      	mov	r3, r0
 800521c:	2b01      	cmp	r3, #1
 800521e:	d001      	beq.n	8005224 <osThreadNew+0x11a>
            hTask = NULL;
 8005220:	2300      	movs	r3, #0
 8005222:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005224:	693b      	ldr	r3, [r7, #16]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3728      	adds	r7, #40	@ 0x28
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4a07      	ldr	r2, [pc, #28]	@ (800525c <vApplicationGetIdleTaskMemory+0x2c>)
 8005240:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	4a06      	ldr	r2, [pc, #24]	@ (8005260 <vApplicationGetIdleTaskMemory+0x30>)
 8005246:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2280      	movs	r2, #128	@ 0x80
 800524c:	601a      	str	r2, [r3, #0]
}
 800524e:	bf00      	nop
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	2000019c 	.word	0x2000019c
 8005260:	20000244 	.word	0x20000244

08005264 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4a07      	ldr	r2, [pc, #28]	@ (8005290 <vApplicationGetTimerTaskMemory+0x2c>)
 8005274:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4a06      	ldr	r2, [pc, #24]	@ (8005294 <vApplicationGetTimerTaskMemory+0x30>)
 800527a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005282:	601a      	str	r2, [r3, #0]
}
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	20000444 	.word	0x20000444
 8005294:	200004ec 	.word	0x200004ec

08005298 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f103 0208 	add.w	r2, r3, #8
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f04f 32ff 	mov.w	r2, #4294967295
 80052b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f103 0208 	add.w	r2, r3, #8
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f103 0208 	add.w	r2, r3, #8
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052f2:	b480      	push	{r7}
 80052f4:	b085      	sub	sp, #20
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	601a      	str	r2, [r3, #0]
}
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800533a:	b480      	push	{r7}
 800533c:	b085      	sub	sp, #20
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005350:	d103      	bne.n	800535a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	e00c      	b.n	8005374 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	3308      	adds	r3, #8
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	e002      	b.n	8005368 <vListInsert+0x2e>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	429a      	cmp	r2, r3
 8005372:	d2f6      	bcs.n	8005362 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	601a      	str	r2, [r3, #0]
}
 80053a0:	bf00      	nop
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6892      	ldr	r2, [r2, #8]
 80053c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6852      	ldr	r2, [r2, #4]
 80053cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d103      	bne.n	80053e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	1e5a      	subs	r2, r3, #1
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10b      	bne.n	800542c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005426:	bf00      	nop
 8005428:	bf00      	nop
 800542a:	e7fd      	b.n	8005428 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800542c:	f002 fa8c 	bl	8007948 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005438:	68f9      	ldr	r1, [r7, #12]
 800543a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800543c:	fb01 f303 	mul.w	r3, r1, r3
 8005440:	441a      	add	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545c:	3b01      	subs	r3, #1
 800545e:	68f9      	ldr	r1, [r7, #12]
 8005460:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005462:	fb01 f303 	mul.w	r3, r1, r3
 8005466:	441a      	add	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	22ff      	movs	r2, #255	@ 0xff
 8005470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	22ff      	movs	r2, #255	@ 0xff
 8005478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d114      	bne.n	80054ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d01a      	beq.n	80054c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	3310      	adds	r3, #16
 800548e:	4618      	mov	r0, r3
 8005490:	f001 f91e 	bl	80066d0 <xTaskRemoveFromEventList>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d012      	beq.n	80054c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800549a:	4b0d      	ldr	r3, [pc, #52]	@ (80054d0 <xQueueGenericReset+0xd0>)
 800549c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	e009      	b.n	80054c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3310      	adds	r3, #16
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff fef1 	bl	8005298 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3324      	adds	r3, #36	@ 0x24
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff feec 	bl	8005298 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054c0:	f002 fa74 	bl	80079ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054c4:	2301      	movs	r3, #1
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08e      	sub	sp, #56	@ 0x38
 80054d8:	af02      	add	r7, sp, #8
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10b      	bne.n	8005500 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054fa:	bf00      	nop
 80054fc:	bf00      	nop
 80054fe:	e7fd      	b.n	80054fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10b      	bne.n	800551e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005518:	bf00      	nop
 800551a:	bf00      	nop
 800551c:	e7fd      	b.n	800551a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <xQueueGenericCreateStatic+0x56>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <xQueueGenericCreateStatic+0x5a>
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <xQueueGenericCreateStatic+0x5c>
 800552e:	2300      	movs	r3, #0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10b      	bne.n	800554c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	623b      	str	r3, [r7, #32]
}
 8005546:	bf00      	nop
 8005548:	bf00      	nop
 800554a:	e7fd      	b.n	8005548 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d102      	bne.n	8005558 <xQueueGenericCreateStatic+0x84>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <xQueueGenericCreateStatic+0x88>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <xQueueGenericCreateStatic+0x8a>
 800555c:	2300      	movs	r3, #0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10b      	bne.n	800557a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	61fb      	str	r3, [r7, #28]
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	e7fd      	b.n	8005576 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800557a:	2350      	movs	r3, #80	@ 0x50
 800557c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b50      	cmp	r3, #80	@ 0x50
 8005582:	d00b      	beq.n	800559c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	61bb      	str	r3, [r7, #24]
}
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	e7fd      	b.n	8005598 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800559c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80055a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00d      	beq.n	80055c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80055a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80055b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	4613      	mov	r3, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f805 	bl	80055ce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3730      	adds	r7, #48	@ 0x30
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	607a      	str	r2, [r7, #4]
 80055da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d103      	bne.n	80055ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	e002      	b.n	80055f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055fc:	2101      	movs	r1, #1
 80055fe:	69b8      	ldr	r0, [r7, #24]
 8005600:	f7ff fefe 	bl	8005400 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	78fa      	ldrb	r2, [r7, #3]
 8005608:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800560c:	bf00      	nop
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b08e      	sub	sp, #56	@ 0x38
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005622:	2300      	movs	r3, #0
 8005624:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800562a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10b      	bne.n	8005648 <xQueueGenericSend+0x34>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005642:	bf00      	nop
 8005644:	bf00      	nop
 8005646:	e7fd      	b.n	8005644 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d103      	bne.n	8005656 <xQueueGenericSend+0x42>
 800564e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <xQueueGenericSend+0x46>
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <xQueueGenericSend+0x48>
 800565a:	2300      	movs	r3, #0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10b      	bne.n	8005678 <xQueueGenericSend+0x64>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005672:	bf00      	nop
 8005674:	bf00      	nop
 8005676:	e7fd      	b.n	8005674 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b02      	cmp	r3, #2
 800567c:	d103      	bne.n	8005686 <xQueueGenericSend+0x72>
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <xQueueGenericSend+0x76>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <xQueueGenericSend+0x78>
 800568a:	2300      	movs	r3, #0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10b      	bne.n	80056a8 <xQueueGenericSend+0x94>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	623b      	str	r3, [r7, #32]
}
 80056a2:	bf00      	nop
 80056a4:	bf00      	nop
 80056a6:	e7fd      	b.n	80056a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056a8:	f001 f9d8 	bl	8006a5c <xTaskGetSchedulerState>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d102      	bne.n	80056b8 <xQueueGenericSend+0xa4>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <xQueueGenericSend+0xa8>
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <xQueueGenericSend+0xaa>
 80056bc:	2300      	movs	r3, #0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10b      	bne.n	80056da <xQueueGenericSend+0xc6>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	61fb      	str	r3, [r7, #28]
}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop
 80056d8:	e7fd      	b.n	80056d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056da:	f002 f935 	bl	8007948 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d302      	bcc.n	80056f0 <xQueueGenericSend+0xdc>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d129      	bne.n	8005744 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056f6:	f000 fa0f 	bl	8005b18 <prvCopyDataToQueue>
 80056fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005700:	2b00      	cmp	r3, #0
 8005702:	d010      	beq.n	8005726 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005706:	3324      	adds	r3, #36	@ 0x24
 8005708:	4618      	mov	r0, r3
 800570a:	f000 ffe1 	bl	80066d0 <xTaskRemoveFromEventList>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d013      	beq.n	800573c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005714:	4b3f      	ldr	r3, [pc, #252]	@ (8005814 <xQueueGenericSend+0x200>)
 8005716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	e00a      	b.n	800573c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800572c:	4b39      	ldr	r3, [pc, #228]	@ (8005814 <xQueueGenericSend+0x200>)
 800572e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800573c:	f002 f936 	bl	80079ac <vPortExitCritical>
				return pdPASS;
 8005740:	2301      	movs	r3, #1
 8005742:	e063      	b.n	800580c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d103      	bne.n	8005752 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800574a:	f002 f92f 	bl	80079ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800574e:	2300      	movs	r3, #0
 8005750:	e05c      	b.n	800580c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005754:	2b00      	cmp	r3, #0
 8005756:	d106      	bne.n	8005766 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005758:	f107 0314 	add.w	r3, r7, #20
 800575c:	4618      	mov	r0, r3
 800575e:	f001 f81b 	bl	8006798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005762:	2301      	movs	r3, #1
 8005764:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005766:	f002 f921 	bl	80079ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800576a:	f000 fd71 	bl	8006250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800576e:	f002 f8eb 	bl	8007948 <vPortEnterCritical>
 8005772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005774:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005778:	b25b      	sxtb	r3, r3
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577e:	d103      	bne.n	8005788 <xQueueGenericSend+0x174>
 8005780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800578e:	b25b      	sxtb	r3, r3
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005794:	d103      	bne.n	800579e <xQueueGenericSend+0x18a>
 8005796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800579e:	f002 f905 	bl	80079ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057a2:	1d3a      	adds	r2, r7, #4
 80057a4:	f107 0314 	add.w	r3, r7, #20
 80057a8:	4611      	mov	r1, r2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f001 f80a 	bl	80067c4 <xTaskCheckForTimeOut>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d124      	bne.n	8005800 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057b8:	f000 faa6 	bl	8005d08 <prvIsQueueFull>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d018      	beq.n	80057f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c4:	3310      	adds	r3, #16
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	4611      	mov	r1, r2
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 ff2e 	bl	800662c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057d2:	f000 fa31 	bl	8005c38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057d6:	f000 fd49 	bl	800626c <xTaskResumeAll>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f47f af7c 	bne.w	80056da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80057e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005814 <xQueueGenericSend+0x200>)
 80057e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	e772      	b.n	80056da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057f6:	f000 fa1f 	bl	8005c38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057fa:	f000 fd37 	bl	800626c <xTaskResumeAll>
 80057fe:	e76c      	b.n	80056da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005800:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005802:	f000 fa19 	bl	8005c38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005806:	f000 fd31 	bl	800626c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800580a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800580c:	4618      	mov	r0, r3
 800580e:	3738      	adds	r7, #56	@ 0x38
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	e000ed04 	.word	0xe000ed04

08005818 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b090      	sub	sp, #64	@ 0x40
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800582a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10b      	bne.n	8005848 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005842:	bf00      	nop
 8005844:	bf00      	nop
 8005846:	e7fd      	b.n	8005844 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d103      	bne.n	8005856 <xQueueGenericSendFromISR+0x3e>
 800584e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <xQueueGenericSendFromISR+0x42>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <xQueueGenericSendFromISR+0x44>
 800585a:	2300      	movs	r3, #0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10b      	bne.n	8005878 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	e7fd      	b.n	8005874 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d103      	bne.n	8005886 <xQueueGenericSendFromISR+0x6e>
 800587e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <xQueueGenericSendFromISR+0x72>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <xQueueGenericSendFromISR+0x74>
 800588a:	2300      	movs	r3, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10b      	bne.n	80058a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	623b      	str	r3, [r7, #32]
}
 80058a2:	bf00      	nop
 80058a4:	bf00      	nop
 80058a6:	e7fd      	b.n	80058a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058a8:	f002 f92e 	bl	8007b08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058ac:	f3ef 8211 	mrs	r2, BASEPRI
 80058b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	61fa      	str	r2, [r7, #28]
 80058c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d302      	bcc.n	80058da <xQueueGenericSendFromISR+0xc2>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d12f      	bne.n	800593a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	68b9      	ldr	r1, [r7, #8]
 80058ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80058f0:	f000 f912 	bl	8005b18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80058f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fc:	d112      	bne.n	8005924 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005902:	2b00      	cmp	r3, #0
 8005904:	d016      	beq.n	8005934 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005908:	3324      	adds	r3, #36	@ 0x24
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fee0 	bl	80066d0 <xTaskRemoveFromEventList>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00e      	beq.n	8005934 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00b      	beq.n	8005934 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	e007      	b.n	8005934 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005924:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005928:	3301      	adds	r3, #1
 800592a:	b2db      	uxtb	r3, r3
 800592c:	b25a      	sxtb	r2, r3
 800592e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005934:	2301      	movs	r3, #1
 8005936:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005938:	e001      	b.n	800593e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800593a:	2300      	movs	r3, #0
 800593c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800593e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005940:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005948:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800594a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800594c:	4618      	mov	r0, r3
 800594e:	3740      	adds	r7, #64	@ 0x40
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08c      	sub	sp, #48	@ 0x30
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005960:	2300      	movs	r3, #0
 8005962:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10b      	bne.n	8005986 <xQueueReceive+0x32>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	623b      	str	r3, [r7, #32]
}
 8005980:	bf00      	nop
 8005982:	bf00      	nop
 8005984:	e7fd      	b.n	8005982 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d103      	bne.n	8005994 <xQueueReceive+0x40>
 800598c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <xQueueReceive+0x44>
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <xQueueReceive+0x46>
 8005998:	2300      	movs	r3, #0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10b      	bne.n	80059b6 <xQueueReceive+0x62>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	61fb      	str	r3, [r7, #28]
}
 80059b0:	bf00      	nop
 80059b2:	bf00      	nop
 80059b4:	e7fd      	b.n	80059b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059b6:	f001 f851 	bl	8006a5c <xTaskGetSchedulerState>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d102      	bne.n	80059c6 <xQueueReceive+0x72>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <xQueueReceive+0x76>
 80059c6:	2301      	movs	r3, #1
 80059c8:	e000      	b.n	80059cc <xQueueReceive+0x78>
 80059ca:	2300      	movs	r3, #0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10b      	bne.n	80059e8 <xQueueReceive+0x94>
	__asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	61bb      	str	r3, [r7, #24]
}
 80059e2:	bf00      	nop
 80059e4:	bf00      	nop
 80059e6:	e7fd      	b.n	80059e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059e8:	f001 ffae 	bl	8007948 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01f      	beq.n	8005a38 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059f8:	68b9      	ldr	r1, [r7, #8]
 80059fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059fc:	f000 f8f6 	bl	8005bec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	1e5a      	subs	r2, r3, #1
 8005a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a06:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00f      	beq.n	8005a30 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a12:	3310      	adds	r3, #16
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fe5b 	bl	80066d0 <xTaskRemoveFromEventList>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d007      	beq.n	8005a30 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a20:	4b3c      	ldr	r3, [pc, #240]	@ (8005b14 <xQueueReceive+0x1c0>)
 8005a22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a30:	f001 ffbc 	bl	80079ac <vPortExitCritical>
				return pdPASS;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e069      	b.n	8005b0c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d103      	bne.n	8005a46 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a3e:	f001 ffb5 	bl	80079ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e062      	b.n	8005b0c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d106      	bne.n	8005a5a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a4c:	f107 0310 	add.w	r3, r7, #16
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fea1 	bl	8006798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a56:	2301      	movs	r3, #1
 8005a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a5a:	f001 ffa7 	bl	80079ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a5e:	f000 fbf7 	bl	8006250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a62:	f001 ff71 	bl	8007948 <vPortEnterCritical>
 8005a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a6c:	b25b      	sxtb	r3, r3
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d103      	bne.n	8005a7c <xQueueReceive+0x128>
 8005a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a82:	b25b      	sxtb	r3, r3
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d103      	bne.n	8005a92 <xQueueReceive+0x13e>
 8005a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a92:	f001 ff8b 	bl	80079ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a96:	1d3a      	adds	r2, r7, #4
 8005a98:	f107 0310 	add.w	r3, r7, #16
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fe90 	bl	80067c4 <xTaskCheckForTimeOut>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d123      	bne.n	8005af2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005aac:	f000 f916 	bl	8005cdc <prvIsQueueEmpty>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d017      	beq.n	8005ae6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab8:	3324      	adds	r3, #36	@ 0x24
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	4611      	mov	r1, r2
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fdb4 	bl	800662c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ac4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ac6:	f000 f8b7 	bl	8005c38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005aca:	f000 fbcf 	bl	800626c <xTaskResumeAll>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d189      	bne.n	80059e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8005b14 <xQueueReceive+0x1c0>)
 8005ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	e780      	b.n	80059e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ae6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ae8:	f000 f8a6 	bl	8005c38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005aec:	f000 fbbe 	bl	800626c <xTaskResumeAll>
 8005af0:	e77a      	b.n	80059e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005af2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005af4:	f000 f8a0 	bl	8005c38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005af8:	f000 fbb8 	bl	800626c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005afc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005afe:	f000 f8ed 	bl	8005cdc <prvIsQueueEmpty>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f43f af6f 	beq.w	80059e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3730      	adds	r7, #48	@ 0x30
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	e000ed04 	.word	0xe000ed04

08005b18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10d      	bne.n	8005b52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d14d      	bne.n	8005bda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 ffa8 	bl	8006a98 <xTaskPriorityDisinherit>
 8005b48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	609a      	str	r2, [r3, #8]
 8005b50:	e043      	b.n	8005bda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d119      	bne.n	8005b8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6858      	ldr	r0, [r3, #4]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b60:	461a      	mov	r2, r3
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	f002 fbe9 	bl	800833a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b70:	441a      	add	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d32b      	bcc.n	8005bda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	605a      	str	r2, [r3, #4]
 8005b8a:	e026      	b.n	8005bda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68d8      	ldr	r0, [r3, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b94:	461a      	mov	r2, r3
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	f002 fbcf 	bl	800833a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba4:	425b      	negs	r3, r3
 8005ba6:	441a      	add	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d207      	bcs.n	8005bc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc0:	425b      	negs	r3, r3
 8005bc2:	441a      	add	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d105      	bne.n	8005bda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005be2:	697b      	ldr	r3, [r7, #20]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d018      	beq.n	8005c30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c06:	441a      	add	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d303      	bcc.n	8005c20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68d9      	ldr	r1, [r3, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6838      	ldr	r0, [r7, #0]
 8005c2c:	f002 fb85 	bl	800833a <memcpy>
	}
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c40:	f001 fe82 	bl	8007948 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c4c:	e011      	b.n	8005c72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d012      	beq.n	8005c7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3324      	adds	r3, #36	@ 0x24
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fd38 	bl	80066d0 <xTaskRemoveFromEventList>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c66:	f000 fe11 	bl	800688c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	dce9      	bgt.n	8005c4e <prvUnlockQueue+0x16>
 8005c7a:	e000      	b.n	8005c7e <prvUnlockQueue+0x46>
					break;
 8005c7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	22ff      	movs	r2, #255	@ 0xff
 8005c82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005c86:	f001 fe91 	bl	80079ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c8a:	f001 fe5d 	bl	8007948 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c96:	e011      	b.n	8005cbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d012      	beq.n	8005cc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3310      	adds	r3, #16
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fd13 	bl	80066d0 <xTaskRemoveFromEventList>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005cb0:	f000 fdec 	bl	800688c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005cb4:	7bbb      	ldrb	r3, [r7, #14]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	dce9      	bgt.n	8005c98 <prvUnlockQueue+0x60>
 8005cc4:	e000      	b.n	8005cc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005cc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	22ff      	movs	r2, #255	@ 0xff
 8005ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005cd0:	f001 fe6c 	bl	80079ac <vPortExitCritical>
}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ce4:	f001 fe30 	bl	8007948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d102      	bne.n	8005cf6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e001      	b.n	8005cfa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cfa:	f001 fe57 	bl	80079ac <vPortExitCritical>

	return xReturn;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d10:	f001 fe1a 	bl	8007948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d102      	bne.n	8005d26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d20:	2301      	movs	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	e001      	b.n	8005d2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d2a:	f001 fe3f 	bl	80079ac <vPortExitCritical>

	return xReturn;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	e014      	b.n	8005d72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d48:	4a0f      	ldr	r2, [pc, #60]	@ (8005d88 <vQueueAddToRegistry+0x50>)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10b      	bne.n	8005d6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d54:	490c      	ldr	r1, [pc, #48]	@ (8005d88 <vQueueAddToRegistry+0x50>)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d88 <vQueueAddToRegistry+0x50>)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	4413      	add	r3, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d6a:	e006      	b.n	8005d7a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b07      	cmp	r3, #7
 8005d76:	d9e7      	bls.n	8005d48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d78:	bf00      	nop
 8005d7a:	bf00      	nop
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	200008ec 	.word	0x200008ec

08005d8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d9c:	f001 fdd4 	bl	8007948 <vPortEnterCritical>
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005da6:	b25b      	sxtb	r3, r3
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dac:	d103      	bne.n	8005db6 <vQueueWaitForMessageRestricted+0x2a>
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dbc:	b25b      	sxtb	r3, r3
 8005dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc2:	d103      	bne.n	8005dcc <vQueueWaitForMessageRestricted+0x40>
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dcc:	f001 fdee 	bl	80079ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d106      	bne.n	8005de6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	3324      	adds	r3, #36	@ 0x24
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 fc49 	bl	8006678 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005de6:	6978      	ldr	r0, [r7, #20]
 8005de8:	f7ff ff26 	bl	8005c38 <prvUnlockQueue>
	}
 8005dec:	bf00      	nop
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08e      	sub	sp, #56	@ 0x38
 8005df8:	af04      	add	r7, sp, #16
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10b      	bne.n	8005e20 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	623b      	str	r3, [r7, #32]
}
 8005e1a:	bf00      	nop
 8005e1c:	bf00      	nop
 8005e1e:	e7fd      	b.n	8005e1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10b      	bne.n	8005e3e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	61fb      	str	r3, [r7, #28]
}
 8005e38:	bf00      	nop
 8005e3a:	bf00      	nop
 8005e3c:	e7fd      	b.n	8005e3a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e3e:	23a8      	movs	r3, #168	@ 0xa8
 8005e40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2ba8      	cmp	r3, #168	@ 0xa8
 8005e46:	d00b      	beq.n	8005e60 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	61bb      	str	r3, [r7, #24]
}
 8005e5a:	bf00      	nop
 8005e5c:	bf00      	nop
 8005e5e:	e7fd      	b.n	8005e5c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e60:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01e      	beq.n	8005ea6 <xTaskCreateStatic+0xb2>
 8005e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01b      	beq.n	8005ea6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e70:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e76:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e80:	2300      	movs	r3, #0
 8005e82:	9303      	str	r3, [sp, #12]
 8005e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e86:	9302      	str	r3, [sp, #8]
 8005e88:	f107 0314 	add.w	r3, r7, #20
 8005e8c:	9301      	str	r3, [sp, #4]
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f851 	bl	8005f40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ea0:	f000 f8f6 	bl	8006090 <prvAddNewTaskToReadyList>
 8005ea4:	e001      	b.n	8005eaa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005eaa:	697b      	ldr	r3, [r7, #20]
	}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3728      	adds	r7, #40	@ 0x28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08c      	sub	sp, #48	@ 0x30
 8005eb8:	af04      	add	r7, sp, #16
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	603b      	str	r3, [r7, #0]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ec4:	88fb      	ldrh	r3, [r7, #6]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f001 fe5f 	bl	8007b8c <pvPortMalloc>
 8005ece:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00e      	beq.n	8005ef4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ed6:	20a8      	movs	r0, #168	@ 0xa8
 8005ed8:	f001 fe58 	bl	8007b8c <pvPortMalloc>
 8005edc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	631a      	str	r2, [r3, #48]	@ 0x30
 8005eea:	e005      	b.n	8005ef8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005eec:	6978      	ldr	r0, [r7, #20]
 8005eee:	f001 ff1b 	bl	8007d28 <vPortFree>
 8005ef2:	e001      	b.n	8005ef8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d017      	beq.n	8005f2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f06:	88fa      	ldrh	r2, [r7, #6]
 8005f08:	2300      	movs	r3, #0
 8005f0a:	9303      	str	r3, [sp, #12]
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	9302      	str	r3, [sp, #8]
 8005f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f12:	9301      	str	r3, [sp, #4]
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68b9      	ldr	r1, [r7, #8]
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 f80f 	bl	8005f40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f22:	69f8      	ldr	r0, [r7, #28]
 8005f24:	f000 f8b4 	bl	8006090 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	e002      	b.n	8005f34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f34:	69bb      	ldr	r3, [r7, #24]
	}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3720      	adds	r7, #32
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f50:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	461a      	mov	r2, r3
 8005f58:	21a5      	movs	r1, #165	@ 0xa5
 8005f5a:	f002 f91c 	bl	8008196 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	f023 0307 	bic.w	r3, r3, #7
 8005f76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	f003 0307 	and.w	r3, r3, #7
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	617b      	str	r3, [r7, #20]
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop
 8005f98:	e7fd      	b.n	8005f96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01f      	beq.n	8005fe0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	e012      	b.n	8005fcc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	4413      	add	r3, r2
 8005fac:	7819      	ldrb	r1, [r3, #0]
 8005fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	3334      	adds	r3, #52	@ 0x34
 8005fb6:	460a      	mov	r2, r1
 8005fb8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d006      	beq.n	8005fd4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	61fb      	str	r3, [r7, #28]
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	2b0f      	cmp	r3, #15
 8005fd0:	d9e9      	bls.n	8005fa6 <prvInitialiseNewTask+0x66>
 8005fd2:	e000      	b.n	8005fd6 <prvInitialiseNewTask+0x96>
			{
				break;
 8005fd4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fde:	e003      	b.n	8005fe8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fea:	2b37      	cmp	r3, #55	@ 0x37
 8005fec:	d901      	bls.n	8005ff2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fee:	2337      	movs	r3, #55	@ 0x37
 8005ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ffc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006000:	2200      	movs	r2, #0
 8006002:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006006:	3304      	adds	r3, #4
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff f965 	bl	80052d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800600e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006010:	3318      	adds	r3, #24
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff f960 	bl	80052d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800601c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800601e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006020:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006026:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800602c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800602e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006030:	2200      	movs	r2, #0
 8006032:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006038:	2200      	movs	r2, #0
 800603a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800603e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006040:	3354      	adds	r3, #84	@ 0x54
 8006042:	224c      	movs	r2, #76	@ 0x4c
 8006044:	2100      	movs	r1, #0
 8006046:	4618      	mov	r0, r3
 8006048:	f002 f8a5 	bl	8008196 <memset>
 800604c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604e:	4a0d      	ldr	r2, [pc, #52]	@ (8006084 <prvInitialiseNewTask+0x144>)
 8006050:	659a      	str	r2, [r3, #88]	@ 0x58
 8006052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006054:	4a0c      	ldr	r2, [pc, #48]	@ (8006088 <prvInitialiseNewTask+0x148>)
 8006056:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605a:	4a0c      	ldr	r2, [pc, #48]	@ (800608c <prvInitialiseNewTask+0x14c>)
 800605c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	68f9      	ldr	r1, [r7, #12]
 8006062:	69b8      	ldr	r0, [r7, #24]
 8006064:	f001 fb3e 	bl	80076e4 <pxPortInitialiseStack>
 8006068:	4602      	mov	r2, r0
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800606e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006078:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800607a:	bf00      	nop
 800607c:	3720      	adds	r7, #32
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20004b80 	.word	0x20004b80
 8006088:	20004be8 	.word	0x20004be8
 800608c:	20004c50 	.word	0x20004c50

08006090 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006098:	f001 fc56 	bl	8007948 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800609c:	4b2d      	ldr	r3, [pc, #180]	@ (8006154 <prvAddNewTaskToReadyList+0xc4>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3301      	adds	r3, #1
 80060a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006154 <prvAddNewTaskToReadyList+0xc4>)
 80060a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060a6:	4b2c      	ldr	r3, [pc, #176]	@ (8006158 <prvAddNewTaskToReadyList+0xc8>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d109      	bne.n	80060c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060ae:	4a2a      	ldr	r2, [pc, #168]	@ (8006158 <prvAddNewTaskToReadyList+0xc8>)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060b4:	4b27      	ldr	r3, [pc, #156]	@ (8006154 <prvAddNewTaskToReadyList+0xc4>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d110      	bne.n	80060de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060bc:	f000 fc0a 	bl	80068d4 <prvInitialiseTaskLists>
 80060c0:	e00d      	b.n	80060de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060c2:	4b26      	ldr	r3, [pc, #152]	@ (800615c <prvAddNewTaskToReadyList+0xcc>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d109      	bne.n	80060de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060ca:	4b23      	ldr	r3, [pc, #140]	@ (8006158 <prvAddNewTaskToReadyList+0xc8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d802      	bhi.n	80060de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006158 <prvAddNewTaskToReadyList+0xc8>)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060de:	4b20      	ldr	r3, [pc, #128]	@ (8006160 <prvAddNewTaskToReadyList+0xd0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3301      	adds	r3, #1
 80060e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006160 <prvAddNewTaskToReadyList+0xd0>)
 80060e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006160 <prvAddNewTaskToReadyList+0xd0>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006164 <prvAddNewTaskToReadyList+0xd4>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d903      	bls.n	8006104 <prvAddNewTaskToReadyList+0x74>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006100:	4a18      	ldr	r2, [pc, #96]	@ (8006164 <prvAddNewTaskToReadyList+0xd4>)
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4a15      	ldr	r2, [pc, #84]	@ (8006168 <prvAddNewTaskToReadyList+0xd8>)
 8006112:	441a      	add	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3304      	adds	r3, #4
 8006118:	4619      	mov	r1, r3
 800611a:	4610      	mov	r0, r2
 800611c:	f7ff f8e9 	bl	80052f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006120:	f001 fc44 	bl	80079ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006124:	4b0d      	ldr	r3, [pc, #52]	@ (800615c <prvAddNewTaskToReadyList+0xcc>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00e      	beq.n	800614a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800612c:	4b0a      	ldr	r3, [pc, #40]	@ (8006158 <prvAddNewTaskToReadyList+0xc8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006136:	429a      	cmp	r2, r3
 8006138:	d207      	bcs.n	800614a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800613a:	4b0c      	ldr	r3, [pc, #48]	@ (800616c <prvAddNewTaskToReadyList+0xdc>)
 800613c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800614a:	bf00      	nop
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20000e00 	.word	0x20000e00
 8006158:	2000092c 	.word	0x2000092c
 800615c:	20000e0c 	.word	0x20000e0c
 8006160:	20000e1c 	.word	0x20000e1c
 8006164:	20000e08 	.word	0x20000e08
 8006168:	20000930 	.word	0x20000930
 800616c:	e000ed04 	.word	0xe000ed04

08006170 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08a      	sub	sp, #40	@ 0x28
 8006174:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800617a:	2300      	movs	r3, #0
 800617c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800617e:	463a      	mov	r2, r7
 8006180:	1d39      	adds	r1, r7, #4
 8006182:	f107 0308 	add.w	r3, r7, #8
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff f852 	bl	8005230 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	9202      	str	r2, [sp, #8]
 8006194:	9301      	str	r3, [sp, #4]
 8006196:	2300      	movs	r3, #0
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	2300      	movs	r3, #0
 800619c:	460a      	mov	r2, r1
 800619e:	4924      	ldr	r1, [pc, #144]	@ (8006230 <vTaskStartScheduler+0xc0>)
 80061a0:	4824      	ldr	r0, [pc, #144]	@ (8006234 <vTaskStartScheduler+0xc4>)
 80061a2:	f7ff fe27 	bl	8005df4 <xTaskCreateStatic>
 80061a6:	4603      	mov	r3, r0
 80061a8:	4a23      	ldr	r2, [pc, #140]	@ (8006238 <vTaskStartScheduler+0xc8>)
 80061aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061ac:	4b22      	ldr	r3, [pc, #136]	@ (8006238 <vTaskStartScheduler+0xc8>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061b4:	2301      	movs	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	e001      	b.n	80061be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d102      	bne.n	80061ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80061c4:	f000 ff34 	bl	8007030 <xTimerCreateTimerTask>
 80061c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d11b      	bne.n	8006208 <vTaskStartScheduler+0x98>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	613b      	str	r3, [r7, #16]
}
 80061e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061e4:	4b15      	ldr	r3, [pc, #84]	@ (800623c <vTaskStartScheduler+0xcc>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3354      	adds	r3, #84	@ 0x54
 80061ea:	4a15      	ldr	r2, [pc, #84]	@ (8006240 <vTaskStartScheduler+0xd0>)
 80061ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061ee:	4b15      	ldr	r3, [pc, #84]	@ (8006244 <vTaskStartScheduler+0xd4>)
 80061f0:	f04f 32ff 	mov.w	r2, #4294967295
 80061f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061f6:	4b14      	ldr	r3, [pc, #80]	@ (8006248 <vTaskStartScheduler+0xd8>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061fc:	4b13      	ldr	r3, [pc, #76]	@ (800624c <vTaskStartScheduler+0xdc>)
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006202:	f001 fafd 	bl	8007800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006206:	e00f      	b.n	8006228 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620e:	d10b      	bne.n	8006228 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	60fb      	str	r3, [r7, #12]
}
 8006222:	bf00      	nop
 8006224:	bf00      	nop
 8006226:	e7fd      	b.n	8006224 <vTaskStartScheduler+0xb4>
}
 8006228:	bf00      	nop
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	080093ec 	.word	0x080093ec
 8006234:	080068a5 	.word	0x080068a5
 8006238:	20000e24 	.word	0x20000e24
 800623c:	2000092c 	.word	0x2000092c
 8006240:	20000024 	.word	0x20000024
 8006244:	20000e20 	.word	0x20000e20
 8006248:	20000e0c 	.word	0x20000e0c
 800624c:	20000e04 	.word	0x20000e04

08006250 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006254:	4b04      	ldr	r3, [pc, #16]	@ (8006268 <vTaskSuspendAll+0x18>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3301      	adds	r3, #1
 800625a:	4a03      	ldr	r2, [pc, #12]	@ (8006268 <vTaskSuspendAll+0x18>)
 800625c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800625e:	bf00      	nop
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	20000e28 	.word	0x20000e28

0800626c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006276:	2300      	movs	r3, #0
 8006278:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800627a:	4b42      	ldr	r3, [pc, #264]	@ (8006384 <xTaskResumeAll+0x118>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10b      	bne.n	800629a <xTaskResumeAll+0x2e>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	603b      	str	r3, [r7, #0]
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop
 8006298:	e7fd      	b.n	8006296 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800629a:	f001 fb55 	bl	8007948 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800629e:	4b39      	ldr	r3, [pc, #228]	@ (8006384 <xTaskResumeAll+0x118>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	4a37      	ldr	r2, [pc, #220]	@ (8006384 <xTaskResumeAll+0x118>)
 80062a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062a8:	4b36      	ldr	r3, [pc, #216]	@ (8006384 <xTaskResumeAll+0x118>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d162      	bne.n	8006376 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062b0:	4b35      	ldr	r3, [pc, #212]	@ (8006388 <xTaskResumeAll+0x11c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d05e      	beq.n	8006376 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062b8:	e02f      	b.n	800631a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ba:	4b34      	ldr	r3, [pc, #208]	@ (800638c <xTaskResumeAll+0x120>)
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3318      	adds	r3, #24
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7ff f870 	bl	80053ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3304      	adds	r3, #4
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff f86b 	bl	80053ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062da:	4b2d      	ldr	r3, [pc, #180]	@ (8006390 <xTaskResumeAll+0x124>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d903      	bls.n	80062ea <xTaskResumeAll+0x7e>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006390 <xTaskResumeAll+0x124>)
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ee:	4613      	mov	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4a27      	ldr	r2, [pc, #156]	@ (8006394 <xTaskResumeAll+0x128>)
 80062f8:	441a      	add	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3304      	adds	r3, #4
 80062fe:	4619      	mov	r1, r3
 8006300:	4610      	mov	r0, r2
 8006302:	f7fe fff6 	bl	80052f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630a:	4b23      	ldr	r3, [pc, #140]	@ (8006398 <xTaskResumeAll+0x12c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006310:	429a      	cmp	r2, r3
 8006312:	d302      	bcc.n	800631a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006314:	4b21      	ldr	r3, [pc, #132]	@ (800639c <xTaskResumeAll+0x130>)
 8006316:	2201      	movs	r2, #1
 8006318:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800631a:	4b1c      	ldr	r3, [pc, #112]	@ (800638c <xTaskResumeAll+0x120>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1cb      	bne.n	80062ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006328:	f000 fb78 	bl	8006a1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800632c:	4b1c      	ldr	r3, [pc, #112]	@ (80063a0 <xTaskResumeAll+0x134>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d010      	beq.n	800635a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006338:	f000 f858 	bl	80063ec <xTaskIncrementTick>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006342:	4b16      	ldr	r3, [pc, #88]	@ (800639c <xTaskResumeAll+0x130>)
 8006344:	2201      	movs	r2, #1
 8006346:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3b01      	subs	r3, #1
 800634c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1f1      	bne.n	8006338 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006354:	4b12      	ldr	r3, [pc, #72]	@ (80063a0 <xTaskResumeAll+0x134>)
 8006356:	2200      	movs	r2, #0
 8006358:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800635a:	4b10      	ldr	r3, [pc, #64]	@ (800639c <xTaskResumeAll+0x130>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d009      	beq.n	8006376 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006362:	2301      	movs	r3, #1
 8006364:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006366:	4b0f      	ldr	r3, [pc, #60]	@ (80063a4 <xTaskResumeAll+0x138>)
 8006368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006376:	f001 fb19 	bl	80079ac <vPortExitCritical>

	return xAlreadyYielded;
 800637a:	68bb      	ldr	r3, [r7, #8]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	20000e28 	.word	0x20000e28
 8006388:	20000e00 	.word	0x20000e00
 800638c:	20000dc0 	.word	0x20000dc0
 8006390:	20000e08 	.word	0x20000e08
 8006394:	20000930 	.word	0x20000930
 8006398:	2000092c 	.word	0x2000092c
 800639c:	20000e14 	.word	0x20000e14
 80063a0:	20000e10 	.word	0x20000e10
 80063a4:	e000ed04 	.word	0xe000ed04

080063a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80063ae:	4b05      	ldr	r3, [pc, #20]	@ (80063c4 <xTaskGetTickCount+0x1c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80063b4:	687b      	ldr	r3, [r7, #4]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	20000e04 	.word	0x20000e04

080063c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063ce:	f001 fb9b 	bl	8007b08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80063d2:	2300      	movs	r3, #0
 80063d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80063d6:	4b04      	ldr	r3, [pc, #16]	@ (80063e8 <xTaskGetTickCountFromISR+0x20>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063dc:	683b      	ldr	r3, [r7, #0]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000e04 	.word	0x20000e04

080063ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063f2:	2300      	movs	r3, #0
 80063f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063f6:	4b4f      	ldr	r3, [pc, #316]	@ (8006534 <xTaskIncrementTick+0x148>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f040 8090 	bne.w	8006520 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006400:	4b4d      	ldr	r3, [pc, #308]	@ (8006538 <xTaskIncrementTick+0x14c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3301      	adds	r3, #1
 8006406:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006408:	4a4b      	ldr	r2, [pc, #300]	@ (8006538 <xTaskIncrementTick+0x14c>)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d121      	bne.n	8006458 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006414:	4b49      	ldr	r3, [pc, #292]	@ (800653c <xTaskIncrementTick+0x150>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00b      	beq.n	8006436 <xTaskIncrementTick+0x4a>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	603b      	str	r3, [r7, #0]
}
 8006430:	bf00      	nop
 8006432:	bf00      	nop
 8006434:	e7fd      	b.n	8006432 <xTaskIncrementTick+0x46>
 8006436:	4b41      	ldr	r3, [pc, #260]	@ (800653c <xTaskIncrementTick+0x150>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	4b40      	ldr	r3, [pc, #256]	@ (8006540 <xTaskIncrementTick+0x154>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a3e      	ldr	r2, [pc, #248]	@ (800653c <xTaskIncrementTick+0x150>)
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	4a3e      	ldr	r2, [pc, #248]	@ (8006540 <xTaskIncrementTick+0x154>)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	4b3e      	ldr	r3, [pc, #248]	@ (8006544 <xTaskIncrementTick+0x158>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3301      	adds	r3, #1
 8006450:	4a3c      	ldr	r2, [pc, #240]	@ (8006544 <xTaskIncrementTick+0x158>)
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	f000 fae2 	bl	8006a1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006458:	4b3b      	ldr	r3, [pc, #236]	@ (8006548 <xTaskIncrementTick+0x15c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	429a      	cmp	r2, r3
 8006460:	d349      	bcc.n	80064f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006462:	4b36      	ldr	r3, [pc, #216]	@ (800653c <xTaskIncrementTick+0x150>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d104      	bne.n	8006476 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800646c:	4b36      	ldr	r3, [pc, #216]	@ (8006548 <xTaskIncrementTick+0x15c>)
 800646e:	f04f 32ff 	mov.w	r2, #4294967295
 8006472:	601a      	str	r2, [r3, #0]
					break;
 8006474:	e03f      	b.n	80064f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006476:	4b31      	ldr	r3, [pc, #196]	@ (800653c <xTaskIncrementTick+0x150>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	429a      	cmp	r2, r3
 800648c:	d203      	bcs.n	8006496 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800648e:	4a2e      	ldr	r2, [pc, #184]	@ (8006548 <xTaskIncrementTick+0x15c>)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006494:	e02f      	b.n	80064f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	3304      	adds	r3, #4
 800649a:	4618      	mov	r0, r3
 800649c:	f7fe ff86 	bl	80053ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d004      	beq.n	80064b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	3318      	adds	r3, #24
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fe ff7d 	bl	80053ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064b6:	4b25      	ldr	r3, [pc, #148]	@ (800654c <xTaskIncrementTick+0x160>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d903      	bls.n	80064c6 <xTaskIncrementTick+0xda>
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c2:	4a22      	ldr	r2, [pc, #136]	@ (800654c <xTaskIncrementTick+0x160>)
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ca:	4613      	mov	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006550 <xTaskIncrementTick+0x164>)
 80064d4:	441a      	add	r2, r3
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	3304      	adds	r3, #4
 80064da:	4619      	mov	r1, r3
 80064dc:	4610      	mov	r0, r2
 80064de:	f7fe ff08 	bl	80052f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006554 <xTaskIncrementTick+0x168>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d3b8      	bcc.n	8006462 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80064f0:	2301      	movs	r3, #1
 80064f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064f4:	e7b5      	b.n	8006462 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064f6:	4b17      	ldr	r3, [pc, #92]	@ (8006554 <xTaskIncrementTick+0x168>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064fc:	4914      	ldr	r1, [pc, #80]	@ (8006550 <xTaskIncrementTick+0x164>)
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d901      	bls.n	8006512 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800650e:	2301      	movs	r3, #1
 8006510:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006512:	4b11      	ldr	r3, [pc, #68]	@ (8006558 <xTaskIncrementTick+0x16c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d007      	beq.n	800652a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800651a:	2301      	movs	r3, #1
 800651c:	617b      	str	r3, [r7, #20]
 800651e:	e004      	b.n	800652a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006520:	4b0e      	ldr	r3, [pc, #56]	@ (800655c <xTaskIncrementTick+0x170>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3301      	adds	r3, #1
 8006526:	4a0d      	ldr	r2, [pc, #52]	@ (800655c <xTaskIncrementTick+0x170>)
 8006528:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800652a:	697b      	ldr	r3, [r7, #20]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	20000e28 	.word	0x20000e28
 8006538:	20000e04 	.word	0x20000e04
 800653c:	20000db8 	.word	0x20000db8
 8006540:	20000dbc 	.word	0x20000dbc
 8006544:	20000e18 	.word	0x20000e18
 8006548:	20000e20 	.word	0x20000e20
 800654c:	20000e08 	.word	0x20000e08
 8006550:	20000930 	.word	0x20000930
 8006554:	2000092c 	.word	0x2000092c
 8006558:	20000e14 	.word	0x20000e14
 800655c:	20000e10 	.word	0x20000e10

08006560 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006566:	4b2b      	ldr	r3, [pc, #172]	@ (8006614 <vTaskSwitchContext+0xb4>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800656e:	4b2a      	ldr	r3, [pc, #168]	@ (8006618 <vTaskSwitchContext+0xb8>)
 8006570:	2201      	movs	r2, #1
 8006572:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006574:	e047      	b.n	8006606 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006576:	4b28      	ldr	r3, [pc, #160]	@ (8006618 <vTaskSwitchContext+0xb8>)
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800657c:	4b27      	ldr	r3, [pc, #156]	@ (800661c <vTaskSwitchContext+0xbc>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	e011      	b.n	80065a8 <vTaskSwitchContext+0x48>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10b      	bne.n	80065a2 <vTaskSwitchContext+0x42>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	607b      	str	r3, [r7, #4]
}
 800659c:	bf00      	nop
 800659e:	bf00      	nop
 80065a0:	e7fd      	b.n	800659e <vTaskSwitchContext+0x3e>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	491d      	ldr	r1, [pc, #116]	@ (8006620 <vTaskSwitchContext+0xc0>)
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	4613      	mov	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	440b      	add	r3, r1
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0e3      	beq.n	8006584 <vTaskSwitchContext+0x24>
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4a16      	ldr	r2, [pc, #88]	@ (8006620 <vTaskSwitchContext+0xc0>)
 80065c8:	4413      	add	r3, r2
 80065ca:	60bb      	str	r3, [r7, #8]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	605a      	str	r2, [r3, #4]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	3308      	adds	r3, #8
 80065de:	429a      	cmp	r2, r3
 80065e0:	d104      	bne.n	80065ec <vTaskSwitchContext+0x8c>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	605a      	str	r2, [r3, #4]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006624 <vTaskSwitchContext+0xc4>)
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	4a09      	ldr	r2, [pc, #36]	@ (800661c <vTaskSwitchContext+0xbc>)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065fc:	4b09      	ldr	r3, [pc, #36]	@ (8006624 <vTaskSwitchContext+0xc4>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3354      	adds	r3, #84	@ 0x54
 8006602:	4a09      	ldr	r2, [pc, #36]	@ (8006628 <vTaskSwitchContext+0xc8>)
 8006604:	6013      	str	r3, [r2, #0]
}
 8006606:	bf00      	nop
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	20000e28 	.word	0x20000e28
 8006618:	20000e14 	.word	0x20000e14
 800661c:	20000e08 	.word	0x20000e08
 8006620:	20000930 	.word	0x20000930
 8006624:	2000092c 	.word	0x2000092c
 8006628:	20000024 	.word	0x20000024

0800662c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10b      	bne.n	8006654 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	60fb      	str	r3, [r7, #12]
}
 800664e:	bf00      	nop
 8006650:	bf00      	nop
 8006652:	e7fd      	b.n	8006650 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006654:	4b07      	ldr	r3, [pc, #28]	@ (8006674 <vTaskPlaceOnEventList+0x48>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3318      	adds	r3, #24
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7fe fe6c 	bl	800533a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006662:	2101      	movs	r1, #1
 8006664:	6838      	ldr	r0, [r7, #0]
 8006666:	f000 fc8f 	bl	8006f88 <prvAddCurrentTaskToDelayedList>
}
 800666a:	bf00      	nop
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	2000092c 	.word	0x2000092c

08006678 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	617b      	str	r3, [r7, #20]
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	e7fd      	b.n	800669e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066a2:	4b0a      	ldr	r3, [pc, #40]	@ (80066cc <vTaskPlaceOnEventListRestricted+0x54>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3318      	adds	r3, #24
 80066a8:	4619      	mov	r1, r3
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f7fe fe21 	bl	80052f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80066b6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066bc:	6879      	ldr	r1, [r7, #4]
 80066be:	68b8      	ldr	r0, [r7, #8]
 80066c0:	f000 fc62 	bl	8006f88 <prvAddCurrentTaskToDelayedList>
	}
 80066c4:	bf00      	nop
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	2000092c 	.word	0x2000092c

080066d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10b      	bne.n	80066fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	60fb      	str	r3, [r7, #12]
}
 80066f8:	bf00      	nop
 80066fa:	bf00      	nop
 80066fc:	e7fd      	b.n	80066fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	3318      	adds	r3, #24
 8006702:	4618      	mov	r0, r3
 8006704:	f7fe fe52 	bl	80053ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006708:	4b1d      	ldr	r3, [pc, #116]	@ (8006780 <xTaskRemoveFromEventList+0xb0>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d11d      	bne.n	800674c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	3304      	adds	r3, #4
 8006714:	4618      	mov	r0, r3
 8006716:	f7fe fe49 	bl	80053ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800671e:	4b19      	ldr	r3, [pc, #100]	@ (8006784 <xTaskRemoveFromEventList+0xb4>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	429a      	cmp	r2, r3
 8006724:	d903      	bls.n	800672e <xTaskRemoveFromEventList+0x5e>
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672a:	4a16      	ldr	r2, [pc, #88]	@ (8006784 <xTaskRemoveFromEventList+0xb4>)
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4a13      	ldr	r2, [pc, #76]	@ (8006788 <xTaskRemoveFromEventList+0xb8>)
 800673c:	441a      	add	r2, r3
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	3304      	adds	r3, #4
 8006742:	4619      	mov	r1, r3
 8006744:	4610      	mov	r0, r2
 8006746:	f7fe fdd4 	bl	80052f2 <vListInsertEnd>
 800674a:	e005      	b.n	8006758 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	3318      	adds	r3, #24
 8006750:	4619      	mov	r1, r3
 8006752:	480e      	ldr	r0, [pc, #56]	@ (800678c <xTaskRemoveFromEventList+0xbc>)
 8006754:	f7fe fdcd 	bl	80052f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800675c:	4b0c      	ldr	r3, [pc, #48]	@ (8006790 <xTaskRemoveFromEventList+0xc0>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006762:	429a      	cmp	r2, r3
 8006764:	d905      	bls.n	8006772 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006766:	2301      	movs	r3, #1
 8006768:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800676a:	4b0a      	ldr	r3, [pc, #40]	@ (8006794 <xTaskRemoveFromEventList+0xc4>)
 800676c:	2201      	movs	r2, #1
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	e001      	b.n	8006776 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006772:	2300      	movs	r3, #0
 8006774:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006776:	697b      	ldr	r3, [r7, #20]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	20000e28 	.word	0x20000e28
 8006784:	20000e08 	.word	0x20000e08
 8006788:	20000930 	.word	0x20000930
 800678c:	20000dc0 	.word	0x20000dc0
 8006790:	2000092c 	.word	0x2000092c
 8006794:	20000e14 	.word	0x20000e14

08006798 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067a0:	4b06      	ldr	r3, [pc, #24]	@ (80067bc <vTaskInternalSetTimeOutState+0x24>)
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067a8:	4b05      	ldr	r3, [pc, #20]	@ (80067c0 <vTaskInternalSetTimeOutState+0x28>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	605a      	str	r2, [r3, #4]
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	20000e18 	.word	0x20000e18
 80067c0:	20000e04 	.word	0x20000e04

080067c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10b      	bne.n	80067ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	613b      	str	r3, [r7, #16]
}
 80067e6:	bf00      	nop
 80067e8:	bf00      	nop
 80067ea:	e7fd      	b.n	80067e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10b      	bne.n	800680a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	60fb      	str	r3, [r7, #12]
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop
 8006808:	e7fd      	b.n	8006806 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800680a:	f001 f89d 	bl	8007948 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800680e:	4b1d      	ldr	r3, [pc, #116]	@ (8006884 <xTaskCheckForTimeOut+0xc0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006826:	d102      	bne.n	800682e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006828:	2300      	movs	r3, #0
 800682a:	61fb      	str	r3, [r7, #28]
 800682c:	e023      	b.n	8006876 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4b15      	ldr	r3, [pc, #84]	@ (8006888 <xTaskCheckForTimeOut+0xc4>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d007      	beq.n	800684a <xTaskCheckForTimeOut+0x86>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	429a      	cmp	r2, r3
 8006842:	d302      	bcc.n	800684a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006844:	2301      	movs	r3, #1
 8006846:	61fb      	str	r3, [r7, #28]
 8006848:	e015      	b.n	8006876 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	429a      	cmp	r2, r3
 8006852:	d20b      	bcs.n	800686c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	1ad2      	subs	r2, r2, r3
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7ff ff99 	bl	8006798 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006866:	2300      	movs	r3, #0
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	e004      	b.n	8006876 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006872:	2301      	movs	r3, #1
 8006874:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006876:	f001 f899 	bl	80079ac <vPortExitCritical>

	return xReturn;
 800687a:	69fb      	ldr	r3, [r7, #28]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3720      	adds	r7, #32
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	20000e04 	.word	0x20000e04
 8006888:	20000e18 	.word	0x20000e18

0800688c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006890:	4b03      	ldr	r3, [pc, #12]	@ (80068a0 <vTaskMissedYield+0x14>)
 8006892:	2201      	movs	r2, #1
 8006894:	601a      	str	r2, [r3, #0]
}
 8006896:	bf00      	nop
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	20000e14 	.word	0x20000e14

080068a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068ac:	f000 f852 	bl	8006954 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068b0:	4b06      	ldr	r3, [pc, #24]	@ (80068cc <prvIdleTask+0x28>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d9f9      	bls.n	80068ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80068b8:	4b05      	ldr	r3, [pc, #20]	@ (80068d0 <prvIdleTask+0x2c>)
 80068ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068c8:	e7f0      	b.n	80068ac <prvIdleTask+0x8>
 80068ca:	bf00      	nop
 80068cc:	20000930 	.word	0x20000930
 80068d0:	e000ed04 	.word	0xe000ed04

080068d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068da:	2300      	movs	r3, #0
 80068dc:	607b      	str	r3, [r7, #4]
 80068de:	e00c      	b.n	80068fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	4613      	mov	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4a12      	ldr	r2, [pc, #72]	@ (8006934 <prvInitialiseTaskLists+0x60>)
 80068ec:	4413      	add	r3, r2
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fe fcd2 	bl	8005298 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	3301      	adds	r3, #1
 80068f8:	607b      	str	r3, [r7, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b37      	cmp	r3, #55	@ 0x37
 80068fe:	d9ef      	bls.n	80068e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006900:	480d      	ldr	r0, [pc, #52]	@ (8006938 <prvInitialiseTaskLists+0x64>)
 8006902:	f7fe fcc9 	bl	8005298 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006906:	480d      	ldr	r0, [pc, #52]	@ (800693c <prvInitialiseTaskLists+0x68>)
 8006908:	f7fe fcc6 	bl	8005298 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800690c:	480c      	ldr	r0, [pc, #48]	@ (8006940 <prvInitialiseTaskLists+0x6c>)
 800690e:	f7fe fcc3 	bl	8005298 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006912:	480c      	ldr	r0, [pc, #48]	@ (8006944 <prvInitialiseTaskLists+0x70>)
 8006914:	f7fe fcc0 	bl	8005298 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006918:	480b      	ldr	r0, [pc, #44]	@ (8006948 <prvInitialiseTaskLists+0x74>)
 800691a:	f7fe fcbd 	bl	8005298 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800691e:	4b0b      	ldr	r3, [pc, #44]	@ (800694c <prvInitialiseTaskLists+0x78>)
 8006920:	4a05      	ldr	r2, [pc, #20]	@ (8006938 <prvInitialiseTaskLists+0x64>)
 8006922:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006924:	4b0a      	ldr	r3, [pc, #40]	@ (8006950 <prvInitialiseTaskLists+0x7c>)
 8006926:	4a05      	ldr	r2, [pc, #20]	@ (800693c <prvInitialiseTaskLists+0x68>)
 8006928:	601a      	str	r2, [r3, #0]
}
 800692a:	bf00      	nop
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20000930 	.word	0x20000930
 8006938:	20000d90 	.word	0x20000d90
 800693c:	20000da4 	.word	0x20000da4
 8006940:	20000dc0 	.word	0x20000dc0
 8006944:	20000dd4 	.word	0x20000dd4
 8006948:	20000dec 	.word	0x20000dec
 800694c:	20000db8 	.word	0x20000db8
 8006950:	20000dbc 	.word	0x20000dbc

08006954 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800695a:	e019      	b.n	8006990 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800695c:	f000 fff4 	bl	8007948 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006960:	4b10      	ldr	r3, [pc, #64]	@ (80069a4 <prvCheckTasksWaitingTermination+0x50>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3304      	adds	r3, #4
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe fd1d 	bl	80053ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006972:	4b0d      	ldr	r3, [pc, #52]	@ (80069a8 <prvCheckTasksWaitingTermination+0x54>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3b01      	subs	r3, #1
 8006978:	4a0b      	ldr	r2, [pc, #44]	@ (80069a8 <prvCheckTasksWaitingTermination+0x54>)
 800697a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800697c:	4b0b      	ldr	r3, [pc, #44]	@ (80069ac <prvCheckTasksWaitingTermination+0x58>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3b01      	subs	r3, #1
 8006982:	4a0a      	ldr	r2, [pc, #40]	@ (80069ac <prvCheckTasksWaitingTermination+0x58>)
 8006984:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006986:	f001 f811 	bl	80079ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f810 	bl	80069b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006990:	4b06      	ldr	r3, [pc, #24]	@ (80069ac <prvCheckTasksWaitingTermination+0x58>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e1      	bne.n	800695c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20000dd4 	.word	0x20000dd4
 80069a8:	20000e00 	.word	0x20000e00
 80069ac:	20000de8 	.word	0x20000de8

080069b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3354      	adds	r3, #84	@ 0x54
 80069bc:	4618      	mov	r0, r3
 80069be:	f001 fc03 	bl	80081c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d108      	bne.n	80069de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d0:	4618      	mov	r0, r3
 80069d2:	f001 f9a9 	bl	8007d28 <vPortFree>
				vPortFree( pxTCB );
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 f9a6 	bl	8007d28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069dc:	e019      	b.n	8006a12 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d103      	bne.n	80069f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f001 f99d 	bl	8007d28 <vPortFree>
	}
 80069ee:	e010      	b.n	8006a12 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d00b      	beq.n	8006a12 <prvDeleteTCB+0x62>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	60fb      	str	r3, [r7, #12]
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	e7fd      	b.n	8006a0e <prvDeleteTCB+0x5e>
	}
 8006a12:	bf00      	nop
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a22:	4b0c      	ldr	r3, [pc, #48]	@ (8006a54 <prvResetNextTaskUnblockTime+0x38>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d104      	bne.n	8006a36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a58 <prvResetNextTaskUnblockTime+0x3c>)
 8006a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a34:	e008      	b.n	8006a48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a36:	4b07      	ldr	r3, [pc, #28]	@ (8006a54 <prvResetNextTaskUnblockTime+0x38>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	4a04      	ldr	r2, [pc, #16]	@ (8006a58 <prvResetNextTaskUnblockTime+0x3c>)
 8006a46:	6013      	str	r3, [r2, #0]
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	20000db8 	.word	0x20000db8
 8006a58:	20000e20 	.word	0x20000e20

08006a5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a62:	4b0b      	ldr	r3, [pc, #44]	@ (8006a90 <xTaskGetSchedulerState+0x34>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d102      	bne.n	8006a70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	607b      	str	r3, [r7, #4]
 8006a6e:	e008      	b.n	8006a82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a70:	4b08      	ldr	r3, [pc, #32]	@ (8006a94 <xTaskGetSchedulerState+0x38>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d102      	bne.n	8006a7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a78:	2302      	movs	r3, #2
 8006a7a:	607b      	str	r3, [r7, #4]
 8006a7c:	e001      	b.n	8006a82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a82:	687b      	ldr	r3, [r7, #4]
	}
 8006a84:	4618      	mov	r0, r3
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	20000e0c 	.word	0x20000e0c
 8006a94:	20000e28 	.word	0x20000e28

08006a98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d058      	beq.n	8006b60 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006aae:	4b2f      	ldr	r3, [pc, #188]	@ (8006b6c <xTaskPriorityDisinherit+0xd4>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d00b      	beq.n	8006ad0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	60fb      	str	r3, [r7, #12]
}
 8006aca:	bf00      	nop
 8006acc:	bf00      	nop
 8006ace:	e7fd      	b.n	8006acc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10b      	bne.n	8006af0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	60bb      	str	r3, [r7, #8]
}
 8006aea:	bf00      	nop
 8006aec:	bf00      	nop
 8006aee:	e7fd      	b.n	8006aec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af4:	1e5a      	subs	r2, r3, #1
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d02c      	beq.n	8006b60 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d128      	bne.n	8006b60 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	3304      	adds	r3, #4
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe fc4a 	bl	80053ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b24:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b30:	4b0f      	ldr	r3, [pc, #60]	@ (8006b70 <xTaskPriorityDisinherit+0xd8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d903      	bls.n	8006b40 <xTaskPriorityDisinherit+0xa8>
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8006b70 <xTaskPriorityDisinherit+0xd8>)
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4a09      	ldr	r2, [pc, #36]	@ (8006b74 <xTaskPriorityDisinherit+0xdc>)
 8006b4e:	441a      	add	r2, r3
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	3304      	adds	r3, #4
 8006b54:	4619      	mov	r1, r3
 8006b56:	4610      	mov	r0, r2
 8006b58:	f7fe fbcb 	bl	80052f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b60:	697b      	ldr	r3, [r7, #20]
	}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	2000092c 	.word	0x2000092c
 8006b70:	20000e08 	.word	0x20000e08
 8006b74:	20000930 	.word	0x20000930

08006b78 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006b86:	f000 fedf 	bl	8007948 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006b8a:	4b29      	ldr	r3, [pc, #164]	@ (8006c30 <xTaskNotifyWait+0xb8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d01c      	beq.n	8006bd2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006b98:	4b25      	ldr	r3, [pc, #148]	@ (8006c30 <xTaskNotifyWait+0xb8>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	43d2      	mvns	r2, r2
 8006ba4:	400a      	ands	r2, r1
 8006ba6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006baa:	4b21      	ldr	r3, [pc, #132]	@ (8006c30 <xTaskNotifyWait+0xb8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00b      	beq.n	8006bd2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bba:	2101      	movs	r1, #1
 8006bbc:	6838      	ldr	r0, [r7, #0]
 8006bbe:	f000 f9e3 	bl	8006f88 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8006c34 <xTaskNotifyWait+0xbc>)
 8006bc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bc8:	601a      	str	r2, [r3, #0]
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006bd2:	f000 feeb 	bl	80079ac <vPortExitCritical>

		taskENTER_CRITICAL();
 8006bd6:	f000 feb7 	bl	8007948 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d005      	beq.n	8006bec <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006be0:	4b13      	ldr	r3, [pc, #76]	@ (8006c30 <xTaskNotifyWait+0xb8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006bec:	4b10      	ldr	r3, [pc, #64]	@ (8006c30 <xTaskNotifyWait+0xb8>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d002      	beq.n	8006c00 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	e00a      	b.n	8006c16 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006c00:	4b0b      	ldr	r3, [pc, #44]	@ (8006c30 <xTaskNotifyWait+0xb8>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	43d2      	mvns	r2, r2
 8006c0c:	400a      	ands	r2, r1
 8006c0e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8006c12:	2301      	movs	r3, #1
 8006c14:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c16:	4b06      	ldr	r3, [pc, #24]	@ (8006c30 <xTaskNotifyWait+0xb8>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8006c20:	f000 fec4 	bl	80079ac <vPortExitCritical>

		return xReturn;
 8006c24:	697b      	ldr	r3, [r7, #20]
	}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	2000092c 	.word	0x2000092c
 8006c34:	e000ed04 	.word	0xe000ed04

08006c38 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08a      	sub	sp, #40	@ 0x28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	4613      	mov	r3, r2
 8006c46:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10b      	bne.n	8006c6a <xTaskGenericNotify+0x32>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	61bb      	str	r3, [r7, #24]
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop
 8006c68:	e7fd      	b.n	8006c66 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006c6e:	f000 fe6b 	bl	8007948 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d004      	beq.n	8006c82 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006c88:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8006c92:	79fb      	ldrb	r3, [r7, #7]
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d82e      	bhi.n	8006cf6 <xTaskGenericNotify+0xbe>
 8006c98:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca0 <xTaskGenericNotify+0x68>)
 8006c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9e:	bf00      	nop
 8006ca0:	08006d1b 	.word	0x08006d1b
 8006ca4:	08006cb5 	.word	0x08006cb5
 8006ca8:	08006cc7 	.word	0x08006cc7
 8006cac:	08006cd7 	.word	0x08006cd7
 8006cb0:	08006ce1 	.word	0x08006ce1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006cc4:	e02c      	b.n	8006d20 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ccc:	1c5a      	adds	r2, r3, #1
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006cd4:	e024      	b.n	8006d20 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006cde:	e01f      	b.n	8006d20 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006ce0:	7ffb      	ldrb	r3, [r7, #31]
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d004      	beq.n	8006cf0 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006cee:	e017      	b.n	8006d20 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8006cf4:	e014      	b.n	8006d20 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d00:	d00d      	beq.n	8006d1e <xTaskGenericNotify+0xe6>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	617b      	str	r3, [r7, #20]
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop
 8006d18:	e7fd      	b.n	8006d16 <xTaskGenericNotify+0xde>
					break;
 8006d1a:	bf00      	nop
 8006d1c:	e000      	b.n	8006d20 <xTaskGenericNotify+0xe8>

					break;
 8006d1e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006d20:	7ffb      	ldrb	r3, [r7, #31]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d13b      	bne.n	8006d9e <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	3304      	adds	r3, #4
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fe fb3e 	bl	80053ac <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d34:	4b1d      	ldr	r3, [pc, #116]	@ (8006dac <xTaskGenericNotify+0x174>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d903      	bls.n	8006d44 <xTaskGenericNotify+0x10c>
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d40:	4a1a      	ldr	r2, [pc, #104]	@ (8006dac <xTaskGenericNotify+0x174>)
 8006d42:	6013      	str	r3, [r2, #0]
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d48:	4613      	mov	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4a17      	ldr	r2, [pc, #92]	@ (8006db0 <xTaskGenericNotify+0x178>)
 8006d52:	441a      	add	r2, r3
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	3304      	adds	r3, #4
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	f7fe fac9 	bl	80052f2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <xTaskGenericNotify+0x148>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	613b      	str	r3, [r7, #16]
}
 8006d7a:	bf00      	nop
 8006d7c:	bf00      	nop
 8006d7e:	e7fd      	b.n	8006d7c <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d84:	4b0b      	ldr	r3, [pc, #44]	@ (8006db4 <xTaskGenericNotify+0x17c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d907      	bls.n	8006d9e <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006db8 <xTaskGenericNotify+0x180>)
 8006d90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006d9e:	f000 fe05 	bl	80079ac <vPortExitCritical>

		return xReturn;
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3728      	adds	r7, #40	@ 0x28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20000e08 	.word	0x20000e08
 8006db0:	20000930 	.word	0x20000930
 8006db4:	2000092c 	.word	0x2000092c
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08e      	sub	sp, #56	@ 0x38
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	603b      	str	r3, [r7, #0]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10b      	bne.n	8006dee <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006de8:	bf00      	nop
 8006dea:	bf00      	nop
 8006dec:	e7fd      	b.n	8006dea <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dee:	f000 fe8b 	bl	8007b08 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8006df6:	f3ef 8211 	mrs	r2, BASEPRI
 8006dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	623a      	str	r2, [r7, #32]
 8006e0c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006e0e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d004      	beq.n	8006e22 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e24:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006e28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8006e34:	79fb      	ldrb	r3, [r7, #7]
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d82e      	bhi.n	8006e98 <xTaskGenericNotifyFromISR+0xdc>
 8006e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e40 <xTaskGenericNotifyFromISR+0x84>)
 8006e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e40:	08006ebd 	.word	0x08006ebd
 8006e44:	08006e55 	.word	0x08006e55
 8006e48:	08006e67 	.word	0x08006e67
 8006e4c:	08006e77 	.word	0x08006e77
 8006e50:	08006e81 	.word	0x08006e81
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e56:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e60:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006e64:	e02d      	b.n	8006ec2 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006e6c:	1c5a      	adds	r2, r3, #1
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006e74:	e025      	b.n	8006ec2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006e7e:	e020      	b.n	8006ec2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006e80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d004      	beq.n	8006e92 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006e90:	e017      	b.n	8006ec2 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8006e96:	e014      	b.n	8006ec2 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea2:	d00d      	beq.n	8006ec0 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	61bb      	str	r3, [r7, #24]
}
 8006eb6:	bf00      	nop
 8006eb8:	bf00      	nop
 8006eba:	e7fd      	b.n	8006eb8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8006ebc:	bf00      	nop
 8006ebe:	e000      	b.n	8006ec2 <xTaskGenericNotifyFromISR+0x106>
					break;
 8006ec0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d147      	bne.n	8006f5a <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00b      	beq.n	8006eea <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8006ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	617b      	str	r3, [r7, #20]
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	e7fd      	b.n	8006ee6 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eea:	4b21      	ldr	r3, [pc, #132]	@ (8006f70 <xTaskGenericNotifyFromISR+0x1b4>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d11d      	bne.n	8006f2e <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fe fa58 	bl	80053ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f00:	4b1c      	ldr	r3, [pc, #112]	@ (8006f74 <xTaskGenericNotifyFromISR+0x1b8>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d903      	bls.n	8006f10 <xTaskGenericNotifyFromISR+0x154>
 8006f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0c:	4a19      	ldr	r2, [pc, #100]	@ (8006f74 <xTaskGenericNotifyFromISR+0x1b8>)
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f14:	4613      	mov	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4a16      	ldr	r2, [pc, #88]	@ (8006f78 <xTaskGenericNotifyFromISR+0x1bc>)
 8006f1e:	441a      	add	r2, r3
 8006f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f22:	3304      	adds	r3, #4
 8006f24:	4619      	mov	r1, r3
 8006f26:	4610      	mov	r0, r2
 8006f28:	f7fe f9e3 	bl	80052f2 <vListInsertEnd>
 8006f2c:	e005      	b.n	8006f3a <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f30:	3318      	adds	r3, #24
 8006f32:	4619      	mov	r1, r3
 8006f34:	4811      	ldr	r0, [pc, #68]	@ (8006f7c <xTaskGenericNotifyFromISR+0x1c0>)
 8006f36:	f7fe f9dc 	bl	80052f2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f3e:	4b10      	ldr	r3, [pc, #64]	@ (8006f80 <xTaskGenericNotifyFromISR+0x1c4>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d908      	bls.n	8006f5a <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006f48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f50:	2201      	movs	r2, #1
 8006f52:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006f54:	4b0b      	ldr	r3, [pc, #44]	@ (8006f84 <xTaskGenericNotifyFromISR+0x1c8>)
 8006f56:	2201      	movs	r2, #1
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f383 8811 	msr	BASEPRI, r3
}
 8006f64:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3738      	adds	r7, #56	@ 0x38
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	20000e28 	.word	0x20000e28
 8006f74:	20000e08 	.word	0x20000e08
 8006f78:	20000930 	.word	0x20000930
 8006f7c:	20000dc0 	.word	0x20000dc0
 8006f80:	2000092c 	.word	0x2000092c
 8006f84:	20000e14 	.word	0x20000e14

08006f88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f92:	4b21      	ldr	r3, [pc, #132]	@ (8007018 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f98:	4b20      	ldr	r3, [pc, #128]	@ (800701c <prvAddCurrentTaskToDelayedList+0x94>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fe fa04 	bl	80053ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006faa:	d10a      	bne.n	8006fc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d007      	beq.n	8006fc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800701c <prvAddCurrentTaskToDelayedList+0x94>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4819      	ldr	r0, [pc, #100]	@ (8007020 <prvAddCurrentTaskToDelayedList+0x98>)
 8006fbc:	f7fe f999 	bl	80052f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fc0:	e026      	b.n	8007010 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fca:	4b14      	ldr	r3, [pc, #80]	@ (800701c <prvAddCurrentTaskToDelayedList+0x94>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d209      	bcs.n	8006fee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fda:	4b12      	ldr	r3, [pc, #72]	@ (8007024 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	4b0f      	ldr	r3, [pc, #60]	@ (800701c <prvAddCurrentTaskToDelayedList+0x94>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	f7fe f9a7 	bl	800533a <vListInsert>
}
 8006fec:	e010      	b.n	8007010 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fee:	4b0e      	ldr	r3, [pc, #56]	@ (8007028 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800701c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	f7fe f99d 	bl	800533a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007000:	4b0a      	ldr	r3, [pc, #40]	@ (800702c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	429a      	cmp	r2, r3
 8007008:	d202      	bcs.n	8007010 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800700a:	4a08      	ldr	r2, [pc, #32]	@ (800702c <prvAddCurrentTaskToDelayedList+0xa4>)
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	6013      	str	r3, [r2, #0]
}
 8007010:	bf00      	nop
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	20000e04 	.word	0x20000e04
 800701c:	2000092c 	.word	0x2000092c
 8007020:	20000dec 	.word	0x20000dec
 8007024:	20000dbc 	.word	0x20000dbc
 8007028:	20000db8 	.word	0x20000db8
 800702c:	20000e20 	.word	0x20000e20

08007030 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b08a      	sub	sp, #40	@ 0x28
 8007034:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007036:	2300      	movs	r3, #0
 8007038:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800703a:	f000 fb13 	bl	8007664 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800703e:	4b1d      	ldr	r3, [pc, #116]	@ (80070b4 <xTimerCreateTimerTask+0x84>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d021      	beq.n	800708a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007046:	2300      	movs	r3, #0
 8007048:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800704a:	2300      	movs	r3, #0
 800704c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800704e:	1d3a      	adds	r2, r7, #4
 8007050:	f107 0108 	add.w	r1, r7, #8
 8007054:	f107 030c 	add.w	r3, r7, #12
 8007058:	4618      	mov	r0, r3
 800705a:	f7fe f903 	bl	8005264 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	9202      	str	r2, [sp, #8]
 8007066:	9301      	str	r3, [sp, #4]
 8007068:	2302      	movs	r3, #2
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	2300      	movs	r3, #0
 800706e:	460a      	mov	r2, r1
 8007070:	4911      	ldr	r1, [pc, #68]	@ (80070b8 <xTimerCreateTimerTask+0x88>)
 8007072:	4812      	ldr	r0, [pc, #72]	@ (80070bc <xTimerCreateTimerTask+0x8c>)
 8007074:	f7fe febe 	bl	8005df4 <xTaskCreateStatic>
 8007078:	4603      	mov	r3, r0
 800707a:	4a11      	ldr	r2, [pc, #68]	@ (80070c0 <xTimerCreateTimerTask+0x90>)
 800707c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800707e:	4b10      	ldr	r3, [pc, #64]	@ (80070c0 <xTimerCreateTimerTask+0x90>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007086:	2301      	movs	r3, #1
 8007088:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10b      	bne.n	80070a8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	613b      	str	r3, [r7, #16]
}
 80070a2:	bf00      	nop
 80070a4:	bf00      	nop
 80070a6:	e7fd      	b.n	80070a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80070a8:	697b      	ldr	r3, [r7, #20]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000e5c 	.word	0x20000e5c
 80070b8:	080093f4 	.word	0x080093f4
 80070bc:	080071fd 	.word	0x080071fd
 80070c0:	20000e60 	.word	0x20000e60

080070c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b08a      	sub	sp, #40	@ 0x28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10b      	bne.n	80070f4 <xTimerGenericCommand+0x30>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	623b      	str	r3, [r7, #32]
}
 80070ee:	bf00      	nop
 80070f0:	bf00      	nop
 80070f2:	e7fd      	b.n	80070f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80070f4:	4b19      	ldr	r3, [pc, #100]	@ (800715c <xTimerGenericCommand+0x98>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d02a      	beq.n	8007152 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2b05      	cmp	r3, #5
 800710c:	dc18      	bgt.n	8007140 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800710e:	f7ff fca5 	bl	8006a5c <xTaskGetSchedulerState>
 8007112:	4603      	mov	r3, r0
 8007114:	2b02      	cmp	r3, #2
 8007116:	d109      	bne.n	800712c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007118:	4b10      	ldr	r3, [pc, #64]	@ (800715c <xTimerGenericCommand+0x98>)
 800711a:	6818      	ldr	r0, [r3, #0]
 800711c:	f107 0110 	add.w	r1, r7, #16
 8007120:	2300      	movs	r3, #0
 8007122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007124:	f7fe fa76 	bl	8005614 <xQueueGenericSend>
 8007128:	6278      	str	r0, [r7, #36]	@ 0x24
 800712a:	e012      	b.n	8007152 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800712c:	4b0b      	ldr	r3, [pc, #44]	@ (800715c <xTimerGenericCommand+0x98>)
 800712e:	6818      	ldr	r0, [r3, #0]
 8007130:	f107 0110 	add.w	r1, r7, #16
 8007134:	2300      	movs	r3, #0
 8007136:	2200      	movs	r2, #0
 8007138:	f7fe fa6c 	bl	8005614 <xQueueGenericSend>
 800713c:	6278      	str	r0, [r7, #36]	@ 0x24
 800713e:	e008      	b.n	8007152 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007140:	4b06      	ldr	r3, [pc, #24]	@ (800715c <xTimerGenericCommand+0x98>)
 8007142:	6818      	ldr	r0, [r3, #0]
 8007144:	f107 0110 	add.w	r1, r7, #16
 8007148:	2300      	movs	r3, #0
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	f7fe fb64 	bl	8005818 <xQueueGenericSendFromISR>
 8007150:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007154:	4618      	mov	r0, r3
 8007156:	3728      	adds	r7, #40	@ 0x28
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	20000e5c 	.word	0x20000e5c

08007160 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af02      	add	r7, sp, #8
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800716a:	4b23      	ldr	r3, [pc, #140]	@ (80071f8 <prvProcessExpiredTimer+0x98>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	3304      	adds	r3, #4
 8007178:	4618      	mov	r0, r3
 800717a:	f7fe f917 	bl	80053ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007184:	f003 0304 	and.w	r3, r3, #4
 8007188:	2b00      	cmp	r3, #0
 800718a:	d023      	beq.n	80071d4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	699a      	ldr	r2, [r3, #24]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	18d1      	adds	r1, r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	6978      	ldr	r0, [r7, #20]
 800719a:	f000 f8d5 	bl	8007348 <prvInsertTimerInActiveList>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d020      	beq.n	80071e6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071a4:	2300      	movs	r3, #0
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	2300      	movs	r3, #0
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	2100      	movs	r1, #0
 80071ae:	6978      	ldr	r0, [r7, #20]
 80071b0:	f7ff ff88 	bl	80070c4 <xTimerGenericCommand>
 80071b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d114      	bne.n	80071e6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	60fb      	str	r3, [r7, #12]
}
 80071ce:	bf00      	nop
 80071d0:	bf00      	nop
 80071d2:	e7fd      	b.n	80071d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071da:	f023 0301 	bic.w	r3, r3, #1
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	6978      	ldr	r0, [r7, #20]
 80071ec:	4798      	blx	r3
}
 80071ee:	bf00      	nop
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20000e54 	.word	0x20000e54

080071fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007204:	f107 0308 	add.w	r3, r7, #8
 8007208:	4618      	mov	r0, r3
 800720a:	f000 f859 	bl	80072c0 <prvGetNextExpireTime>
 800720e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	4619      	mov	r1, r3
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 f805 	bl	8007224 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800721a:	f000 f8d7 	bl	80073cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800721e:	bf00      	nop
 8007220:	e7f0      	b.n	8007204 <prvTimerTask+0x8>
	...

08007224 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800722e:	f7ff f80f 	bl	8006250 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007232:	f107 0308 	add.w	r3, r7, #8
 8007236:	4618      	mov	r0, r3
 8007238:	f000 f866 	bl	8007308 <prvSampleTimeNow>
 800723c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d130      	bne.n	80072a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10a      	bne.n	8007260 <prvProcessTimerOrBlockTask+0x3c>
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	429a      	cmp	r2, r3
 8007250:	d806      	bhi.n	8007260 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007252:	f7ff f80b 	bl	800626c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007256:	68f9      	ldr	r1, [r7, #12]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff ff81 	bl	8007160 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800725e:	e024      	b.n	80072aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d008      	beq.n	8007278 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007266:	4b13      	ldr	r3, [pc, #76]	@ (80072b4 <prvProcessTimerOrBlockTask+0x90>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <prvProcessTimerOrBlockTask+0x50>
 8007270:	2301      	movs	r3, #1
 8007272:	e000      	b.n	8007276 <prvProcessTimerOrBlockTask+0x52>
 8007274:	2300      	movs	r3, #0
 8007276:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007278:	4b0f      	ldr	r3, [pc, #60]	@ (80072b8 <prvProcessTimerOrBlockTask+0x94>)
 800727a:	6818      	ldr	r0, [r3, #0]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	4619      	mov	r1, r3
 8007286:	f7fe fd81 	bl	8005d8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800728a:	f7fe ffef 	bl	800626c <xTaskResumeAll>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10a      	bne.n	80072aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007294:	4b09      	ldr	r3, [pc, #36]	@ (80072bc <prvProcessTimerOrBlockTask+0x98>)
 8007296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	f3bf 8f6f 	isb	sy
}
 80072a4:	e001      	b.n	80072aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072a6:	f7fe ffe1 	bl	800626c <xTaskResumeAll>
}
 80072aa:	bf00      	nop
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	20000e58 	.word	0x20000e58
 80072b8:	20000e5c 	.word	0x20000e5c
 80072bc:	e000ed04 	.word	0xe000ed04

080072c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007304 <prvGetNextExpireTime+0x44>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <prvGetNextExpireTime+0x16>
 80072d2:	2201      	movs	r2, #1
 80072d4:	e000      	b.n	80072d8 <prvGetNextExpireTime+0x18>
 80072d6:	2200      	movs	r2, #0
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d105      	bne.n	80072f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072e4:	4b07      	ldr	r3, [pc, #28]	@ (8007304 <prvGetNextExpireTime+0x44>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	e001      	b.n	80072f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072f4:	68fb      	ldr	r3, [r7, #12]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	20000e54 	.word	0x20000e54

08007308 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007310:	f7ff f84a 	bl	80063a8 <xTaskGetTickCount>
 8007314:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007316:	4b0b      	ldr	r3, [pc, #44]	@ (8007344 <prvSampleTimeNow+0x3c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	429a      	cmp	r2, r3
 800731e:	d205      	bcs.n	800732c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007320:	f000 f93a 	bl	8007598 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	e002      	b.n	8007332 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007332:	4a04      	ldr	r2, [pc, #16]	@ (8007344 <prvSampleTimeNow+0x3c>)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007338:	68fb      	ldr	r3, [r7, #12]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20000e64 	.word	0x20000e64

08007348 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007356:	2300      	movs	r3, #0
 8007358:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	429a      	cmp	r2, r3
 800736c:	d812      	bhi.n	8007394 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	1ad2      	subs	r2, r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	429a      	cmp	r2, r3
 800737a:	d302      	bcc.n	8007382 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800737c:	2301      	movs	r3, #1
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	e01b      	b.n	80073ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007382:	4b10      	ldr	r3, [pc, #64]	@ (80073c4 <prvInsertTimerInActiveList+0x7c>)
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3304      	adds	r3, #4
 800738a:	4619      	mov	r1, r3
 800738c:	4610      	mov	r0, r2
 800738e:	f7fd ffd4 	bl	800533a <vListInsert>
 8007392:	e012      	b.n	80073ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	429a      	cmp	r2, r3
 800739a:	d206      	bcs.n	80073aa <prvInsertTimerInActiveList+0x62>
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d302      	bcc.n	80073aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	e007      	b.n	80073ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073aa:	4b07      	ldr	r3, [pc, #28]	@ (80073c8 <prvInsertTimerInActiveList+0x80>)
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3304      	adds	r3, #4
 80073b2:	4619      	mov	r1, r3
 80073b4:	4610      	mov	r0, r2
 80073b6:	f7fd ffc0 	bl	800533a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073ba:	697b      	ldr	r3, [r7, #20]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3718      	adds	r7, #24
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	20000e58 	.word	0x20000e58
 80073c8:	20000e54 	.word	0x20000e54

080073cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08e      	sub	sp, #56	@ 0x38
 80073d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073d2:	e0ce      	b.n	8007572 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	da19      	bge.n	800740e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80073da:	1d3b      	adds	r3, r7, #4
 80073dc:	3304      	adds	r3, #4
 80073de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80073e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10b      	bne.n	80073fe <prvProcessReceivedCommands+0x32>
	__asm volatile
 80073e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	61fb      	str	r3, [r7, #28]
}
 80073f8:	bf00      	nop
 80073fa:	bf00      	nop
 80073fc:	e7fd      	b.n	80073fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007404:	6850      	ldr	r0, [r2, #4]
 8007406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007408:	6892      	ldr	r2, [r2, #8]
 800740a:	4611      	mov	r1, r2
 800740c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f2c0 80ae 	blt.w	8007572 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800741a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d004      	beq.n	800742c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007424:	3304      	adds	r3, #4
 8007426:	4618      	mov	r0, r3
 8007428:	f7fd ffc0 	bl	80053ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800742c:	463b      	mov	r3, r7
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff ff6a 	bl	8007308 <prvSampleTimeNow>
 8007434:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b09      	cmp	r3, #9
 800743a:	f200 8097 	bhi.w	800756c <prvProcessReceivedCommands+0x1a0>
 800743e:	a201      	add	r2, pc, #4	@ (adr r2, 8007444 <prvProcessReceivedCommands+0x78>)
 8007440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007444:	0800746d 	.word	0x0800746d
 8007448:	0800746d 	.word	0x0800746d
 800744c:	0800746d 	.word	0x0800746d
 8007450:	080074e3 	.word	0x080074e3
 8007454:	080074f7 	.word	0x080074f7
 8007458:	08007543 	.word	0x08007543
 800745c:	0800746d 	.word	0x0800746d
 8007460:	0800746d 	.word	0x0800746d
 8007464:	080074e3 	.word	0x080074e3
 8007468:	080074f7 	.word	0x080074f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800746c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007472:	f043 0301 	orr.w	r3, r3, #1
 8007476:	b2da      	uxtb	r2, r3
 8007478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	18d1      	adds	r1, r2, r3
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800748a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800748c:	f7ff ff5c 	bl	8007348 <prvInsertTimerInActiveList>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d06c      	beq.n	8007570 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800749c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800749e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d061      	beq.n	8007570 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	441a      	add	r2, r3
 80074b4:	2300      	movs	r3, #0
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	2300      	movs	r3, #0
 80074ba:	2100      	movs	r1, #0
 80074bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074be:	f7ff fe01 	bl	80070c4 <xTimerGenericCommand>
 80074c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d152      	bne.n	8007570 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	61bb      	str	r3, [r7, #24]
}
 80074dc:	bf00      	nop
 80074de:	bf00      	nop
 80074e0:	e7fd      	b.n	80074de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074e8:	f023 0301 	bic.w	r3, r3, #1
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80074f4:	e03d      	b.n	8007572 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074fc:	f043 0301 	orr.w	r3, r3, #1
 8007500:	b2da      	uxtb	r2, r3
 8007502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007504:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800750e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10b      	bne.n	800752e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	617b      	str	r3, [r7, #20]
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	e7fd      	b.n	800752a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800752e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007530:	699a      	ldr	r2, [r3, #24]
 8007532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007534:	18d1      	adds	r1, r2, r3
 8007536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800753a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800753c:	f7ff ff04 	bl	8007348 <prvInsertTimerInActiveList>
					break;
 8007540:	e017      	b.n	8007572 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007544:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d103      	bne.n	8007558 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007552:	f000 fbe9 	bl	8007d28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007556:	e00c      	b.n	8007572 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800755e:	f023 0301 	bic.w	r3, r3, #1
 8007562:	b2da      	uxtb	r2, r3
 8007564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007566:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800756a:	e002      	b.n	8007572 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800756c:	bf00      	nop
 800756e:	e000      	b.n	8007572 <prvProcessReceivedCommands+0x1a6>
					break;
 8007570:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007572:	4b08      	ldr	r3, [pc, #32]	@ (8007594 <prvProcessReceivedCommands+0x1c8>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	1d39      	adds	r1, r7, #4
 8007578:	2200      	movs	r2, #0
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe f9ea 	bl	8005954 <xQueueReceive>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	f47f af26 	bne.w	80073d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	3730      	adds	r7, #48	@ 0x30
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000e5c 	.word	0x20000e5c

08007598 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800759e:	e049      	b.n	8007634 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075a0:	4b2e      	ldr	r3, [pc, #184]	@ (800765c <prvSwitchTimerLists+0xc4>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075aa:	4b2c      	ldr	r3, [pc, #176]	@ (800765c <prvSwitchTimerLists+0xc4>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3304      	adds	r3, #4
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fd fef7 	bl	80053ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075cc:	f003 0304 	and.w	r3, r3, #4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d02f      	beq.n	8007634 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	4413      	add	r3, r2
 80075dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d90e      	bls.n	8007604 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075f2:	4b1a      	ldr	r3, [pc, #104]	@ (800765c <prvSwitchTimerLists+0xc4>)
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3304      	adds	r3, #4
 80075fa:	4619      	mov	r1, r3
 80075fc:	4610      	mov	r0, r2
 80075fe:	f7fd fe9c 	bl	800533a <vListInsert>
 8007602:	e017      	b.n	8007634 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007604:	2300      	movs	r3, #0
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	2300      	movs	r3, #0
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	2100      	movs	r1, #0
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f7ff fd58 	bl	80070c4 <xTimerGenericCommand>
 8007614:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10b      	bne.n	8007634 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	603b      	str	r3, [r7, #0]
}
 800762e:	bf00      	nop
 8007630:	bf00      	nop
 8007632:	e7fd      	b.n	8007630 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007634:	4b09      	ldr	r3, [pc, #36]	@ (800765c <prvSwitchTimerLists+0xc4>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1b0      	bne.n	80075a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800763e:	4b07      	ldr	r3, [pc, #28]	@ (800765c <prvSwitchTimerLists+0xc4>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007644:	4b06      	ldr	r3, [pc, #24]	@ (8007660 <prvSwitchTimerLists+0xc8>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a04      	ldr	r2, [pc, #16]	@ (800765c <prvSwitchTimerLists+0xc4>)
 800764a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800764c:	4a04      	ldr	r2, [pc, #16]	@ (8007660 <prvSwitchTimerLists+0xc8>)
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	6013      	str	r3, [r2, #0]
}
 8007652:	bf00      	nop
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	20000e54 	.word	0x20000e54
 8007660:	20000e58 	.word	0x20000e58

08007664 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800766a:	f000 f96d 	bl	8007948 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800766e:	4b15      	ldr	r3, [pc, #84]	@ (80076c4 <prvCheckForValidListAndQueue+0x60>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d120      	bne.n	80076b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007676:	4814      	ldr	r0, [pc, #80]	@ (80076c8 <prvCheckForValidListAndQueue+0x64>)
 8007678:	f7fd fe0e 	bl	8005298 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800767c:	4813      	ldr	r0, [pc, #76]	@ (80076cc <prvCheckForValidListAndQueue+0x68>)
 800767e:	f7fd fe0b 	bl	8005298 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007682:	4b13      	ldr	r3, [pc, #76]	@ (80076d0 <prvCheckForValidListAndQueue+0x6c>)
 8007684:	4a10      	ldr	r2, [pc, #64]	@ (80076c8 <prvCheckForValidListAndQueue+0x64>)
 8007686:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007688:	4b12      	ldr	r3, [pc, #72]	@ (80076d4 <prvCheckForValidListAndQueue+0x70>)
 800768a:	4a10      	ldr	r2, [pc, #64]	@ (80076cc <prvCheckForValidListAndQueue+0x68>)
 800768c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800768e:	2300      	movs	r3, #0
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	4b11      	ldr	r3, [pc, #68]	@ (80076d8 <prvCheckForValidListAndQueue+0x74>)
 8007694:	4a11      	ldr	r2, [pc, #68]	@ (80076dc <prvCheckForValidListAndQueue+0x78>)
 8007696:	2110      	movs	r1, #16
 8007698:	200a      	movs	r0, #10
 800769a:	f7fd ff1b 	bl	80054d4 <xQueueGenericCreateStatic>
 800769e:	4603      	mov	r3, r0
 80076a0:	4a08      	ldr	r2, [pc, #32]	@ (80076c4 <prvCheckForValidListAndQueue+0x60>)
 80076a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076a4:	4b07      	ldr	r3, [pc, #28]	@ (80076c4 <prvCheckForValidListAndQueue+0x60>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d005      	beq.n	80076b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076ac:	4b05      	ldr	r3, [pc, #20]	@ (80076c4 <prvCheckForValidListAndQueue+0x60>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	490b      	ldr	r1, [pc, #44]	@ (80076e0 <prvCheckForValidListAndQueue+0x7c>)
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fe fb40 	bl	8005d38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076b8:	f000 f978 	bl	80079ac <vPortExitCritical>
}
 80076bc:	bf00      	nop
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	20000e5c 	.word	0x20000e5c
 80076c8:	20000e2c 	.word	0x20000e2c
 80076cc:	20000e40 	.word	0x20000e40
 80076d0:	20000e54 	.word	0x20000e54
 80076d4:	20000e58 	.word	0x20000e58
 80076d8:	20000f08 	.word	0x20000f08
 80076dc:	20000e68 	.word	0x20000e68
 80076e0:	080093fc 	.word	0x080093fc

080076e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3b04      	subs	r3, #4
 80076f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80076fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3b04      	subs	r3, #4
 8007702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f023 0201 	bic.w	r2, r3, #1
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	3b04      	subs	r3, #4
 8007712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007714:	4a0c      	ldr	r2, [pc, #48]	@ (8007748 <pxPortInitialiseStack+0x64>)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3b14      	subs	r3, #20
 800771e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3b04      	subs	r3, #4
 800772a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f06f 0202 	mvn.w	r2, #2
 8007732:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	3b20      	subs	r3, #32
 8007738:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800773a:	68fb      	ldr	r3, [r7, #12]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	0800774d 	.word	0x0800774d

0800774c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007752:	2300      	movs	r3, #0
 8007754:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007756:	4b13      	ldr	r3, [pc, #76]	@ (80077a4 <prvTaskExitError+0x58>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775e:	d00b      	beq.n	8007778 <prvTaskExitError+0x2c>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	60fb      	str	r3, [r7, #12]
}
 8007772:	bf00      	nop
 8007774:	bf00      	nop
 8007776:	e7fd      	b.n	8007774 <prvTaskExitError+0x28>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	60bb      	str	r3, [r7, #8]
}
 800778a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800778c:	bf00      	nop
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0fc      	beq.n	800778e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20000014 	.word	0x20000014
	...

080077b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077b0:	4b07      	ldr	r3, [pc, #28]	@ (80077d0 <pxCurrentTCBConst2>)
 80077b2:	6819      	ldr	r1, [r3, #0]
 80077b4:	6808      	ldr	r0, [r1, #0]
 80077b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ba:	f380 8809 	msr	PSP, r0
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f04f 0000 	mov.w	r0, #0
 80077c6:	f380 8811 	msr	BASEPRI, r0
 80077ca:	4770      	bx	lr
 80077cc:	f3af 8000 	nop.w

080077d0 <pxCurrentTCBConst2>:
 80077d0:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop

080077d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077d8:	4808      	ldr	r0, [pc, #32]	@ (80077fc <prvPortStartFirstTask+0x24>)
 80077da:	6800      	ldr	r0, [r0, #0]
 80077dc:	6800      	ldr	r0, [r0, #0]
 80077de:	f380 8808 	msr	MSP, r0
 80077e2:	f04f 0000 	mov.w	r0, #0
 80077e6:	f380 8814 	msr	CONTROL, r0
 80077ea:	b662      	cpsie	i
 80077ec:	b661      	cpsie	f
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	df00      	svc	0
 80077f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077fa:	bf00      	nop
 80077fc:	e000ed08 	.word	0xe000ed08

08007800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007806:	4b47      	ldr	r3, [pc, #284]	@ (8007924 <xPortStartScheduler+0x124>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a47      	ldr	r2, [pc, #284]	@ (8007928 <xPortStartScheduler+0x128>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d10b      	bne.n	8007828 <xPortStartScheduler+0x28>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	613b      	str	r3, [r7, #16]
}
 8007822:	bf00      	nop
 8007824:	bf00      	nop
 8007826:	e7fd      	b.n	8007824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007828:	4b3e      	ldr	r3, [pc, #248]	@ (8007924 <xPortStartScheduler+0x124>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a3f      	ldr	r2, [pc, #252]	@ (800792c <xPortStartScheduler+0x12c>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d10b      	bne.n	800784a <xPortStartScheduler+0x4a>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	60fb      	str	r3, [r7, #12]
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop
 8007848:	e7fd      	b.n	8007846 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800784a:	4b39      	ldr	r3, [pc, #228]	@ (8007930 <xPortStartScheduler+0x130>)
 800784c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	22ff      	movs	r2, #255	@ 0xff
 800785a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	b2db      	uxtb	r3, r3
 8007862:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800786c:	b2da      	uxtb	r2, r3
 800786e:	4b31      	ldr	r3, [pc, #196]	@ (8007934 <xPortStartScheduler+0x134>)
 8007870:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007872:	4b31      	ldr	r3, [pc, #196]	@ (8007938 <xPortStartScheduler+0x138>)
 8007874:	2207      	movs	r2, #7
 8007876:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007878:	e009      	b.n	800788e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800787a:	4b2f      	ldr	r3, [pc, #188]	@ (8007938 <xPortStartScheduler+0x138>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3b01      	subs	r3, #1
 8007880:	4a2d      	ldr	r2, [pc, #180]	@ (8007938 <xPortStartScheduler+0x138>)
 8007882:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007884:	78fb      	ldrb	r3, [r7, #3]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	b2db      	uxtb	r3, r3
 800788c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800788e:	78fb      	ldrb	r3, [r7, #3]
 8007890:	b2db      	uxtb	r3, r3
 8007892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007896:	2b80      	cmp	r3, #128	@ 0x80
 8007898:	d0ef      	beq.n	800787a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800789a:	4b27      	ldr	r3, [pc, #156]	@ (8007938 <xPortStartScheduler+0x138>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f1c3 0307 	rsb	r3, r3, #7
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d00b      	beq.n	80078be <xPortStartScheduler+0xbe>
	__asm volatile
 80078a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	60bb      	str	r3, [r7, #8]
}
 80078b8:	bf00      	nop
 80078ba:	bf00      	nop
 80078bc:	e7fd      	b.n	80078ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078be:	4b1e      	ldr	r3, [pc, #120]	@ (8007938 <xPortStartScheduler+0x138>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	021b      	lsls	r3, r3, #8
 80078c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007938 <xPortStartScheduler+0x138>)
 80078c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007938 <xPortStartScheduler+0x138>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078d0:	4a19      	ldr	r2, [pc, #100]	@ (8007938 <xPortStartScheduler+0x138>)
 80078d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078dc:	4b17      	ldr	r3, [pc, #92]	@ (800793c <xPortStartScheduler+0x13c>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a16      	ldr	r2, [pc, #88]	@ (800793c <xPortStartScheduler+0x13c>)
 80078e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80078e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078e8:	4b14      	ldr	r3, [pc, #80]	@ (800793c <xPortStartScheduler+0x13c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a13      	ldr	r2, [pc, #76]	@ (800793c <xPortStartScheduler+0x13c>)
 80078ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80078f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078f4:	f000 f8da 	bl	8007aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078f8:	4b11      	ldr	r3, [pc, #68]	@ (8007940 <xPortStartScheduler+0x140>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078fe:	f000 f8f9 	bl	8007af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007902:	4b10      	ldr	r3, [pc, #64]	@ (8007944 <xPortStartScheduler+0x144>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a0f      	ldr	r2, [pc, #60]	@ (8007944 <xPortStartScheduler+0x144>)
 8007908:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800790c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800790e:	f7ff ff63 	bl	80077d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007912:	f7fe fe25 	bl	8006560 <vTaskSwitchContext>
	prvTaskExitError();
 8007916:	f7ff ff19 	bl	800774c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3718      	adds	r7, #24
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	e000ed00 	.word	0xe000ed00
 8007928:	410fc271 	.word	0x410fc271
 800792c:	410fc270 	.word	0x410fc270
 8007930:	e000e400 	.word	0xe000e400
 8007934:	20000f58 	.word	0x20000f58
 8007938:	20000f5c 	.word	0x20000f5c
 800793c:	e000ed20 	.word	0xe000ed20
 8007940:	20000014 	.word	0x20000014
 8007944:	e000ef34 	.word	0xe000ef34

08007948 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	607b      	str	r3, [r7, #4]
}
 8007960:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007962:	4b10      	ldr	r3, [pc, #64]	@ (80079a4 <vPortEnterCritical+0x5c>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3301      	adds	r3, #1
 8007968:	4a0e      	ldr	r2, [pc, #56]	@ (80079a4 <vPortEnterCritical+0x5c>)
 800796a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800796c:	4b0d      	ldr	r3, [pc, #52]	@ (80079a4 <vPortEnterCritical+0x5c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d110      	bne.n	8007996 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007974:	4b0c      	ldr	r3, [pc, #48]	@ (80079a8 <vPortEnterCritical+0x60>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00b      	beq.n	8007996 <vPortEnterCritical+0x4e>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	603b      	str	r3, [r7, #0]
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop
 8007994:	e7fd      	b.n	8007992 <vPortEnterCritical+0x4a>
	}
}
 8007996:	bf00      	nop
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	20000014 	.word	0x20000014
 80079a8:	e000ed04 	.word	0xe000ed04

080079ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079b2:	4b12      	ldr	r3, [pc, #72]	@ (80079fc <vPortExitCritical+0x50>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10b      	bne.n	80079d2 <vPortExitCritical+0x26>
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	607b      	str	r3, [r7, #4]
}
 80079cc:	bf00      	nop
 80079ce:	bf00      	nop
 80079d0:	e7fd      	b.n	80079ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079d2:	4b0a      	ldr	r3, [pc, #40]	@ (80079fc <vPortExitCritical+0x50>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	4a08      	ldr	r2, [pc, #32]	@ (80079fc <vPortExitCritical+0x50>)
 80079da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079dc:	4b07      	ldr	r3, [pc, #28]	@ (80079fc <vPortExitCritical+0x50>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d105      	bne.n	80079f0 <vPortExitCritical+0x44>
 80079e4:	2300      	movs	r3, #0
 80079e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	f383 8811 	msr	BASEPRI, r3
}
 80079ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	20000014 	.word	0x20000014

08007a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a00:	f3ef 8009 	mrs	r0, PSP
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	4b15      	ldr	r3, [pc, #84]	@ (8007a60 <pxCurrentTCBConst>)
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	f01e 0f10 	tst.w	lr, #16
 8007a10:	bf08      	it	eq
 8007a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1a:	6010      	str	r0, [r2, #0]
 8007a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a24:	f380 8811 	msr	BASEPRI, r0
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f7fe fd96 	bl	8006560 <vTaskSwitchContext>
 8007a34:	f04f 0000 	mov.w	r0, #0
 8007a38:	f380 8811 	msr	BASEPRI, r0
 8007a3c:	bc09      	pop	{r0, r3}
 8007a3e:	6819      	ldr	r1, [r3, #0]
 8007a40:	6808      	ldr	r0, [r1, #0]
 8007a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a46:	f01e 0f10 	tst.w	lr, #16
 8007a4a:	bf08      	it	eq
 8007a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a50:	f380 8809 	msr	PSP, r0
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	f3af 8000 	nop.w

08007a60 <pxCurrentTCBConst>:
 8007a60:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop

08007a68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	607b      	str	r3, [r7, #4]
}
 8007a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a82:	f7fe fcb3 	bl	80063ec <xTaskIncrementTick>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a8c:	4b06      	ldr	r3, [pc, #24]	@ (8007aa8 <xPortSysTickHandler+0x40>)
 8007a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	2300      	movs	r3, #0
 8007a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f383 8811 	msr	BASEPRI, r3
}
 8007a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007aa0:	bf00      	nop
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	e000ed04 	.word	0xe000ed04

08007aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae0 <vPortSetupTimerInterrupt+0x34>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae4 <vPortSetupTimerInterrupt+0x38>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007abc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae8 <vPortSetupTimerInterrupt+0x3c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8007aec <vPortSetupTimerInterrupt+0x40>)
 8007ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac6:	099b      	lsrs	r3, r3, #6
 8007ac8:	4a09      	ldr	r2, [pc, #36]	@ (8007af0 <vPortSetupTimerInterrupt+0x44>)
 8007aca:	3b01      	subs	r3, #1
 8007acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ace:	4b04      	ldr	r3, [pc, #16]	@ (8007ae0 <vPortSetupTimerInterrupt+0x34>)
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	601a      	str	r2, [r3, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	e000e010 	.word	0xe000e010
 8007ae4:	e000e018 	.word	0xe000e018
 8007ae8:	20000008 	.word	0x20000008
 8007aec:	10624dd3 	.word	0x10624dd3
 8007af0:	e000e014 	.word	0xe000e014

08007af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007af4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007b04 <vPortEnableVFP+0x10>
 8007af8:	6801      	ldr	r1, [r0, #0]
 8007afa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007afe:	6001      	str	r1, [r0, #0]
 8007b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b02:	bf00      	nop
 8007b04:	e000ed88 	.word	0xe000ed88

08007b08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b0e:	f3ef 8305 	mrs	r3, IPSR
 8007b12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b0f      	cmp	r3, #15
 8007b18:	d915      	bls.n	8007b46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b1a:	4a18      	ldr	r2, [pc, #96]	@ (8007b7c <vPortValidateInterruptPriority+0x74>)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4413      	add	r3, r2
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b24:	4b16      	ldr	r3, [pc, #88]	@ (8007b80 <vPortValidateInterruptPriority+0x78>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	7afa      	ldrb	r2, [r7, #11]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d20b      	bcs.n	8007b46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	607b      	str	r3, [r7, #4]
}
 8007b40:	bf00      	nop
 8007b42:	bf00      	nop
 8007b44:	e7fd      	b.n	8007b42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b46:	4b0f      	ldr	r3, [pc, #60]	@ (8007b84 <vPortValidateInterruptPriority+0x7c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b88 <vPortValidateInterruptPriority+0x80>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d90b      	bls.n	8007b6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	603b      	str	r3, [r7, #0]
}
 8007b68:	bf00      	nop
 8007b6a:	bf00      	nop
 8007b6c:	e7fd      	b.n	8007b6a <vPortValidateInterruptPriority+0x62>
	}
 8007b6e:	bf00      	nop
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	e000e3f0 	.word	0xe000e3f0
 8007b80:	20000f58 	.word	0x20000f58
 8007b84:	e000ed0c 	.word	0xe000ed0c
 8007b88:	20000f5c 	.word	0x20000f5c

08007b8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08a      	sub	sp, #40	@ 0x28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b94:	2300      	movs	r3, #0
 8007b96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b98:	f7fe fb5a 	bl	8006250 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b9c:	4b5c      	ldr	r3, [pc, #368]	@ (8007d10 <pvPortMalloc+0x184>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ba4:	f000 f924 	bl	8007df0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ba8:	4b5a      	ldr	r3, [pc, #360]	@ (8007d14 <pvPortMalloc+0x188>)
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f040 8095 	bne.w	8007ce0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d01e      	beq.n	8007bfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007bbc:	2208      	movs	r2, #8
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d015      	beq.n	8007bfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f023 0307 	bic.w	r3, r3, #7
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f003 0307 	and.w	r3, r3, #7
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00b      	beq.n	8007bfa <pvPortMalloc+0x6e>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	617b      	str	r3, [r7, #20]
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop
 8007bf8:	e7fd      	b.n	8007bf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d06f      	beq.n	8007ce0 <pvPortMalloc+0x154>
 8007c00:	4b45      	ldr	r3, [pc, #276]	@ (8007d18 <pvPortMalloc+0x18c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d86a      	bhi.n	8007ce0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c0a:	4b44      	ldr	r3, [pc, #272]	@ (8007d1c <pvPortMalloc+0x190>)
 8007c0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c0e:	4b43      	ldr	r3, [pc, #268]	@ (8007d1c <pvPortMalloc+0x190>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c14:	e004      	b.n	8007c20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d903      	bls.n	8007c32 <pvPortMalloc+0xa6>
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1f1      	bne.n	8007c16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c32:	4b37      	ldr	r3, [pc, #220]	@ (8007d10 <pvPortMalloc+0x184>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d051      	beq.n	8007ce0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2208      	movs	r2, #8
 8007c42:	4413      	add	r3, r2
 8007c44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	1ad2      	subs	r2, r2, r3
 8007c56:	2308      	movs	r3, #8
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d920      	bls.n	8007ca0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4413      	add	r3, r2
 8007c64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	f003 0307 	and.w	r3, r3, #7
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00b      	beq.n	8007c88 <pvPortMalloc+0xfc>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	613b      	str	r3, [r7, #16]
}
 8007c82:	bf00      	nop
 8007c84:	bf00      	nop
 8007c86:	e7fd      	b.n	8007c84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	1ad2      	subs	r2, r2, r3
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c9a:	69b8      	ldr	r0, [r7, #24]
 8007c9c:	f000 f90a 	bl	8007eb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8007d18 <pvPortMalloc+0x18c>)
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	4a1b      	ldr	r2, [pc, #108]	@ (8007d18 <pvPortMalloc+0x18c>)
 8007cac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007cae:	4b1a      	ldr	r3, [pc, #104]	@ (8007d18 <pvPortMalloc+0x18c>)
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8007d20 <pvPortMalloc+0x194>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d203      	bcs.n	8007cc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cba:	4b17      	ldr	r3, [pc, #92]	@ (8007d18 <pvPortMalloc+0x18c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a18      	ldr	r2, [pc, #96]	@ (8007d20 <pvPortMalloc+0x194>)
 8007cc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	4b13      	ldr	r3, [pc, #76]	@ (8007d14 <pvPortMalloc+0x188>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cd6:	4b13      	ldr	r3, [pc, #76]	@ (8007d24 <pvPortMalloc+0x198>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	4a11      	ldr	r2, [pc, #68]	@ (8007d24 <pvPortMalloc+0x198>)
 8007cde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ce0:	f7fe fac4 	bl	800626c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00b      	beq.n	8007d06 <pvPortMalloc+0x17a>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	60fb      	str	r3, [r7, #12]
}
 8007d00:	bf00      	nop
 8007d02:	bf00      	nop
 8007d04:	e7fd      	b.n	8007d02 <pvPortMalloc+0x176>
	return pvReturn;
 8007d06:	69fb      	ldr	r3, [r7, #28]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3728      	adds	r7, #40	@ 0x28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	20004b68 	.word	0x20004b68
 8007d14:	20004b7c 	.word	0x20004b7c
 8007d18:	20004b6c 	.word	0x20004b6c
 8007d1c:	20004b60 	.word	0x20004b60
 8007d20:	20004b70 	.word	0x20004b70
 8007d24:	20004b74 	.word	0x20004b74

08007d28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d04f      	beq.n	8007dda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d3a:	2308      	movs	r3, #8
 8007d3c:	425b      	negs	r3, r3
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	4413      	add	r3, r2
 8007d42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	4b25      	ldr	r3, [pc, #148]	@ (8007de4 <vPortFree+0xbc>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4013      	ands	r3, r2
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10b      	bne.n	8007d6e <vPortFree+0x46>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	60fb      	str	r3, [r7, #12]
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	e7fd      	b.n	8007d6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00b      	beq.n	8007d8e <vPortFree+0x66>
	__asm volatile
 8007d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	60bb      	str	r3, [r7, #8]
}
 8007d88:	bf00      	nop
 8007d8a:	bf00      	nop
 8007d8c:	e7fd      	b.n	8007d8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	4b14      	ldr	r3, [pc, #80]	@ (8007de4 <vPortFree+0xbc>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4013      	ands	r3, r2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d01e      	beq.n	8007dda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d11a      	bne.n	8007dda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	4b0e      	ldr	r3, [pc, #56]	@ (8007de4 <vPortFree+0xbc>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	43db      	mvns	r3, r3
 8007dae:	401a      	ands	r2, r3
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007db4:	f7fe fa4c 	bl	8006250 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8007de8 <vPortFree+0xc0>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	4a09      	ldr	r2, [pc, #36]	@ (8007de8 <vPortFree+0xc0>)
 8007dc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dc6:	6938      	ldr	r0, [r7, #16]
 8007dc8:	f000 f874 	bl	8007eb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007dcc:	4b07      	ldr	r3, [pc, #28]	@ (8007dec <vPortFree+0xc4>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	4a06      	ldr	r2, [pc, #24]	@ (8007dec <vPortFree+0xc4>)
 8007dd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dd6:	f7fe fa49 	bl	800626c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dda:	bf00      	nop
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	20004b7c 	.word	0x20004b7c
 8007de8:	20004b6c 	.word	0x20004b6c
 8007dec:	20004b78 	.word	0x20004b78

08007df0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007df6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007dfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007dfc:	4b27      	ldr	r3, [pc, #156]	@ (8007e9c <prvHeapInit+0xac>)
 8007dfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f003 0307 	and.w	r3, r3, #7
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00c      	beq.n	8007e24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3307      	adds	r3, #7
 8007e0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f023 0307 	bic.w	r3, r3, #7
 8007e16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8007e9c <prvHeapInit+0xac>)
 8007e20:	4413      	add	r3, r2
 8007e22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e28:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea0 <prvHeapInit+0xb0>)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ea0 <prvHeapInit+0xb0>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	4413      	add	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e3c:	2208      	movs	r2, #8
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	1a9b      	subs	r3, r3, r2
 8007e42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 0307 	bic.w	r3, r3, #7
 8007e4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4a15      	ldr	r2, [pc, #84]	@ (8007ea4 <prvHeapInit+0xb4>)
 8007e50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e52:	4b14      	ldr	r3, [pc, #80]	@ (8007ea4 <prvHeapInit+0xb4>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2200      	movs	r2, #0
 8007e58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e5a:	4b12      	ldr	r3, [pc, #72]	@ (8007ea4 <prvHeapInit+0xb4>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	1ad2      	subs	r2, r2, r3
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e70:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea4 <prvHeapInit+0xb4>)
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8007ea8 <prvHeapInit+0xb8>)
 8007e7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	4a09      	ldr	r2, [pc, #36]	@ (8007eac <prvHeapInit+0xbc>)
 8007e86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e88:	4b09      	ldr	r3, [pc, #36]	@ (8007eb0 <prvHeapInit+0xc0>)
 8007e8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e8e:	601a      	str	r2, [r3, #0]
}
 8007e90:	bf00      	nop
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	20000f60 	.word	0x20000f60
 8007ea0:	20004b60 	.word	0x20004b60
 8007ea4:	20004b68 	.word	0x20004b68
 8007ea8:	20004b70 	.word	0x20004b70
 8007eac:	20004b6c 	.word	0x20004b6c
 8007eb0:	20004b7c 	.word	0x20004b7c

08007eb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ebc:	4b28      	ldr	r3, [pc, #160]	@ (8007f60 <prvInsertBlockIntoFreeList+0xac>)
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	e002      	b.n	8007ec8 <prvInsertBlockIntoFreeList+0x14>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d8f7      	bhi.n	8007ec2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	4413      	add	r3, r2
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d108      	bne.n	8007ef6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	441a      	add	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	441a      	add	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d118      	bne.n	8007f3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	4b15      	ldr	r3, [pc, #84]	@ (8007f64 <prvInsertBlockIntoFreeList+0xb0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d00d      	beq.n	8007f32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	441a      	add	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	601a      	str	r2, [r3, #0]
 8007f30:	e008      	b.n	8007f44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f32:	4b0c      	ldr	r3, [pc, #48]	@ (8007f64 <prvInsertBlockIntoFreeList+0xb0>)
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	e003      	b.n	8007f44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d002      	beq.n	8007f52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f52:	bf00      	nop
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	20004b60 	.word	0x20004b60
 8007f64:	20004b68 	.word	0x20004b68

08007f68 <std>:
 8007f68:	2300      	movs	r3, #0
 8007f6a:	b510      	push	{r4, lr}
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f76:	6083      	str	r3, [r0, #8]
 8007f78:	8181      	strh	r1, [r0, #12]
 8007f7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f7c:	81c2      	strh	r2, [r0, #14]
 8007f7e:	6183      	str	r3, [r0, #24]
 8007f80:	4619      	mov	r1, r3
 8007f82:	2208      	movs	r2, #8
 8007f84:	305c      	adds	r0, #92	@ 0x5c
 8007f86:	f000 f906 	bl	8008196 <memset>
 8007f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc0 <std+0x58>)
 8007f8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc4 <std+0x5c>)
 8007f90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f92:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc8 <std+0x60>)
 8007f94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f96:	4b0d      	ldr	r3, [pc, #52]	@ (8007fcc <std+0x64>)
 8007f98:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd0 <std+0x68>)
 8007f9c:	6224      	str	r4, [r4, #32]
 8007f9e:	429c      	cmp	r4, r3
 8007fa0:	d006      	beq.n	8007fb0 <std+0x48>
 8007fa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fa6:	4294      	cmp	r4, r2
 8007fa8:	d002      	beq.n	8007fb0 <std+0x48>
 8007faa:	33d0      	adds	r3, #208	@ 0xd0
 8007fac:	429c      	cmp	r4, r3
 8007fae:	d105      	bne.n	8007fbc <std+0x54>
 8007fb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb8:	f000 b9bc 	b.w	8008334 <__retarget_lock_init_recursive>
 8007fbc:	bd10      	pop	{r4, pc}
 8007fbe:	bf00      	nop
 8007fc0:	08008111 	.word	0x08008111
 8007fc4:	08008133 	.word	0x08008133
 8007fc8:	0800816b 	.word	0x0800816b
 8007fcc:	0800818f 	.word	0x0800818f
 8007fd0:	20004b80 	.word	0x20004b80

08007fd4 <stdio_exit_handler>:
 8007fd4:	4a02      	ldr	r2, [pc, #8]	@ (8007fe0 <stdio_exit_handler+0xc>)
 8007fd6:	4903      	ldr	r1, [pc, #12]	@ (8007fe4 <stdio_exit_handler+0x10>)
 8007fd8:	4803      	ldr	r0, [pc, #12]	@ (8007fe8 <stdio_exit_handler+0x14>)
 8007fda:	f000 b869 	b.w	80080b0 <_fwalk_sglue>
 8007fde:	bf00      	nop
 8007fe0:	20000018 	.word	0x20000018
 8007fe4:	08008bf1 	.word	0x08008bf1
 8007fe8:	20000028 	.word	0x20000028

08007fec <cleanup_stdio>:
 8007fec:	6841      	ldr	r1, [r0, #4]
 8007fee:	4b0c      	ldr	r3, [pc, #48]	@ (8008020 <cleanup_stdio+0x34>)
 8007ff0:	4299      	cmp	r1, r3
 8007ff2:	b510      	push	{r4, lr}
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	d001      	beq.n	8007ffc <cleanup_stdio+0x10>
 8007ff8:	f000 fdfa 	bl	8008bf0 <_fflush_r>
 8007ffc:	68a1      	ldr	r1, [r4, #8]
 8007ffe:	4b09      	ldr	r3, [pc, #36]	@ (8008024 <cleanup_stdio+0x38>)
 8008000:	4299      	cmp	r1, r3
 8008002:	d002      	beq.n	800800a <cleanup_stdio+0x1e>
 8008004:	4620      	mov	r0, r4
 8008006:	f000 fdf3 	bl	8008bf0 <_fflush_r>
 800800a:	68e1      	ldr	r1, [r4, #12]
 800800c:	4b06      	ldr	r3, [pc, #24]	@ (8008028 <cleanup_stdio+0x3c>)
 800800e:	4299      	cmp	r1, r3
 8008010:	d004      	beq.n	800801c <cleanup_stdio+0x30>
 8008012:	4620      	mov	r0, r4
 8008014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008018:	f000 bdea 	b.w	8008bf0 <_fflush_r>
 800801c:	bd10      	pop	{r4, pc}
 800801e:	bf00      	nop
 8008020:	20004b80 	.word	0x20004b80
 8008024:	20004be8 	.word	0x20004be8
 8008028:	20004c50 	.word	0x20004c50

0800802c <global_stdio_init.part.0>:
 800802c:	b510      	push	{r4, lr}
 800802e:	4b0b      	ldr	r3, [pc, #44]	@ (800805c <global_stdio_init.part.0+0x30>)
 8008030:	4c0b      	ldr	r4, [pc, #44]	@ (8008060 <global_stdio_init.part.0+0x34>)
 8008032:	4a0c      	ldr	r2, [pc, #48]	@ (8008064 <global_stdio_init.part.0+0x38>)
 8008034:	601a      	str	r2, [r3, #0]
 8008036:	4620      	mov	r0, r4
 8008038:	2200      	movs	r2, #0
 800803a:	2104      	movs	r1, #4
 800803c:	f7ff ff94 	bl	8007f68 <std>
 8008040:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008044:	2201      	movs	r2, #1
 8008046:	2109      	movs	r1, #9
 8008048:	f7ff ff8e 	bl	8007f68 <std>
 800804c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008050:	2202      	movs	r2, #2
 8008052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008056:	2112      	movs	r1, #18
 8008058:	f7ff bf86 	b.w	8007f68 <std>
 800805c:	20004cb8 	.word	0x20004cb8
 8008060:	20004b80 	.word	0x20004b80
 8008064:	08007fd5 	.word	0x08007fd5

08008068 <__sfp_lock_acquire>:
 8008068:	4801      	ldr	r0, [pc, #4]	@ (8008070 <__sfp_lock_acquire+0x8>)
 800806a:	f000 b964 	b.w	8008336 <__retarget_lock_acquire_recursive>
 800806e:	bf00      	nop
 8008070:	20004cc1 	.word	0x20004cc1

08008074 <__sfp_lock_release>:
 8008074:	4801      	ldr	r0, [pc, #4]	@ (800807c <__sfp_lock_release+0x8>)
 8008076:	f000 b95f 	b.w	8008338 <__retarget_lock_release_recursive>
 800807a:	bf00      	nop
 800807c:	20004cc1 	.word	0x20004cc1

08008080 <__sinit>:
 8008080:	b510      	push	{r4, lr}
 8008082:	4604      	mov	r4, r0
 8008084:	f7ff fff0 	bl	8008068 <__sfp_lock_acquire>
 8008088:	6a23      	ldr	r3, [r4, #32]
 800808a:	b11b      	cbz	r3, 8008094 <__sinit+0x14>
 800808c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008090:	f7ff bff0 	b.w	8008074 <__sfp_lock_release>
 8008094:	4b04      	ldr	r3, [pc, #16]	@ (80080a8 <__sinit+0x28>)
 8008096:	6223      	str	r3, [r4, #32]
 8008098:	4b04      	ldr	r3, [pc, #16]	@ (80080ac <__sinit+0x2c>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1f5      	bne.n	800808c <__sinit+0xc>
 80080a0:	f7ff ffc4 	bl	800802c <global_stdio_init.part.0>
 80080a4:	e7f2      	b.n	800808c <__sinit+0xc>
 80080a6:	bf00      	nop
 80080a8:	08007fed 	.word	0x08007fed
 80080ac:	20004cb8 	.word	0x20004cb8

080080b0 <_fwalk_sglue>:
 80080b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080b4:	4607      	mov	r7, r0
 80080b6:	4688      	mov	r8, r1
 80080b8:	4614      	mov	r4, r2
 80080ba:	2600      	movs	r6, #0
 80080bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080c0:	f1b9 0901 	subs.w	r9, r9, #1
 80080c4:	d505      	bpl.n	80080d2 <_fwalk_sglue+0x22>
 80080c6:	6824      	ldr	r4, [r4, #0]
 80080c8:	2c00      	cmp	r4, #0
 80080ca:	d1f7      	bne.n	80080bc <_fwalk_sglue+0xc>
 80080cc:	4630      	mov	r0, r6
 80080ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080d2:	89ab      	ldrh	r3, [r5, #12]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d907      	bls.n	80080e8 <_fwalk_sglue+0x38>
 80080d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080dc:	3301      	adds	r3, #1
 80080de:	d003      	beq.n	80080e8 <_fwalk_sglue+0x38>
 80080e0:	4629      	mov	r1, r5
 80080e2:	4638      	mov	r0, r7
 80080e4:	47c0      	blx	r8
 80080e6:	4306      	orrs	r6, r0
 80080e8:	3568      	adds	r5, #104	@ 0x68
 80080ea:	e7e9      	b.n	80080c0 <_fwalk_sglue+0x10>

080080ec <iprintf>:
 80080ec:	b40f      	push	{r0, r1, r2, r3}
 80080ee:	b507      	push	{r0, r1, r2, lr}
 80080f0:	4906      	ldr	r1, [pc, #24]	@ (800810c <iprintf+0x20>)
 80080f2:	ab04      	add	r3, sp, #16
 80080f4:	6808      	ldr	r0, [r1, #0]
 80080f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080fa:	6881      	ldr	r1, [r0, #8]
 80080fc:	9301      	str	r3, [sp, #4]
 80080fe:	f000 fa4d 	bl	800859c <_vfiprintf_r>
 8008102:	b003      	add	sp, #12
 8008104:	f85d eb04 	ldr.w	lr, [sp], #4
 8008108:	b004      	add	sp, #16
 800810a:	4770      	bx	lr
 800810c:	20000024 	.word	0x20000024

08008110 <__sread>:
 8008110:	b510      	push	{r4, lr}
 8008112:	460c      	mov	r4, r1
 8008114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008118:	f000 f8be 	bl	8008298 <_read_r>
 800811c:	2800      	cmp	r0, #0
 800811e:	bfab      	itete	ge
 8008120:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008122:	89a3      	ldrhlt	r3, [r4, #12]
 8008124:	181b      	addge	r3, r3, r0
 8008126:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800812a:	bfac      	ite	ge
 800812c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800812e:	81a3      	strhlt	r3, [r4, #12]
 8008130:	bd10      	pop	{r4, pc}

08008132 <__swrite>:
 8008132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008136:	461f      	mov	r7, r3
 8008138:	898b      	ldrh	r3, [r1, #12]
 800813a:	05db      	lsls	r3, r3, #23
 800813c:	4605      	mov	r5, r0
 800813e:	460c      	mov	r4, r1
 8008140:	4616      	mov	r6, r2
 8008142:	d505      	bpl.n	8008150 <__swrite+0x1e>
 8008144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008148:	2302      	movs	r3, #2
 800814a:	2200      	movs	r2, #0
 800814c:	f000 f892 	bl	8008274 <_lseek_r>
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008156:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800815a:	81a3      	strh	r3, [r4, #12]
 800815c:	4632      	mov	r2, r6
 800815e:	463b      	mov	r3, r7
 8008160:	4628      	mov	r0, r5
 8008162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008166:	f000 b8a9 	b.w	80082bc <_write_r>

0800816a <__sseek>:
 800816a:	b510      	push	{r4, lr}
 800816c:	460c      	mov	r4, r1
 800816e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008172:	f000 f87f 	bl	8008274 <_lseek_r>
 8008176:	1c43      	adds	r3, r0, #1
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	bf15      	itete	ne
 800817c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800817e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008182:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008186:	81a3      	strheq	r3, [r4, #12]
 8008188:	bf18      	it	ne
 800818a:	81a3      	strhne	r3, [r4, #12]
 800818c:	bd10      	pop	{r4, pc}

0800818e <__sclose>:
 800818e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008192:	f000 b809 	b.w	80081a8 <_close_r>

08008196 <memset>:
 8008196:	4402      	add	r2, r0
 8008198:	4603      	mov	r3, r0
 800819a:	4293      	cmp	r3, r2
 800819c:	d100      	bne.n	80081a0 <memset+0xa>
 800819e:	4770      	bx	lr
 80081a0:	f803 1b01 	strb.w	r1, [r3], #1
 80081a4:	e7f9      	b.n	800819a <memset+0x4>
	...

080081a8 <_close_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4d06      	ldr	r5, [pc, #24]	@ (80081c4 <_close_r+0x1c>)
 80081ac:	2300      	movs	r3, #0
 80081ae:	4604      	mov	r4, r0
 80081b0:	4608      	mov	r0, r1
 80081b2:	602b      	str	r3, [r5, #0]
 80081b4:	f7f9 fff7 	bl	80021a6 <_close>
 80081b8:	1c43      	adds	r3, r0, #1
 80081ba:	d102      	bne.n	80081c2 <_close_r+0x1a>
 80081bc:	682b      	ldr	r3, [r5, #0]
 80081be:	b103      	cbz	r3, 80081c2 <_close_r+0x1a>
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	bd38      	pop	{r3, r4, r5, pc}
 80081c4:	20004cbc 	.word	0x20004cbc

080081c8 <_reclaim_reent>:
 80081c8:	4b29      	ldr	r3, [pc, #164]	@ (8008270 <_reclaim_reent+0xa8>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4283      	cmp	r3, r0
 80081ce:	b570      	push	{r4, r5, r6, lr}
 80081d0:	4604      	mov	r4, r0
 80081d2:	d04b      	beq.n	800826c <_reclaim_reent+0xa4>
 80081d4:	69c3      	ldr	r3, [r0, #28]
 80081d6:	b1ab      	cbz	r3, 8008204 <_reclaim_reent+0x3c>
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	b16b      	cbz	r3, 80081f8 <_reclaim_reent+0x30>
 80081dc:	2500      	movs	r5, #0
 80081de:	69e3      	ldr	r3, [r4, #28]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	5959      	ldr	r1, [r3, r5]
 80081e4:	2900      	cmp	r1, #0
 80081e6:	d13b      	bne.n	8008260 <_reclaim_reent+0x98>
 80081e8:	3504      	adds	r5, #4
 80081ea:	2d80      	cmp	r5, #128	@ 0x80
 80081ec:	d1f7      	bne.n	80081de <_reclaim_reent+0x16>
 80081ee:	69e3      	ldr	r3, [r4, #28]
 80081f0:	4620      	mov	r0, r4
 80081f2:	68d9      	ldr	r1, [r3, #12]
 80081f4:	f000 f8b0 	bl	8008358 <_free_r>
 80081f8:	69e3      	ldr	r3, [r4, #28]
 80081fa:	6819      	ldr	r1, [r3, #0]
 80081fc:	b111      	cbz	r1, 8008204 <_reclaim_reent+0x3c>
 80081fe:	4620      	mov	r0, r4
 8008200:	f000 f8aa 	bl	8008358 <_free_r>
 8008204:	6961      	ldr	r1, [r4, #20]
 8008206:	b111      	cbz	r1, 800820e <_reclaim_reent+0x46>
 8008208:	4620      	mov	r0, r4
 800820a:	f000 f8a5 	bl	8008358 <_free_r>
 800820e:	69e1      	ldr	r1, [r4, #28]
 8008210:	b111      	cbz	r1, 8008218 <_reclaim_reent+0x50>
 8008212:	4620      	mov	r0, r4
 8008214:	f000 f8a0 	bl	8008358 <_free_r>
 8008218:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800821a:	b111      	cbz	r1, 8008222 <_reclaim_reent+0x5a>
 800821c:	4620      	mov	r0, r4
 800821e:	f000 f89b 	bl	8008358 <_free_r>
 8008222:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008224:	b111      	cbz	r1, 800822c <_reclaim_reent+0x64>
 8008226:	4620      	mov	r0, r4
 8008228:	f000 f896 	bl	8008358 <_free_r>
 800822c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800822e:	b111      	cbz	r1, 8008236 <_reclaim_reent+0x6e>
 8008230:	4620      	mov	r0, r4
 8008232:	f000 f891 	bl	8008358 <_free_r>
 8008236:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008238:	b111      	cbz	r1, 8008240 <_reclaim_reent+0x78>
 800823a:	4620      	mov	r0, r4
 800823c:	f000 f88c 	bl	8008358 <_free_r>
 8008240:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008242:	b111      	cbz	r1, 800824a <_reclaim_reent+0x82>
 8008244:	4620      	mov	r0, r4
 8008246:	f000 f887 	bl	8008358 <_free_r>
 800824a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800824c:	b111      	cbz	r1, 8008254 <_reclaim_reent+0x8c>
 800824e:	4620      	mov	r0, r4
 8008250:	f000 f882 	bl	8008358 <_free_r>
 8008254:	6a23      	ldr	r3, [r4, #32]
 8008256:	b14b      	cbz	r3, 800826c <_reclaim_reent+0xa4>
 8008258:	4620      	mov	r0, r4
 800825a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800825e:	4718      	bx	r3
 8008260:	680e      	ldr	r6, [r1, #0]
 8008262:	4620      	mov	r0, r4
 8008264:	f000 f878 	bl	8008358 <_free_r>
 8008268:	4631      	mov	r1, r6
 800826a:	e7bb      	b.n	80081e4 <_reclaim_reent+0x1c>
 800826c:	bd70      	pop	{r4, r5, r6, pc}
 800826e:	bf00      	nop
 8008270:	20000024 	.word	0x20000024

08008274 <_lseek_r>:
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	4d07      	ldr	r5, [pc, #28]	@ (8008294 <_lseek_r+0x20>)
 8008278:	4604      	mov	r4, r0
 800827a:	4608      	mov	r0, r1
 800827c:	4611      	mov	r1, r2
 800827e:	2200      	movs	r2, #0
 8008280:	602a      	str	r2, [r5, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	f7f9 ffb6 	bl	80021f4 <_lseek>
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	d102      	bne.n	8008292 <_lseek_r+0x1e>
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	b103      	cbz	r3, 8008292 <_lseek_r+0x1e>
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	20004cbc 	.word	0x20004cbc

08008298 <_read_r>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	4d07      	ldr	r5, [pc, #28]	@ (80082b8 <_read_r+0x20>)
 800829c:	4604      	mov	r4, r0
 800829e:	4608      	mov	r0, r1
 80082a0:	4611      	mov	r1, r2
 80082a2:	2200      	movs	r2, #0
 80082a4:	602a      	str	r2, [r5, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	f7f9 ff44 	bl	8002134 <_read>
 80082ac:	1c43      	adds	r3, r0, #1
 80082ae:	d102      	bne.n	80082b6 <_read_r+0x1e>
 80082b0:	682b      	ldr	r3, [r5, #0]
 80082b2:	b103      	cbz	r3, 80082b6 <_read_r+0x1e>
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	bd38      	pop	{r3, r4, r5, pc}
 80082b8:	20004cbc 	.word	0x20004cbc

080082bc <_write_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4d07      	ldr	r5, [pc, #28]	@ (80082dc <_write_r+0x20>)
 80082c0:	4604      	mov	r4, r0
 80082c2:	4608      	mov	r0, r1
 80082c4:	4611      	mov	r1, r2
 80082c6:	2200      	movs	r2, #0
 80082c8:	602a      	str	r2, [r5, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	f7f9 ff4f 	bl	800216e <_write>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_write_r+0x1e>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	b103      	cbz	r3, 80082da <_write_r+0x1e>
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	20004cbc 	.word	0x20004cbc

080082e0 <__errno>:
 80082e0:	4b01      	ldr	r3, [pc, #4]	@ (80082e8 <__errno+0x8>)
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	20000024 	.word	0x20000024

080082ec <__libc_init_array>:
 80082ec:	b570      	push	{r4, r5, r6, lr}
 80082ee:	4d0d      	ldr	r5, [pc, #52]	@ (8008324 <__libc_init_array+0x38>)
 80082f0:	4c0d      	ldr	r4, [pc, #52]	@ (8008328 <__libc_init_array+0x3c>)
 80082f2:	1b64      	subs	r4, r4, r5
 80082f4:	10a4      	asrs	r4, r4, #2
 80082f6:	2600      	movs	r6, #0
 80082f8:	42a6      	cmp	r6, r4
 80082fa:	d109      	bne.n	8008310 <__libc_init_array+0x24>
 80082fc:	4d0b      	ldr	r5, [pc, #44]	@ (800832c <__libc_init_array+0x40>)
 80082fe:	4c0c      	ldr	r4, [pc, #48]	@ (8008330 <__libc_init_array+0x44>)
 8008300:	f001 f832 	bl	8009368 <_init>
 8008304:	1b64      	subs	r4, r4, r5
 8008306:	10a4      	asrs	r4, r4, #2
 8008308:	2600      	movs	r6, #0
 800830a:	42a6      	cmp	r6, r4
 800830c:	d105      	bne.n	800831a <__libc_init_array+0x2e>
 800830e:	bd70      	pop	{r4, r5, r6, pc}
 8008310:	f855 3b04 	ldr.w	r3, [r5], #4
 8008314:	4798      	blx	r3
 8008316:	3601      	adds	r6, #1
 8008318:	e7ee      	b.n	80082f8 <__libc_init_array+0xc>
 800831a:	f855 3b04 	ldr.w	r3, [r5], #4
 800831e:	4798      	blx	r3
 8008320:	3601      	adds	r6, #1
 8008322:	e7f2      	b.n	800830a <__libc_init_array+0x1e>
 8008324:	08009518 	.word	0x08009518
 8008328:	08009518 	.word	0x08009518
 800832c:	08009518 	.word	0x08009518
 8008330:	0800951c 	.word	0x0800951c

08008334 <__retarget_lock_init_recursive>:
 8008334:	4770      	bx	lr

08008336 <__retarget_lock_acquire_recursive>:
 8008336:	4770      	bx	lr

08008338 <__retarget_lock_release_recursive>:
 8008338:	4770      	bx	lr

0800833a <memcpy>:
 800833a:	440a      	add	r2, r1
 800833c:	4291      	cmp	r1, r2
 800833e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008342:	d100      	bne.n	8008346 <memcpy+0xc>
 8008344:	4770      	bx	lr
 8008346:	b510      	push	{r4, lr}
 8008348:	f811 4b01 	ldrb.w	r4, [r1], #1
 800834c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008350:	4291      	cmp	r1, r2
 8008352:	d1f9      	bne.n	8008348 <memcpy+0xe>
 8008354:	bd10      	pop	{r4, pc}
	...

08008358 <_free_r>:
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	4605      	mov	r5, r0
 800835c:	2900      	cmp	r1, #0
 800835e:	d041      	beq.n	80083e4 <_free_r+0x8c>
 8008360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008364:	1f0c      	subs	r4, r1, #4
 8008366:	2b00      	cmp	r3, #0
 8008368:	bfb8      	it	lt
 800836a:	18e4      	addlt	r4, r4, r3
 800836c:	f000 f8e0 	bl	8008530 <__malloc_lock>
 8008370:	4a1d      	ldr	r2, [pc, #116]	@ (80083e8 <_free_r+0x90>)
 8008372:	6813      	ldr	r3, [r2, #0]
 8008374:	b933      	cbnz	r3, 8008384 <_free_r+0x2c>
 8008376:	6063      	str	r3, [r4, #4]
 8008378:	6014      	str	r4, [r2, #0]
 800837a:	4628      	mov	r0, r5
 800837c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008380:	f000 b8dc 	b.w	800853c <__malloc_unlock>
 8008384:	42a3      	cmp	r3, r4
 8008386:	d908      	bls.n	800839a <_free_r+0x42>
 8008388:	6820      	ldr	r0, [r4, #0]
 800838a:	1821      	adds	r1, r4, r0
 800838c:	428b      	cmp	r3, r1
 800838e:	bf01      	itttt	eq
 8008390:	6819      	ldreq	r1, [r3, #0]
 8008392:	685b      	ldreq	r3, [r3, #4]
 8008394:	1809      	addeq	r1, r1, r0
 8008396:	6021      	streq	r1, [r4, #0]
 8008398:	e7ed      	b.n	8008376 <_free_r+0x1e>
 800839a:	461a      	mov	r2, r3
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	b10b      	cbz	r3, 80083a4 <_free_r+0x4c>
 80083a0:	42a3      	cmp	r3, r4
 80083a2:	d9fa      	bls.n	800839a <_free_r+0x42>
 80083a4:	6811      	ldr	r1, [r2, #0]
 80083a6:	1850      	adds	r0, r2, r1
 80083a8:	42a0      	cmp	r0, r4
 80083aa:	d10b      	bne.n	80083c4 <_free_r+0x6c>
 80083ac:	6820      	ldr	r0, [r4, #0]
 80083ae:	4401      	add	r1, r0
 80083b0:	1850      	adds	r0, r2, r1
 80083b2:	4283      	cmp	r3, r0
 80083b4:	6011      	str	r1, [r2, #0]
 80083b6:	d1e0      	bne.n	800837a <_free_r+0x22>
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	6053      	str	r3, [r2, #4]
 80083be:	4408      	add	r0, r1
 80083c0:	6010      	str	r0, [r2, #0]
 80083c2:	e7da      	b.n	800837a <_free_r+0x22>
 80083c4:	d902      	bls.n	80083cc <_free_r+0x74>
 80083c6:	230c      	movs	r3, #12
 80083c8:	602b      	str	r3, [r5, #0]
 80083ca:	e7d6      	b.n	800837a <_free_r+0x22>
 80083cc:	6820      	ldr	r0, [r4, #0]
 80083ce:	1821      	adds	r1, r4, r0
 80083d0:	428b      	cmp	r3, r1
 80083d2:	bf04      	itt	eq
 80083d4:	6819      	ldreq	r1, [r3, #0]
 80083d6:	685b      	ldreq	r3, [r3, #4]
 80083d8:	6063      	str	r3, [r4, #4]
 80083da:	bf04      	itt	eq
 80083dc:	1809      	addeq	r1, r1, r0
 80083de:	6021      	streq	r1, [r4, #0]
 80083e0:	6054      	str	r4, [r2, #4]
 80083e2:	e7ca      	b.n	800837a <_free_r+0x22>
 80083e4:	bd38      	pop	{r3, r4, r5, pc}
 80083e6:	bf00      	nop
 80083e8:	20004cc8 	.word	0x20004cc8

080083ec <sbrk_aligned>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	4e0f      	ldr	r6, [pc, #60]	@ (800842c <sbrk_aligned+0x40>)
 80083f0:	460c      	mov	r4, r1
 80083f2:	6831      	ldr	r1, [r6, #0]
 80083f4:	4605      	mov	r5, r0
 80083f6:	b911      	cbnz	r1, 80083fe <sbrk_aligned+0x12>
 80083f8:	f000 fcb6 	bl	8008d68 <_sbrk_r>
 80083fc:	6030      	str	r0, [r6, #0]
 80083fe:	4621      	mov	r1, r4
 8008400:	4628      	mov	r0, r5
 8008402:	f000 fcb1 	bl	8008d68 <_sbrk_r>
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	d103      	bne.n	8008412 <sbrk_aligned+0x26>
 800840a:	f04f 34ff 	mov.w	r4, #4294967295
 800840e:	4620      	mov	r0, r4
 8008410:	bd70      	pop	{r4, r5, r6, pc}
 8008412:	1cc4      	adds	r4, r0, #3
 8008414:	f024 0403 	bic.w	r4, r4, #3
 8008418:	42a0      	cmp	r0, r4
 800841a:	d0f8      	beq.n	800840e <sbrk_aligned+0x22>
 800841c:	1a21      	subs	r1, r4, r0
 800841e:	4628      	mov	r0, r5
 8008420:	f000 fca2 	bl	8008d68 <_sbrk_r>
 8008424:	3001      	adds	r0, #1
 8008426:	d1f2      	bne.n	800840e <sbrk_aligned+0x22>
 8008428:	e7ef      	b.n	800840a <sbrk_aligned+0x1e>
 800842a:	bf00      	nop
 800842c:	20004cc4 	.word	0x20004cc4

08008430 <_malloc_r>:
 8008430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008434:	1ccd      	adds	r5, r1, #3
 8008436:	f025 0503 	bic.w	r5, r5, #3
 800843a:	3508      	adds	r5, #8
 800843c:	2d0c      	cmp	r5, #12
 800843e:	bf38      	it	cc
 8008440:	250c      	movcc	r5, #12
 8008442:	2d00      	cmp	r5, #0
 8008444:	4606      	mov	r6, r0
 8008446:	db01      	blt.n	800844c <_malloc_r+0x1c>
 8008448:	42a9      	cmp	r1, r5
 800844a:	d904      	bls.n	8008456 <_malloc_r+0x26>
 800844c:	230c      	movs	r3, #12
 800844e:	6033      	str	r3, [r6, #0]
 8008450:	2000      	movs	r0, #0
 8008452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008456:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800852c <_malloc_r+0xfc>
 800845a:	f000 f869 	bl	8008530 <__malloc_lock>
 800845e:	f8d8 3000 	ldr.w	r3, [r8]
 8008462:	461c      	mov	r4, r3
 8008464:	bb44      	cbnz	r4, 80084b8 <_malloc_r+0x88>
 8008466:	4629      	mov	r1, r5
 8008468:	4630      	mov	r0, r6
 800846a:	f7ff ffbf 	bl	80083ec <sbrk_aligned>
 800846e:	1c43      	adds	r3, r0, #1
 8008470:	4604      	mov	r4, r0
 8008472:	d158      	bne.n	8008526 <_malloc_r+0xf6>
 8008474:	f8d8 4000 	ldr.w	r4, [r8]
 8008478:	4627      	mov	r7, r4
 800847a:	2f00      	cmp	r7, #0
 800847c:	d143      	bne.n	8008506 <_malloc_r+0xd6>
 800847e:	2c00      	cmp	r4, #0
 8008480:	d04b      	beq.n	800851a <_malloc_r+0xea>
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	4639      	mov	r1, r7
 8008486:	4630      	mov	r0, r6
 8008488:	eb04 0903 	add.w	r9, r4, r3
 800848c:	f000 fc6c 	bl	8008d68 <_sbrk_r>
 8008490:	4581      	cmp	r9, r0
 8008492:	d142      	bne.n	800851a <_malloc_r+0xea>
 8008494:	6821      	ldr	r1, [r4, #0]
 8008496:	1a6d      	subs	r5, r5, r1
 8008498:	4629      	mov	r1, r5
 800849a:	4630      	mov	r0, r6
 800849c:	f7ff ffa6 	bl	80083ec <sbrk_aligned>
 80084a0:	3001      	adds	r0, #1
 80084a2:	d03a      	beq.n	800851a <_malloc_r+0xea>
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	442b      	add	r3, r5
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	f8d8 3000 	ldr.w	r3, [r8]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	bb62      	cbnz	r2, 800850c <_malloc_r+0xdc>
 80084b2:	f8c8 7000 	str.w	r7, [r8]
 80084b6:	e00f      	b.n	80084d8 <_malloc_r+0xa8>
 80084b8:	6822      	ldr	r2, [r4, #0]
 80084ba:	1b52      	subs	r2, r2, r5
 80084bc:	d420      	bmi.n	8008500 <_malloc_r+0xd0>
 80084be:	2a0b      	cmp	r2, #11
 80084c0:	d917      	bls.n	80084f2 <_malloc_r+0xc2>
 80084c2:	1961      	adds	r1, r4, r5
 80084c4:	42a3      	cmp	r3, r4
 80084c6:	6025      	str	r5, [r4, #0]
 80084c8:	bf18      	it	ne
 80084ca:	6059      	strne	r1, [r3, #4]
 80084cc:	6863      	ldr	r3, [r4, #4]
 80084ce:	bf08      	it	eq
 80084d0:	f8c8 1000 	streq.w	r1, [r8]
 80084d4:	5162      	str	r2, [r4, r5]
 80084d6:	604b      	str	r3, [r1, #4]
 80084d8:	4630      	mov	r0, r6
 80084da:	f000 f82f 	bl	800853c <__malloc_unlock>
 80084de:	f104 000b 	add.w	r0, r4, #11
 80084e2:	1d23      	adds	r3, r4, #4
 80084e4:	f020 0007 	bic.w	r0, r0, #7
 80084e8:	1ac2      	subs	r2, r0, r3
 80084ea:	bf1c      	itt	ne
 80084ec:	1a1b      	subne	r3, r3, r0
 80084ee:	50a3      	strne	r3, [r4, r2]
 80084f0:	e7af      	b.n	8008452 <_malloc_r+0x22>
 80084f2:	6862      	ldr	r2, [r4, #4]
 80084f4:	42a3      	cmp	r3, r4
 80084f6:	bf0c      	ite	eq
 80084f8:	f8c8 2000 	streq.w	r2, [r8]
 80084fc:	605a      	strne	r2, [r3, #4]
 80084fe:	e7eb      	b.n	80084d8 <_malloc_r+0xa8>
 8008500:	4623      	mov	r3, r4
 8008502:	6864      	ldr	r4, [r4, #4]
 8008504:	e7ae      	b.n	8008464 <_malloc_r+0x34>
 8008506:	463c      	mov	r4, r7
 8008508:	687f      	ldr	r7, [r7, #4]
 800850a:	e7b6      	b.n	800847a <_malloc_r+0x4a>
 800850c:	461a      	mov	r2, r3
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	42a3      	cmp	r3, r4
 8008512:	d1fb      	bne.n	800850c <_malloc_r+0xdc>
 8008514:	2300      	movs	r3, #0
 8008516:	6053      	str	r3, [r2, #4]
 8008518:	e7de      	b.n	80084d8 <_malloc_r+0xa8>
 800851a:	230c      	movs	r3, #12
 800851c:	6033      	str	r3, [r6, #0]
 800851e:	4630      	mov	r0, r6
 8008520:	f000 f80c 	bl	800853c <__malloc_unlock>
 8008524:	e794      	b.n	8008450 <_malloc_r+0x20>
 8008526:	6005      	str	r5, [r0, #0]
 8008528:	e7d6      	b.n	80084d8 <_malloc_r+0xa8>
 800852a:	bf00      	nop
 800852c:	20004cc8 	.word	0x20004cc8

08008530 <__malloc_lock>:
 8008530:	4801      	ldr	r0, [pc, #4]	@ (8008538 <__malloc_lock+0x8>)
 8008532:	f7ff bf00 	b.w	8008336 <__retarget_lock_acquire_recursive>
 8008536:	bf00      	nop
 8008538:	20004cc0 	.word	0x20004cc0

0800853c <__malloc_unlock>:
 800853c:	4801      	ldr	r0, [pc, #4]	@ (8008544 <__malloc_unlock+0x8>)
 800853e:	f7ff befb 	b.w	8008338 <__retarget_lock_release_recursive>
 8008542:	bf00      	nop
 8008544:	20004cc0 	.word	0x20004cc0

08008548 <__sfputc_r>:
 8008548:	6893      	ldr	r3, [r2, #8]
 800854a:	3b01      	subs	r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	b410      	push	{r4}
 8008550:	6093      	str	r3, [r2, #8]
 8008552:	da08      	bge.n	8008566 <__sfputc_r+0x1e>
 8008554:	6994      	ldr	r4, [r2, #24]
 8008556:	42a3      	cmp	r3, r4
 8008558:	db01      	blt.n	800855e <__sfputc_r+0x16>
 800855a:	290a      	cmp	r1, #10
 800855c:	d103      	bne.n	8008566 <__sfputc_r+0x1e>
 800855e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008562:	f000 bb6d 	b.w	8008c40 <__swbuf_r>
 8008566:	6813      	ldr	r3, [r2, #0]
 8008568:	1c58      	adds	r0, r3, #1
 800856a:	6010      	str	r0, [r2, #0]
 800856c:	7019      	strb	r1, [r3, #0]
 800856e:	4608      	mov	r0, r1
 8008570:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008574:	4770      	bx	lr

08008576 <__sfputs_r>:
 8008576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008578:	4606      	mov	r6, r0
 800857a:	460f      	mov	r7, r1
 800857c:	4614      	mov	r4, r2
 800857e:	18d5      	adds	r5, r2, r3
 8008580:	42ac      	cmp	r4, r5
 8008582:	d101      	bne.n	8008588 <__sfputs_r+0x12>
 8008584:	2000      	movs	r0, #0
 8008586:	e007      	b.n	8008598 <__sfputs_r+0x22>
 8008588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800858c:	463a      	mov	r2, r7
 800858e:	4630      	mov	r0, r6
 8008590:	f7ff ffda 	bl	8008548 <__sfputc_r>
 8008594:	1c43      	adds	r3, r0, #1
 8008596:	d1f3      	bne.n	8008580 <__sfputs_r+0xa>
 8008598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800859c <_vfiprintf_r>:
 800859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a0:	460d      	mov	r5, r1
 80085a2:	b09d      	sub	sp, #116	@ 0x74
 80085a4:	4614      	mov	r4, r2
 80085a6:	4698      	mov	r8, r3
 80085a8:	4606      	mov	r6, r0
 80085aa:	b118      	cbz	r0, 80085b4 <_vfiprintf_r+0x18>
 80085ac:	6a03      	ldr	r3, [r0, #32]
 80085ae:	b90b      	cbnz	r3, 80085b4 <_vfiprintf_r+0x18>
 80085b0:	f7ff fd66 	bl	8008080 <__sinit>
 80085b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085b6:	07d9      	lsls	r1, r3, #31
 80085b8:	d405      	bmi.n	80085c6 <_vfiprintf_r+0x2a>
 80085ba:	89ab      	ldrh	r3, [r5, #12]
 80085bc:	059a      	lsls	r2, r3, #22
 80085be:	d402      	bmi.n	80085c6 <_vfiprintf_r+0x2a>
 80085c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085c2:	f7ff feb8 	bl	8008336 <__retarget_lock_acquire_recursive>
 80085c6:	89ab      	ldrh	r3, [r5, #12]
 80085c8:	071b      	lsls	r3, r3, #28
 80085ca:	d501      	bpl.n	80085d0 <_vfiprintf_r+0x34>
 80085cc:	692b      	ldr	r3, [r5, #16]
 80085ce:	b99b      	cbnz	r3, 80085f8 <_vfiprintf_r+0x5c>
 80085d0:	4629      	mov	r1, r5
 80085d2:	4630      	mov	r0, r6
 80085d4:	f000 fb72 	bl	8008cbc <__swsetup_r>
 80085d8:	b170      	cbz	r0, 80085f8 <_vfiprintf_r+0x5c>
 80085da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085dc:	07dc      	lsls	r4, r3, #31
 80085de:	d504      	bpl.n	80085ea <_vfiprintf_r+0x4e>
 80085e0:	f04f 30ff 	mov.w	r0, #4294967295
 80085e4:	b01d      	add	sp, #116	@ 0x74
 80085e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ea:	89ab      	ldrh	r3, [r5, #12]
 80085ec:	0598      	lsls	r0, r3, #22
 80085ee:	d4f7      	bmi.n	80085e0 <_vfiprintf_r+0x44>
 80085f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085f2:	f7ff fea1 	bl	8008338 <__retarget_lock_release_recursive>
 80085f6:	e7f3      	b.n	80085e0 <_vfiprintf_r+0x44>
 80085f8:	2300      	movs	r3, #0
 80085fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80085fc:	2320      	movs	r3, #32
 80085fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008602:	f8cd 800c 	str.w	r8, [sp, #12]
 8008606:	2330      	movs	r3, #48	@ 0x30
 8008608:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80087b8 <_vfiprintf_r+0x21c>
 800860c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008610:	f04f 0901 	mov.w	r9, #1
 8008614:	4623      	mov	r3, r4
 8008616:	469a      	mov	sl, r3
 8008618:	f813 2b01 	ldrb.w	r2, [r3], #1
 800861c:	b10a      	cbz	r2, 8008622 <_vfiprintf_r+0x86>
 800861e:	2a25      	cmp	r2, #37	@ 0x25
 8008620:	d1f9      	bne.n	8008616 <_vfiprintf_r+0x7a>
 8008622:	ebba 0b04 	subs.w	fp, sl, r4
 8008626:	d00b      	beq.n	8008640 <_vfiprintf_r+0xa4>
 8008628:	465b      	mov	r3, fp
 800862a:	4622      	mov	r2, r4
 800862c:	4629      	mov	r1, r5
 800862e:	4630      	mov	r0, r6
 8008630:	f7ff ffa1 	bl	8008576 <__sfputs_r>
 8008634:	3001      	adds	r0, #1
 8008636:	f000 80a7 	beq.w	8008788 <_vfiprintf_r+0x1ec>
 800863a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800863c:	445a      	add	r2, fp
 800863e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008640:	f89a 3000 	ldrb.w	r3, [sl]
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 809f 	beq.w	8008788 <_vfiprintf_r+0x1ec>
 800864a:	2300      	movs	r3, #0
 800864c:	f04f 32ff 	mov.w	r2, #4294967295
 8008650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008654:	f10a 0a01 	add.w	sl, sl, #1
 8008658:	9304      	str	r3, [sp, #16]
 800865a:	9307      	str	r3, [sp, #28]
 800865c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008660:	931a      	str	r3, [sp, #104]	@ 0x68
 8008662:	4654      	mov	r4, sl
 8008664:	2205      	movs	r2, #5
 8008666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800866a:	4853      	ldr	r0, [pc, #332]	@ (80087b8 <_vfiprintf_r+0x21c>)
 800866c:	f7f7 fdb0 	bl	80001d0 <memchr>
 8008670:	9a04      	ldr	r2, [sp, #16]
 8008672:	b9d8      	cbnz	r0, 80086ac <_vfiprintf_r+0x110>
 8008674:	06d1      	lsls	r1, r2, #27
 8008676:	bf44      	itt	mi
 8008678:	2320      	movmi	r3, #32
 800867a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800867e:	0713      	lsls	r3, r2, #28
 8008680:	bf44      	itt	mi
 8008682:	232b      	movmi	r3, #43	@ 0x2b
 8008684:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008688:	f89a 3000 	ldrb.w	r3, [sl]
 800868c:	2b2a      	cmp	r3, #42	@ 0x2a
 800868e:	d015      	beq.n	80086bc <_vfiprintf_r+0x120>
 8008690:	9a07      	ldr	r2, [sp, #28]
 8008692:	4654      	mov	r4, sl
 8008694:	2000      	movs	r0, #0
 8008696:	f04f 0c0a 	mov.w	ip, #10
 800869a:	4621      	mov	r1, r4
 800869c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086a0:	3b30      	subs	r3, #48	@ 0x30
 80086a2:	2b09      	cmp	r3, #9
 80086a4:	d94b      	bls.n	800873e <_vfiprintf_r+0x1a2>
 80086a6:	b1b0      	cbz	r0, 80086d6 <_vfiprintf_r+0x13a>
 80086a8:	9207      	str	r2, [sp, #28]
 80086aa:	e014      	b.n	80086d6 <_vfiprintf_r+0x13a>
 80086ac:	eba0 0308 	sub.w	r3, r0, r8
 80086b0:	fa09 f303 	lsl.w	r3, r9, r3
 80086b4:	4313      	orrs	r3, r2
 80086b6:	9304      	str	r3, [sp, #16]
 80086b8:	46a2      	mov	sl, r4
 80086ba:	e7d2      	b.n	8008662 <_vfiprintf_r+0xc6>
 80086bc:	9b03      	ldr	r3, [sp, #12]
 80086be:	1d19      	adds	r1, r3, #4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	9103      	str	r1, [sp, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	bfbb      	ittet	lt
 80086c8:	425b      	neglt	r3, r3
 80086ca:	f042 0202 	orrlt.w	r2, r2, #2
 80086ce:	9307      	strge	r3, [sp, #28]
 80086d0:	9307      	strlt	r3, [sp, #28]
 80086d2:	bfb8      	it	lt
 80086d4:	9204      	strlt	r2, [sp, #16]
 80086d6:	7823      	ldrb	r3, [r4, #0]
 80086d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80086da:	d10a      	bne.n	80086f2 <_vfiprintf_r+0x156>
 80086dc:	7863      	ldrb	r3, [r4, #1]
 80086de:	2b2a      	cmp	r3, #42	@ 0x2a
 80086e0:	d132      	bne.n	8008748 <_vfiprintf_r+0x1ac>
 80086e2:	9b03      	ldr	r3, [sp, #12]
 80086e4:	1d1a      	adds	r2, r3, #4
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	9203      	str	r2, [sp, #12]
 80086ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086ee:	3402      	adds	r4, #2
 80086f0:	9305      	str	r3, [sp, #20]
 80086f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80087c8 <_vfiprintf_r+0x22c>
 80086f6:	7821      	ldrb	r1, [r4, #0]
 80086f8:	2203      	movs	r2, #3
 80086fa:	4650      	mov	r0, sl
 80086fc:	f7f7 fd68 	bl	80001d0 <memchr>
 8008700:	b138      	cbz	r0, 8008712 <_vfiprintf_r+0x176>
 8008702:	9b04      	ldr	r3, [sp, #16]
 8008704:	eba0 000a 	sub.w	r0, r0, sl
 8008708:	2240      	movs	r2, #64	@ 0x40
 800870a:	4082      	lsls	r2, r0
 800870c:	4313      	orrs	r3, r2
 800870e:	3401      	adds	r4, #1
 8008710:	9304      	str	r3, [sp, #16]
 8008712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008716:	4829      	ldr	r0, [pc, #164]	@ (80087bc <_vfiprintf_r+0x220>)
 8008718:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800871c:	2206      	movs	r2, #6
 800871e:	f7f7 fd57 	bl	80001d0 <memchr>
 8008722:	2800      	cmp	r0, #0
 8008724:	d03f      	beq.n	80087a6 <_vfiprintf_r+0x20a>
 8008726:	4b26      	ldr	r3, [pc, #152]	@ (80087c0 <_vfiprintf_r+0x224>)
 8008728:	bb1b      	cbnz	r3, 8008772 <_vfiprintf_r+0x1d6>
 800872a:	9b03      	ldr	r3, [sp, #12]
 800872c:	3307      	adds	r3, #7
 800872e:	f023 0307 	bic.w	r3, r3, #7
 8008732:	3308      	adds	r3, #8
 8008734:	9303      	str	r3, [sp, #12]
 8008736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008738:	443b      	add	r3, r7
 800873a:	9309      	str	r3, [sp, #36]	@ 0x24
 800873c:	e76a      	b.n	8008614 <_vfiprintf_r+0x78>
 800873e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008742:	460c      	mov	r4, r1
 8008744:	2001      	movs	r0, #1
 8008746:	e7a8      	b.n	800869a <_vfiprintf_r+0xfe>
 8008748:	2300      	movs	r3, #0
 800874a:	3401      	adds	r4, #1
 800874c:	9305      	str	r3, [sp, #20]
 800874e:	4619      	mov	r1, r3
 8008750:	f04f 0c0a 	mov.w	ip, #10
 8008754:	4620      	mov	r0, r4
 8008756:	f810 2b01 	ldrb.w	r2, [r0], #1
 800875a:	3a30      	subs	r2, #48	@ 0x30
 800875c:	2a09      	cmp	r2, #9
 800875e:	d903      	bls.n	8008768 <_vfiprintf_r+0x1cc>
 8008760:	2b00      	cmp	r3, #0
 8008762:	d0c6      	beq.n	80086f2 <_vfiprintf_r+0x156>
 8008764:	9105      	str	r1, [sp, #20]
 8008766:	e7c4      	b.n	80086f2 <_vfiprintf_r+0x156>
 8008768:	fb0c 2101 	mla	r1, ip, r1, r2
 800876c:	4604      	mov	r4, r0
 800876e:	2301      	movs	r3, #1
 8008770:	e7f0      	b.n	8008754 <_vfiprintf_r+0x1b8>
 8008772:	ab03      	add	r3, sp, #12
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	462a      	mov	r2, r5
 8008778:	4b12      	ldr	r3, [pc, #72]	@ (80087c4 <_vfiprintf_r+0x228>)
 800877a:	a904      	add	r1, sp, #16
 800877c:	4630      	mov	r0, r6
 800877e:	f3af 8000 	nop.w
 8008782:	4607      	mov	r7, r0
 8008784:	1c78      	adds	r0, r7, #1
 8008786:	d1d6      	bne.n	8008736 <_vfiprintf_r+0x19a>
 8008788:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800878a:	07d9      	lsls	r1, r3, #31
 800878c:	d405      	bmi.n	800879a <_vfiprintf_r+0x1fe>
 800878e:	89ab      	ldrh	r3, [r5, #12]
 8008790:	059a      	lsls	r2, r3, #22
 8008792:	d402      	bmi.n	800879a <_vfiprintf_r+0x1fe>
 8008794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008796:	f7ff fdcf 	bl	8008338 <__retarget_lock_release_recursive>
 800879a:	89ab      	ldrh	r3, [r5, #12]
 800879c:	065b      	lsls	r3, r3, #25
 800879e:	f53f af1f 	bmi.w	80085e0 <_vfiprintf_r+0x44>
 80087a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087a4:	e71e      	b.n	80085e4 <_vfiprintf_r+0x48>
 80087a6:	ab03      	add	r3, sp, #12
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	462a      	mov	r2, r5
 80087ac:	4b05      	ldr	r3, [pc, #20]	@ (80087c4 <_vfiprintf_r+0x228>)
 80087ae:	a904      	add	r1, sp, #16
 80087b0:	4630      	mov	r0, r6
 80087b2:	f000 f879 	bl	80088a8 <_printf_i>
 80087b6:	e7e4      	b.n	8008782 <_vfiprintf_r+0x1e6>
 80087b8:	0800946c 	.word	0x0800946c
 80087bc:	08009476 	.word	0x08009476
 80087c0:	00000000 	.word	0x00000000
 80087c4:	08008577 	.word	0x08008577
 80087c8:	08009472 	.word	0x08009472

080087cc <_printf_common>:
 80087cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087d0:	4616      	mov	r6, r2
 80087d2:	4698      	mov	r8, r3
 80087d4:	688a      	ldr	r2, [r1, #8]
 80087d6:	690b      	ldr	r3, [r1, #16]
 80087d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087dc:	4293      	cmp	r3, r2
 80087de:	bfb8      	it	lt
 80087e0:	4613      	movlt	r3, r2
 80087e2:	6033      	str	r3, [r6, #0]
 80087e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087e8:	4607      	mov	r7, r0
 80087ea:	460c      	mov	r4, r1
 80087ec:	b10a      	cbz	r2, 80087f2 <_printf_common+0x26>
 80087ee:	3301      	adds	r3, #1
 80087f0:	6033      	str	r3, [r6, #0]
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	0699      	lsls	r1, r3, #26
 80087f6:	bf42      	ittt	mi
 80087f8:	6833      	ldrmi	r3, [r6, #0]
 80087fa:	3302      	addmi	r3, #2
 80087fc:	6033      	strmi	r3, [r6, #0]
 80087fe:	6825      	ldr	r5, [r4, #0]
 8008800:	f015 0506 	ands.w	r5, r5, #6
 8008804:	d106      	bne.n	8008814 <_printf_common+0x48>
 8008806:	f104 0a19 	add.w	sl, r4, #25
 800880a:	68e3      	ldr	r3, [r4, #12]
 800880c:	6832      	ldr	r2, [r6, #0]
 800880e:	1a9b      	subs	r3, r3, r2
 8008810:	42ab      	cmp	r3, r5
 8008812:	dc26      	bgt.n	8008862 <_printf_common+0x96>
 8008814:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008818:	6822      	ldr	r2, [r4, #0]
 800881a:	3b00      	subs	r3, #0
 800881c:	bf18      	it	ne
 800881e:	2301      	movne	r3, #1
 8008820:	0692      	lsls	r2, r2, #26
 8008822:	d42b      	bmi.n	800887c <_printf_common+0xb0>
 8008824:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008828:	4641      	mov	r1, r8
 800882a:	4638      	mov	r0, r7
 800882c:	47c8      	blx	r9
 800882e:	3001      	adds	r0, #1
 8008830:	d01e      	beq.n	8008870 <_printf_common+0xa4>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	6922      	ldr	r2, [r4, #16]
 8008836:	f003 0306 	and.w	r3, r3, #6
 800883a:	2b04      	cmp	r3, #4
 800883c:	bf02      	ittt	eq
 800883e:	68e5      	ldreq	r5, [r4, #12]
 8008840:	6833      	ldreq	r3, [r6, #0]
 8008842:	1aed      	subeq	r5, r5, r3
 8008844:	68a3      	ldr	r3, [r4, #8]
 8008846:	bf0c      	ite	eq
 8008848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800884c:	2500      	movne	r5, #0
 800884e:	4293      	cmp	r3, r2
 8008850:	bfc4      	itt	gt
 8008852:	1a9b      	subgt	r3, r3, r2
 8008854:	18ed      	addgt	r5, r5, r3
 8008856:	2600      	movs	r6, #0
 8008858:	341a      	adds	r4, #26
 800885a:	42b5      	cmp	r5, r6
 800885c:	d11a      	bne.n	8008894 <_printf_common+0xc8>
 800885e:	2000      	movs	r0, #0
 8008860:	e008      	b.n	8008874 <_printf_common+0xa8>
 8008862:	2301      	movs	r3, #1
 8008864:	4652      	mov	r2, sl
 8008866:	4641      	mov	r1, r8
 8008868:	4638      	mov	r0, r7
 800886a:	47c8      	blx	r9
 800886c:	3001      	adds	r0, #1
 800886e:	d103      	bne.n	8008878 <_printf_common+0xac>
 8008870:	f04f 30ff 	mov.w	r0, #4294967295
 8008874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008878:	3501      	adds	r5, #1
 800887a:	e7c6      	b.n	800880a <_printf_common+0x3e>
 800887c:	18e1      	adds	r1, r4, r3
 800887e:	1c5a      	adds	r2, r3, #1
 8008880:	2030      	movs	r0, #48	@ 0x30
 8008882:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008886:	4422      	add	r2, r4
 8008888:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800888c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008890:	3302      	adds	r3, #2
 8008892:	e7c7      	b.n	8008824 <_printf_common+0x58>
 8008894:	2301      	movs	r3, #1
 8008896:	4622      	mov	r2, r4
 8008898:	4641      	mov	r1, r8
 800889a:	4638      	mov	r0, r7
 800889c:	47c8      	blx	r9
 800889e:	3001      	adds	r0, #1
 80088a0:	d0e6      	beq.n	8008870 <_printf_common+0xa4>
 80088a2:	3601      	adds	r6, #1
 80088a4:	e7d9      	b.n	800885a <_printf_common+0x8e>
	...

080088a8 <_printf_i>:
 80088a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088ac:	7e0f      	ldrb	r7, [r1, #24]
 80088ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80088b0:	2f78      	cmp	r7, #120	@ 0x78
 80088b2:	4691      	mov	r9, r2
 80088b4:	4680      	mov	r8, r0
 80088b6:	460c      	mov	r4, r1
 80088b8:	469a      	mov	sl, r3
 80088ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80088be:	d807      	bhi.n	80088d0 <_printf_i+0x28>
 80088c0:	2f62      	cmp	r7, #98	@ 0x62
 80088c2:	d80a      	bhi.n	80088da <_printf_i+0x32>
 80088c4:	2f00      	cmp	r7, #0
 80088c6:	f000 80d2 	beq.w	8008a6e <_printf_i+0x1c6>
 80088ca:	2f58      	cmp	r7, #88	@ 0x58
 80088cc:	f000 80b9 	beq.w	8008a42 <_printf_i+0x19a>
 80088d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80088d8:	e03a      	b.n	8008950 <_printf_i+0xa8>
 80088da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80088de:	2b15      	cmp	r3, #21
 80088e0:	d8f6      	bhi.n	80088d0 <_printf_i+0x28>
 80088e2:	a101      	add	r1, pc, #4	@ (adr r1, 80088e8 <_printf_i+0x40>)
 80088e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088e8:	08008941 	.word	0x08008941
 80088ec:	08008955 	.word	0x08008955
 80088f0:	080088d1 	.word	0x080088d1
 80088f4:	080088d1 	.word	0x080088d1
 80088f8:	080088d1 	.word	0x080088d1
 80088fc:	080088d1 	.word	0x080088d1
 8008900:	08008955 	.word	0x08008955
 8008904:	080088d1 	.word	0x080088d1
 8008908:	080088d1 	.word	0x080088d1
 800890c:	080088d1 	.word	0x080088d1
 8008910:	080088d1 	.word	0x080088d1
 8008914:	08008a55 	.word	0x08008a55
 8008918:	0800897f 	.word	0x0800897f
 800891c:	08008a0f 	.word	0x08008a0f
 8008920:	080088d1 	.word	0x080088d1
 8008924:	080088d1 	.word	0x080088d1
 8008928:	08008a77 	.word	0x08008a77
 800892c:	080088d1 	.word	0x080088d1
 8008930:	0800897f 	.word	0x0800897f
 8008934:	080088d1 	.word	0x080088d1
 8008938:	080088d1 	.word	0x080088d1
 800893c:	08008a17 	.word	0x08008a17
 8008940:	6833      	ldr	r3, [r6, #0]
 8008942:	1d1a      	adds	r2, r3, #4
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6032      	str	r2, [r6, #0]
 8008948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800894c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008950:	2301      	movs	r3, #1
 8008952:	e09d      	b.n	8008a90 <_printf_i+0x1e8>
 8008954:	6833      	ldr	r3, [r6, #0]
 8008956:	6820      	ldr	r0, [r4, #0]
 8008958:	1d19      	adds	r1, r3, #4
 800895a:	6031      	str	r1, [r6, #0]
 800895c:	0606      	lsls	r6, r0, #24
 800895e:	d501      	bpl.n	8008964 <_printf_i+0xbc>
 8008960:	681d      	ldr	r5, [r3, #0]
 8008962:	e003      	b.n	800896c <_printf_i+0xc4>
 8008964:	0645      	lsls	r5, r0, #25
 8008966:	d5fb      	bpl.n	8008960 <_printf_i+0xb8>
 8008968:	f9b3 5000 	ldrsh.w	r5, [r3]
 800896c:	2d00      	cmp	r5, #0
 800896e:	da03      	bge.n	8008978 <_printf_i+0xd0>
 8008970:	232d      	movs	r3, #45	@ 0x2d
 8008972:	426d      	negs	r5, r5
 8008974:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008978:	4859      	ldr	r0, [pc, #356]	@ (8008ae0 <_printf_i+0x238>)
 800897a:	230a      	movs	r3, #10
 800897c:	e011      	b.n	80089a2 <_printf_i+0xfa>
 800897e:	6821      	ldr	r1, [r4, #0]
 8008980:	6833      	ldr	r3, [r6, #0]
 8008982:	0608      	lsls	r0, r1, #24
 8008984:	f853 5b04 	ldr.w	r5, [r3], #4
 8008988:	d402      	bmi.n	8008990 <_printf_i+0xe8>
 800898a:	0649      	lsls	r1, r1, #25
 800898c:	bf48      	it	mi
 800898e:	b2ad      	uxthmi	r5, r5
 8008990:	2f6f      	cmp	r7, #111	@ 0x6f
 8008992:	4853      	ldr	r0, [pc, #332]	@ (8008ae0 <_printf_i+0x238>)
 8008994:	6033      	str	r3, [r6, #0]
 8008996:	bf14      	ite	ne
 8008998:	230a      	movne	r3, #10
 800899a:	2308      	moveq	r3, #8
 800899c:	2100      	movs	r1, #0
 800899e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80089a2:	6866      	ldr	r6, [r4, #4]
 80089a4:	60a6      	str	r6, [r4, #8]
 80089a6:	2e00      	cmp	r6, #0
 80089a8:	bfa2      	ittt	ge
 80089aa:	6821      	ldrge	r1, [r4, #0]
 80089ac:	f021 0104 	bicge.w	r1, r1, #4
 80089b0:	6021      	strge	r1, [r4, #0]
 80089b2:	b90d      	cbnz	r5, 80089b8 <_printf_i+0x110>
 80089b4:	2e00      	cmp	r6, #0
 80089b6:	d04b      	beq.n	8008a50 <_printf_i+0x1a8>
 80089b8:	4616      	mov	r6, r2
 80089ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80089be:	fb03 5711 	mls	r7, r3, r1, r5
 80089c2:	5dc7      	ldrb	r7, [r0, r7]
 80089c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089c8:	462f      	mov	r7, r5
 80089ca:	42bb      	cmp	r3, r7
 80089cc:	460d      	mov	r5, r1
 80089ce:	d9f4      	bls.n	80089ba <_printf_i+0x112>
 80089d0:	2b08      	cmp	r3, #8
 80089d2:	d10b      	bne.n	80089ec <_printf_i+0x144>
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	07df      	lsls	r7, r3, #31
 80089d8:	d508      	bpl.n	80089ec <_printf_i+0x144>
 80089da:	6923      	ldr	r3, [r4, #16]
 80089dc:	6861      	ldr	r1, [r4, #4]
 80089de:	4299      	cmp	r1, r3
 80089e0:	bfde      	ittt	le
 80089e2:	2330      	movle	r3, #48	@ 0x30
 80089e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089ec:	1b92      	subs	r2, r2, r6
 80089ee:	6122      	str	r2, [r4, #16]
 80089f0:	f8cd a000 	str.w	sl, [sp]
 80089f4:	464b      	mov	r3, r9
 80089f6:	aa03      	add	r2, sp, #12
 80089f8:	4621      	mov	r1, r4
 80089fa:	4640      	mov	r0, r8
 80089fc:	f7ff fee6 	bl	80087cc <_printf_common>
 8008a00:	3001      	adds	r0, #1
 8008a02:	d14a      	bne.n	8008a9a <_printf_i+0x1f2>
 8008a04:	f04f 30ff 	mov.w	r0, #4294967295
 8008a08:	b004      	add	sp, #16
 8008a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	f043 0320 	orr.w	r3, r3, #32
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	4833      	ldr	r0, [pc, #204]	@ (8008ae4 <_printf_i+0x23c>)
 8008a18:	2778      	movs	r7, #120	@ 0x78
 8008a1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	6831      	ldr	r1, [r6, #0]
 8008a22:	061f      	lsls	r7, r3, #24
 8008a24:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a28:	d402      	bmi.n	8008a30 <_printf_i+0x188>
 8008a2a:	065f      	lsls	r7, r3, #25
 8008a2c:	bf48      	it	mi
 8008a2e:	b2ad      	uxthmi	r5, r5
 8008a30:	6031      	str	r1, [r6, #0]
 8008a32:	07d9      	lsls	r1, r3, #31
 8008a34:	bf44      	itt	mi
 8008a36:	f043 0320 	orrmi.w	r3, r3, #32
 8008a3a:	6023      	strmi	r3, [r4, #0]
 8008a3c:	b11d      	cbz	r5, 8008a46 <_printf_i+0x19e>
 8008a3e:	2310      	movs	r3, #16
 8008a40:	e7ac      	b.n	800899c <_printf_i+0xf4>
 8008a42:	4827      	ldr	r0, [pc, #156]	@ (8008ae0 <_printf_i+0x238>)
 8008a44:	e7e9      	b.n	8008a1a <_printf_i+0x172>
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	f023 0320 	bic.w	r3, r3, #32
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	e7f6      	b.n	8008a3e <_printf_i+0x196>
 8008a50:	4616      	mov	r6, r2
 8008a52:	e7bd      	b.n	80089d0 <_printf_i+0x128>
 8008a54:	6833      	ldr	r3, [r6, #0]
 8008a56:	6825      	ldr	r5, [r4, #0]
 8008a58:	6961      	ldr	r1, [r4, #20]
 8008a5a:	1d18      	adds	r0, r3, #4
 8008a5c:	6030      	str	r0, [r6, #0]
 8008a5e:	062e      	lsls	r6, r5, #24
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	d501      	bpl.n	8008a68 <_printf_i+0x1c0>
 8008a64:	6019      	str	r1, [r3, #0]
 8008a66:	e002      	b.n	8008a6e <_printf_i+0x1c6>
 8008a68:	0668      	lsls	r0, r5, #25
 8008a6a:	d5fb      	bpl.n	8008a64 <_printf_i+0x1bc>
 8008a6c:	8019      	strh	r1, [r3, #0]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	6123      	str	r3, [r4, #16]
 8008a72:	4616      	mov	r6, r2
 8008a74:	e7bc      	b.n	80089f0 <_printf_i+0x148>
 8008a76:	6833      	ldr	r3, [r6, #0]
 8008a78:	1d1a      	adds	r2, r3, #4
 8008a7a:	6032      	str	r2, [r6, #0]
 8008a7c:	681e      	ldr	r6, [r3, #0]
 8008a7e:	6862      	ldr	r2, [r4, #4]
 8008a80:	2100      	movs	r1, #0
 8008a82:	4630      	mov	r0, r6
 8008a84:	f7f7 fba4 	bl	80001d0 <memchr>
 8008a88:	b108      	cbz	r0, 8008a8e <_printf_i+0x1e6>
 8008a8a:	1b80      	subs	r0, r0, r6
 8008a8c:	6060      	str	r0, [r4, #4]
 8008a8e:	6863      	ldr	r3, [r4, #4]
 8008a90:	6123      	str	r3, [r4, #16]
 8008a92:	2300      	movs	r3, #0
 8008a94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a98:	e7aa      	b.n	80089f0 <_printf_i+0x148>
 8008a9a:	6923      	ldr	r3, [r4, #16]
 8008a9c:	4632      	mov	r2, r6
 8008a9e:	4649      	mov	r1, r9
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	47d0      	blx	sl
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d0ad      	beq.n	8008a04 <_printf_i+0x15c>
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	079b      	lsls	r3, r3, #30
 8008aac:	d413      	bmi.n	8008ad6 <_printf_i+0x22e>
 8008aae:	68e0      	ldr	r0, [r4, #12]
 8008ab0:	9b03      	ldr	r3, [sp, #12]
 8008ab2:	4298      	cmp	r0, r3
 8008ab4:	bfb8      	it	lt
 8008ab6:	4618      	movlt	r0, r3
 8008ab8:	e7a6      	b.n	8008a08 <_printf_i+0x160>
 8008aba:	2301      	movs	r3, #1
 8008abc:	4632      	mov	r2, r6
 8008abe:	4649      	mov	r1, r9
 8008ac0:	4640      	mov	r0, r8
 8008ac2:	47d0      	blx	sl
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	d09d      	beq.n	8008a04 <_printf_i+0x15c>
 8008ac8:	3501      	adds	r5, #1
 8008aca:	68e3      	ldr	r3, [r4, #12]
 8008acc:	9903      	ldr	r1, [sp, #12]
 8008ace:	1a5b      	subs	r3, r3, r1
 8008ad0:	42ab      	cmp	r3, r5
 8008ad2:	dcf2      	bgt.n	8008aba <_printf_i+0x212>
 8008ad4:	e7eb      	b.n	8008aae <_printf_i+0x206>
 8008ad6:	2500      	movs	r5, #0
 8008ad8:	f104 0619 	add.w	r6, r4, #25
 8008adc:	e7f5      	b.n	8008aca <_printf_i+0x222>
 8008ade:	bf00      	nop
 8008ae0:	0800947d 	.word	0x0800947d
 8008ae4:	0800948e 	.word	0x0800948e

08008ae8 <__sflush_r>:
 8008ae8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af0:	0716      	lsls	r6, r2, #28
 8008af2:	4605      	mov	r5, r0
 8008af4:	460c      	mov	r4, r1
 8008af6:	d454      	bmi.n	8008ba2 <__sflush_r+0xba>
 8008af8:	684b      	ldr	r3, [r1, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	dc02      	bgt.n	8008b04 <__sflush_r+0x1c>
 8008afe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	dd48      	ble.n	8008b96 <__sflush_r+0xae>
 8008b04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b06:	2e00      	cmp	r6, #0
 8008b08:	d045      	beq.n	8008b96 <__sflush_r+0xae>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008b10:	682f      	ldr	r7, [r5, #0]
 8008b12:	6a21      	ldr	r1, [r4, #32]
 8008b14:	602b      	str	r3, [r5, #0]
 8008b16:	d030      	beq.n	8008b7a <__sflush_r+0x92>
 8008b18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008b1a:	89a3      	ldrh	r3, [r4, #12]
 8008b1c:	0759      	lsls	r1, r3, #29
 8008b1e:	d505      	bpl.n	8008b2c <__sflush_r+0x44>
 8008b20:	6863      	ldr	r3, [r4, #4]
 8008b22:	1ad2      	subs	r2, r2, r3
 8008b24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b26:	b10b      	cbz	r3, 8008b2c <__sflush_r+0x44>
 8008b28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b2a:	1ad2      	subs	r2, r2, r3
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b30:	6a21      	ldr	r1, [r4, #32]
 8008b32:	4628      	mov	r0, r5
 8008b34:	47b0      	blx	r6
 8008b36:	1c43      	adds	r3, r0, #1
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	d106      	bne.n	8008b4a <__sflush_r+0x62>
 8008b3c:	6829      	ldr	r1, [r5, #0]
 8008b3e:	291d      	cmp	r1, #29
 8008b40:	d82b      	bhi.n	8008b9a <__sflush_r+0xb2>
 8008b42:	4a2a      	ldr	r2, [pc, #168]	@ (8008bec <__sflush_r+0x104>)
 8008b44:	410a      	asrs	r2, r1
 8008b46:	07d6      	lsls	r6, r2, #31
 8008b48:	d427      	bmi.n	8008b9a <__sflush_r+0xb2>
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	6062      	str	r2, [r4, #4]
 8008b4e:	04d9      	lsls	r1, r3, #19
 8008b50:	6922      	ldr	r2, [r4, #16]
 8008b52:	6022      	str	r2, [r4, #0]
 8008b54:	d504      	bpl.n	8008b60 <__sflush_r+0x78>
 8008b56:	1c42      	adds	r2, r0, #1
 8008b58:	d101      	bne.n	8008b5e <__sflush_r+0x76>
 8008b5a:	682b      	ldr	r3, [r5, #0]
 8008b5c:	b903      	cbnz	r3, 8008b60 <__sflush_r+0x78>
 8008b5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b62:	602f      	str	r7, [r5, #0]
 8008b64:	b1b9      	cbz	r1, 8008b96 <__sflush_r+0xae>
 8008b66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b6a:	4299      	cmp	r1, r3
 8008b6c:	d002      	beq.n	8008b74 <__sflush_r+0x8c>
 8008b6e:	4628      	mov	r0, r5
 8008b70:	f7ff fbf2 	bl	8008358 <_free_r>
 8008b74:	2300      	movs	r3, #0
 8008b76:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b78:	e00d      	b.n	8008b96 <__sflush_r+0xae>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	47b0      	blx	r6
 8008b80:	4602      	mov	r2, r0
 8008b82:	1c50      	adds	r0, r2, #1
 8008b84:	d1c9      	bne.n	8008b1a <__sflush_r+0x32>
 8008b86:	682b      	ldr	r3, [r5, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d0c6      	beq.n	8008b1a <__sflush_r+0x32>
 8008b8c:	2b1d      	cmp	r3, #29
 8008b8e:	d001      	beq.n	8008b94 <__sflush_r+0xac>
 8008b90:	2b16      	cmp	r3, #22
 8008b92:	d11e      	bne.n	8008bd2 <__sflush_r+0xea>
 8008b94:	602f      	str	r7, [r5, #0]
 8008b96:	2000      	movs	r0, #0
 8008b98:	e022      	b.n	8008be0 <__sflush_r+0xf8>
 8008b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b9e:	b21b      	sxth	r3, r3
 8008ba0:	e01b      	b.n	8008bda <__sflush_r+0xf2>
 8008ba2:	690f      	ldr	r7, [r1, #16]
 8008ba4:	2f00      	cmp	r7, #0
 8008ba6:	d0f6      	beq.n	8008b96 <__sflush_r+0xae>
 8008ba8:	0793      	lsls	r3, r2, #30
 8008baa:	680e      	ldr	r6, [r1, #0]
 8008bac:	bf08      	it	eq
 8008bae:	694b      	ldreq	r3, [r1, #20]
 8008bb0:	600f      	str	r7, [r1, #0]
 8008bb2:	bf18      	it	ne
 8008bb4:	2300      	movne	r3, #0
 8008bb6:	eba6 0807 	sub.w	r8, r6, r7
 8008bba:	608b      	str	r3, [r1, #8]
 8008bbc:	f1b8 0f00 	cmp.w	r8, #0
 8008bc0:	dde9      	ble.n	8008b96 <__sflush_r+0xae>
 8008bc2:	6a21      	ldr	r1, [r4, #32]
 8008bc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008bc6:	4643      	mov	r3, r8
 8008bc8:	463a      	mov	r2, r7
 8008bca:	4628      	mov	r0, r5
 8008bcc:	47b0      	blx	r6
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	dc08      	bgt.n	8008be4 <__sflush_r+0xfc>
 8008bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bda:	81a3      	strh	r3, [r4, #12]
 8008bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be4:	4407      	add	r7, r0
 8008be6:	eba8 0800 	sub.w	r8, r8, r0
 8008bea:	e7e7      	b.n	8008bbc <__sflush_r+0xd4>
 8008bec:	dfbffffe 	.word	0xdfbffffe

08008bf0 <_fflush_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	690b      	ldr	r3, [r1, #16]
 8008bf4:	4605      	mov	r5, r0
 8008bf6:	460c      	mov	r4, r1
 8008bf8:	b913      	cbnz	r3, 8008c00 <_fflush_r+0x10>
 8008bfa:	2500      	movs	r5, #0
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}
 8008c00:	b118      	cbz	r0, 8008c0a <_fflush_r+0x1a>
 8008c02:	6a03      	ldr	r3, [r0, #32]
 8008c04:	b90b      	cbnz	r3, 8008c0a <_fflush_r+0x1a>
 8008c06:	f7ff fa3b 	bl	8008080 <__sinit>
 8008c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d0f3      	beq.n	8008bfa <_fflush_r+0xa>
 8008c12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c14:	07d0      	lsls	r0, r2, #31
 8008c16:	d404      	bmi.n	8008c22 <_fflush_r+0x32>
 8008c18:	0599      	lsls	r1, r3, #22
 8008c1a:	d402      	bmi.n	8008c22 <_fflush_r+0x32>
 8008c1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c1e:	f7ff fb8a 	bl	8008336 <__retarget_lock_acquire_recursive>
 8008c22:	4628      	mov	r0, r5
 8008c24:	4621      	mov	r1, r4
 8008c26:	f7ff ff5f 	bl	8008ae8 <__sflush_r>
 8008c2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c2c:	07da      	lsls	r2, r3, #31
 8008c2e:	4605      	mov	r5, r0
 8008c30:	d4e4      	bmi.n	8008bfc <_fflush_r+0xc>
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	059b      	lsls	r3, r3, #22
 8008c36:	d4e1      	bmi.n	8008bfc <_fflush_r+0xc>
 8008c38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c3a:	f7ff fb7d 	bl	8008338 <__retarget_lock_release_recursive>
 8008c3e:	e7dd      	b.n	8008bfc <_fflush_r+0xc>

08008c40 <__swbuf_r>:
 8008c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c42:	460e      	mov	r6, r1
 8008c44:	4614      	mov	r4, r2
 8008c46:	4605      	mov	r5, r0
 8008c48:	b118      	cbz	r0, 8008c52 <__swbuf_r+0x12>
 8008c4a:	6a03      	ldr	r3, [r0, #32]
 8008c4c:	b90b      	cbnz	r3, 8008c52 <__swbuf_r+0x12>
 8008c4e:	f7ff fa17 	bl	8008080 <__sinit>
 8008c52:	69a3      	ldr	r3, [r4, #24]
 8008c54:	60a3      	str	r3, [r4, #8]
 8008c56:	89a3      	ldrh	r3, [r4, #12]
 8008c58:	071a      	lsls	r2, r3, #28
 8008c5a:	d501      	bpl.n	8008c60 <__swbuf_r+0x20>
 8008c5c:	6923      	ldr	r3, [r4, #16]
 8008c5e:	b943      	cbnz	r3, 8008c72 <__swbuf_r+0x32>
 8008c60:	4621      	mov	r1, r4
 8008c62:	4628      	mov	r0, r5
 8008c64:	f000 f82a 	bl	8008cbc <__swsetup_r>
 8008c68:	b118      	cbz	r0, 8008c72 <__swbuf_r+0x32>
 8008c6a:	f04f 37ff 	mov.w	r7, #4294967295
 8008c6e:	4638      	mov	r0, r7
 8008c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	6922      	ldr	r2, [r4, #16]
 8008c76:	1a98      	subs	r0, r3, r2
 8008c78:	6963      	ldr	r3, [r4, #20]
 8008c7a:	b2f6      	uxtb	r6, r6
 8008c7c:	4283      	cmp	r3, r0
 8008c7e:	4637      	mov	r7, r6
 8008c80:	dc05      	bgt.n	8008c8e <__swbuf_r+0x4e>
 8008c82:	4621      	mov	r1, r4
 8008c84:	4628      	mov	r0, r5
 8008c86:	f7ff ffb3 	bl	8008bf0 <_fflush_r>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d1ed      	bne.n	8008c6a <__swbuf_r+0x2a>
 8008c8e:	68a3      	ldr	r3, [r4, #8]
 8008c90:	3b01      	subs	r3, #1
 8008c92:	60a3      	str	r3, [r4, #8]
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	6022      	str	r2, [r4, #0]
 8008c9a:	701e      	strb	r6, [r3, #0]
 8008c9c:	6962      	ldr	r2, [r4, #20]
 8008c9e:	1c43      	adds	r3, r0, #1
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d004      	beq.n	8008cae <__swbuf_r+0x6e>
 8008ca4:	89a3      	ldrh	r3, [r4, #12]
 8008ca6:	07db      	lsls	r3, r3, #31
 8008ca8:	d5e1      	bpl.n	8008c6e <__swbuf_r+0x2e>
 8008caa:	2e0a      	cmp	r6, #10
 8008cac:	d1df      	bne.n	8008c6e <__swbuf_r+0x2e>
 8008cae:	4621      	mov	r1, r4
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	f7ff ff9d 	bl	8008bf0 <_fflush_r>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d0d9      	beq.n	8008c6e <__swbuf_r+0x2e>
 8008cba:	e7d6      	b.n	8008c6a <__swbuf_r+0x2a>

08008cbc <__swsetup_r>:
 8008cbc:	b538      	push	{r3, r4, r5, lr}
 8008cbe:	4b29      	ldr	r3, [pc, #164]	@ (8008d64 <__swsetup_r+0xa8>)
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	6818      	ldr	r0, [r3, #0]
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	b118      	cbz	r0, 8008cd0 <__swsetup_r+0x14>
 8008cc8:	6a03      	ldr	r3, [r0, #32]
 8008cca:	b90b      	cbnz	r3, 8008cd0 <__swsetup_r+0x14>
 8008ccc:	f7ff f9d8 	bl	8008080 <__sinit>
 8008cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cd4:	0719      	lsls	r1, r3, #28
 8008cd6:	d422      	bmi.n	8008d1e <__swsetup_r+0x62>
 8008cd8:	06da      	lsls	r2, r3, #27
 8008cda:	d407      	bmi.n	8008cec <__swsetup_r+0x30>
 8008cdc:	2209      	movs	r2, #9
 8008cde:	602a      	str	r2, [r5, #0]
 8008ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ce4:	81a3      	strh	r3, [r4, #12]
 8008ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cea:	e033      	b.n	8008d54 <__swsetup_r+0x98>
 8008cec:	0758      	lsls	r0, r3, #29
 8008cee:	d512      	bpl.n	8008d16 <__swsetup_r+0x5a>
 8008cf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cf2:	b141      	cbz	r1, 8008d06 <__swsetup_r+0x4a>
 8008cf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cf8:	4299      	cmp	r1, r3
 8008cfa:	d002      	beq.n	8008d02 <__swsetup_r+0x46>
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	f7ff fb2b 	bl	8008358 <_free_r>
 8008d02:	2300      	movs	r3, #0
 8008d04:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d06:	89a3      	ldrh	r3, [r4, #12]
 8008d08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008d0c:	81a3      	strh	r3, [r4, #12]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	6063      	str	r3, [r4, #4]
 8008d12:	6923      	ldr	r3, [r4, #16]
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	f043 0308 	orr.w	r3, r3, #8
 8008d1c:	81a3      	strh	r3, [r4, #12]
 8008d1e:	6923      	ldr	r3, [r4, #16]
 8008d20:	b94b      	cbnz	r3, 8008d36 <__swsetup_r+0x7a>
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d2c:	d003      	beq.n	8008d36 <__swsetup_r+0x7a>
 8008d2e:	4621      	mov	r1, r4
 8008d30:	4628      	mov	r0, r5
 8008d32:	f000 f84f 	bl	8008dd4 <__smakebuf_r>
 8008d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d3a:	f013 0201 	ands.w	r2, r3, #1
 8008d3e:	d00a      	beq.n	8008d56 <__swsetup_r+0x9a>
 8008d40:	2200      	movs	r2, #0
 8008d42:	60a2      	str	r2, [r4, #8]
 8008d44:	6962      	ldr	r2, [r4, #20]
 8008d46:	4252      	negs	r2, r2
 8008d48:	61a2      	str	r2, [r4, #24]
 8008d4a:	6922      	ldr	r2, [r4, #16]
 8008d4c:	b942      	cbnz	r2, 8008d60 <__swsetup_r+0xa4>
 8008d4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d52:	d1c5      	bne.n	8008ce0 <__swsetup_r+0x24>
 8008d54:	bd38      	pop	{r3, r4, r5, pc}
 8008d56:	0799      	lsls	r1, r3, #30
 8008d58:	bf58      	it	pl
 8008d5a:	6962      	ldrpl	r2, [r4, #20]
 8008d5c:	60a2      	str	r2, [r4, #8]
 8008d5e:	e7f4      	b.n	8008d4a <__swsetup_r+0x8e>
 8008d60:	2000      	movs	r0, #0
 8008d62:	e7f7      	b.n	8008d54 <__swsetup_r+0x98>
 8008d64:	20000024 	.word	0x20000024

08008d68 <_sbrk_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4d06      	ldr	r5, [pc, #24]	@ (8008d84 <_sbrk_r+0x1c>)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4604      	mov	r4, r0
 8008d70:	4608      	mov	r0, r1
 8008d72:	602b      	str	r3, [r5, #0]
 8008d74:	f7f9 fa4c 	bl	8002210 <_sbrk>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <_sbrk_r+0x1a>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	b103      	cbz	r3, 8008d82 <_sbrk_r+0x1a>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	20004cbc 	.word	0x20004cbc

08008d88 <__swhatbuf_r>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d90:	2900      	cmp	r1, #0
 8008d92:	b096      	sub	sp, #88	@ 0x58
 8008d94:	4615      	mov	r5, r2
 8008d96:	461e      	mov	r6, r3
 8008d98:	da0d      	bge.n	8008db6 <__swhatbuf_r+0x2e>
 8008d9a:	89a3      	ldrh	r3, [r4, #12]
 8008d9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008da0:	f04f 0100 	mov.w	r1, #0
 8008da4:	bf14      	ite	ne
 8008da6:	2340      	movne	r3, #64	@ 0x40
 8008da8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008dac:	2000      	movs	r0, #0
 8008dae:	6031      	str	r1, [r6, #0]
 8008db0:	602b      	str	r3, [r5, #0]
 8008db2:	b016      	add	sp, #88	@ 0x58
 8008db4:	bd70      	pop	{r4, r5, r6, pc}
 8008db6:	466a      	mov	r2, sp
 8008db8:	f000 f848 	bl	8008e4c <_fstat_r>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	dbec      	blt.n	8008d9a <__swhatbuf_r+0x12>
 8008dc0:	9901      	ldr	r1, [sp, #4]
 8008dc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008dc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008dca:	4259      	negs	r1, r3
 8008dcc:	4159      	adcs	r1, r3
 8008dce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008dd2:	e7eb      	b.n	8008dac <__swhatbuf_r+0x24>

08008dd4 <__smakebuf_r>:
 8008dd4:	898b      	ldrh	r3, [r1, #12]
 8008dd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dd8:	079d      	lsls	r5, r3, #30
 8008dda:	4606      	mov	r6, r0
 8008ddc:	460c      	mov	r4, r1
 8008dde:	d507      	bpl.n	8008df0 <__smakebuf_r+0x1c>
 8008de0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	6123      	str	r3, [r4, #16]
 8008de8:	2301      	movs	r3, #1
 8008dea:	6163      	str	r3, [r4, #20]
 8008dec:	b003      	add	sp, #12
 8008dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008df0:	ab01      	add	r3, sp, #4
 8008df2:	466a      	mov	r2, sp
 8008df4:	f7ff ffc8 	bl	8008d88 <__swhatbuf_r>
 8008df8:	9f00      	ldr	r7, [sp, #0]
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	4639      	mov	r1, r7
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f7ff fb16 	bl	8008430 <_malloc_r>
 8008e04:	b948      	cbnz	r0, 8008e1a <__smakebuf_r+0x46>
 8008e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e0a:	059a      	lsls	r2, r3, #22
 8008e0c:	d4ee      	bmi.n	8008dec <__smakebuf_r+0x18>
 8008e0e:	f023 0303 	bic.w	r3, r3, #3
 8008e12:	f043 0302 	orr.w	r3, r3, #2
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	e7e2      	b.n	8008de0 <__smakebuf_r+0xc>
 8008e1a:	89a3      	ldrh	r3, [r4, #12]
 8008e1c:	6020      	str	r0, [r4, #0]
 8008e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e22:	81a3      	strh	r3, [r4, #12]
 8008e24:	9b01      	ldr	r3, [sp, #4]
 8008e26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e2a:	b15b      	cbz	r3, 8008e44 <__smakebuf_r+0x70>
 8008e2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e30:	4630      	mov	r0, r6
 8008e32:	f000 f81d 	bl	8008e70 <_isatty_r>
 8008e36:	b128      	cbz	r0, 8008e44 <__smakebuf_r+0x70>
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	f023 0303 	bic.w	r3, r3, #3
 8008e3e:	f043 0301 	orr.w	r3, r3, #1
 8008e42:	81a3      	strh	r3, [r4, #12]
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	431d      	orrs	r5, r3
 8008e48:	81a5      	strh	r5, [r4, #12]
 8008e4a:	e7cf      	b.n	8008dec <__smakebuf_r+0x18>

08008e4c <_fstat_r>:
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	4d07      	ldr	r5, [pc, #28]	@ (8008e6c <_fstat_r+0x20>)
 8008e50:	2300      	movs	r3, #0
 8008e52:	4604      	mov	r4, r0
 8008e54:	4608      	mov	r0, r1
 8008e56:	4611      	mov	r1, r2
 8008e58:	602b      	str	r3, [r5, #0]
 8008e5a:	f7f9 f9b0 	bl	80021be <_fstat>
 8008e5e:	1c43      	adds	r3, r0, #1
 8008e60:	d102      	bne.n	8008e68 <_fstat_r+0x1c>
 8008e62:	682b      	ldr	r3, [r5, #0]
 8008e64:	b103      	cbz	r3, 8008e68 <_fstat_r+0x1c>
 8008e66:	6023      	str	r3, [r4, #0]
 8008e68:	bd38      	pop	{r3, r4, r5, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20004cbc 	.word	0x20004cbc

08008e70 <_isatty_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4d06      	ldr	r5, [pc, #24]	@ (8008e8c <_isatty_r+0x1c>)
 8008e74:	2300      	movs	r3, #0
 8008e76:	4604      	mov	r4, r0
 8008e78:	4608      	mov	r0, r1
 8008e7a:	602b      	str	r3, [r5, #0]
 8008e7c:	f7f9 f9af 	bl	80021de <_isatty>
 8008e80:	1c43      	adds	r3, r0, #1
 8008e82:	d102      	bne.n	8008e8a <_isatty_r+0x1a>
 8008e84:	682b      	ldr	r3, [r5, #0]
 8008e86:	b103      	cbz	r3, 8008e8a <_isatty_r+0x1a>
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
 8008e8c:	20004cbc 	.word	0x20004cbc

08008e90 <atan2>:
 8008e90:	f000 b802 	b.w	8008e98 <__ieee754_atan2>
 8008e94:	0000      	movs	r0, r0
	...

08008e98 <__ieee754_atan2>:
 8008e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e9c:	ec57 6b11 	vmov	r6, r7, d1
 8008ea0:	4273      	negs	r3, r6
 8008ea2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8009020 <__ieee754_atan2+0x188>
 8008ea6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8008eaa:	4333      	orrs	r3, r6
 8008eac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008eb0:	4543      	cmp	r3, r8
 8008eb2:	ec51 0b10 	vmov	r0, r1, d0
 8008eb6:	4635      	mov	r5, r6
 8008eb8:	d809      	bhi.n	8008ece <__ieee754_atan2+0x36>
 8008eba:	4244      	negs	r4, r0
 8008ebc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008ec0:	4304      	orrs	r4, r0
 8008ec2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008ec6:	4544      	cmp	r4, r8
 8008ec8:	468e      	mov	lr, r1
 8008eca:	4681      	mov	r9, r0
 8008ecc:	d907      	bls.n	8008ede <__ieee754_atan2+0x46>
 8008ece:	4632      	mov	r2, r6
 8008ed0:	463b      	mov	r3, r7
 8008ed2:	f7f7 f9d3 	bl	800027c <__adddf3>
 8008ed6:	ec41 0b10 	vmov	d0, r0, r1
 8008eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ede:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8008ee2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8008ee6:	4334      	orrs	r4, r6
 8008ee8:	d103      	bne.n	8008ef2 <__ieee754_atan2+0x5a>
 8008eea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eee:	f000 b89b 	b.w	8009028 <atan>
 8008ef2:	17bc      	asrs	r4, r7, #30
 8008ef4:	f004 0402 	and.w	r4, r4, #2
 8008ef8:	ea53 0909 	orrs.w	r9, r3, r9
 8008efc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008f00:	d107      	bne.n	8008f12 <__ieee754_atan2+0x7a>
 8008f02:	2c02      	cmp	r4, #2
 8008f04:	d05f      	beq.n	8008fc6 <__ieee754_atan2+0x12e>
 8008f06:	2c03      	cmp	r4, #3
 8008f08:	d1e5      	bne.n	8008ed6 <__ieee754_atan2+0x3e>
 8008f0a:	a141      	add	r1, pc, #260	@ (adr r1, 8009010 <__ieee754_atan2+0x178>)
 8008f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f10:	e7e1      	b.n	8008ed6 <__ieee754_atan2+0x3e>
 8008f12:	4315      	orrs	r5, r2
 8008f14:	d106      	bne.n	8008f24 <__ieee754_atan2+0x8c>
 8008f16:	f1be 0f00 	cmp.w	lr, #0
 8008f1a:	da5f      	bge.n	8008fdc <__ieee754_atan2+0x144>
 8008f1c:	a13e      	add	r1, pc, #248	@ (adr r1, 8009018 <__ieee754_atan2+0x180>)
 8008f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f22:	e7d8      	b.n	8008ed6 <__ieee754_atan2+0x3e>
 8008f24:	4542      	cmp	r2, r8
 8008f26:	d10f      	bne.n	8008f48 <__ieee754_atan2+0xb0>
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8008f2e:	d107      	bne.n	8008f40 <__ieee754_atan2+0xa8>
 8008f30:	2c02      	cmp	r4, #2
 8008f32:	d84c      	bhi.n	8008fce <__ieee754_atan2+0x136>
 8008f34:	4b34      	ldr	r3, [pc, #208]	@ (8009008 <__ieee754_atan2+0x170>)
 8008f36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f3e:	e7ca      	b.n	8008ed6 <__ieee754_atan2+0x3e>
 8008f40:	2c02      	cmp	r4, #2
 8008f42:	d848      	bhi.n	8008fd6 <__ieee754_atan2+0x13e>
 8008f44:	4b31      	ldr	r3, [pc, #196]	@ (800900c <__ieee754_atan2+0x174>)
 8008f46:	e7f6      	b.n	8008f36 <__ieee754_atan2+0x9e>
 8008f48:	4543      	cmp	r3, r8
 8008f4a:	d0e4      	beq.n	8008f16 <__ieee754_atan2+0x7e>
 8008f4c:	1a9b      	subs	r3, r3, r2
 8008f4e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8008f52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008f56:	da1e      	bge.n	8008f96 <__ieee754_atan2+0xfe>
 8008f58:	2f00      	cmp	r7, #0
 8008f5a:	da01      	bge.n	8008f60 <__ieee754_atan2+0xc8>
 8008f5c:	323c      	adds	r2, #60	@ 0x3c
 8008f5e:	db1e      	blt.n	8008f9e <__ieee754_atan2+0x106>
 8008f60:	4632      	mov	r2, r6
 8008f62:	463b      	mov	r3, r7
 8008f64:	f7f7 fc6a 	bl	800083c <__aeabi_ddiv>
 8008f68:	ec41 0b10 	vmov	d0, r0, r1
 8008f6c:	f000 f9f4 	bl	8009358 <fabs>
 8008f70:	f000 f85a 	bl	8009028 <atan>
 8008f74:	ec51 0b10 	vmov	r0, r1, d0
 8008f78:	2c01      	cmp	r4, #1
 8008f7a:	d013      	beq.n	8008fa4 <__ieee754_atan2+0x10c>
 8008f7c:	2c02      	cmp	r4, #2
 8008f7e:	d015      	beq.n	8008fac <__ieee754_atan2+0x114>
 8008f80:	2c00      	cmp	r4, #0
 8008f82:	d0a8      	beq.n	8008ed6 <__ieee754_atan2+0x3e>
 8008f84:	a318      	add	r3, pc, #96	@ (adr r3, 8008fe8 <__ieee754_atan2+0x150>)
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f7f7 f975 	bl	8000278 <__aeabi_dsub>
 8008f8e:	a318      	add	r3, pc, #96	@ (adr r3, 8008ff0 <__ieee754_atan2+0x158>)
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	e014      	b.n	8008fc0 <__ieee754_atan2+0x128>
 8008f96:	a118      	add	r1, pc, #96	@ (adr r1, 8008ff8 <__ieee754_atan2+0x160>)
 8008f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f9c:	e7ec      	b.n	8008f78 <__ieee754_atan2+0xe0>
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	e7e9      	b.n	8008f78 <__ieee754_atan2+0xe0>
 8008fa4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008fa8:	4619      	mov	r1, r3
 8008faa:	e794      	b.n	8008ed6 <__ieee754_atan2+0x3e>
 8008fac:	a30e      	add	r3, pc, #56	@ (adr r3, 8008fe8 <__ieee754_atan2+0x150>)
 8008fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb2:	f7f7 f961 	bl	8000278 <__aeabi_dsub>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	a10d      	add	r1, pc, #52	@ (adr r1, 8008ff0 <__ieee754_atan2+0x158>)
 8008fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fc0:	f7f7 f95a 	bl	8000278 <__aeabi_dsub>
 8008fc4:	e787      	b.n	8008ed6 <__ieee754_atan2+0x3e>
 8008fc6:	a10a      	add	r1, pc, #40	@ (adr r1, 8008ff0 <__ieee754_atan2+0x158>)
 8008fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fcc:	e783      	b.n	8008ed6 <__ieee754_atan2+0x3e>
 8008fce:	a10c      	add	r1, pc, #48	@ (adr r1, 8009000 <__ieee754_atan2+0x168>)
 8008fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fd4:	e77f      	b.n	8008ed6 <__ieee754_atan2+0x3e>
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	2100      	movs	r1, #0
 8008fda:	e77c      	b.n	8008ed6 <__ieee754_atan2+0x3e>
 8008fdc:	a106      	add	r1, pc, #24	@ (adr r1, 8008ff8 <__ieee754_atan2+0x160>)
 8008fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fe2:	e778      	b.n	8008ed6 <__ieee754_atan2+0x3e>
 8008fe4:	f3af 8000 	nop.w
 8008fe8:	33145c07 	.word	0x33145c07
 8008fec:	3ca1a626 	.word	0x3ca1a626
 8008ff0:	54442d18 	.word	0x54442d18
 8008ff4:	400921fb 	.word	0x400921fb
 8008ff8:	54442d18 	.word	0x54442d18
 8008ffc:	3ff921fb 	.word	0x3ff921fb
 8009000:	54442d18 	.word	0x54442d18
 8009004:	3fe921fb 	.word	0x3fe921fb
 8009008:	080094b8 	.word	0x080094b8
 800900c:	080094a0 	.word	0x080094a0
 8009010:	54442d18 	.word	0x54442d18
 8009014:	c00921fb 	.word	0xc00921fb
 8009018:	54442d18 	.word	0x54442d18
 800901c:	bff921fb 	.word	0xbff921fb
 8009020:	7ff00000 	.word	0x7ff00000
 8009024:	00000000 	.word	0x00000000

08009028 <atan>:
 8009028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	ec55 4b10 	vmov	r4, r5, d0
 8009030:	4bbf      	ldr	r3, [pc, #764]	@ (8009330 <atan+0x308>)
 8009032:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8009036:	429e      	cmp	r6, r3
 8009038:	46ab      	mov	fp, r5
 800903a:	d918      	bls.n	800906e <atan+0x46>
 800903c:	4bbd      	ldr	r3, [pc, #756]	@ (8009334 <atan+0x30c>)
 800903e:	429e      	cmp	r6, r3
 8009040:	d801      	bhi.n	8009046 <atan+0x1e>
 8009042:	d109      	bne.n	8009058 <atan+0x30>
 8009044:	b144      	cbz	r4, 8009058 <atan+0x30>
 8009046:	4622      	mov	r2, r4
 8009048:	462b      	mov	r3, r5
 800904a:	4620      	mov	r0, r4
 800904c:	4629      	mov	r1, r5
 800904e:	f7f7 f915 	bl	800027c <__adddf3>
 8009052:	4604      	mov	r4, r0
 8009054:	460d      	mov	r5, r1
 8009056:	e006      	b.n	8009066 <atan+0x3e>
 8009058:	f1bb 0f00 	cmp.w	fp, #0
 800905c:	f340 812b 	ble.w	80092b6 <atan+0x28e>
 8009060:	a597      	add	r5, pc, #604	@ (adr r5, 80092c0 <atan+0x298>)
 8009062:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009066:	ec45 4b10 	vmov	d0, r4, r5
 800906a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906e:	4bb2      	ldr	r3, [pc, #712]	@ (8009338 <atan+0x310>)
 8009070:	429e      	cmp	r6, r3
 8009072:	d813      	bhi.n	800909c <atan+0x74>
 8009074:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009078:	429e      	cmp	r6, r3
 800907a:	d80c      	bhi.n	8009096 <atan+0x6e>
 800907c:	a392      	add	r3, pc, #584	@ (adr r3, 80092c8 <atan+0x2a0>)
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	4620      	mov	r0, r4
 8009084:	4629      	mov	r1, r5
 8009086:	f7f7 f8f9 	bl	800027c <__adddf3>
 800908a:	4bac      	ldr	r3, [pc, #688]	@ (800933c <atan+0x314>)
 800908c:	2200      	movs	r2, #0
 800908e:	f7f7 fd3b 	bl	8000b08 <__aeabi_dcmpgt>
 8009092:	2800      	cmp	r0, #0
 8009094:	d1e7      	bne.n	8009066 <atan+0x3e>
 8009096:	f04f 3aff 	mov.w	sl, #4294967295
 800909a:	e029      	b.n	80090f0 <atan+0xc8>
 800909c:	f000 f95c 	bl	8009358 <fabs>
 80090a0:	4ba7      	ldr	r3, [pc, #668]	@ (8009340 <atan+0x318>)
 80090a2:	429e      	cmp	r6, r3
 80090a4:	ec55 4b10 	vmov	r4, r5, d0
 80090a8:	f200 80bc 	bhi.w	8009224 <atan+0x1fc>
 80090ac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80090b0:	429e      	cmp	r6, r3
 80090b2:	f200 809e 	bhi.w	80091f2 <atan+0x1ca>
 80090b6:	4622      	mov	r2, r4
 80090b8:	462b      	mov	r3, r5
 80090ba:	4620      	mov	r0, r4
 80090bc:	4629      	mov	r1, r5
 80090be:	f7f7 f8dd 	bl	800027c <__adddf3>
 80090c2:	4b9e      	ldr	r3, [pc, #632]	@ (800933c <atan+0x314>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	f7f7 f8d7 	bl	8000278 <__aeabi_dsub>
 80090ca:	2200      	movs	r2, #0
 80090cc:	4606      	mov	r6, r0
 80090ce:	460f      	mov	r7, r1
 80090d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80090d4:	4620      	mov	r0, r4
 80090d6:	4629      	mov	r1, r5
 80090d8:	f7f7 f8d0 	bl	800027c <__adddf3>
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4630      	mov	r0, r6
 80090e2:	4639      	mov	r1, r7
 80090e4:	f7f7 fbaa 	bl	800083c <__aeabi_ddiv>
 80090e8:	f04f 0a00 	mov.w	sl, #0
 80090ec:	4604      	mov	r4, r0
 80090ee:	460d      	mov	r5, r1
 80090f0:	4622      	mov	r2, r4
 80090f2:	462b      	mov	r3, r5
 80090f4:	4620      	mov	r0, r4
 80090f6:	4629      	mov	r1, r5
 80090f8:	f7f7 fa76 	bl	80005e8 <__aeabi_dmul>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4680      	mov	r8, r0
 8009102:	4689      	mov	r9, r1
 8009104:	f7f7 fa70 	bl	80005e8 <__aeabi_dmul>
 8009108:	a371      	add	r3, pc, #452	@ (adr r3, 80092d0 <atan+0x2a8>)
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	4606      	mov	r6, r0
 8009110:	460f      	mov	r7, r1
 8009112:	f7f7 fa69 	bl	80005e8 <__aeabi_dmul>
 8009116:	a370      	add	r3, pc, #448	@ (adr r3, 80092d8 <atan+0x2b0>)
 8009118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911c:	f7f7 f8ae 	bl	800027c <__adddf3>
 8009120:	4632      	mov	r2, r6
 8009122:	463b      	mov	r3, r7
 8009124:	f7f7 fa60 	bl	80005e8 <__aeabi_dmul>
 8009128:	a36d      	add	r3, pc, #436	@ (adr r3, 80092e0 <atan+0x2b8>)
 800912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912e:	f7f7 f8a5 	bl	800027c <__adddf3>
 8009132:	4632      	mov	r2, r6
 8009134:	463b      	mov	r3, r7
 8009136:	f7f7 fa57 	bl	80005e8 <__aeabi_dmul>
 800913a:	a36b      	add	r3, pc, #428	@ (adr r3, 80092e8 <atan+0x2c0>)
 800913c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009140:	f7f7 f89c 	bl	800027c <__adddf3>
 8009144:	4632      	mov	r2, r6
 8009146:	463b      	mov	r3, r7
 8009148:	f7f7 fa4e 	bl	80005e8 <__aeabi_dmul>
 800914c:	a368      	add	r3, pc, #416	@ (adr r3, 80092f0 <atan+0x2c8>)
 800914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009152:	f7f7 f893 	bl	800027c <__adddf3>
 8009156:	4632      	mov	r2, r6
 8009158:	463b      	mov	r3, r7
 800915a:	f7f7 fa45 	bl	80005e8 <__aeabi_dmul>
 800915e:	a366      	add	r3, pc, #408	@ (adr r3, 80092f8 <atan+0x2d0>)
 8009160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009164:	f7f7 f88a 	bl	800027c <__adddf3>
 8009168:	4642      	mov	r2, r8
 800916a:	464b      	mov	r3, r9
 800916c:	f7f7 fa3c 	bl	80005e8 <__aeabi_dmul>
 8009170:	a363      	add	r3, pc, #396	@ (adr r3, 8009300 <atan+0x2d8>)
 8009172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009176:	4680      	mov	r8, r0
 8009178:	4689      	mov	r9, r1
 800917a:	4630      	mov	r0, r6
 800917c:	4639      	mov	r1, r7
 800917e:	f7f7 fa33 	bl	80005e8 <__aeabi_dmul>
 8009182:	a361      	add	r3, pc, #388	@ (adr r3, 8009308 <atan+0x2e0>)
 8009184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009188:	f7f7 f876 	bl	8000278 <__aeabi_dsub>
 800918c:	4632      	mov	r2, r6
 800918e:	463b      	mov	r3, r7
 8009190:	f7f7 fa2a 	bl	80005e8 <__aeabi_dmul>
 8009194:	a35e      	add	r3, pc, #376	@ (adr r3, 8009310 <atan+0x2e8>)
 8009196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919a:	f7f7 f86d 	bl	8000278 <__aeabi_dsub>
 800919e:	4632      	mov	r2, r6
 80091a0:	463b      	mov	r3, r7
 80091a2:	f7f7 fa21 	bl	80005e8 <__aeabi_dmul>
 80091a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8009318 <atan+0x2f0>)
 80091a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ac:	f7f7 f864 	bl	8000278 <__aeabi_dsub>
 80091b0:	4632      	mov	r2, r6
 80091b2:	463b      	mov	r3, r7
 80091b4:	f7f7 fa18 	bl	80005e8 <__aeabi_dmul>
 80091b8:	a359      	add	r3, pc, #356	@ (adr r3, 8009320 <atan+0x2f8>)
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	f7f7 f85b 	bl	8000278 <__aeabi_dsub>
 80091c2:	4632      	mov	r2, r6
 80091c4:	463b      	mov	r3, r7
 80091c6:	f7f7 fa0f 	bl	80005e8 <__aeabi_dmul>
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	4640      	mov	r0, r8
 80091d0:	4649      	mov	r1, r9
 80091d2:	f7f7 f853 	bl	800027c <__adddf3>
 80091d6:	4622      	mov	r2, r4
 80091d8:	462b      	mov	r3, r5
 80091da:	f7f7 fa05 	bl	80005e8 <__aeabi_dmul>
 80091de:	f1ba 3fff 	cmp.w	sl, #4294967295
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	d148      	bne.n	800927a <atan+0x252>
 80091e8:	4620      	mov	r0, r4
 80091ea:	4629      	mov	r1, r5
 80091ec:	f7f7 f844 	bl	8000278 <__aeabi_dsub>
 80091f0:	e72f      	b.n	8009052 <atan+0x2a>
 80091f2:	4b52      	ldr	r3, [pc, #328]	@ (800933c <atan+0x314>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	4620      	mov	r0, r4
 80091f8:	4629      	mov	r1, r5
 80091fa:	f7f7 f83d 	bl	8000278 <__aeabi_dsub>
 80091fe:	4b4f      	ldr	r3, [pc, #316]	@ (800933c <atan+0x314>)
 8009200:	4606      	mov	r6, r0
 8009202:	460f      	mov	r7, r1
 8009204:	2200      	movs	r2, #0
 8009206:	4620      	mov	r0, r4
 8009208:	4629      	mov	r1, r5
 800920a:	f7f7 f837 	bl	800027c <__adddf3>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	4630      	mov	r0, r6
 8009214:	4639      	mov	r1, r7
 8009216:	f7f7 fb11 	bl	800083c <__aeabi_ddiv>
 800921a:	f04f 0a01 	mov.w	sl, #1
 800921e:	4604      	mov	r4, r0
 8009220:	460d      	mov	r5, r1
 8009222:	e765      	b.n	80090f0 <atan+0xc8>
 8009224:	4b47      	ldr	r3, [pc, #284]	@ (8009344 <atan+0x31c>)
 8009226:	429e      	cmp	r6, r3
 8009228:	d21c      	bcs.n	8009264 <atan+0x23c>
 800922a:	4b47      	ldr	r3, [pc, #284]	@ (8009348 <atan+0x320>)
 800922c:	2200      	movs	r2, #0
 800922e:	4620      	mov	r0, r4
 8009230:	4629      	mov	r1, r5
 8009232:	f7f7 f821 	bl	8000278 <__aeabi_dsub>
 8009236:	4b44      	ldr	r3, [pc, #272]	@ (8009348 <atan+0x320>)
 8009238:	4606      	mov	r6, r0
 800923a:	460f      	mov	r7, r1
 800923c:	2200      	movs	r2, #0
 800923e:	4620      	mov	r0, r4
 8009240:	4629      	mov	r1, r5
 8009242:	f7f7 f9d1 	bl	80005e8 <__aeabi_dmul>
 8009246:	4b3d      	ldr	r3, [pc, #244]	@ (800933c <atan+0x314>)
 8009248:	2200      	movs	r2, #0
 800924a:	f7f7 f817 	bl	800027c <__adddf3>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4630      	mov	r0, r6
 8009254:	4639      	mov	r1, r7
 8009256:	f7f7 faf1 	bl	800083c <__aeabi_ddiv>
 800925a:	f04f 0a02 	mov.w	sl, #2
 800925e:	4604      	mov	r4, r0
 8009260:	460d      	mov	r5, r1
 8009262:	e745      	b.n	80090f0 <atan+0xc8>
 8009264:	4622      	mov	r2, r4
 8009266:	462b      	mov	r3, r5
 8009268:	4938      	ldr	r1, [pc, #224]	@ (800934c <atan+0x324>)
 800926a:	2000      	movs	r0, #0
 800926c:	f7f7 fae6 	bl	800083c <__aeabi_ddiv>
 8009270:	f04f 0a03 	mov.w	sl, #3
 8009274:	4604      	mov	r4, r0
 8009276:	460d      	mov	r5, r1
 8009278:	e73a      	b.n	80090f0 <atan+0xc8>
 800927a:	4b35      	ldr	r3, [pc, #212]	@ (8009350 <atan+0x328>)
 800927c:	4e35      	ldr	r6, [pc, #212]	@ (8009354 <atan+0x32c>)
 800927e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	f7f6 fff7 	bl	8000278 <__aeabi_dsub>
 800928a:	4622      	mov	r2, r4
 800928c:	462b      	mov	r3, r5
 800928e:	f7f6 fff3 	bl	8000278 <__aeabi_dsub>
 8009292:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800929e:	f7f6 ffeb 	bl	8000278 <__aeabi_dsub>
 80092a2:	f1bb 0f00 	cmp.w	fp, #0
 80092a6:	4604      	mov	r4, r0
 80092a8:	460d      	mov	r5, r1
 80092aa:	f6bf aedc 	bge.w	8009066 <atan+0x3e>
 80092ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80092b2:	461d      	mov	r5, r3
 80092b4:	e6d7      	b.n	8009066 <atan+0x3e>
 80092b6:	a51c      	add	r5, pc, #112	@ (adr r5, 8009328 <atan+0x300>)
 80092b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80092bc:	e6d3      	b.n	8009066 <atan+0x3e>
 80092be:	bf00      	nop
 80092c0:	54442d18 	.word	0x54442d18
 80092c4:	3ff921fb 	.word	0x3ff921fb
 80092c8:	8800759c 	.word	0x8800759c
 80092cc:	7e37e43c 	.word	0x7e37e43c
 80092d0:	e322da11 	.word	0xe322da11
 80092d4:	3f90ad3a 	.word	0x3f90ad3a
 80092d8:	24760deb 	.word	0x24760deb
 80092dc:	3fa97b4b 	.word	0x3fa97b4b
 80092e0:	a0d03d51 	.word	0xa0d03d51
 80092e4:	3fb10d66 	.word	0x3fb10d66
 80092e8:	c54c206e 	.word	0xc54c206e
 80092ec:	3fb745cd 	.word	0x3fb745cd
 80092f0:	920083ff 	.word	0x920083ff
 80092f4:	3fc24924 	.word	0x3fc24924
 80092f8:	5555550d 	.word	0x5555550d
 80092fc:	3fd55555 	.word	0x3fd55555
 8009300:	2c6a6c2f 	.word	0x2c6a6c2f
 8009304:	bfa2b444 	.word	0xbfa2b444
 8009308:	52defd9a 	.word	0x52defd9a
 800930c:	3fadde2d 	.word	0x3fadde2d
 8009310:	af749a6d 	.word	0xaf749a6d
 8009314:	3fb3b0f2 	.word	0x3fb3b0f2
 8009318:	fe231671 	.word	0xfe231671
 800931c:	3fbc71c6 	.word	0x3fbc71c6
 8009320:	9998ebc4 	.word	0x9998ebc4
 8009324:	3fc99999 	.word	0x3fc99999
 8009328:	54442d18 	.word	0x54442d18
 800932c:	bff921fb 	.word	0xbff921fb
 8009330:	440fffff 	.word	0x440fffff
 8009334:	7ff00000 	.word	0x7ff00000
 8009338:	3fdbffff 	.word	0x3fdbffff
 800933c:	3ff00000 	.word	0x3ff00000
 8009340:	3ff2ffff 	.word	0x3ff2ffff
 8009344:	40038000 	.word	0x40038000
 8009348:	3ff80000 	.word	0x3ff80000
 800934c:	bff00000 	.word	0xbff00000
 8009350:	080094d0 	.word	0x080094d0
 8009354:	080094f0 	.word	0x080094f0

08009358 <fabs>:
 8009358:	ec51 0b10 	vmov	r0, r1, d0
 800935c:	4602      	mov	r2, r0
 800935e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009362:	ec43 2b10 	vmov	d0, r2, r3
 8009366:	4770      	bx	lr

08009368 <_init>:
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936a:	bf00      	nop
 800936c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936e:	bc08      	pop	{r3}
 8009370:	469e      	mov	lr, r3
 8009372:	4770      	bx	lr

08009374 <_fini>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	bf00      	nop
 8009378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937a:	bc08      	pop	{r3}
 800937c:	469e      	mov	lr, r3
 800937e:	4770      	bx	lr
