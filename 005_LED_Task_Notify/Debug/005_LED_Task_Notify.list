
005_LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008048  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  080081d8  080081d8  000091d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083bc  080083bc  0000a01c  2**0
                  CONTENTS
  4 .ARM          00000008  080083bc  080083bc  000093bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083c4  080083c4  0000a01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083c4  080083c4  000093c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083c8  080083c8  000093c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080083cc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a01c  2**0
                  CONTENTS
 10 .bss          000144ec  2000001c  2000001c  0000a01c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014508  20014508  0000a01c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a01c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001756a  00000000  00000000  0000a04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000357d  00000000  00000000  000215b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  00024b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010b5  00000000  00000000  000260c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fc3  00000000  00000000  00027175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018db5  00000000  00000000  0004b138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da831  00000000  00000000  00063eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013e71e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ac0  00000000  00000000  0013e764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d0  00000000  00000000  00144224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081c0 	.word	0x080081c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080081c0 	.word	0x080081c0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f34 	.word	0x20012f34

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fcd1 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f89d 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f92f 	bl	80007c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000566:	f000 f903 	bl	8000770 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800056a:	483d      	ldr	r0, [pc, #244]	@ (8000660 <main+0x10c>)
 800056c:	f005 fb82 	bl	8005c74 <SEGGER_UART_init>

  //Enable the CYCCNT counter
     DWT_CTRL |= (1<<0);
 8000570:	4b3c      	ldr	r3, [pc, #240]	@ (8000664 <main+0x110>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a3b      	ldr	r2, [pc, #236]	@ (8000664 <main+0x110>)
 8000576:	f043 0301 	orr.w	r3, r3, #1
 800057a:	6013      	str	r3, [r2, #0]

    SEGGER_SYSVIEW_Conf();
 800057c:	f005 f8e8 	bl	8005750 <SEGGER_SYSVIEW_Conf>

   // SEGGER_SYSVIEW_Start();

  	status=xTaskCreate(led_green_handler,"LED-Green_task",200,NULL,3,&ledg_task_handle);
 8000580:	4b39      	ldr	r3, [pc, #228]	@ (8000668 <main+0x114>)
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	2303      	movs	r3, #3
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2300      	movs	r3, #0
 800058a:	22c8      	movs	r2, #200	@ 0xc8
 800058c:	4937      	ldr	r1, [pc, #220]	@ (800066c <main+0x118>)
 800058e:	4838      	ldr	r0, [pc, #224]	@ (8000670 <main+0x11c>)
 8000590:	f003 f812 	bl	80035b8 <xTaskCreate>
 8000594:	6178      	str	r0, [r7, #20]
  	configASSERT(status == pdPASS);
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d00b      	beq.n	80005b4 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800059c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005a0:	f383 8811 	msr	BASEPRI, r3
 80005a4:	f3bf 8f6f 	isb	sy
 80005a8:	f3bf 8f4f 	dsb	sy
 80005ac:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <main+0x5c>
  	next_task_handle = ledg_task_handle;
 80005b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000668 <main+0x114>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a2e      	ldr	r2, [pc, #184]	@ (8000674 <main+0x120>)
 80005ba:	6013      	str	r3, [r2, #0]

  	status=xTaskCreate(led_orange_handler,"LED-Orange_task",200,NULL,2,&ledo_task_handle);
 80005bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000678 <main+0x124>)
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	2302      	movs	r3, #2
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2300      	movs	r3, #0
 80005c6:	22c8      	movs	r2, #200	@ 0xc8
 80005c8:	492c      	ldr	r1, [pc, #176]	@ (800067c <main+0x128>)
 80005ca:	482d      	ldr	r0, [pc, #180]	@ (8000680 <main+0x12c>)
 80005cc:	f002 fff4 	bl	80035b8 <xTaskCreate>
 80005d0:	6178      	str	r0, [r7, #20]
  	configASSERT(status == pdPASS);
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d00b      	beq.n	80005f0 <main+0x9c>
        __asm volatile
 80005d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005dc:	f383 8811 	msr	BASEPRI, r3
 80005e0:	f3bf 8f6f 	isb	sy
 80005e4:	f3bf 8f4f 	dsb	sy
 80005e8:	60fb      	str	r3, [r7, #12]
    }
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <main+0x98>

  	status=xTaskCreate(led_red_handler,"LED-Red_task",200,NULL,1,&ledr_task_handle);
 80005f0:	4b24      	ldr	r3, [pc, #144]	@ (8000684 <main+0x130>)
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2301      	movs	r3, #1
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	22c8      	movs	r2, #200	@ 0xc8
 80005fc:	4922      	ldr	r1, [pc, #136]	@ (8000688 <main+0x134>)
 80005fe:	4823      	ldr	r0, [pc, #140]	@ (800068c <main+0x138>)
 8000600:	f002 ffda 	bl	80035b8 <xTaskCreate>
 8000604:	6178      	str	r0, [r7, #20]
  	configASSERT(status == pdPASS);
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d00b      	beq.n	8000624 <main+0xd0>
        __asm volatile
 800060c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000610:	f383 8811 	msr	BASEPRI, r3
 8000614:	f3bf 8f6f 	isb	sy
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	60bb      	str	r3, [r7, #8]
    }
 800061e:	bf00      	nop
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <main+0xcc>

  	status=xTaskCreate(button_handler,"Button_task",200,NULL,4,&btn_task_handle);
 8000624:	4b1a      	ldr	r3, [pc, #104]	@ (8000690 <main+0x13c>)
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	2304      	movs	r3, #4
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2300      	movs	r3, #0
 800062e:	22c8      	movs	r2, #200	@ 0xc8
 8000630:	4918      	ldr	r1, [pc, #96]	@ (8000694 <main+0x140>)
 8000632:	4819      	ldr	r0, [pc, #100]	@ (8000698 <main+0x144>)
 8000634:	f002 ffc0 	bl	80035b8 <xTaskCreate>
 8000638:	6178      	str	r0, [r7, #20]
  	configASSERT(status == pdPASS);
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d00b      	beq.n	8000658 <main+0x104>
        __asm volatile
 8000640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000644:	f383 8811 	msr	BASEPRI, r3
 8000648:	f3bf 8f6f 	isb	sy
 800064c:	f3bf 8f4f 	dsb	sy
 8000650:	607b      	str	r3, [r7, #4]
    }
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <main+0x100>

  	//start the freeRTOS scheduler
  	vTaskStartScheduler();
 8000658:	f003 f9f6 	bl	8003a48 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <main+0x108>
 8000660:	0007a120 	.word	0x0007a120
 8000664:	e0001000 	.word	0xe0001000
 8000668:	20000080 	.word	0x20000080
 800066c:	080081d8 	.word	0x080081d8
 8000670:	08000a81 	.word	0x08000a81
 8000674:	20000090 	.word	0x20000090
 8000678:	20000084 	.word	0x20000084
 800067c:	080081e8 	.word	0x080081e8
 8000680:	08000af1 	.word	0x08000af1
 8000684:	20000088 	.word	0x20000088
 8000688:	080081f8 	.word	0x080081f8
 800068c:	08000b61 	.word	0x08000b61
 8000690:	2000008c 	.word	0x2000008c
 8000694:	08008208 	.word	0x08008208
 8000698:	08000be5 	.word	0x08000be5

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f007 fd4e 	bl	800814c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a27      	ldr	r2, [pc, #156]	@ (8000768 <SystemClock_Config+0xcc>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a21      	ldr	r2, [pc, #132]	@ (800076c <SystemClock_Config+0xd0>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800070c:	2308      	movs	r3, #8
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000710:	23a8      	movs	r3, #168	@ 0xa8
 8000712:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000718:	2307      	movs	r3, #7
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fef9 	bl	8001518 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800072c:	f000 fa94 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2302      	movs	r3, #2
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2105      	movs	r1, #5
 800074e:	4618      	mov	r0, r3
 8000750:	f001 f95a 	bl	8001a08 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075a:	f000 fa7d 	bl	8000c58 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	@ 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	@ (80007c0 <MX_USART2_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a8:	f001 fe22 	bl	80023f0 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 fa51 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000038 	.word	0x20000038
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	@ 0x30
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	4ba2      	ldr	r3, [pc, #648]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4aa1      	ldr	r2, [pc, #644]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b9f      	ldr	r3, [pc, #636]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0310 	and.w	r3, r3, #16
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	4b9b      	ldr	r3, [pc, #620]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a9a      	ldr	r2, [pc, #616]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b98      	ldr	r3, [pc, #608]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b94      	ldr	r3, [pc, #592]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a93      	ldr	r2, [pc, #588]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b91      	ldr	r3, [pc, #580]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b8d      	ldr	r3, [pc, #564]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a8c      	ldr	r2, [pc, #560]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b8a      	ldr	r3, [pc, #552]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b86      	ldr	r3, [pc, #536]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a85      	ldr	r2, [pc, #532]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b83      	ldr	r3, [pc, #524]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b7f      	ldr	r3, [pc, #508]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a7e      	ldr	r2, [pc, #504]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b7c      	ldr	r3, [pc, #496]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2108      	movs	r1, #8
 8000886:	4879      	ldr	r0, [pc, #484]	@ (8000a6c <MX_GPIO_Init+0x2a8>)
 8000888:	f000 fe12 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2101      	movs	r1, #1
 8000890:	4877      	ldr	r0, [pc, #476]	@ (8000a70 <MX_GPIO_Init+0x2ac>)
 8000892:	f000 fe0d 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000896:	2200      	movs	r2, #0
 8000898:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800089c:	4875      	ldr	r0, [pc, #468]	@ (8000a74 <MX_GPIO_Init+0x2b0>)
 800089e:	f000 fe07 	bl	80014b0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008a2:	2308      	movs	r3, #8
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	486c      	ldr	r0, [pc, #432]	@ (8000a6c <MX_GPIO_Init+0x2a8>)
 80008ba:	f000 fc45 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008be:	2301      	movs	r3, #1
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4866      	ldr	r0, [pc, #408]	@ (8000a70 <MX_GPIO_Init+0x2ac>)
 80008d6:	f000 fc37 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008da:	2308      	movs	r3, #8
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ea:	2305      	movs	r3, #5
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	485e      	ldr	r0, [pc, #376]	@ (8000a70 <MX_GPIO_Init+0x2ac>)
 80008f6:	f000 fc27 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	485a      	ldr	r0, [pc, #360]	@ (8000a78 <MX_GPIO_Init+0x2b4>)
 8000910:	f000 fc1a 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000914:	2310      	movs	r3, #16
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000924:	2306      	movs	r3, #6
 8000926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4852      	ldr	r0, [pc, #328]	@ (8000a78 <MX_GPIO_Init+0x2b4>)
 8000930:	f000 fc0a 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000934:	23e0      	movs	r3, #224	@ 0xe0
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000944:	2305      	movs	r3, #5
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	484a      	ldr	r0, [pc, #296]	@ (8000a78 <MX_GPIO_Init+0x2b4>)
 8000950:	f000 fbfa 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000954:	2304      	movs	r3, #4
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4845      	ldr	r0, [pc, #276]	@ (8000a7c <MX_GPIO_Init+0x2b8>)
 8000968:	f000 fbee 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800096c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800097e:	2305      	movs	r3, #5
 8000980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	483c      	ldr	r0, [pc, #240]	@ (8000a7c <MX_GPIO_Init+0x2b8>)
 800098a:	f000 fbdd 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800098e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000992:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4833      	ldr	r0, [pc, #204]	@ (8000a74 <MX_GPIO_Init+0x2b0>)
 80009a8:	f000 fbce 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009ac:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009be:	2306      	movs	r3, #6
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4829      	ldr	r0, [pc, #164]	@ (8000a70 <MX_GPIO_Init+0x2ac>)
 80009ca:	f000 fbbd 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4825      	ldr	r0, [pc, #148]	@ (8000a78 <MX_GPIO_Init+0x2b4>)
 80009e4:	f000 fbb0 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009e8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009fa:	230a      	movs	r3, #10
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	481c      	ldr	r0, [pc, #112]	@ (8000a78 <MX_GPIO_Init+0x2b4>)
 8000a06:	f000 fb9f 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4815      	ldr	r0, [pc, #84]	@ (8000a74 <MX_GPIO_Init+0x2b0>)
 8000a1e:	f000 fb93 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a22:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a28:	2312      	movs	r3, #18
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a34:	2304      	movs	r3, #4
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480f      	ldr	r0, [pc, #60]	@ (8000a7c <MX_GPIO_Init+0x2b8>)
 8000a40:	f000 fb82 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a48:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <MX_GPIO_Init+0x2a8>)
 8000a5a:	f000 fb75 	bl	8001148 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5e:	bf00      	nop
 8000a60:	3730      	adds	r7, #48	@ 0x30
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40020800 	.word	0x40020800
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020400 	.word	0x40020400

08000a80 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 8000a88:	4814      	ldr	r0, [pc, #80]	@ (8000adc <led_green_handler+0x5c>)
 8000a8a:	f007 fab1 	bl	8007ff0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a92:	4813      	ldr	r0, [pc, #76]	@ (8000ae0 <led_green_handler+0x60>)
 8000a94:	f000 fd25 	bl	80014e2 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000a98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f003 fcc5 	bl	8004434 <xTaskGenericNotifyWait>
 8000aaa:	60f8      	str	r0, [r7, #12]


		if(status == pdTRUE)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d1ea      	bne.n	8000a88 <led_green_handler+0x8>
		{
			vTaskSuspendAll();
 8000ab2:	f003 f82b 	bl	8003b0c <vTaskSuspendAll>
			next_task_handle = ledo_task_handle;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <led_green_handler+0x64>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae8 <led_green_handler+0x68>)
 8000abc:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000abe:	f003 f833 	bl	8003b28 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN,GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ac8:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <led_green_handler+0x60>)
 8000aca:	f000 fcf1 	bl	80014b0 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green task");
 8000ace:	4807      	ldr	r0, [pc, #28]	@ (8000aec <led_green_handler+0x6c>)
 8000ad0:	f007 fa8e 	bl	8007ff0 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f002 fed3 	bl	8003880 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 8000ada:	e7d5      	b.n	8000a88 <led_green_handler+0x8>
 8000adc:	08008214 	.word	0x08008214
 8000ae0:	40020c00 	.word	0x40020c00
 8000ae4:	20000084 	.word	0x20000084
 8000ae8:	20000090 	.word	0x20000090
 8000aec:	08008228 	.word	0x08008228

08000af0 <led_orange_handler>:
	}

}

static void led_orange_handler(void* parameters)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led");
 8000af8:	4814      	ldr	r0, [pc, #80]	@ (8000b4c <led_orange_handler+0x5c>)
 8000afa:	f007 fa79 	bl	8007ff0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000afe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b02:	4813      	ldr	r0, [pc, #76]	@ (8000b50 <led_orange_handler+0x60>)
 8000b04:	f000 fced 	bl	80014e2 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000b08:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2300      	movs	r3, #0
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	2000      	movs	r0, #0
 8000b16:	f003 fc8d 	bl	8004434 <xTaskGenericNotifyWait>
 8000b1a:	60f8      	str	r0, [r7, #12]


		if(status == pdTRUE)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d1ea      	bne.n	8000af8 <led_orange_handler+0x8>
		{
					vTaskSuspendAll();
 8000b22:	f002 fff3 	bl	8003b0c <vTaskSuspendAll>
					next_task_handle = ledr_task_handle;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <led_orange_handler+0x64>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b58 <led_orange_handler+0x68>)
 8000b2c:	6013      	str	r3, [r2, #0]
					xTaskResumeAll();
 8000b2e:	f002 fffb 	bl	8003b28 <xTaskResumeAll>
					HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN,GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b38:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <led_orange_handler+0x60>)
 8000b3a:	f000 fcb9 	bl	80014b0 <HAL_GPIO_WritePin>
					SEGGER_SYSVIEW_PrintfTarget("Delete orange task");
 8000b3e:	4807      	ldr	r0, [pc, #28]	@ (8000b5c <led_orange_handler+0x6c>)
 8000b40:	f007 fa56 	bl	8007ff0 <SEGGER_SYSVIEW_PrintfTarget>
					vTaskDelete(NULL);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f002 fe9b 	bl	8003880 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led");
 8000b4a:	e7d5      	b.n	8000af8 <led_orange_handler+0x8>
 8000b4c:	0800823c 	.word	0x0800823c
 8000b50:	40020c00 	.word	0x40020c00
 8000b54:	20000088 	.word	0x20000088
 8000b58:	20000090 	.word	0x20000090
 8000b5c:	08008250 	.word	0x08008250

08000b60 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af02      	add	r7, sp, #8
 8000b66:	6078      	str	r0, [r7, #4]


	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
 8000b68:	4818      	ldr	r0, [pc, #96]	@ (8000bcc <led_red_handler+0x6c>)
 8000b6a:	f007 fa41 	bl	8007ff0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b72:	4817      	ldr	r0, [pc, #92]	@ (8000bd0 <led_red_handler+0x70>)
 8000b74:	f000 fcb5 	bl	80014e2 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000b78:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	2000      	movs	r0, #0
 8000b86:	f003 fc55 	bl	8004434 <xTaskGenericNotifyWait>
 8000b8a:	60f8      	str	r0, [r7, #12]


		if(status == pdTRUE)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d1ea      	bne.n	8000b68 <led_red_handler+0x8>
			{
				vTaskSuspendAll();
 8000b92:	f002 ffbb 	bl	8003b0c <vTaskSuspendAll>
				next_task_handle = NULL;
 8000b96:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <led_red_handler+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
				xTaskResumeAll();
 8000b9c:	f002 ffc4 	bl	8003b28 <xTaskResumeAll>
				HAL_GPIO_WritePin(GPIOD, LED_RED_PIN,GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ba6:	480a      	ldr	r0, [pc, #40]	@ (8000bd0 <led_red_handler+0x70>)
 8000ba8:	f000 fc82 	bl	80014b0 <HAL_GPIO_WritePin>
				SEGGER_SYSVIEW_PrintfTarget("Delete red task");
 8000bac:	480a      	ldr	r0, [pc, #40]	@ (8000bd8 <led_red_handler+0x78>)
 8000bae:	f007 fa1f 	bl	8007ff0 <SEGGER_SYSVIEW_PrintfTarget>
				vTaskDelete(btn_task_handle);
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <led_red_handler+0x7c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f002 fe62 	bl	8003880 <vTaskDelete>
				vTaskDelete(NULL);
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f002 fe5f 	bl	8003880 <vTaskDelete>
				SEGGER_SYSVIEW_PrintfTarget("Delete button task");
 8000bc2:	4807      	ldr	r0, [pc, #28]	@ (8000be0 <led_red_handler+0x80>)
 8000bc4:	f007 fa14 	bl	8007ff0 <SEGGER_SYSVIEW_PrintfTarget>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
 8000bc8:	e7ce      	b.n	8000b68 <led_red_handler+0x8>
 8000bca:	bf00      	nop
 8000bcc:	08008264 	.word	0x08008264
 8000bd0:	40020c00 	.word	0x40020c00
 8000bd4:	20000090 	.word	0x20000090
 8000bd8:	08008278 	.word	0x08008278
 8000bdc:	2000008c 	.word	0x2000008c
 8000be0:	08008288 	.word	0x08008288

08000be4 <button_handler>:
	}

}

static void button_handler(void* parameters)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73fb      	strb	r3, [r7, #15]


	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	480d      	ldr	r0, [pc, #52]	@ (8000c2c <button_handler+0x48>)
 8000bf8:	f000 fc42 	bl	8001480 <HAL_GPIO_ReadPin>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	73bb      	strb	r3, [r7, #14]

		if(btn_read)
 8000c00:	7bbb      	ldrb	r3, [r7, #14]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00b      	beq.n	8000c1e <button_handler+0x3a>
		{
			if(! prev_read)
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d108      	bne.n	8000c1e <button_handler+0x3a>
				xTaskNotify(next_task_handle,0,eNoAction);
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <button_handler+0x4c>)
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	2300      	movs	r3, #0
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	2300      	movs	r3, #0
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	f003 fc95 	bl	8004548 <xTaskGenericNotify>
		}

		prev_read = btn_read;
 8000c1e:	7bbb      	ldrb	r3, [r7, #14]
 8000c20:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000c22:	200a      	movs	r0, #10
 8000c24:	f002 fed6 	bl	80039d4 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000c28:	e7e4      	b.n	8000bf4 <button_handler+0x10>
 8000c2a:	bf00      	nop
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	20000090 	.word	0x20000090

08000c34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d101      	bne.n	8000c4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c46:	f000 f97d 	bl	8000f44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40001000 	.word	0x40001000

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <Error_Handler+0x8>

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	@ 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	@ (8000d38 <HAL_UART_MspInit+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12b      	bne.n	8000d2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <HAL_UART_MspInit+0x88>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	4a17      	ldr	r2, [pc, #92]	@ (8000d3c <HAL_UART_MspInit+0x88>)
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <HAL_UART_MspInit+0x88>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <HAL_UART_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a10      	ldr	r2, [pc, #64]	@ (8000d3c <HAL_UART_MspInit+0x88>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <HAL_UART_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <HAL_UART_MspInit+0x8c>)
 8000d2a:	f000 fa0d 	bl	8001148 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	@ 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40004400 	.word	0x40004400
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000

08000d44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08e      	sub	sp, #56	@ 0x38
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	4b33      	ldr	r3, [pc, #204]	@ (8000e28 <HAL_InitTick+0xe4>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5c:	4a32      	ldr	r2, [pc, #200]	@ (8000e28 <HAL_InitTick+0xe4>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d64:	4b30      	ldr	r3, [pc, #192]	@ (8000e28 <HAL_InitTick+0xe4>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d70:	f107 0210 	add.w	r2, r7, #16
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 f864 	bl	8001e48 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d103      	bne.n	8000d92 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d8a:	f001 f835 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 8000d8e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d90:	e004      	b.n	8000d9c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d92:	f001 f831 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 8000d96:	4603      	mov	r3, r0
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d9e:	4a23      	ldr	r2, [pc, #140]	@ (8000e2c <HAL_InitTick+0xe8>)
 8000da0:	fba2 2303 	umull	r2, r3, r2, r3
 8000da4:	0c9b      	lsrs	r3, r3, #18
 8000da6:	3b01      	subs	r3, #1
 8000da8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000daa:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <HAL_InitTick+0xec>)
 8000dac:	4a21      	ldr	r2, [pc, #132]	@ (8000e34 <HAL_InitTick+0xf0>)
 8000dae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000db0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e30 <HAL_InitTick+0xec>)
 8000db2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000db6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000db8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e30 <HAL_InitTick+0xec>)
 8000dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dbc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <HAL_InitTick+0xec>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <HAL_InitTick+0xec>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dca:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <HAL_InitTick+0xec>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000dd0:	4817      	ldr	r0, [pc, #92]	@ (8000e30 <HAL_InitTick+0xec>)
 8000dd2:	f001 f86b 	bl	8001eac <HAL_TIM_Base_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d11b      	bne.n	8000e1c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000de4:	4812      	ldr	r0, [pc, #72]	@ (8000e30 <HAL_InitTick+0xec>)
 8000de6:	f001 f8bb 	bl	8001f60 <HAL_TIM_Base_Start_IT>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000df0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d111      	bne.n	8000e1c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000df8:	2036      	movs	r0, #54	@ 0x36
 8000dfa:	f000 f997 	bl	800112c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d808      	bhi.n	8000e16 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	2036      	movs	r0, #54	@ 0x36
 8000e0a:	f000 f973 	bl	80010f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <HAL_InitTick+0xf4>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	e002      	b.n	8000e1c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3738      	adds	r7, #56	@ 0x38
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	431bde83 	.word	0x431bde83
 8000e30:	20000094 	.word	0x20000094
 8000e34:	40001000 	.word	0x40001000
 8000e38:	20000004 	.word	0x20000004

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <NMI_Handler+0x4>

08000e44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <MemManage_Handler+0x4>

08000e54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e78:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <TIM6_DAC_IRQHandler+0x10>)
 8000e7a:	f001 f8e1 	bl	8002040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000094 	.word	0x20000094

08000e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <SystemInit+0x20>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e92:	4a05      	ldr	r2, [pc, #20]	@ (8000ea8 <SystemInit+0x20>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ee4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000eb0:	f7ff ffea 	bl	8000e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb4:	480c      	ldr	r0, [pc, #48]	@ (8000ee8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eb6:	490d      	ldr	r1, [pc, #52]	@ (8000eec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ecc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ef8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eda:	f007 f93f 	bl	800815c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ede:	f7ff fb39 	bl	8000554 <main>
  bx  lr    
 8000ee2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ee4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ef0:	080083cc 	.word	0x080083cc
  ldr r2, =_sbss
 8000ef4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000ef8:	20014508 	.word	0x20014508

08000efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f04:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0d      	ldr	r2, [pc, #52]	@ (8000f40 <HAL_Init+0x40>)
 8000f0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <HAL_Init+0x40>)
 8000f16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a07      	ldr	r2, [pc, #28]	@ (8000f40 <HAL_Init+0x40>)
 8000f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f8d8 	bl	80010de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	200f      	movs	r0, #15
 8000f30:	f7ff ff08 	bl	8000d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff fe96 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023c00 	.word	0x40023c00

08000f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_IncTick+0x20>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <HAL_IncTick+0x24>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a04      	ldr	r2, [pc, #16]	@ (8000f68 <HAL_IncTick+0x24>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008
 8000f68:	200000dc 	.word	0x200000dc

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b03      	ldr	r3, [pc, #12]	@ (8000f80 <HAL_GetTick+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200000dc 	.word	0x200000dc

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	@ (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db0b      	blt.n	8001012 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 021f 	and.w	r2, r3, #31
 8001000:	4907      	ldr	r1, [pc, #28]	@ (8001020 <__NVIC_EnableIRQ+0x38>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	2001      	movs	r0, #1
 800100a:	fa00 f202 	lsl.w	r2, r0, r2
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000e100 	.word	0xe000e100

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db0a      	blt.n	800104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	490c      	ldr	r1, [pc, #48]	@ (8001070 <__NVIC_SetPriority+0x4c>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	440b      	add	r3, r1
 8001048:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800104c:	e00a      	b.n	8001064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4908      	ldr	r1, [pc, #32]	@ (8001074 <__NVIC_SetPriority+0x50>)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	440b      	add	r3, r1
 8001062:	761a      	strb	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	@ 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f1c3 0307 	rsb	r3, r3, #7
 8001092:	2b04      	cmp	r3, #4
 8001094:	bf28      	it	cs
 8001096:	2304      	movcs	r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3304      	adds	r3, #4
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d902      	bls.n	80010a8 <NVIC_EncodePriority+0x30>
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3b03      	subs	r3, #3
 80010a6:	e000      	b.n	80010aa <NVIC_EncodePriority+0x32>
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43d9      	mvns	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	4313      	orrs	r3, r2
         );
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3724      	adds	r7, #36	@ 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ff4c 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001106:	f7ff ff61 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 800110a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	6978      	ldr	r0, [r7, #20]
 8001112:	f7ff ffb1 	bl	8001078 <NVIC_EncodePriority>
 8001116:	4602      	mov	r2, r0
 8001118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff80 	bl	8001024 <__NVIC_SetPriority>
}
 8001124:	bf00      	nop
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff54 	bl	8000fe8 <__NVIC_EnableIRQ>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	@ 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
 8001162:	e16b      	b.n	800143c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001164:	2201      	movs	r2, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	429a      	cmp	r2, r3
 800117e:	f040 815a 	bne.w	8001436 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b01      	cmp	r3, #1
 800118c:	d005      	beq.n	800119a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001196:	2b02      	cmp	r3, #2
 8001198:	d130      	bne.n	80011fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d0:	2201      	movs	r2, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	f003 0201 	and.w	r2, r3, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b03      	cmp	r3, #3
 8001206:	d017      	beq.n	8001238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d123      	bne.n	800128c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	08da      	lsrs	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	220f      	movs	r2, #15
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	691a      	ldr	r2, [r3, #16]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	08da      	lsrs	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3208      	adds	r2, #8
 8001286:	69b9      	ldr	r1, [r7, #24]
 8001288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0203 	and.w	r2, r3, #3
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80b4 	beq.w	8001436 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b60      	ldr	r3, [pc, #384]	@ (8001454 <HAL_GPIO_Init+0x30c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	4a5f      	ldr	r2, [pc, #380]	@ (8001454 <HAL_GPIO_Init+0x30c>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012de:	4b5d      	ldr	r3, [pc, #372]	@ (8001454 <HAL_GPIO_Init+0x30c>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ea:	4a5b      	ldr	r2, [pc, #364]	@ (8001458 <HAL_GPIO_Init+0x310>)
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	220f      	movs	r2, #15
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a52      	ldr	r2, [pc, #328]	@ (800145c <HAL_GPIO_Init+0x314>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d02b      	beq.n	800136e <HAL_GPIO_Init+0x226>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a51      	ldr	r2, [pc, #324]	@ (8001460 <HAL_GPIO_Init+0x318>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d025      	beq.n	800136a <HAL_GPIO_Init+0x222>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a50      	ldr	r2, [pc, #320]	@ (8001464 <HAL_GPIO_Init+0x31c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d01f      	beq.n	8001366 <HAL_GPIO_Init+0x21e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4f      	ldr	r2, [pc, #316]	@ (8001468 <HAL_GPIO_Init+0x320>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d019      	beq.n	8001362 <HAL_GPIO_Init+0x21a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4e      	ldr	r2, [pc, #312]	@ (800146c <HAL_GPIO_Init+0x324>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d013      	beq.n	800135e <HAL_GPIO_Init+0x216>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4d      	ldr	r2, [pc, #308]	@ (8001470 <HAL_GPIO_Init+0x328>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d00d      	beq.n	800135a <HAL_GPIO_Init+0x212>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4c      	ldr	r2, [pc, #304]	@ (8001474 <HAL_GPIO_Init+0x32c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d007      	beq.n	8001356 <HAL_GPIO_Init+0x20e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4b      	ldr	r2, [pc, #300]	@ (8001478 <HAL_GPIO_Init+0x330>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d101      	bne.n	8001352 <HAL_GPIO_Init+0x20a>
 800134e:	2307      	movs	r3, #7
 8001350:	e00e      	b.n	8001370 <HAL_GPIO_Init+0x228>
 8001352:	2308      	movs	r3, #8
 8001354:	e00c      	b.n	8001370 <HAL_GPIO_Init+0x228>
 8001356:	2306      	movs	r3, #6
 8001358:	e00a      	b.n	8001370 <HAL_GPIO_Init+0x228>
 800135a:	2305      	movs	r3, #5
 800135c:	e008      	b.n	8001370 <HAL_GPIO_Init+0x228>
 800135e:	2304      	movs	r3, #4
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x228>
 8001362:	2303      	movs	r3, #3
 8001364:	e004      	b.n	8001370 <HAL_GPIO_Init+0x228>
 8001366:	2302      	movs	r3, #2
 8001368:	e002      	b.n	8001370 <HAL_GPIO_Init+0x228>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x228>
 800136e:	2300      	movs	r3, #0
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	f002 0203 	and.w	r2, r2, #3
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	4093      	lsls	r3, r2
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001380:	4935      	ldr	r1, [pc, #212]	@ (8001458 <HAL_GPIO_Init+0x310>)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800138e:	4b3b      	ldr	r3, [pc, #236]	@ (800147c <HAL_GPIO_Init+0x334>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013b2:	4a32      	ldr	r2, [pc, #200]	@ (800147c <HAL_GPIO_Init+0x334>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b8:	4b30      	ldr	r3, [pc, #192]	@ (800147c <HAL_GPIO_Init+0x334>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013dc:	4a27      	ldr	r2, [pc, #156]	@ (800147c <HAL_GPIO_Init+0x334>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013e2:	4b26      	ldr	r3, [pc, #152]	@ (800147c <HAL_GPIO_Init+0x334>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001406:	4a1d      	ldr	r2, [pc, #116]	@ (800147c <HAL_GPIO_Init+0x334>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800140c:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <HAL_GPIO_Init+0x334>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001430:	4a12      	ldr	r2, [pc, #72]	@ (800147c <HAL_GPIO_Init+0x334>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3301      	adds	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	2b0f      	cmp	r3, #15
 8001440:	f67f ae90 	bls.w	8001164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	3724      	adds	r7, #36	@ 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	40013800 	.word	0x40013800
 800145c:	40020000 	.word	0x40020000
 8001460:	40020400 	.word	0x40020400
 8001464:	40020800 	.word	0x40020800
 8001468:	40020c00 	.word	0x40020c00
 800146c:	40021000 	.word	0x40021000
 8001470:	40021400 	.word	0x40021400
 8001474:	40021800 	.word	0x40021800
 8001478:	40021c00 	.word	0x40021c00
 800147c:	40013c00 	.word	0x40013c00

08001480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	4013      	ands	r3, r2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001498:	2301      	movs	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	e001      	b.n	80014a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
 80014bc:	4613      	mov	r3, r2
 80014be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014c0:	787b      	ldrb	r3, [r7, #1]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014cc:	e003      	b.n	80014d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	041a      	lsls	r2, r3, #16
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	619a      	str	r2, [r3, #24]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b085      	sub	sp, #20
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	460b      	mov	r3, r1
 80014ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014f4:	887a      	ldrh	r2, [r7, #2]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4013      	ands	r3, r2
 80014fa:	041a      	lsls	r2, r3, #16
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43d9      	mvns	r1, r3
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	400b      	ands	r3, r1
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	619a      	str	r2, [r3, #24]
}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e267      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d075      	beq.n	8001622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001536:	4b88      	ldr	r3, [pc, #544]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b04      	cmp	r3, #4
 8001540:	d00c      	beq.n	800155c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001542:	4b85      	ldr	r3, [pc, #532]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800154a:	2b08      	cmp	r3, #8
 800154c:	d112      	bne.n	8001574 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154e:	4b82      	ldr	r3, [pc, #520]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001556:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800155a:	d10b      	bne.n	8001574 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	4b7e      	ldr	r3, [pc, #504]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d05b      	beq.n	8001620 <HAL_RCC_OscConfig+0x108>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d157      	bne.n	8001620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e242      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800157c:	d106      	bne.n	800158c <HAL_RCC_OscConfig+0x74>
 800157e:	4b76      	ldr	r3, [pc, #472]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a75      	ldr	r2, [pc, #468]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e01d      	b.n	80015c8 <HAL_RCC_OscConfig+0xb0>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x98>
 8001596:	4b70      	ldr	r3, [pc, #448]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a6f      	ldr	r2, [pc, #444]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 800159c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a6c      	ldr	r2, [pc, #432]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0xb0>
 80015b0:	4b69      	ldr	r3, [pc, #420]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a68      	ldr	r2, [pc, #416]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 80015b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b66      	ldr	r3, [pc, #408]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a65      	ldr	r2, [pc, #404]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d013      	beq.n	80015f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fccc 	bl	8000f6c <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fcc8 	bl	8000f6c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	@ 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e207      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0xc0>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fcb8 	bl	8000f6c <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fcb4 	bl	8000f6c <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	@ 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e1f3      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	4b51      	ldr	r3, [pc, #324]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0xe8>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d063      	beq.n	80016f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800162e:	4b4a      	ldr	r3, [pc, #296]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163a:	4b47      	ldr	r3, [pc, #284]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001642:	2b08      	cmp	r3, #8
 8001644:	d11c      	bne.n	8001680 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001646:	4b44      	ldr	r3, [pc, #272]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d116      	bne.n	8001680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <HAL_RCC_OscConfig+0x152>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d001      	beq.n	800166a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e1c7      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166a:	4b3b      	ldr	r3, [pc, #236]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4937      	ldr	r1, [pc, #220]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	e03a      	b.n	80016f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001688:	4b34      	ldr	r3, [pc, #208]	@ (800175c <HAL_RCC_OscConfig+0x244>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff fc6d 	bl	8000f6c <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001696:	f7ff fc69 	bl	8000f6c <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e1a8      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b4:	4b28      	ldr	r3, [pc, #160]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4925      	ldr	r1, [pc, #148]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
 80016c8:	e015      	b.n	80016f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ca:	4b24      	ldr	r3, [pc, #144]	@ (800175c <HAL_RCC_OscConfig+0x244>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fc4c 	bl	8000f6c <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fc48 	bl	8000f6c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e187      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d036      	beq.n	8001770 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d016      	beq.n	8001738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <HAL_RCC_OscConfig+0x248>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001710:	f7ff fc2c 	bl	8000f6c <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001718:	f7ff fc28 	bl	8000f6c <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e167      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <HAL_RCC_OscConfig+0x240>)
 800172c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x200>
 8001736:	e01b      	b.n	8001770 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <HAL_RCC_OscConfig+0x248>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff fc15 	bl	8000f6c <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001744:	e00e      	b.n	8001764 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001746:	f7ff fc11 	bl	8000f6c <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d907      	bls.n	8001764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e150      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
 8001758:	40023800 	.word	0x40023800
 800175c:	42470000 	.word	0x42470000
 8001760:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001764:	4b88      	ldr	r3, [pc, #544]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 8001766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1ea      	bne.n	8001746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 8097 	beq.w	80018ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001782:	4b81      	ldr	r3, [pc, #516]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10f      	bne.n	80017ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b7d      	ldr	r3, [pc, #500]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	4a7c      	ldr	r2, [pc, #496]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	@ 0x40
 800179e:	4b7a      	ldr	r3, [pc, #488]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ae:	4b77      	ldr	r3, [pc, #476]	@ (800198c <HAL_RCC_OscConfig+0x474>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d118      	bne.n	80017ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ba:	4b74      	ldr	r3, [pc, #464]	@ (800198c <HAL_RCC_OscConfig+0x474>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a73      	ldr	r2, [pc, #460]	@ (800198c <HAL_RCC_OscConfig+0x474>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fbd1 	bl	8000f6c <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ce:	f7ff fbcd 	bl	8000f6c <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e10c      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	4b6a      	ldr	r3, [pc, #424]	@ (800198c <HAL_RCC_OscConfig+0x474>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x2ea>
 80017f4:	4b64      	ldr	r3, [pc, #400]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f8:	4a63      	ldr	r2, [pc, #396]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001800:	e01c      	b.n	800183c <HAL_RCC_OscConfig+0x324>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b05      	cmp	r3, #5
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x30c>
 800180a:	4b5f      	ldr	r3, [pc, #380]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800180e:	4a5e      	ldr	r2, [pc, #376]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6713      	str	r3, [r2, #112]	@ 0x70
 8001816:	4b5c      	ldr	r3, [pc, #368]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181a:	4a5b      	ldr	r2, [pc, #364]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6713      	str	r3, [r2, #112]	@ 0x70
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0x324>
 8001824:	4b58      	ldr	r3, [pc, #352]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001828:	4a57      	ldr	r2, [pc, #348]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001830:	4b55      	ldr	r3, [pc, #340]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 8001832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001834:	4a54      	ldr	r2, [pc, #336]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 8001836:	f023 0304 	bic.w	r3, r3, #4
 800183a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d015      	beq.n	8001870 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff fb92 	bl	8000f6c <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184a:	e00a      	b.n	8001862 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7ff fb8e 	bl	8000f6c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e0cb      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001862:	4b49      	ldr	r3, [pc, #292]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0ee      	beq.n	800184c <HAL_RCC_OscConfig+0x334>
 800186e:	e014      	b.n	800189a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001870:	f7ff fb7c 	bl	8000f6c <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001876:	e00a      	b.n	800188e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001878:	f7ff fb78 	bl	8000f6c <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e0b5      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188e:	4b3e      	ldr	r3, [pc, #248]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1ee      	bne.n	8001878 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800189a:	7dfb      	ldrb	r3, [r7, #23]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d105      	bne.n	80018ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a0:	4b39      	ldr	r3, [pc, #228]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a4:	4a38      	ldr	r2, [pc, #224]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 80018a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80a1 	beq.w	80019f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018b6:	4b34      	ldr	r3, [pc, #208]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d05c      	beq.n	800197c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d141      	bne.n	800194e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ca:	4b31      	ldr	r3, [pc, #196]	@ (8001990 <HAL_RCC_OscConfig+0x478>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fb4c 	bl	8000f6c <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff fb48 	bl	8000f6c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e087      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ea:	4b27      	ldr	r3, [pc, #156]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69da      	ldr	r2, [r3, #28]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001904:	019b      	lsls	r3, r3, #6
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	3b01      	subs	r3, #1
 8001910:	041b      	lsls	r3, r3, #16
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	491b      	ldr	r1, [pc, #108]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001920:	4b1b      	ldr	r3, [pc, #108]	@ (8001990 <HAL_RCC_OscConfig+0x478>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff fb21 	bl	8000f6c <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192e:	f7ff fb1d 	bl	8000f6c <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e05c      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x416>
 800194c:	e054      	b.n	80019f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <HAL_RCC_OscConfig+0x478>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff fb0a 	bl	8000f6c <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff fb06 	bl	8000f6c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e045      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_RCC_OscConfig+0x470>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x444>
 800197a:	e03d      	b.n	80019f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d107      	bne.n	8001994 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e038      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000
 8001990:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001994:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <HAL_RCC_OscConfig+0x4ec>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d028      	beq.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d121      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d11a      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019c4:	4013      	ands	r3, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d111      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019da:	085b      	lsrs	r3, r3, #1
 80019dc:	3b01      	subs	r3, #1
 80019de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800

08001a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0cc      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b68      	ldr	r3, [pc, #416]	@ (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d90c      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b65      	ldr	r3, [pc, #404]	@ (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b63      	ldr	r3, [pc, #396]	@ (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0b8      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a5c:	4b59      	ldr	r3, [pc, #356]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4a58      	ldr	r2, [pc, #352]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a74:	4b53      	ldr	r3, [pc, #332]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4a52      	ldr	r2, [pc, #328]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b50      	ldr	r3, [pc, #320]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	494d      	ldr	r1, [pc, #308]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d044      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b47      	ldr	r3, [pc, #284]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d119      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e07f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d003      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e06f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e067      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae6:	4b37      	ldr	r3, [pc, #220]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f023 0203 	bic.w	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4934      	ldr	r1, [pc, #208]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af8:	f7ff fa38 	bl	8000f6c <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b00:	f7ff fa34 	bl	8000f6c <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e04f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 020c 	and.w	r2, r3, #12
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1eb      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b28:	4b25      	ldr	r3, [pc, #148]	@ (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d20c      	bcs.n	8001b50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b22      	ldr	r3, [pc, #136]	@ (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b20      	ldr	r3, [pc, #128]	@ (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e032      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b5c:	4b19      	ldr	r3, [pc, #100]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4916      	ldr	r1, [pc, #88]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b7a:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	490e      	ldr	r1, [pc, #56]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b8e:	f000 f821 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8001b92:	4602      	mov	r2, r0
 8001b94:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	490a      	ldr	r1, [pc, #40]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba0:	5ccb      	ldrb	r3, [r1, r3]
 8001ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba6:	4a09      	ldr	r2, [pc, #36]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001baa:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f8c8 	bl	8000d44 <HAL_InitTick>

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023c00 	.word	0x40023c00
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	0800837c 	.word	0x0800837c
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	20000004 	.word	0x20000004

08001bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bd8:	b094      	sub	sp, #80	@ 0x50
 8001bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bec:	4b79      	ldr	r3, [pc, #484]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d00d      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x40>
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	f200 80e1 	bhi.w	8001dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x34>
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c06:	e0db      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c08:	4b73      	ldr	r3, [pc, #460]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c0c:	e0db      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c0e:	4b73      	ldr	r3, [pc, #460]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0x208>)
 8001c10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c12:	e0d8      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c14:	4b6f      	ldr	r3, [pc, #444]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c1e:	4b6d      	ldr	r3, [pc, #436]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d063      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2a:	4b6a      	ldr	r3, [pc, #424]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	099b      	lsrs	r3, r3, #6
 8001c30:	2200      	movs	r2, #0
 8001c32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c46:	4622      	mov	r2, r4
 8001c48:	462b      	mov	r3, r5
 8001c4a:	f04f 0000 	mov.w	r0, #0
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	0159      	lsls	r1, r3, #5
 8001c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c58:	0150      	lsls	r0, r2, #5
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4621      	mov	r1, r4
 8001c60:	1a51      	subs	r1, r2, r1
 8001c62:	6139      	str	r1, [r7, #16]
 8001c64:	4629      	mov	r1, r5
 8001c66:	eb63 0301 	sbc.w	r3, r3, r1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c78:	4659      	mov	r1, fp
 8001c7a:	018b      	lsls	r3, r1, #6
 8001c7c:	4651      	mov	r1, sl
 8001c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c82:	4651      	mov	r1, sl
 8001c84:	018a      	lsls	r2, r1, #6
 8001c86:	4651      	mov	r1, sl
 8001c88:	ebb2 0801 	subs.w	r8, r2, r1
 8001c8c:	4659      	mov	r1, fp
 8001c8e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ca6:	4690      	mov	r8, r2
 8001ca8:	4699      	mov	r9, r3
 8001caa:	4623      	mov	r3, r4
 8001cac:	eb18 0303 	adds.w	r3, r8, r3
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	462b      	mov	r3, r5
 8001cb4:	eb49 0303 	adc.w	r3, r9, r3
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	024b      	lsls	r3, r1, #9
 8001cca:	4621      	mov	r1, r4
 8001ccc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	024a      	lsls	r2, r1, #9
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cda:	2200      	movs	r2, #0
 8001cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ce0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ce4:	f7fe fabe 	bl	8000264 <__aeabi_uldivmod>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4613      	mov	r3, r2
 8001cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cf0:	e058      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf2:	4b38      	ldr	r3, [pc, #224]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	099b      	lsrs	r3, r3, #6
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d02:	623b      	str	r3, [r7, #32]
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d0c:	4642      	mov	r2, r8
 8001d0e:	464b      	mov	r3, r9
 8001d10:	f04f 0000 	mov.w	r0, #0
 8001d14:	f04f 0100 	mov.w	r1, #0
 8001d18:	0159      	lsls	r1, r3, #5
 8001d1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d1e:	0150      	lsls	r0, r2, #5
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4641      	mov	r1, r8
 8001d26:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d2a:	4649      	mov	r1, r9
 8001d2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d44:	ebb2 040a 	subs.w	r4, r2, sl
 8001d48:	eb63 050b 	sbc.w	r5, r3, fp
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	00eb      	lsls	r3, r5, #3
 8001d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d5a:	00e2      	lsls	r2, r4, #3
 8001d5c:	4614      	mov	r4, r2
 8001d5e:	461d      	mov	r5, r3
 8001d60:	4643      	mov	r3, r8
 8001d62:	18e3      	adds	r3, r4, r3
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	464b      	mov	r3, r9
 8001d68:	eb45 0303 	adc.w	r3, r5, r3
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	028b      	lsls	r3, r1, #10
 8001d7e:	4621      	mov	r1, r4
 8001d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d84:	4621      	mov	r1, r4
 8001d86:	028a      	lsls	r2, r1, #10
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	61fa      	str	r2, [r7, #28]
 8001d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d98:	f7fe fa64 	bl	8000264 <__aeabi_uldivmod>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4613      	mov	r3, r2
 8001da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001da4:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	0c1b      	lsrs	r3, r3, #16
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	3301      	adds	r3, #1
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001db4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001db6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dbe:	e002      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc0:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3750      	adds	r7, #80	@ 0x50
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	00f42400 	.word	0x00f42400
 8001ddc:	007a1200 	.word	0x007a1200

08001de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de4:	4b03      	ldr	r3, [pc, #12]	@ (8001df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000000 	.word	0x20000000

08001df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dfc:	f7ff fff0 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	0a9b      	lsrs	r3, r3, #10
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	4903      	ldr	r1, [pc, #12]	@ (8001e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0e:	5ccb      	ldrb	r3, [r1, r3]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	0800838c 	.word	0x0800838c

08001e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e24:	f7ff ffdc 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0b5b      	lsrs	r3, r3, #13
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4903      	ldr	r1, [pc, #12]	@ (8001e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	0800838c 	.word	0x0800838c

08001e48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	220f      	movs	r2, #15
 8001e56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e58:	4b12      	ldr	r3, [pc, #72]	@ (8001ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0203 	and.w	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	08db      	lsrs	r3, r3, #3
 8001e82:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <HAL_RCC_GetClockConfig+0x60>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0207 	and.w	r2, r3, #7
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	601a      	str	r2, [r3, #0]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e041      	b.n	8001f42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d106      	bne.n	8001ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f839 	bl	8001f4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4610      	mov	r0, r2
 8001eec:	f000 f9c0 	bl	8002270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d001      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e04e      	b.n	8002016 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a23      	ldr	r2, [pc, #140]	@ (8002024 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d022      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0x80>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa2:	d01d      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0x80>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8002028 <HAL_TIM_Base_Start_IT+0xc8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d018      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0x80>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800202c <HAL_TIM_Base_Start_IT+0xcc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d013      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0x80>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8002030 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00e      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0x80>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8002034 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d009      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0x80>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a19      	ldr	r2, [pc, #100]	@ (8002038 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d004      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0x80>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a18      	ldr	r2, [pc, #96]	@ (800203c <HAL_TIM_Base_Start_IT+0xdc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d111      	bne.n	8002004 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b06      	cmp	r3, #6
 8001ff0:	d010      	beq.n	8002014 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 0201 	orr.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002002:	e007      	b.n	8002014 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40010000 	.word	0x40010000
 8002028:	40000400 	.word	0x40000400
 800202c:	40000800 	.word	0x40000800
 8002030:	40000c00 	.word	0x40000c00
 8002034:	40010400 	.word	0x40010400
 8002038:	40014000 	.word	0x40014000
 800203c:	40001800 	.word	0x40001800

08002040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d020      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01b      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0202 	mvn.w	r2, #2
 8002074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f8d2 	bl	8002234 <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8c4 	bl	8002220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f8d5 	bl	8002248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d020      	beq.n	80020f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01b      	beq.n	80020f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0204 	mvn.w	r2, #4
 80020c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2202      	movs	r2, #2
 80020c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8ac 	bl	8002234 <HAL_TIM_IC_CaptureCallback>
 80020dc:	e005      	b.n	80020ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f89e 	bl	8002220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f8af 	bl	8002248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d020      	beq.n	800213c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01b      	beq.n	800213c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0208 	mvn.w	r2, #8
 800210c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2204      	movs	r2, #4
 8002112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f886 	bl	8002234 <HAL_TIM_IC_CaptureCallback>
 8002128:	e005      	b.n	8002136 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f878 	bl	8002220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f889 	bl	8002248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	d020      	beq.n	8002188 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01b      	beq.n	8002188 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0210 	mvn.w	r2, #16
 8002158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2208      	movs	r2, #8
 800215e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f860 	bl	8002234 <HAL_TIM_IC_CaptureCallback>
 8002174:	e005      	b.n	8002182 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f852 	bl	8002220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f863 	bl	8002248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00c      	beq.n	80021ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0201 	mvn.w	r2, #1
 80021a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7fe fd44 	bl	8000c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00c      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f906 	bl	80023dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00c      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f834 	bl	800225c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00c      	beq.n	8002218 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0220 	mvn.w	r2, #32
 8002210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f8d8 	bl	80023c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a46      	ldr	r2, [pc, #280]	@ (800239c <TIM_Base_SetConfig+0x12c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d013      	beq.n	80022b0 <TIM_Base_SetConfig+0x40>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800228e:	d00f      	beq.n	80022b0 <TIM_Base_SetConfig+0x40>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a43      	ldr	r2, [pc, #268]	@ (80023a0 <TIM_Base_SetConfig+0x130>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d00b      	beq.n	80022b0 <TIM_Base_SetConfig+0x40>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a42      	ldr	r2, [pc, #264]	@ (80023a4 <TIM_Base_SetConfig+0x134>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d007      	beq.n	80022b0 <TIM_Base_SetConfig+0x40>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a41      	ldr	r2, [pc, #260]	@ (80023a8 <TIM_Base_SetConfig+0x138>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d003      	beq.n	80022b0 <TIM_Base_SetConfig+0x40>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a40      	ldr	r2, [pc, #256]	@ (80023ac <TIM_Base_SetConfig+0x13c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d108      	bne.n	80022c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a35      	ldr	r2, [pc, #212]	@ (800239c <TIM_Base_SetConfig+0x12c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d02b      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022d0:	d027      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a32      	ldr	r2, [pc, #200]	@ (80023a0 <TIM_Base_SetConfig+0x130>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d023      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a31      	ldr	r2, [pc, #196]	@ (80023a4 <TIM_Base_SetConfig+0x134>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d01f      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a30      	ldr	r2, [pc, #192]	@ (80023a8 <TIM_Base_SetConfig+0x138>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01b      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a2f      	ldr	r2, [pc, #188]	@ (80023ac <TIM_Base_SetConfig+0x13c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d017      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a2e      	ldr	r2, [pc, #184]	@ (80023b0 <TIM_Base_SetConfig+0x140>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a2d      	ldr	r2, [pc, #180]	@ (80023b4 <TIM_Base_SetConfig+0x144>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00f      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a2c      	ldr	r2, [pc, #176]	@ (80023b8 <TIM_Base_SetConfig+0x148>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00b      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a2b      	ldr	r2, [pc, #172]	@ (80023bc <TIM_Base_SetConfig+0x14c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d007      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a2a      	ldr	r2, [pc, #168]	@ (80023c0 <TIM_Base_SetConfig+0x150>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d003      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a29      	ldr	r2, [pc, #164]	@ (80023c4 <TIM_Base_SetConfig+0x154>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d108      	bne.n	8002334 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a10      	ldr	r2, [pc, #64]	@ (800239c <TIM_Base_SetConfig+0x12c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d003      	beq.n	8002368 <TIM_Base_SetConfig+0xf8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a12      	ldr	r2, [pc, #72]	@ (80023ac <TIM_Base_SetConfig+0x13c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d103      	bne.n	8002370 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b01      	cmp	r3, #1
 8002380:	d105      	bne.n	800238e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f023 0201 	bic.w	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	611a      	str	r2, [r3, #16]
  }
}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40010000 	.word	0x40010000
 80023a0:	40000400 	.word	0x40000400
 80023a4:	40000800 	.word	0x40000800
 80023a8:	40000c00 	.word	0x40000c00
 80023ac:	40010400 	.word	0x40010400
 80023b0:	40014000 	.word	0x40014000
 80023b4:	40014400 	.word	0x40014400
 80023b8:	40014800 	.word	0x40014800
 80023bc:	40001800 	.word	0x40001800
 80023c0:	40001c00 	.word	0x40001c00
 80023c4:	40002000 	.word	0x40002000

080023c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e042      	b.n	8002488 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7fe fc4c 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2224      	movs	r2, #36	@ 0x24
 8002420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f82b 	bl	8002490 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002494:	b0c0      	sub	sp, #256	@ 0x100
 8002496:	af00      	add	r7, sp, #0
 8002498:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800249c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80024a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ac:	68d9      	ldr	r1, [r3, #12]
 80024ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	ea40 0301 	orr.w	r3, r0, r1
 80024b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	431a      	orrs	r2, r3
 80024c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80024e8:	f021 010c 	bic.w	r1, r1, #12
 80024ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80024f6:	430b      	orrs	r3, r1
 80024f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800250a:	6999      	ldr	r1, [r3, #24]
 800250c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	ea40 0301 	orr.w	r3, r0, r1
 8002516:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4b8f      	ldr	r3, [pc, #572]	@ (800275c <UART_SetConfig+0x2cc>)
 8002520:	429a      	cmp	r2, r3
 8002522:	d005      	beq.n	8002530 <UART_SetConfig+0xa0>
 8002524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	4b8d      	ldr	r3, [pc, #564]	@ (8002760 <UART_SetConfig+0x2d0>)
 800252c:	429a      	cmp	r2, r3
 800252e:	d104      	bne.n	800253a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002530:	f7ff fc76 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 8002534:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002538:	e003      	b.n	8002542 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800253a:	f7ff fc5d 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 800253e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800254c:	f040 810c 	bne.w	8002768 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002554:	2200      	movs	r2, #0
 8002556:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800255a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800255e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002562:	4622      	mov	r2, r4
 8002564:	462b      	mov	r3, r5
 8002566:	1891      	adds	r1, r2, r2
 8002568:	65b9      	str	r1, [r7, #88]	@ 0x58
 800256a:	415b      	adcs	r3, r3
 800256c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800256e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002572:	4621      	mov	r1, r4
 8002574:	eb12 0801 	adds.w	r8, r2, r1
 8002578:	4629      	mov	r1, r5
 800257a:	eb43 0901 	adc.w	r9, r3, r1
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800258a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800258e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002592:	4690      	mov	r8, r2
 8002594:	4699      	mov	r9, r3
 8002596:	4623      	mov	r3, r4
 8002598:	eb18 0303 	adds.w	r3, r8, r3
 800259c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80025a0:	462b      	mov	r3, r5
 80025a2:	eb49 0303 	adc.w	r3, r9, r3
 80025a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80025aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80025b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80025ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80025be:	460b      	mov	r3, r1
 80025c0:	18db      	adds	r3, r3, r3
 80025c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80025c4:	4613      	mov	r3, r2
 80025c6:	eb42 0303 	adc.w	r3, r2, r3
 80025ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80025cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80025d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80025d4:	f7fd fe46 	bl	8000264 <__aeabi_uldivmod>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4b61      	ldr	r3, [pc, #388]	@ (8002764 <UART_SetConfig+0x2d4>)
 80025de:	fba3 2302 	umull	r2, r3, r3, r2
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	011c      	lsls	r4, r3, #4
 80025e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025ea:	2200      	movs	r2, #0
 80025ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80025f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80025f8:	4642      	mov	r2, r8
 80025fa:	464b      	mov	r3, r9
 80025fc:	1891      	adds	r1, r2, r2
 80025fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002600:	415b      	adcs	r3, r3
 8002602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002604:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002608:	4641      	mov	r1, r8
 800260a:	eb12 0a01 	adds.w	sl, r2, r1
 800260e:	4649      	mov	r1, r9
 8002610:	eb43 0b01 	adc.w	fp, r3, r1
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002620:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002628:	4692      	mov	sl, r2
 800262a:	469b      	mov	fp, r3
 800262c:	4643      	mov	r3, r8
 800262e:	eb1a 0303 	adds.w	r3, sl, r3
 8002632:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002636:	464b      	mov	r3, r9
 8002638:	eb4b 0303 	adc.w	r3, fp, r3
 800263c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800264c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002650:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002654:	460b      	mov	r3, r1
 8002656:	18db      	adds	r3, r3, r3
 8002658:	643b      	str	r3, [r7, #64]	@ 0x40
 800265a:	4613      	mov	r3, r2
 800265c:	eb42 0303 	adc.w	r3, r2, r3
 8002660:	647b      	str	r3, [r7, #68]	@ 0x44
 8002662:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002666:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800266a:	f7fd fdfb 	bl	8000264 <__aeabi_uldivmod>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4611      	mov	r1, r2
 8002674:	4b3b      	ldr	r3, [pc, #236]	@ (8002764 <UART_SetConfig+0x2d4>)
 8002676:	fba3 2301 	umull	r2, r3, r3, r1
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	2264      	movs	r2, #100	@ 0x64
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	1acb      	subs	r3, r1, r3
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800268a:	4b36      	ldr	r3, [pc, #216]	@ (8002764 <UART_SetConfig+0x2d4>)
 800268c:	fba3 2302 	umull	r2, r3, r3, r2
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002698:	441c      	add	r4, r3
 800269a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800269e:	2200      	movs	r2, #0
 80026a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80026a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80026ac:	4642      	mov	r2, r8
 80026ae:	464b      	mov	r3, r9
 80026b0:	1891      	adds	r1, r2, r2
 80026b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026b4:	415b      	adcs	r3, r3
 80026b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026bc:	4641      	mov	r1, r8
 80026be:	1851      	adds	r1, r2, r1
 80026c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80026c2:	4649      	mov	r1, r9
 80026c4:	414b      	adcs	r3, r1
 80026c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80026d4:	4659      	mov	r1, fp
 80026d6:	00cb      	lsls	r3, r1, #3
 80026d8:	4651      	mov	r1, sl
 80026da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026de:	4651      	mov	r1, sl
 80026e0:	00ca      	lsls	r2, r1, #3
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	4603      	mov	r3, r0
 80026e8:	4642      	mov	r2, r8
 80026ea:	189b      	adds	r3, r3, r2
 80026ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026f0:	464b      	mov	r3, r9
 80026f2:	460a      	mov	r2, r1
 80026f4:	eb42 0303 	adc.w	r3, r2, r3
 80026f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002708:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800270c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002710:	460b      	mov	r3, r1
 8002712:	18db      	adds	r3, r3, r3
 8002714:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002716:	4613      	mov	r3, r2
 8002718:	eb42 0303 	adc.w	r3, r2, r3
 800271c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800271e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002722:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002726:	f7fd fd9d 	bl	8000264 <__aeabi_uldivmod>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4b0d      	ldr	r3, [pc, #52]	@ (8002764 <UART_SetConfig+0x2d4>)
 8002730:	fba3 1302 	umull	r1, r3, r3, r2
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	2164      	movs	r1, #100	@ 0x64
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	3332      	adds	r3, #50	@ 0x32
 8002742:	4a08      	ldr	r2, [pc, #32]	@ (8002764 <UART_SetConfig+0x2d4>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	f003 0207 	and.w	r2, r3, #7
 800274e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4422      	add	r2, r4
 8002756:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002758:	e106      	b.n	8002968 <UART_SetConfig+0x4d8>
 800275a:	bf00      	nop
 800275c:	40011000 	.word	0x40011000
 8002760:	40011400 	.word	0x40011400
 8002764:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800276c:	2200      	movs	r2, #0
 800276e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002772:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002776:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800277a:	4642      	mov	r2, r8
 800277c:	464b      	mov	r3, r9
 800277e:	1891      	adds	r1, r2, r2
 8002780:	6239      	str	r1, [r7, #32]
 8002782:	415b      	adcs	r3, r3
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24
 8002786:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800278a:	4641      	mov	r1, r8
 800278c:	1854      	adds	r4, r2, r1
 800278e:	4649      	mov	r1, r9
 8002790:	eb43 0501 	adc.w	r5, r3, r1
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	00eb      	lsls	r3, r5, #3
 800279e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027a2:	00e2      	lsls	r2, r4, #3
 80027a4:	4614      	mov	r4, r2
 80027a6:	461d      	mov	r5, r3
 80027a8:	4643      	mov	r3, r8
 80027aa:	18e3      	adds	r3, r4, r3
 80027ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027b0:	464b      	mov	r3, r9
 80027b2:	eb45 0303 	adc.w	r3, r5, r3
 80027b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80027ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027d6:	4629      	mov	r1, r5
 80027d8:	008b      	lsls	r3, r1, #2
 80027da:	4621      	mov	r1, r4
 80027dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027e0:	4621      	mov	r1, r4
 80027e2:	008a      	lsls	r2, r1, #2
 80027e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80027e8:	f7fd fd3c 	bl	8000264 <__aeabi_uldivmod>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4b60      	ldr	r3, [pc, #384]	@ (8002974 <UART_SetConfig+0x4e4>)
 80027f2:	fba3 2302 	umull	r2, r3, r3, r2
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	011c      	lsls	r4, r3, #4
 80027fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027fe:	2200      	movs	r2, #0
 8002800:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002804:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002808:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800280c:	4642      	mov	r2, r8
 800280e:	464b      	mov	r3, r9
 8002810:	1891      	adds	r1, r2, r2
 8002812:	61b9      	str	r1, [r7, #24]
 8002814:	415b      	adcs	r3, r3
 8002816:	61fb      	str	r3, [r7, #28]
 8002818:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800281c:	4641      	mov	r1, r8
 800281e:	1851      	adds	r1, r2, r1
 8002820:	6139      	str	r1, [r7, #16]
 8002822:	4649      	mov	r1, r9
 8002824:	414b      	adcs	r3, r1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002834:	4659      	mov	r1, fp
 8002836:	00cb      	lsls	r3, r1, #3
 8002838:	4651      	mov	r1, sl
 800283a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800283e:	4651      	mov	r1, sl
 8002840:	00ca      	lsls	r2, r1, #3
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	4603      	mov	r3, r0
 8002848:	4642      	mov	r2, r8
 800284a:	189b      	adds	r3, r3, r2
 800284c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002850:	464b      	mov	r3, r9
 8002852:	460a      	mov	r2, r1
 8002854:	eb42 0303 	adc.w	r3, r2, r3
 8002858:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002866:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002874:	4649      	mov	r1, r9
 8002876:	008b      	lsls	r3, r1, #2
 8002878:	4641      	mov	r1, r8
 800287a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800287e:	4641      	mov	r1, r8
 8002880:	008a      	lsls	r2, r1, #2
 8002882:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002886:	f7fd fced 	bl	8000264 <__aeabi_uldivmod>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4611      	mov	r1, r2
 8002890:	4b38      	ldr	r3, [pc, #224]	@ (8002974 <UART_SetConfig+0x4e4>)
 8002892:	fba3 2301 	umull	r2, r3, r3, r1
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2264      	movs	r2, #100	@ 0x64
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	1acb      	subs	r3, r1, r3
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	3332      	adds	r3, #50	@ 0x32
 80028a4:	4a33      	ldr	r2, [pc, #204]	@ (8002974 <UART_SetConfig+0x4e4>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028b0:	441c      	add	r4, r3
 80028b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028b6:	2200      	movs	r2, #0
 80028b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80028ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80028bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80028c0:	4642      	mov	r2, r8
 80028c2:	464b      	mov	r3, r9
 80028c4:	1891      	adds	r1, r2, r2
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	415b      	adcs	r3, r3
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028d0:	4641      	mov	r1, r8
 80028d2:	1851      	adds	r1, r2, r1
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	4649      	mov	r1, r9
 80028d8:	414b      	adcs	r3, r1
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028e8:	4659      	mov	r1, fp
 80028ea:	00cb      	lsls	r3, r1, #3
 80028ec:	4651      	mov	r1, sl
 80028ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028f2:	4651      	mov	r1, sl
 80028f4:	00ca      	lsls	r2, r1, #3
 80028f6:	4610      	mov	r0, r2
 80028f8:	4619      	mov	r1, r3
 80028fa:	4603      	mov	r3, r0
 80028fc:	4642      	mov	r2, r8
 80028fe:	189b      	adds	r3, r3, r2
 8002900:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002902:	464b      	mov	r3, r9
 8002904:	460a      	mov	r2, r1
 8002906:	eb42 0303 	adc.w	r3, r2, r3
 800290a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	663b      	str	r3, [r7, #96]	@ 0x60
 8002916:	667a      	str	r2, [r7, #100]	@ 0x64
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002924:	4649      	mov	r1, r9
 8002926:	008b      	lsls	r3, r1, #2
 8002928:	4641      	mov	r1, r8
 800292a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800292e:	4641      	mov	r1, r8
 8002930:	008a      	lsls	r2, r1, #2
 8002932:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002936:	f7fd fc95 	bl	8000264 <__aeabi_uldivmod>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4b0d      	ldr	r3, [pc, #52]	@ (8002974 <UART_SetConfig+0x4e4>)
 8002940:	fba3 1302 	umull	r1, r3, r3, r2
 8002944:	095b      	lsrs	r3, r3, #5
 8002946:	2164      	movs	r1, #100	@ 0x64
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	3332      	adds	r3, #50	@ 0x32
 8002952:	4a08      	ldr	r2, [pc, #32]	@ (8002974 <UART_SetConfig+0x4e4>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	f003 020f 	and.w	r2, r3, #15
 800295e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4422      	add	r2, r4
 8002966:	609a      	str	r2, [r3, #8]
}
 8002968:	bf00      	nop
 800296a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800296e:	46bd      	mov	sp, r7
 8002970:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002974:	51eb851f 	.word	0x51eb851f

08002978 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f103 0208 	add.w	r2, r3, #8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f04f 32ff 	mov.w	r2, #4294967295
 8002990:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f103 0208 	add.w	r2, r3, #8
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f103 0208 	add.w	r2, r3, #8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80029d2:	b480      	push	{r7}
 80029d4:	b085      	sub	sp, #20
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	601a      	str	r2, [r3, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b085      	sub	sp, #20
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d103      	bne.n	8002a3a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	e00c      	b.n	8002a54 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3308      	adds	r3, #8
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	e002      	b.n	8002a48 <vListInsert+0x2e>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d2f6      	bcs.n	8002a42 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	601a      	str	r2, [r3, #0]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6892      	ldr	r2, [r2, #8]
 8002aa2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6852      	ldr	r2, [r2, #4]
 8002aac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d103      	bne.n	8002ac0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	1e5a      	subs	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10b      	bne.n	8002b0c <xQueueGenericReset+0x2c>
        __asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	60bb      	str	r3, [r7, #8]
    }
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
 8002b0a:	e7fd      	b.n	8002b08 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002b0c:	f002 fade 	bl	80050cc <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b18:	68f9      	ldr	r1, [r7, #12]
 8002b1a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	441a      	add	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	68f9      	ldr	r1, [r7, #12]
 8002b40:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	441a      	add	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	22ff      	movs	r2, #255	@ 0xff
 8002b50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	22ff      	movs	r2, #255	@ 0xff
 8002b58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d114      	bne.n	8002b8c <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01a      	beq.n	8002ba0 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3310      	adds	r3, #16
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f001 fa1c 	bl	8003fac <xTaskRemoveFromEventList>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d012      	beq.n	8002ba0 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <xQueueGenericReset+0xd0>)
 8002b7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	f3bf 8f4f 	dsb	sy
 8002b86:	f3bf 8f6f 	isb	sy
 8002b8a:	e009      	b.n	8002ba0 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3310      	adds	r3, #16
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff fef1 	bl	8002978 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3324      	adds	r3, #36	@ 0x24
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff feec 	bl	8002978 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002ba0:	f002 fac6 	bl	8005130 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002ba4:	2301      	movs	r3, #1
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	e000ed04 	.word	0xe000ed04

08002bb4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	@ 0x30
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10b      	bne.n	8002be0 <xQueueGenericCreate+0x2c>
        __asm volatile
 8002bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	61bb      	str	r3, [r7, #24]
    }
 8002bda:	bf00      	nop
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	fb02 f303 	mul.w	r3, r2, r3
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d006      	beq.n	8002bfe <xQueueGenericCreate+0x4a>
 8002bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d101      	bne.n	8002c02 <xQueueGenericCreate+0x4e>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <xQueueGenericCreate+0x50>
 8002c02:	2300      	movs	r3, #0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10b      	bne.n	8002c20 <xQueueGenericCreate+0x6c>
        __asm volatile
 8002c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	617b      	str	r3, [r7, #20]
    }
 8002c1a:	bf00      	nop
 8002c1c:	bf00      	nop
 8002c1e:	e7fd      	b.n	8002c1c <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c22:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002c26:	d90b      	bls.n	8002c40 <xQueueGenericCreate+0x8c>
        __asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	613b      	str	r3, [r7, #16]
    }
 8002c3a:	bf00      	nop
 8002c3c:	bf00      	nop
 8002c3e:	e7fd      	b.n	8002c3c <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c42:	3350      	adds	r3, #80	@ 0x50
 8002c44:	4618      	mov	r0, r3
 8002c46:	f002 fb73 	bl	8005330 <pvPortMalloc>
 8002c4a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00d      	beq.n	8002c6e <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3350      	adds	r3, #80	@ 0x50
 8002c5a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c5c:	79fa      	ldrb	r2, [r7, #7]
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	4613      	mov	r3, r2
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f805 	bl	8002c78 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
    }
 8002c70:	4618      	mov	r0, r3
 8002c72:	3728      	adds	r7, #40	@ 0x28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d103      	bne.n	8002c94 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	e002      	b.n	8002c9a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	69b8      	ldr	r0, [r7, #24]
 8002caa:	f7ff ff19 	bl	8002ae0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	2073      	movs	r0, #115	@ 0x73
 8002cbe:	f004 fb1d 	bl	80072fc <SEGGER_SYSVIEW_RecordU32x3>
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b090      	sub	sp, #64	@ 0x40
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10b      	bne.n	8002d00 <xQueueGenericSend+0x34>
        __asm volatile
 8002ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002cfa:	bf00      	nop
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d103      	bne.n	8002d0e <xQueueGenericSend+0x42>
 8002d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <xQueueGenericSend+0x46>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <xQueueGenericSend+0x48>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <xQueueGenericSend+0x64>
        __asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002d2a:	bf00      	nop
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d103      	bne.n	8002d3e <xQueueGenericSend+0x72>
 8002d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <xQueueGenericSend+0x76>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <xQueueGenericSend+0x78>
 8002d42:	2300      	movs	r3, #0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10b      	bne.n	8002d60 <xQueueGenericSend+0x94>
        __asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	623b      	str	r3, [r7, #32]
    }
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d60:	f001 fac8 	bl	80042f4 <xTaskGetSchedulerState>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <xQueueGenericSend+0xa4>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <xQueueGenericSend+0xa8>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <xQueueGenericSend+0xaa>
 8002d74:	2300      	movs	r3, #0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10b      	bne.n	8002d92 <xQueueGenericSend+0xc6>
        __asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	61fb      	str	r3, [r7, #28]
    }
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	e7fd      	b.n	8002d8e <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002d92:	f002 f99b 	bl	80050cc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d302      	bcc.n	8002da8 <xQueueGenericSend+0xdc>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d136      	bne.n	8002e16 <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 8002da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002daa:	4618      	mov	r0, r3
 8002dac:	f005 f834 	bl	8007e18 <SEGGER_SYSVIEW_ShrinkId>
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	460b      	mov	r3, r1
 8002dba:	4601      	mov	r1, r0
 8002dbc:	205a      	movs	r0, #90	@ 0x5a
 8002dbe:	f004 fb13 	bl	80073e8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dc8:	f000 fa80 	bl	80032cc <prvCopyDataToQueue>
 8002dcc:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d010      	beq.n	8002df8 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd8:	3324      	adds	r3, #36	@ 0x24
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f001 f8e6 	bl	8003fac <xTaskRemoveFromEventList>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d013      	beq.n	8002e0e <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002de6:	4b4d      	ldr	r3, [pc, #308]	@ (8002f1c <xQueueGenericSend+0x250>)
 8002de8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	e00a      	b.n	8002e0e <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002dfe:	4b47      	ldr	r3, [pc, #284]	@ (8002f1c <xQueueGenericSend+0x250>)
 8002e00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002e0e:	f002 f98f 	bl	8005130 <vPortExitCritical>
                return pdPASS;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e07d      	b.n	8002f12 <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d110      	bne.n	8002e3e <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002e1c:	f002 f988 	bl	8005130 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e22:	4618      	mov	r0, r3
 8002e24:	f004 fff8 	bl	8007e18 <SEGGER_SYSVIEW_ShrinkId>
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	460b      	mov	r3, r1
 8002e32:	4601      	mov	r1, r0
 8002e34:	205a      	movs	r0, #90	@ 0x5a
 8002e36:	f004 fad7 	bl	80073e8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e069      	b.n	8002f12 <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d106      	bne.n	8002e52 <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f001 f917 	bl	800407c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e52:	f002 f96d 	bl	8005130 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e56:	f000 fe59 	bl	8003b0c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e5a:	f002 f937 	bl	80050cc <vPortEnterCritical>
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e64:	b25b      	sxtb	r3, r3
 8002e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6a:	d103      	bne.n	8002e74 <xQueueGenericSend+0x1a8>
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e7a:	b25b      	sxtb	r3, r3
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d103      	bne.n	8002e8a <xQueueGenericSend+0x1be>
 8002e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e8a:	f002 f951 	bl	8005130 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e8e:	1d3a      	adds	r2, r7, #4
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 f906 	bl	80040a8 <xTaskCheckForTimeOut>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d124      	bne.n	8002eec <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ea2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ea4:	f000 fb0a 	bl	80034bc <prvIsQueueFull>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d018      	beq.n	8002ee0 <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb0:	3310      	adds	r3, #16
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f001 f822 	bl	8003f00 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002ebc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ebe:	f000 fa95 	bl	80033ec <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002ec2:	f000 fe31 	bl	8003b28 <xTaskResumeAll>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f47f af62 	bne.w	8002d92 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8002ece:	4b13      	ldr	r3, [pc, #76]	@ (8002f1c <xQueueGenericSend+0x250>)
 8002ed0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	e758      	b.n	8002d92 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002ee0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ee2:	f000 fa83 	bl	80033ec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ee6:	f000 fe1f 	bl	8003b28 <xTaskResumeAll>
 8002eea:	e752      	b.n	8002d92 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002eec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eee:	f000 fa7d 	bl	80033ec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002ef2:	f000 fe19 	bl	8003b28 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f004 ff8d 	bl	8007e18 <SEGGER_SYSVIEW_ShrinkId>
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	460b      	mov	r3, r1
 8002f08:	4601      	mov	r1, r0
 8002f0a:	205a      	movs	r0, #90	@ 0x5a
 8002f0c:	f004 fa6c 	bl	80073e8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002f10:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3738      	adds	r7, #56	@ 0x38
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	e000ed04 	.word	0xe000ed04

08002f20 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b090      	sub	sp, #64	@ 0x40
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8002f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10b      	bne.n	8002f50 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8002f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002f4a:	bf00      	nop
 8002f4c:	bf00      	nop
 8002f4e:	e7fd      	b.n	8002f4c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <xQueueGenericSendFromISR+0x3e>
 8002f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <xQueueGenericSendFromISR+0x42>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <xQueueGenericSendFromISR+0x44>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10b      	bne.n	8002f80 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8002f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002f7a:	bf00      	nop
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d103      	bne.n	8002f8e <xQueueGenericSendFromISR+0x6e>
 8002f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <xQueueGenericSendFromISR+0x72>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <xQueueGenericSendFromISR+0x74>
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	623b      	str	r3, [r7, #32]
    }
 8002faa:	bf00      	nop
 8002fac:	bf00      	nop
 8002fae:	e7fd      	b.n	8002fac <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fb0:	f002 f97c 	bl	80052ac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002fb4:	f3ef 8211 	mrs	r2, BASEPRI
 8002fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	61fa      	str	r2, [r7, #28]
 8002fca:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fce:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d302      	bcc.n	8002fe2 <xQueueGenericSendFromISR+0xc2>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d149      	bne.n	8003076 <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fe8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f004 ff0f 	bl	8007e18 <SEGGER_SYSVIEW_ShrinkId>
 8002ffa:	4601      	mov	r1, r0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	461a      	mov	r2, r3
 8003000:	2060      	movs	r0, #96	@ 0x60
 8003002:	f004 f921 	bl	8007248 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800300c:	f000 f95e 	bl	80032cc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003010:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d112      	bne.n	8003040 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800301a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301e:	2b00      	cmp	r3, #0
 8003020:	d026      	beq.n	8003070 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003024:	3324      	adds	r3, #36	@ 0x24
 8003026:	4618      	mov	r0, r3
 8003028:	f000 ffc0 	bl	8003fac <xTaskRemoveFromEventList>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01e      	beq.n	8003070 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01b      	beq.n	8003070 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	e017      	b.n	8003070 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003040:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003044:	2b7f      	cmp	r3, #127	@ 0x7f
 8003046:	d10b      	bne.n	8003060 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8003048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304c:	f383 8811 	msr	BASEPRI, r3
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	617b      	str	r3, [r7, #20]
    }
 800305a:	bf00      	nop
 800305c:	bf00      	nop
 800305e:	e7fd      	b.n	800305c <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003060:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003064:	3301      	adds	r3, #1
 8003066:	b2db      	uxtb	r3, r3
 8003068:	b25a      	sxtb	r2, r3
 800306a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800306c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8003070:	2301      	movs	r3, #1
 8003072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8003074:	e00b      	b.n	800308e <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003078:	4618      	mov	r0, r3
 800307a:	f004 fecd 	bl	8007e18 <SEGGER_SYSVIEW_ShrinkId>
 800307e:	4601      	mov	r1, r0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	461a      	mov	r2, r3
 8003084:	2060      	movs	r0, #96	@ 0x60
 8003086:	f004 f8df 	bl	8007248 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800308a:	2300      	movs	r3, #0
 800308c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800308e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003090:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003098:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800309a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800309c:	4618      	mov	r0, r3
 800309e:	3740      	adds	r7, #64	@ 0x40
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b08f      	sub	sp, #60	@ 0x3c
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80030b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <xQueueReceive+0x32>
        __asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	623b      	str	r3, [r7, #32]
    }
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	e7fd      	b.n	80030d2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d103      	bne.n	80030e4 <xQueueReceive+0x40>
 80030dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <xQueueReceive+0x44>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <xQueueReceive+0x46>
 80030e8:	2300      	movs	r3, #0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10b      	bne.n	8003106 <xQueueReceive+0x62>
        __asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	61fb      	str	r3, [r7, #28]
    }
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	e7fd      	b.n	8003102 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003106:	f001 f8f5 	bl	80042f4 <xTaskGetSchedulerState>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d102      	bne.n	8003116 <xQueueReceive+0x72>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <xQueueReceive+0x76>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <xQueueReceive+0x78>
 800311a:	2300      	movs	r3, #0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10b      	bne.n	8003138 <xQueueReceive+0x94>
        __asm volatile
 8003120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003124:	f383 8811 	msr	BASEPRI, r3
 8003128:	f3bf 8f6f 	isb	sy
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	61bb      	str	r3, [r7, #24]
    }
 8003132:	bf00      	nop
 8003134:	bf00      	nop
 8003136:	e7fd      	b.n	8003134 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003138:	f001 ffc8 	bl	80050cc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800313c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003144:	2b00      	cmp	r3, #0
 8003146:	d02f      	beq.n	80031a8 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800314c:	f000 f928 	bl	80033a0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8003150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003152:	4618      	mov	r0, r3
 8003154:	f004 fe60 	bl	8007e18 <SEGGER_SYSVIEW_ShrinkId>
 8003158:	4604      	mov	r4, r0
 800315a:	2000      	movs	r0, #0
 800315c:	f004 fe5c 	bl	8007e18 <SEGGER_SYSVIEW_ShrinkId>
 8003160:	4602      	mov	r2, r0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2101      	movs	r1, #1
 8003166:	9100      	str	r1, [sp, #0]
 8003168:	4621      	mov	r1, r4
 800316a:	205c      	movs	r0, #92	@ 0x5c
 800316c:	f004 f93c 	bl	80073e8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	1e5a      	subs	r2, r3, #1
 8003174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003176:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00f      	beq.n	80031a0 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003182:	3310      	adds	r3, #16
 8003184:	4618      	mov	r0, r3
 8003186:	f000 ff11 	bl	8003fac <xTaskRemoveFromEventList>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003190:	4b4d      	ldr	r3, [pc, #308]	@ (80032c8 <xQueueReceive+0x224>)
 8003192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80031a0:	f001 ffc6 	bl	8005130 <vPortExitCritical>
                return pdPASS;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e08a      	b.n	80032be <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d113      	bne.n	80031d6 <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80031ae:	f001 ffbf 	bl	8005130 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80031b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b4:	4618      	mov	r0, r3
 80031b6:	f004 fe2f 	bl	8007e18 <SEGGER_SYSVIEW_ShrinkId>
 80031ba:	4604      	mov	r4, r0
 80031bc:	2000      	movs	r0, #0
 80031be:	f004 fe2b 	bl	8007e18 <SEGGER_SYSVIEW_ShrinkId>
 80031c2:	4602      	mov	r2, r0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2101      	movs	r1, #1
 80031c8:	9100      	str	r1, [sp, #0]
 80031ca:	4621      	mov	r1, r4
 80031cc:	205c      	movs	r0, #92	@ 0x5c
 80031ce:	f004 f90b 	bl	80073e8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80031d2:	2300      	movs	r3, #0
 80031d4:	e073      	b.n	80032be <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80031d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80031dc:	f107 0310 	add.w	r3, r7, #16
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 ff4b 	bl	800407c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80031e6:	2301      	movs	r3, #1
 80031e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80031ea:	f001 ffa1 	bl	8005130 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80031ee:	f000 fc8d 	bl	8003b0c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80031f2:	f001 ff6b 	bl	80050cc <vPortEnterCritical>
 80031f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031fc:	b25b      	sxtb	r3, r3
 80031fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003202:	d103      	bne.n	800320c <xQueueReceive+0x168>
 8003204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800320c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003212:	b25b      	sxtb	r3, r3
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d103      	bne.n	8003222 <xQueueReceive+0x17e>
 800321a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003222:	f001 ff85 	bl	8005130 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003226:	1d3a      	adds	r2, r7, #4
 8003228:	f107 0310 	add.w	r3, r7, #16
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f000 ff3a 	bl	80040a8 <xTaskCheckForTimeOut>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d124      	bne.n	8003284 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800323a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800323c:	f000 f928 	bl	8003490 <prvIsQueueEmpty>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d018      	beq.n	8003278 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003248:	3324      	adds	r3, #36	@ 0x24
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fe56 	bl	8003f00 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003254:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003256:	f000 f8c9 	bl	80033ec <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800325a:	f000 fc65 	bl	8003b28 <xTaskResumeAll>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	f47f af69 	bne.w	8003138 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8003266:	4b18      	ldr	r3, [pc, #96]	@ (80032c8 <xQueueReceive+0x224>)
 8003268:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	e75f      	b.n	8003138 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003278:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800327a:	f000 f8b7 	bl	80033ec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800327e:	f000 fc53 	bl	8003b28 <xTaskResumeAll>
 8003282:	e759      	b.n	8003138 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003284:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003286:	f000 f8b1 	bl	80033ec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800328a:	f000 fc4d 	bl	8003b28 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800328e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003290:	f000 f8fe 	bl	8003490 <prvIsQueueEmpty>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	f43f af4e 	beq.w	8003138 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800329c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329e:	4618      	mov	r0, r3
 80032a0:	f004 fdba 	bl	8007e18 <SEGGER_SYSVIEW_ShrinkId>
 80032a4:	4604      	mov	r4, r0
 80032a6:	2000      	movs	r0, #0
 80032a8:	f004 fdb6 	bl	8007e18 <SEGGER_SYSVIEW_ShrinkId>
 80032ac:	4602      	mov	r2, r0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2101      	movs	r1, #1
 80032b2:	9100      	str	r1, [sp, #0]
 80032b4:	4621      	mov	r1, r4
 80032b6:	205c      	movs	r0, #92	@ 0x5c
 80032b8:	f004 f896 	bl	80073e8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80032bc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3734      	adds	r7, #52	@ 0x34
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd90      	pop	{r4, r7, pc}
 80032c6:	bf00      	nop
 80032c8:	e000ed04 	.word	0xe000ed04

080032cc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10d      	bne.n	8003306 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d14d      	bne.n	800338e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f001 f81a 	bl	8004330 <xTaskPriorityDisinherit>
 80032fc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	e043      	b.n	800338e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d119      	bne.n	8003340 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6858      	ldr	r0, [r3, #4]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	461a      	mov	r2, r3
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	f004 ff44 	bl	80081a4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003324:	441a      	add	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	429a      	cmp	r2, r3
 8003334:	d32b      	bcc.n	800338e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	e026      	b.n	800338e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	68d8      	ldr	r0, [r3, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003348:	461a      	mov	r2, r3
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	f004 ff2a 	bl	80081a4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003358:	425b      	negs	r3, r3
 800335a:	441a      	add	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d207      	bcs.n	800337c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	425b      	negs	r3, r3
 8003376:	441a      	add	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d105      	bne.n	800338e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	3b01      	subs	r3, #1
 800338c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003396:	697b      	ldr	r3, [r7, #20]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d018      	beq.n	80033e4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	441a      	add	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d303      	bcc.n	80033d4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68d9      	ldr	r1, [r3, #12]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	461a      	mov	r2, r3
 80033de:	6838      	ldr	r0, [r7, #0]
 80033e0:	f004 fee0 	bl	80081a4 <memcpy>
    }
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80033f4:	f001 fe6a 	bl	80050cc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033fe:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003400:	e011      	b.n	8003426 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	2b00      	cmp	r3, #0
 8003408:	d012      	beq.n	8003430 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3324      	adds	r3, #36	@ 0x24
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fdcc 	bl	8003fac <xTaskRemoveFromEventList>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800341a:	f000 fead 	bl	8004178 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	3b01      	subs	r3, #1
 8003422:	b2db      	uxtb	r3, r3
 8003424:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	dce9      	bgt.n	8003402 <prvUnlockQueue+0x16>
 800342e:	e000      	b.n	8003432 <prvUnlockQueue+0x46>
                        break;
 8003430:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	22ff      	movs	r2, #255	@ 0xff
 8003436:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800343a:	f001 fe79 	bl	8005130 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800343e:	f001 fe45 	bl	80050cc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003448:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800344a:	e011      	b.n	8003470 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d012      	beq.n	800347a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3310      	adds	r3, #16
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fda7 	bl	8003fac <xTaskRemoveFromEventList>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003464:	f000 fe88 	bl	8004178 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003468:	7bbb      	ldrb	r3, [r7, #14]
 800346a:	3b01      	subs	r3, #1
 800346c:	b2db      	uxtb	r3, r3
 800346e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003474:	2b00      	cmp	r3, #0
 8003476:	dce9      	bgt.n	800344c <prvUnlockQueue+0x60>
 8003478:	e000      	b.n	800347c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800347a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	22ff      	movs	r2, #255	@ 0xff
 8003480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003484:	f001 fe54 	bl	8005130 <vPortExitCritical>
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003498:	f001 fe18 	bl	80050cc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d102      	bne.n	80034aa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80034a4:	2301      	movs	r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	e001      	b.n	80034ae <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80034ae:	f001 fe3f 	bl	8005130 <vPortExitCritical>

    return xReturn;
 80034b2:	68fb      	ldr	r3, [r7, #12]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80034c4:	f001 fe02 	bl	80050cc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d102      	bne.n	80034da <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80034d4:	2301      	movs	r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	e001      	b.n	80034de <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80034de:	f001 fe27 	bl	8005130 <vPortExitCritical>

    return xReturn;
 80034e2:	68fb      	ldr	r3, [r7, #12]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	e01e      	b.n	800353a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80034fc:	4a13      	ldr	r2, [pc, #76]	@ (800354c <vQueueAddToRegistry+0x60>)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d115      	bne.n	8003534 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003508:	4910      	ldr	r1, [pc, #64]	@ (800354c <vQueueAddToRegistry+0x60>)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003512:	4a0e      	ldr	r2, [pc, #56]	@ (800354c <vQueueAddToRegistry+0x60>)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4618      	mov	r0, r3
 8003522:	f004 fc79 	bl	8007e18 <SEGGER_SYSVIEW_ShrinkId>
 8003526:	4601      	mov	r1, r0
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	2071      	movs	r0, #113	@ 0x71
 800352e:	f003 fe8b 	bl	8007248 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8003532:	e006      	b.n	8003542 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3301      	adds	r3, #1
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b07      	cmp	r3, #7
 800353e:	d9dd      	bls.n	80034fc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003540:	bf00      	nop
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200000e0 	.word	0x200000e0

08003550 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003560:	f001 fdb4 	bl	80050cc <vPortEnterCritical>
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800356a:	b25b      	sxtb	r3, r3
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d103      	bne.n	800357a <vQueueWaitForMessageRestricted+0x2a>
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003580:	b25b      	sxtb	r3, r3
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003586:	d103      	bne.n	8003590 <vQueueWaitForMessageRestricted+0x40>
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003590:	f001 fdce 	bl	8005130 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	2b00      	cmp	r3, #0
 800359a:	d106      	bne.n	80035aa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	3324      	adds	r3, #36	@ 0x24
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fcd1 	bl	8003f4c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80035aa:	6978      	ldr	r0, [r7, #20]
 80035ac:	f7ff ff1e 	bl	80033ec <prvUnlockQueue>
    }
 80035b0:	bf00      	nop
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08c      	sub	sp, #48	@ 0x30
 80035bc:	af04      	add	r7, sp, #16
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f001 feaf 	bl	8005330 <pvPortMalloc>
 80035d2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00e      	beq.n	80035f8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035da:	2058      	movs	r0, #88	@ 0x58
 80035dc:	f001 fea8 	bl	8005330 <pvPortMalloc>
 80035e0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80035ee:	e005      	b.n	80035fc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80035f0:	6978      	ldr	r0, [r7, #20]
 80035f2:	f001 ff7f 	bl	80054f4 <vPortFree>
 80035f6:	e001      	b.n	80035fc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d013      	beq.n	800362a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003602:	88fa      	ldrh	r2, [r7, #6]
 8003604:	2300      	movs	r3, #0
 8003606:	9303      	str	r3, [sp, #12]
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	9302      	str	r3, [sp, #8]
 800360c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f80e 	bl	800363a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800361e:	69f8      	ldr	r0, [r7, #28]
 8003620:	f000 f8a2 	bl	8003768 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003624:	2301      	movs	r3, #1
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	e002      	b.n	8003630 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800362a:	f04f 33ff 	mov.w	r3, #4294967295
 800362e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003630:	69bb      	ldr	r3, [r7, #24]
    }
 8003632:	4618      	mov	r0, r3
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b088      	sub	sp, #32
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	461a      	mov	r2, r3
 8003652:	21a5      	movs	r1, #165	@ 0xa5
 8003654:	f004 fd7a 	bl	800814c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003662:	3b01      	subs	r3, #1
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f023 0307 	bic.w	r3, r3, #7
 8003670:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	617b      	str	r3, [r7, #20]
    }
 800368e:	bf00      	nop
 8003690:	bf00      	nop
 8003692:	e7fd      	b.n	8003690 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01f      	beq.n	80036da <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	e012      	b.n	80036c6 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	7819      	ldrb	r1, [r3, #0]
 80036a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	3334      	adds	r3, #52	@ 0x34
 80036b0:	460a      	mov	r2, r1
 80036b2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d006      	beq.n	80036ce <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	3301      	adds	r3, #1
 80036c4:	61fb      	str	r3, [r7, #28]
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	2b09      	cmp	r3, #9
 80036ca:	d9e9      	bls.n	80036a0 <prvInitialiseNewTask+0x66>
 80036cc:	e000      	b.n	80036d0 <prvInitialiseNewTask+0x96>
            {
                break;
 80036ce:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80036d8:	e003      	b.n	80036e2 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d901      	bls.n	80036ec <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036e8:	2304      	movs	r3, #4
 80036ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80036ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80036f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036f6:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80036f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fa:	2200      	movs	r2, #0
 80036fc:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	3304      	adds	r3, #4
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff f958 	bl	80029b8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370a:	3318      	adds	r3, #24
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff f953 	bl	80029b8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003716:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371a:	f1c3 0205 	rsb	r2, r3, #5
 800371e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003720:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003726:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	3350      	adds	r3, #80	@ 0x50
 800372c:	2204      	movs	r2, #4
 800372e:	2100      	movs	r1, #0
 8003730:	4618      	mov	r0, r3
 8003732:	f004 fd0b 	bl	800814c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003738:	3354      	adds	r3, #84	@ 0x54
 800373a:	2201      	movs	r2, #1
 800373c:	2100      	movs	r1, #0
 800373e:	4618      	mov	r0, r3
 8003740:	f004 fd04 	bl	800814c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	68f9      	ldr	r1, [r7, #12]
 8003748:	69b8      	ldr	r0, [r7, #24]
 800374a:	f001 fb89 	bl	8004e60 <pxPortInitialiseStack>
 800374e:	4602      	mov	r2, r0
 8003750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003752:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800375a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800375e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003760:	bf00      	nop
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003768:	b5b0      	push	{r4, r5, r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af02      	add	r7, sp, #8
 800376e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003770:	f001 fcac 	bl	80050cc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003774:	4b3b      	ldr	r3, [pc, #236]	@ (8003864 <prvAddNewTaskToReadyList+0xfc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3301      	adds	r3, #1
 800377a:	4a3a      	ldr	r2, [pc, #232]	@ (8003864 <prvAddNewTaskToReadyList+0xfc>)
 800377c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800377e:	4b3a      	ldr	r3, [pc, #232]	@ (8003868 <prvAddNewTaskToReadyList+0x100>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003786:	4a38      	ldr	r2, [pc, #224]	@ (8003868 <prvAddNewTaskToReadyList+0x100>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800378c:	4b35      	ldr	r3, [pc, #212]	@ (8003864 <prvAddNewTaskToReadyList+0xfc>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d110      	bne.n	80037b6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003794:	f000 fd14 	bl	80041c0 <prvInitialiseTaskLists>
 8003798:	e00d      	b.n	80037b6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800379a:	4b34      	ldr	r3, [pc, #208]	@ (800386c <prvAddNewTaskToReadyList+0x104>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037a2:	4b31      	ldr	r3, [pc, #196]	@ (8003868 <prvAddNewTaskToReadyList+0x100>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d802      	bhi.n	80037b6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80037b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003868 <prvAddNewTaskToReadyList+0x100>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80037b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003870 <prvAddNewTaskToReadyList+0x108>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3301      	adds	r3, #1
 80037bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003870 <prvAddNewTaskToReadyList+0x108>)
 80037be:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003870 <prvAddNewTaskToReadyList+0x108>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d016      	beq.n	80037fc <prvAddNewTaskToReadyList+0x94>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f004 f9fb 	bl	8007bcc <SEGGER_SYSVIEW_OnTaskCreate>
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e6:	461d      	mov	r5, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461c      	mov	r4, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	1ae3      	subs	r3, r4, r3
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	462b      	mov	r3, r5
 80037f8:	f002 f84c 	bl	8005894 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4618      	mov	r0, r3
 8003800:	f004 fa68 	bl	8007cd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	2201      	movs	r2, #1
 800380a:	409a      	lsls	r2, r3
 800380c:	4b19      	ldr	r3, [pc, #100]	@ (8003874 <prvAddNewTaskToReadyList+0x10c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4313      	orrs	r3, r2
 8003812:	4a18      	ldr	r2, [pc, #96]	@ (8003874 <prvAddNewTaskToReadyList+0x10c>)
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4a15      	ldr	r2, [pc, #84]	@ (8003878 <prvAddNewTaskToReadyList+0x110>)
 8003824:	441a      	add	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3304      	adds	r3, #4
 800382a:	4619      	mov	r1, r3
 800382c:	4610      	mov	r0, r2
 800382e:	f7ff f8d0 	bl	80029d2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003832:	f001 fc7d 	bl	8005130 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003836:	4b0d      	ldr	r3, [pc, #52]	@ (800386c <prvAddNewTaskToReadyList+0x104>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00e      	beq.n	800385c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800383e:	4b0a      	ldr	r3, [pc, #40]	@ (8003868 <prvAddNewTaskToReadyList+0x100>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003848:	429a      	cmp	r2, r3
 800384a:	d207      	bcs.n	800385c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800384c:	4b0b      	ldr	r3, [pc, #44]	@ (800387c <prvAddNewTaskToReadyList+0x114>)
 800384e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bdb0      	pop	{r4, r5, r7, pc}
 8003864:	200001f8 	.word	0x200001f8
 8003868:	20000120 	.word	0x20000120
 800386c:	20000204 	.word	0x20000204
 8003870:	20000214 	.word	0x20000214
 8003874:	20000200 	.word	0x20000200
 8003878:	20000124 	.word	0x20000124
 800387c:	e000ed04 	.word	0xe000ed04

08003880 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003888:	f001 fc20 	bl	80050cc <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <vTaskDelete+0x18>
 8003892:	4b46      	ldr	r3, [pc, #280]	@ (80039ac <vTaskDelete+0x12c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	e000      	b.n	800389a <vTaskDelete+0x1a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3304      	adds	r3, #4
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff f8f3 	bl	8002a8c <uxListRemove>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d115      	bne.n	80038d8 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038b0:	493f      	ldr	r1, [pc, #252]	@ (80039b0 <vTaskDelete+0x130>)
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <vTaskDelete+0x58>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c6:	2201      	movs	r2, #1
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43da      	mvns	r2, r3
 80038ce:	4b39      	ldr	r3, [pc, #228]	@ (80039b4 <vTaskDelete+0x134>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4013      	ands	r3, r2
 80038d4:	4a37      	ldr	r2, [pc, #220]	@ (80039b4 <vTaskDelete+0x134>)
 80038d6:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d004      	beq.n	80038ea <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3318      	adds	r3, #24
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff f8d1 	bl	8002a8c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80038ea:	4b33      	ldr	r3, [pc, #204]	@ (80039b8 <vTaskDelete+0x138>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3301      	adds	r3, #1
 80038f0:	4a31      	ldr	r2, [pc, #196]	@ (80039b8 <vTaskDelete+0x138>)
 80038f2:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80038f4:	4b2d      	ldr	r3, [pc, #180]	@ (80039ac <vTaskDelete+0x12c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d118      	bne.n	8003930 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3304      	adds	r3, #4
 8003902:	4619      	mov	r1, r3
 8003904:	482d      	ldr	r0, [pc, #180]	@ (80039bc <vTaskDelete+0x13c>)
 8003906:	f7ff f864 	bl	80029d2 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800390a:	4b2d      	ldr	r3, [pc, #180]	@ (80039c0 <vTaskDelete+0x140>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3301      	adds	r3, #1
 8003910:	4a2b      	ldr	r2, [pc, #172]	@ (80039c0 <vTaskDelete+0x140>)
 8003912:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4618      	mov	r0, r3
 8003918:	f004 fa7e 	bl	8007e18 <SEGGER_SYSVIEW_ShrinkId>
 800391c:	4603      	mov	r3, r0
 800391e:	4619      	mov	r1, r3
 8003920:	2022      	movs	r0, #34	@ 0x22
 8003922:	f003 fc55 	bl	80071d0 <SEGGER_SYSVIEW_RecordU32>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4618      	mov	r0, r3
 800392a:	f002 f81b 	bl	8005964 <SYSVIEW_DeleteTask>
 800392e:	e016      	b.n	800395e <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003930:	4b24      	ldr	r3, [pc, #144]	@ (80039c4 <vTaskDelete+0x144>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3b01      	subs	r3, #1
 8003936:	4a23      	ldr	r2, [pc, #140]	@ (80039c4 <vTaskDelete+0x144>)
 8003938:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4618      	mov	r0, r3
 800393e:	f004 fa6b 	bl	8007e18 <SEGGER_SYSVIEW_ShrinkId>
 8003942:	4603      	mov	r3, r0
 8003944:	4619      	mov	r1, r3
 8003946:	2022      	movs	r0, #34	@ 0x22
 8003948:	f003 fc42 	bl	80071d0 <SEGGER_SYSVIEW_RecordU32>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4618      	mov	r0, r3
 8003950:	f002 f808 	bl	8005964 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fca1 	bl	800429c <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800395a:	f000 fcaf 	bl	80042bc <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800395e:	f001 fbe7 	bl	8005130 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8003962:	4b19      	ldr	r3, [pc, #100]	@ (80039c8 <vTaskDelete+0x148>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d01c      	beq.n	80039a4 <vTaskDelete+0x124>
        {
            if( pxTCB == pxCurrentTCB )
 800396a:	4b10      	ldr	r3, [pc, #64]	@ (80039ac <vTaskDelete+0x12c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	429a      	cmp	r2, r3
 8003972:	d117      	bne.n	80039a4 <vTaskDelete+0x124>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8003974:	4b15      	ldr	r3, [pc, #84]	@ (80039cc <vTaskDelete+0x14c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00b      	beq.n	8003994 <vTaskDelete+0x114>
        __asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	60bb      	str	r3, [r7, #8]
    }
 800398e:	bf00      	nop
 8003990:	bf00      	nop
 8003992:	e7fd      	b.n	8003990 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 8003994:	4b0e      	ldr	r3, [pc, #56]	@ (80039d0 <vTaskDelete+0x150>)
 8003996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20000120 	.word	0x20000120
 80039b0:	20000124 	.word	0x20000124
 80039b4:	20000200 	.word	0x20000200
 80039b8:	20000214 	.word	0x20000214
 80039bc:	200001cc 	.word	0x200001cc
 80039c0:	200001e0 	.word	0x200001e0
 80039c4:	200001f8 	.word	0x200001f8
 80039c8:	20000204 	.word	0x20000204
 80039cc:	20000220 	.word	0x20000220
 80039d0:	e000ed04 	.word	0xe000ed04

080039d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d01c      	beq.n	8003a20 <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80039e6:	4b16      	ldr	r3, [pc, #88]	@ (8003a40 <vTaskDelay+0x6c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <vTaskDelay+0x32>
        __asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	60bb      	str	r3, [r7, #8]
    }
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	e7fd      	b.n	8003a02 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003a06:	f000 f881 	bl	8003b0c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	2023      	movs	r0, #35	@ 0x23
 8003a0e:	f003 fbdf 	bl	80071d0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a12:	2100      	movs	r1, #0
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fe8d 	bl	8004734 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003a1a:	f000 f885 	bl	8003b28 <xTaskResumeAll>
 8003a1e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d107      	bne.n	8003a36 <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 8003a26:	4b07      	ldr	r3, [pc, #28]	@ (8003a44 <vTaskDelay+0x70>)
 8003a28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000220 	.word	0x20000220
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003a4e:	4b27      	ldr	r3, [pc, #156]	@ (8003aec <vTaskStartScheduler+0xa4>)
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	2300      	movs	r3, #0
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	2300      	movs	r3, #0
 8003a58:	2282      	movs	r2, #130	@ 0x82
 8003a5a:	4925      	ldr	r1, [pc, #148]	@ (8003af0 <vTaskStartScheduler+0xa8>)
 8003a5c:	4825      	ldr	r0, [pc, #148]	@ (8003af4 <vTaskStartScheduler+0xac>)
 8003a5e:	f7ff fdab 	bl	80035b8 <xTaskCreate>
 8003a62:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d102      	bne.n	8003a70 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003a6a:	f000 fedb 	bl	8004824 <xTimerCreateTimerTask>
 8003a6e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d124      	bne.n	8003ac0 <vTaskStartScheduler+0x78>
        __asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	60bb      	str	r3, [r7, #8]
    }
 8003a88:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003af8 <vTaskStartScheduler+0xb0>)
 8003a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a90:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003a92:	4b1a      	ldr	r3, [pc, #104]	@ (8003afc <vTaskStartScheduler+0xb4>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a98:	4b19      	ldr	r3, [pc, #100]	@ (8003b00 <vTaskStartScheduler+0xb8>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003a9e:	4b19      	ldr	r3, [pc, #100]	@ (8003b04 <vTaskStartScheduler+0xbc>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4b12      	ldr	r3, [pc, #72]	@ (8003aec <vTaskStartScheduler+0xa4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d102      	bne.n	8003ab0 <vTaskStartScheduler+0x68>
 8003aaa:	f004 f873 	bl	8007b94 <SEGGER_SYSVIEW_OnIdle>
 8003aae:	e004      	b.n	8003aba <vTaskStartScheduler+0x72>
 8003ab0:	4b14      	ldr	r3, [pc, #80]	@ (8003b04 <vTaskStartScheduler+0xbc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f004 f8cb 	bl	8007c50 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003aba:	f001 fa63 	bl	8004f84 <xPortStartScheduler>
 8003abe:	e00f      	b.n	8003ae0 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac6:	d10b      	bne.n	8003ae0 <vTaskStartScheduler+0x98>
        __asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	607b      	str	r3, [r7, #4]
    }
 8003ada:	bf00      	nop
 8003adc:	bf00      	nop
 8003ade:	e7fd      	b.n	8003adc <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003ae0:	4b09      	ldr	r3, [pc, #36]	@ (8003b08 <vTaskStartScheduler+0xc0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	2000021c 	.word	0x2000021c
 8003af0:	0800829c 	.word	0x0800829c
 8003af4:	08004191 	.word	0x08004191
 8003af8:	20000218 	.word	0x20000218
 8003afc:	20000204 	.word	0x20000204
 8003b00:	200001fc 	.word	0x200001fc
 8003b04:	20000120 	.word	0x20000120
 8003b08:	2000000c 	.word	0x2000000c

08003b0c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003b10:	4b04      	ldr	r3, [pc, #16]	@ (8003b24 <vTaskSuspendAll+0x18>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3301      	adds	r3, #1
 8003b16:	4a03      	ldr	r2, [pc, #12]	@ (8003b24 <vTaskSuspendAll+0x18>)
 8003b18:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003b1a:	bf00      	nop
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	20000220 	.word	0x20000220

08003b28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003b36:	4b44      	ldr	r3, [pc, #272]	@ (8003c48 <xTaskResumeAll+0x120>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10b      	bne.n	8003b56 <xTaskResumeAll+0x2e>
        __asm volatile
 8003b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	603b      	str	r3, [r7, #0]
    }
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	e7fd      	b.n	8003b52 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003b56:	f001 fab9 	bl	80050cc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c48 <xTaskResumeAll+0x120>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	4a39      	ldr	r2, [pc, #228]	@ (8003c48 <xTaskResumeAll+0x120>)
 8003b62:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b64:	4b38      	ldr	r3, [pc, #224]	@ (8003c48 <xTaskResumeAll+0x120>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d165      	bne.n	8003c38 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b6c:	4b37      	ldr	r3, [pc, #220]	@ (8003c4c <xTaskResumeAll+0x124>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d061      	beq.n	8003c38 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b74:	e032      	b.n	8003bdc <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b76:	4b36      	ldr	r3, [pc, #216]	@ (8003c50 <xTaskResumeAll+0x128>)
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3318      	adds	r3, #24
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe ff82 	bl	8002a8c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe ff7d 	bl	8002a8c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f004 f89d 	bl	8007cd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8003c54 <xTaskResumeAll+0x12c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8003c54 <xTaskResumeAll+0x12c>)
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4a27      	ldr	r2, [pc, #156]	@ (8003c58 <xTaskResumeAll+0x130>)
 8003bba:	441a      	add	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	f7fe ff05 	bl	80029d2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bcc:	4b23      	ldr	r3, [pc, #140]	@ (8003c5c <xTaskResumeAll+0x134>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d302      	bcc.n	8003bdc <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8003bd6:	4b22      	ldr	r3, [pc, #136]	@ (8003c60 <xTaskResumeAll+0x138>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8003c50 <xTaskResumeAll+0x128>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1c8      	bne.n	8003b76 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003bea:	f000 fb67 	bl	80042bc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bee:	4b1d      	ldr	r3, [pc, #116]	@ (8003c64 <xTaskResumeAll+0x13c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d010      	beq.n	8003c1c <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003bfa:	f000 f859 	bl	8003cb0 <xTaskIncrementTick>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8003c04:	4b16      	ldr	r3, [pc, #88]	@ (8003c60 <xTaskResumeAll+0x138>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f1      	bne.n	8003bfa <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8003c16:	4b13      	ldr	r3, [pc, #76]	@ (8003c64 <xTaskResumeAll+0x13c>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003c1c:	4b10      	ldr	r3, [pc, #64]	@ (8003c60 <xTaskResumeAll+0x138>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d009      	beq.n	8003c38 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003c24:	2301      	movs	r3, #1
 8003c26:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003c28:	4b0f      	ldr	r3, [pc, #60]	@ (8003c68 <xTaskResumeAll+0x140>)
 8003c2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003c38:	f001 fa7a 	bl	8005130 <vPortExitCritical>

    return xAlreadyYielded;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000220 	.word	0x20000220
 8003c4c:	200001f8 	.word	0x200001f8
 8003c50:	200001b8 	.word	0x200001b8
 8003c54:	20000200 	.word	0x20000200
 8003c58:	20000124 	.word	0x20000124
 8003c5c:	20000120 	.word	0x20000120
 8003c60:	2000020c 	.word	0x2000020c
 8003c64:	20000208 	.word	0x20000208
 8003c68:	e000ed04 	.word	0xe000ed04

08003c6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003c72:	4b05      	ldr	r3, [pc, #20]	@ (8003c88 <xTaskGetTickCount+0x1c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003c78:	687b      	ldr	r3, [r7, #4]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	200001fc 	.word	0x200001fc

08003c8c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c92:	f001 fb0b 	bl	80052ac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003c96:	2300      	movs	r3, #0
 8003c98:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003c9a:	4b04      	ldr	r3, [pc, #16]	@ (8003cac <xTaskGetTickCountFromISR+0x20>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003ca0:	683b      	ldr	r3, [r7, #0]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	200001fc 	.word	0x200001fc

08003cb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cba:	4b51      	ldr	r3, [pc, #324]	@ (8003e00 <xTaskIncrementTick+0x150>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f040 8093 	bne.w	8003dea <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003cc4:	4b4f      	ldr	r3, [pc, #316]	@ (8003e04 <xTaskIncrementTick+0x154>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003ccc:	4a4d      	ldr	r2, [pc, #308]	@ (8003e04 <xTaskIncrementTick+0x154>)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d121      	bne.n	8003d1c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003cd8:	4b4b      	ldr	r3, [pc, #300]	@ (8003e08 <xTaskIncrementTick+0x158>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00b      	beq.n	8003cfa <xTaskIncrementTick+0x4a>
        __asm volatile
 8003ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	603b      	str	r3, [r7, #0]
    }
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop
 8003cf8:	e7fd      	b.n	8003cf6 <xTaskIncrementTick+0x46>
 8003cfa:	4b43      	ldr	r3, [pc, #268]	@ (8003e08 <xTaskIncrementTick+0x158>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	4b42      	ldr	r3, [pc, #264]	@ (8003e0c <xTaskIncrementTick+0x15c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a40      	ldr	r2, [pc, #256]	@ (8003e08 <xTaskIncrementTick+0x158>)
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	4a40      	ldr	r2, [pc, #256]	@ (8003e0c <xTaskIncrementTick+0x15c>)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	4b40      	ldr	r3, [pc, #256]	@ (8003e10 <xTaskIncrementTick+0x160>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3301      	adds	r3, #1
 8003d14:	4a3e      	ldr	r2, [pc, #248]	@ (8003e10 <xTaskIncrementTick+0x160>)
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	f000 fad0 	bl	80042bc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8003e14 <xTaskIncrementTick+0x164>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d34c      	bcc.n	8003dc0 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d26:	4b38      	ldr	r3, [pc, #224]	@ (8003e08 <xTaskIncrementTick+0x158>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d104      	bne.n	8003d3a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d30:	4b38      	ldr	r3, [pc, #224]	@ (8003e14 <xTaskIncrementTick+0x164>)
 8003d32:	f04f 32ff 	mov.w	r2, #4294967295
 8003d36:	601a      	str	r2, [r3, #0]
                    break;
 8003d38:	e042      	b.n	8003dc0 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d3a:	4b33      	ldr	r3, [pc, #204]	@ (8003e08 <xTaskIncrementTick+0x158>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d203      	bcs.n	8003d5a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003d52:	4a30      	ldr	r2, [pc, #192]	@ (8003e14 <xTaskIncrementTick+0x164>)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d58:	e032      	b.n	8003dc0 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe fe94 	bl	8002a8c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d004      	beq.n	8003d76 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	3318      	adds	r3, #24
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fe fe8b 	bl	8002a8c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f003 ffab 	bl	8007cd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d82:	2201      	movs	r2, #1
 8003d84:	409a      	lsls	r2, r3
 8003d86:	4b24      	ldr	r3, [pc, #144]	@ (8003e18 <xTaskIncrementTick+0x168>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	4a22      	ldr	r2, [pc, #136]	@ (8003e18 <xTaskIncrementTick+0x168>)
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8003e1c <xTaskIncrementTick+0x16c>)
 8003d9e:	441a      	add	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4619      	mov	r1, r3
 8003da6:	4610      	mov	r0, r2
 8003da8:	f7fe fe13 	bl	80029d2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003db0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e20 <xTaskIncrementTick+0x170>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d3b5      	bcc.n	8003d26 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dbe:	e7b2      	b.n	8003d26 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003dc0:	4b17      	ldr	r3, [pc, #92]	@ (8003e20 <xTaskIncrementTick+0x170>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc6:	4915      	ldr	r1, [pc, #84]	@ (8003e1c <xTaskIncrementTick+0x16c>)
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d901      	bls.n	8003ddc <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003ddc:	4b11      	ldr	r3, [pc, #68]	@ (8003e24 <xTaskIncrementTick+0x174>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8003de4:	2301      	movs	r3, #1
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	e004      	b.n	8003df4 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003dea:	4b0f      	ldr	r3, [pc, #60]	@ (8003e28 <xTaskIncrementTick+0x178>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3301      	adds	r3, #1
 8003df0:	4a0d      	ldr	r2, [pc, #52]	@ (8003e28 <xTaskIncrementTick+0x178>)
 8003df2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003df4:	697b      	ldr	r3, [r7, #20]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000220 	.word	0x20000220
 8003e04:	200001fc 	.word	0x200001fc
 8003e08:	200001b0 	.word	0x200001b0
 8003e0c:	200001b4 	.word	0x200001b4
 8003e10:	20000210 	.word	0x20000210
 8003e14:	20000218 	.word	0x20000218
 8003e18:	20000200 	.word	0x20000200
 8003e1c:	20000124 	.word	0x20000124
 8003e20:	20000120 	.word	0x20000120
 8003e24:	2000020c 	.word	0x2000020c
 8003e28:	20000208 	.word	0x20000208

08003e2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e32:	4b2d      	ldr	r3, [pc, #180]	@ (8003ee8 <vTaskSwitchContext+0xbc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8003eec <vTaskSwitchContext+0xc0>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003e40:	e04e      	b.n	8003ee0 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8003e42:	4b2a      	ldr	r3, [pc, #168]	@ (8003eec <vTaskSwitchContext+0xc0>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e48:	4b29      	ldr	r3, [pc, #164]	@ (8003ef0 <vTaskSwitchContext+0xc4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	fab3 f383 	clz	r3, r3
 8003e54:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003e56:	7afb      	ldrb	r3, [r7, #11]
 8003e58:	f1c3 031f 	rsb	r3, r3, #31
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	4925      	ldr	r1, [pc, #148]	@ (8003ef4 <vTaskSwitchContext+0xc8>)
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <vTaskSwitchContext+0x5e>
        __asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	607b      	str	r3, [r7, #4]
    }
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	e7fd      	b.n	8003e86 <vTaskSwitchContext+0x5a>
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4a17      	ldr	r2, [pc, #92]	@ (8003ef4 <vTaskSwitchContext+0xc8>)
 8003e96:	4413      	add	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	3308      	adds	r3, #8
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d104      	bne.n	8003eba <vTaskSwitchContext+0x8e>
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ef8 <vTaskSwitchContext+0xcc>)
 8003ec2:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef8 <vTaskSwitchContext+0xcc>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8003efc <vTaskSwitchContext+0xd0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d102      	bne.n	8003ed6 <vTaskSwitchContext+0xaa>
 8003ed0:	f003 fe60 	bl	8007b94 <SEGGER_SYSVIEW_OnIdle>
}
 8003ed4:	e004      	b.n	8003ee0 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003ed6:	4b08      	ldr	r3, [pc, #32]	@ (8003ef8 <vTaskSwitchContext+0xcc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f003 feb8 	bl	8007c50 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003ee0:	bf00      	nop
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20000220 	.word	0x20000220
 8003eec:	2000020c 	.word	0x2000020c
 8003ef0:	20000200 	.word	0x20000200
 8003ef4:	20000124 	.word	0x20000124
 8003ef8:	20000120 	.word	0x20000120
 8003efc:	2000021c 	.word	0x2000021c

08003f00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10b      	bne.n	8003f28 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	60fb      	str	r3, [r7, #12]
    }
 8003f22:	bf00      	nop
 8003f24:	bf00      	nop
 8003f26:	e7fd      	b.n	8003f24 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f28:	4b07      	ldr	r3, [pc, #28]	@ (8003f48 <vTaskPlaceOnEventList+0x48>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3318      	adds	r3, #24
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7fe fd72 	bl	8002a1a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f36:	2101      	movs	r1, #1
 8003f38:	6838      	ldr	r0, [r7, #0]
 8003f3a:	f000 fbfb 	bl	8004734 <prvAddCurrentTaskToDelayedList>
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000120 	.word	0x20000120

08003f4c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10b      	bne.n	8003f76 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	617b      	str	r3, [r7, #20]
    }
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	e7fd      	b.n	8003f72 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f76:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <vTaskPlaceOnEventListRestricted+0x5c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3318      	adds	r3, #24
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f7fe fd27 	bl	80029d2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003f90:	2024      	movs	r0, #36	@ 0x24
 8003f92:	f003 f8ff 	bl	8007194 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	68b8      	ldr	r0, [r7, #8]
 8003f9a:	f000 fbcb 	bl	8004734 <prvAddCurrentTaskToDelayedList>
    }
 8003f9e:	bf00      	nop
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000120 	.word	0x20000120

08003fac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10b      	bne.n	8003fda <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	60fb      	str	r3, [r7, #12]
    }
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	e7fd      	b.n	8003fd6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	3318      	adds	r3, #24
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe fd54 	bl	8002a8c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8004064 <xTaskRemoveFromEventList+0xb8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d120      	bne.n	800402e <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe fd4b 	bl	8002a8c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f003 fe6b 	bl	8007cd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004002:	2201      	movs	r2, #1
 8004004:	409a      	lsls	r2, r3
 8004006:	4b18      	ldr	r3, [pc, #96]	@ (8004068 <xTaskRemoveFromEventList+0xbc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4313      	orrs	r3, r2
 800400c:	4a16      	ldr	r2, [pc, #88]	@ (8004068 <xTaskRemoveFromEventList+0xbc>)
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4a13      	ldr	r2, [pc, #76]	@ (800406c <xTaskRemoveFromEventList+0xc0>)
 800401e:	441a      	add	r2, r3
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	3304      	adds	r3, #4
 8004024:	4619      	mov	r1, r3
 8004026:	4610      	mov	r0, r2
 8004028:	f7fe fcd3 	bl	80029d2 <vListInsertEnd>
 800402c:	e005      	b.n	800403a <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	3318      	adds	r3, #24
 8004032:	4619      	mov	r1, r3
 8004034:	480e      	ldr	r0, [pc, #56]	@ (8004070 <xTaskRemoveFromEventList+0xc4>)
 8004036:	f7fe fccc 	bl	80029d2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800403e:	4b0d      	ldr	r3, [pc, #52]	@ (8004074 <xTaskRemoveFromEventList+0xc8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004044:	429a      	cmp	r2, r3
 8004046:	d905      	bls.n	8004054 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004048:	2301      	movs	r3, #1
 800404a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800404c:	4b0a      	ldr	r3, [pc, #40]	@ (8004078 <xTaskRemoveFromEventList+0xcc>)
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e001      	b.n	8004058 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004058:	697b      	ldr	r3, [r7, #20]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000220 	.word	0x20000220
 8004068:	20000200 	.word	0x20000200
 800406c:	20000124 	.word	0x20000124
 8004070:	200001b8 	.word	0x200001b8
 8004074:	20000120 	.word	0x20000120
 8004078:	2000020c 	.word	0x2000020c

0800407c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004084:	4b06      	ldr	r3, [pc, #24]	@ (80040a0 <vTaskInternalSetTimeOutState+0x24>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800408c:	4b05      	ldr	r3, [pc, #20]	@ (80040a4 <vTaskInternalSetTimeOutState+0x28>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	605a      	str	r2, [r3, #4]
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	20000210 	.word	0x20000210
 80040a4:	200001fc 	.word	0x200001fc

080040a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10b      	bne.n	80040d0 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	613b      	str	r3, [r7, #16]
    }
 80040ca:	bf00      	nop
 80040cc:	bf00      	nop
 80040ce:	e7fd      	b.n	80040cc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10b      	bne.n	80040ee <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	60fb      	str	r3, [r7, #12]
    }
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop
 80040ec:	e7fd      	b.n	80040ea <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80040ee:	f000 ffed 	bl	80050cc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80040f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004170 <xTaskCheckForTimeOut+0xc8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410a:	d102      	bne.n	8004112 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800410c:	2300      	movs	r3, #0
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	e026      	b.n	8004160 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	4b17      	ldr	r3, [pc, #92]	@ (8004174 <xTaskCheckForTimeOut+0xcc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d00a      	beq.n	8004134 <xTaskCheckForTimeOut+0x8c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	429a      	cmp	r2, r3
 8004126:	d305      	bcc.n	8004134 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004128:	2301      	movs	r3, #1
 800412a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	e015      	b.n	8004160 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	429a      	cmp	r2, r3
 800413c:	d20b      	bcs.n	8004156 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	1ad2      	subs	r2, r2, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff ff96 	bl	800407c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004150:	2300      	movs	r3, #0
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	e004      	b.n	8004160 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800415c:	2301      	movs	r3, #1
 800415e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004160:	f000 ffe6 	bl	8005130 <vPortExitCritical>

    return xReturn;
 8004164:	69fb      	ldr	r3, [r7, #28]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	200001fc 	.word	0x200001fc
 8004174:	20000210 	.word	0x20000210

08004178 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800417c:	4b03      	ldr	r3, [pc, #12]	@ (800418c <vTaskMissedYield+0x14>)
 800417e:	2201      	movs	r2, #1
 8004180:	601a      	str	r2, [r3, #0]
}
 8004182:	bf00      	nop
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	2000020c 	.word	0x2000020c

08004190 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004198:	f000 f852 	bl	8004240 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800419c:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <prvIdleTask+0x28>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d9f9      	bls.n	8004198 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80041a4:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <prvIdleTask+0x2c>)
 80041a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80041b4:	e7f0      	b.n	8004198 <prvIdleTask+0x8>
 80041b6:	bf00      	nop
 80041b8:	20000124 	.word	0x20000124
 80041bc:	e000ed04 	.word	0xe000ed04

080041c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041c6:	2300      	movs	r3, #0
 80041c8:	607b      	str	r3, [r7, #4]
 80041ca:	e00c      	b.n	80041e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4a12      	ldr	r2, [pc, #72]	@ (8004220 <prvInitialiseTaskLists+0x60>)
 80041d8:	4413      	add	r3, r2
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fe fbcc 	bl	8002978 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3301      	adds	r3, #1
 80041e4:	607b      	str	r3, [r7, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d9ef      	bls.n	80041cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80041ec:	480d      	ldr	r0, [pc, #52]	@ (8004224 <prvInitialiseTaskLists+0x64>)
 80041ee:	f7fe fbc3 	bl	8002978 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80041f2:	480d      	ldr	r0, [pc, #52]	@ (8004228 <prvInitialiseTaskLists+0x68>)
 80041f4:	f7fe fbc0 	bl	8002978 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80041f8:	480c      	ldr	r0, [pc, #48]	@ (800422c <prvInitialiseTaskLists+0x6c>)
 80041fa:	f7fe fbbd 	bl	8002978 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80041fe:	480c      	ldr	r0, [pc, #48]	@ (8004230 <prvInitialiseTaskLists+0x70>)
 8004200:	f7fe fbba 	bl	8002978 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004204:	480b      	ldr	r0, [pc, #44]	@ (8004234 <prvInitialiseTaskLists+0x74>)
 8004206:	f7fe fbb7 	bl	8002978 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800420a:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <prvInitialiseTaskLists+0x78>)
 800420c:	4a05      	ldr	r2, [pc, #20]	@ (8004224 <prvInitialiseTaskLists+0x64>)
 800420e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004210:	4b0a      	ldr	r3, [pc, #40]	@ (800423c <prvInitialiseTaskLists+0x7c>)
 8004212:	4a05      	ldr	r2, [pc, #20]	@ (8004228 <prvInitialiseTaskLists+0x68>)
 8004214:	601a      	str	r2, [r3, #0]
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000124 	.word	0x20000124
 8004224:	20000188 	.word	0x20000188
 8004228:	2000019c 	.word	0x2000019c
 800422c:	200001b8 	.word	0x200001b8
 8004230:	200001cc 	.word	0x200001cc
 8004234:	200001e4 	.word	0x200001e4
 8004238:	200001b0 	.word	0x200001b0
 800423c:	200001b4 	.word	0x200001b4

08004240 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004246:	e019      	b.n	800427c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004248:	f000 ff40 	bl	80050cc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800424c:	4b10      	ldr	r3, [pc, #64]	@ (8004290 <prvCheckTasksWaitingTermination+0x50>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3304      	adds	r3, #4
 8004258:	4618      	mov	r0, r3
 800425a:	f7fe fc17 	bl	8002a8c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800425e:	4b0d      	ldr	r3, [pc, #52]	@ (8004294 <prvCheckTasksWaitingTermination+0x54>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3b01      	subs	r3, #1
 8004264:	4a0b      	ldr	r2, [pc, #44]	@ (8004294 <prvCheckTasksWaitingTermination+0x54>)
 8004266:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004268:	4b0b      	ldr	r3, [pc, #44]	@ (8004298 <prvCheckTasksWaitingTermination+0x58>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3b01      	subs	r3, #1
 800426e:	4a0a      	ldr	r2, [pc, #40]	@ (8004298 <prvCheckTasksWaitingTermination+0x58>)
 8004270:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004272:	f000 ff5d 	bl	8005130 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f810 	bl	800429c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800427c:	4b06      	ldr	r3, [pc, #24]	@ (8004298 <prvCheckTasksWaitingTermination+0x58>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e1      	bne.n	8004248 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	200001cc 	.word	0x200001cc
 8004294:	200001f8 	.word	0x200001f8
 8004298:	200001e0 	.word	0x200001e0

0800429c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 f923 	bl	80054f4 <vPortFree>
                vPortFree( pxTCB );
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f001 f920 	bl	80054f4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042c0:	4b0a      	ldr	r3, [pc, #40]	@ (80042ec <prvResetNextTaskUnblockTime+0x30>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d104      	bne.n	80042d4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80042ca:	4b09      	ldr	r3, [pc, #36]	@ (80042f0 <prvResetNextTaskUnblockTime+0x34>)
 80042cc:	f04f 32ff 	mov.w	r2, #4294967295
 80042d0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80042d2:	e005      	b.n	80042e0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042d4:	4b05      	ldr	r3, [pc, #20]	@ (80042ec <prvResetNextTaskUnblockTime+0x30>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a04      	ldr	r2, [pc, #16]	@ (80042f0 <prvResetNextTaskUnblockTime+0x34>)
 80042de:	6013      	str	r3, [r2, #0]
}
 80042e0:	bf00      	nop
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	200001b0 	.word	0x200001b0
 80042f0:	20000218 	.word	0x20000218

080042f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80042fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <xTaskGetSchedulerState+0x34>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d102      	bne.n	8004308 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004302:	2301      	movs	r3, #1
 8004304:	607b      	str	r3, [r7, #4]
 8004306:	e008      	b.n	800431a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004308:	4b08      	ldr	r3, [pc, #32]	@ (800432c <xTaskGetSchedulerState+0x38>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004310:	2302      	movs	r3, #2
 8004312:	607b      	str	r3, [r7, #4]
 8004314:	e001      	b.n	800431a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004316:	2300      	movs	r3, #0
 8004318:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800431a:	687b      	ldr	r3, [r7, #4]
    }
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	20000204 	.word	0x20000204
 800432c:	20000220 	.word	0x20000220

08004330 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d06a      	beq.n	800441c <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004346:	4b38      	ldr	r3, [pc, #224]	@ (8004428 <xTaskPriorityDisinherit+0xf8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	429a      	cmp	r2, r3
 800434e:	d00b      	beq.n	8004368 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	60fb      	str	r3, [r7, #12]
    }
 8004362:	bf00      	nop
 8004364:	bf00      	nop
 8004366:	e7fd      	b.n	8004364 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	60bb      	str	r3, [r7, #8]
    }
 8004382:	bf00      	nop
 8004384:	bf00      	nop
 8004386:	e7fd      	b.n	8004384 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800438c:	1e5a      	subs	r2, r3, #1
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800439a:	429a      	cmp	r2, r3
 800439c:	d03e      	beq.n	800441c <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d13a      	bne.n	800441c <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	3304      	adds	r3, #4
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fe fb6e 	bl	8002a8c <uxListRemove>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10a      	bne.n	80043cc <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	2201      	movs	r2, #1
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	43da      	mvns	r2, r3
 80043c2:	4b1a      	ldr	r3, [pc, #104]	@ (800442c <xTaskPriorityDisinherit+0xfc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4013      	ands	r3, r2
 80043c8:	4a18      	ldr	r2, [pc, #96]	@ (800442c <xTaskPriorityDisinherit+0xfc>)
 80043ca:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4619      	mov	r1, r3
 80043d0:	204a      	movs	r0, #74	@ 0x4a
 80043d2:	f002 fefd 	bl	80071d0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e2:	f1c3 0205 	rsb	r2, r3, #5
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ee:	2201      	movs	r2, #1
 80043f0:	409a      	lsls	r2, r3
 80043f2:	4b0e      	ldr	r3, [pc, #56]	@ (800442c <xTaskPriorityDisinherit+0xfc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	4a0c      	ldr	r2, [pc, #48]	@ (800442c <xTaskPriorityDisinherit+0xfc>)
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4a09      	ldr	r2, [pc, #36]	@ (8004430 <xTaskPriorityDisinherit+0x100>)
 800440a:	441a      	add	r2, r3
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	3304      	adds	r3, #4
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f7fe fadd 	bl	80029d2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004418:	2301      	movs	r3, #1
 800441a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800441c:	697b      	ldr	r3, [r7, #20]
    }
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20000120 	.word	0x20000120
 800442c:	20000200 	.word	0x20000200
 8004430:	20000124 	.word	0x20000124

08004434 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00b      	beq.n	8004460 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	613b      	str	r3, [r7, #16]
    }
 800445a:	bf00      	nop
 800445c:	bf00      	nop
 800445e:	e7fd      	b.n	800445c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8004460:	f000 fe34 	bl	80050cc <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004464:	4b36      	ldr	r3, [pc, #216]	@ (8004540 <xTaskGenericNotifyWait+0x10c>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	3354      	adds	r3, #84	@ 0x54
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d022      	beq.n	80044bc <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8004476:	4b32      	ldr	r3, [pc, #200]	@ (8004540 <xTaskGenericNotifyWait+0x10c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	3214      	adds	r2, #20
 800447e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	43d2      	mvns	r2, r2
 8004486:	4011      	ands	r1, r2
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	3214      	adds	r2, #20
 800448c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004490:	4b2b      	ldr	r3, [pc, #172]	@ (8004540 <xTaskGenericNotifyWait+0x10c>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	3354      	adds	r3, #84	@ 0x54
 800449a:	2201      	movs	r2, #1
 800449c:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00b      	beq.n	80044bc <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044a4:	2101      	movs	r1, #1
 80044a6:	6a38      	ldr	r0, [r7, #32]
 80044a8:	f000 f944 	bl	8004734 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80044ac:	4b25      	ldr	r3, [pc, #148]	@ (8004544 <xTaskGenericNotifyWait+0x110>)
 80044ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80044bc:	f000 fe38 	bl	8005130 <vPortExitCritical>

        taskENTER_CRITICAL();
 80044c0:	f000 fe04 	bl	80050cc <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	4613      	mov	r3, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	2040      	movs	r0, #64	@ 0x40
 80044d2:	f002 ff89 	bl	80073e8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d007      	beq.n	80044ec <xTaskGenericNotifyWait+0xb8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80044dc:	4b18      	ldr	r3, [pc, #96]	@ (8004540 <xTaskGenericNotifyWait+0x10c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	3214      	adds	r2, #20
 80044e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80044ec:	4b14      	ldr	r3, [pc, #80]	@ (8004540 <xTaskGenericNotifyWait+0x10c>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4413      	add	r3, r2
 80044f4:	3354      	adds	r3, #84	@ 0x54
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d002      	beq.n	8004504 <xTaskGenericNotifyWait+0xd0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80044fe:	2300      	movs	r3, #0
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	e00e      	b.n	8004522 <xTaskGenericNotifyWait+0xee>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004504:	4b0e      	ldr	r3, [pc, #56]	@ (8004540 <xTaskGenericNotifyWait+0x10c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	3214      	adds	r2, #20
 800450c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	43d2      	mvns	r2, r2
 8004514:	4011      	ands	r1, r2
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	3214      	adds	r2, #20
 800451a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800451e:	2301      	movs	r3, #1
 8004520:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004522:	4b07      	ldr	r3, [pc, #28]	@ (8004540 <xTaskGenericNotifyWait+0x10c>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4413      	add	r3, r2
 800452a:	3354      	adds	r3, #84	@ 0x54
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004530:	f000 fdfe 	bl	8005130 <vPortExitCritical>

        return xReturn;
 8004534:	697b      	ldr	r3, [r7, #20]
    }
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000120 	.word	0x20000120
 8004544:	e000ed04 	.word	0xe000ed04

08004548 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8004548:	b580      	push	{r7, lr}
 800454a:	b08e      	sub	sp, #56	@ 0x38
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8004556:	2301      	movs	r3, #1
 8004558:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00b      	beq.n	8004578 <xTaskGenericNotify+0x30>
        __asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	623b      	str	r3, [r7, #32]
    }
 8004572:	bf00      	nop
 8004574:	bf00      	nop
 8004576:	e7fd      	b.n	8004574 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10b      	bne.n	8004596 <xTaskGenericNotify+0x4e>
        __asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	61fb      	str	r3, [r7, #28]
    }
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	e7fd      	b.n	8004592 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 800459a:	f000 fd97 	bl	80050cc <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800459e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d006      	beq.n	80045b2 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80045a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	3214      	adds	r2, #20
 80045aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80045ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80045b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4413      	add	r3, r2
 80045b8:	3354      	adds	r3, #84	@ 0x54
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80045c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	4413      	add	r3, r2
 80045c6:	3354      	adds	r3, #84	@ 0x54
 80045c8:	2202      	movs	r2, #2
 80045ca:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d83b      	bhi.n	800464a <xTaskGenericNotify+0x102>
 80045d2:	a201      	add	r2, pc, #4	@ (adr r2, 80045d8 <xTaskGenericNotify+0x90>)
 80045d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d8:	0800466b 	.word	0x0800466b
 80045dc:	080045ed 	.word	0x080045ed
 80045e0:	08004609 	.word	0x08004609
 80045e4:	08004621 	.word	0x08004621
 80045e8:	0800462f 	.word	0x0800462f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80045ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	3214      	adds	r2, #20
 80045f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	ea42 0103 	orr.w	r1, r2, r3
 80045fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	3214      	adds	r2, #20
 8004602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004606:	e033      	b.n	8004670 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	3214      	adds	r2, #20
 800460e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004612:	1c59      	adds	r1, r3, #1
 8004614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	3214      	adds	r2, #20
 800461a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800461e:	e027      	b.n	8004670 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	3214      	adds	r2, #20
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800462c:	e020      	b.n	8004670 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800462e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004632:	2b02      	cmp	r3, #2
 8004634:	d006      	beq.n	8004644 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	3214      	adds	r2, #20
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004642:	e015      	b.n	8004670 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8004644:	2300      	movs	r3, #0
 8004646:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 8004648:	e012      	b.n	8004670 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800464a:	4b35      	ldr	r3, [pc, #212]	@ (8004720 <xTaskGenericNotify+0x1d8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00d      	beq.n	800466e <xTaskGenericNotify+0x126>
        __asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	61bb      	str	r3, [r7, #24]
    }
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	e7fd      	b.n	8004666 <xTaskGenericNotify+0x11e>
                    break;
 800466a:	bf00      	nop
 800466c:	e000      	b.n	8004670 <xTaskGenericNotify+0x128>

                    break;
 800466e:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8004670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004672:	4618      	mov	r0, r3
 8004674:	f003 fbd0 	bl	8007e18 <SEGGER_SYSVIEW_ShrinkId>
 8004678:	4601      	mov	r1, r0
 800467a:	78fa      	ldrb	r2, [r7, #3]
 800467c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	4613      	mov	r3, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	203e      	movs	r0, #62	@ 0x3e
 8004686:	f002 feaf 	bl	80073e8 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800468a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800468e:	2b01      	cmp	r3, #1
 8004690:	d13e      	bne.n	8004710 <xTaskGenericNotify+0x1c8>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004694:	3304      	adds	r3, #4
 8004696:	4618      	mov	r0, r3
 8004698:	f7fe f9f8 	bl	8002a8c <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800469c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469e:	4618      	mov	r0, r3
 80046a0:	f003 fb18 	bl	8007cd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80046a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a8:	2201      	movs	r2, #1
 80046aa:	409a      	lsls	r2, r3
 80046ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004724 <xTaskGenericNotify+0x1dc>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004724 <xTaskGenericNotify+0x1dc>)
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4a19      	ldr	r2, [pc, #100]	@ (8004728 <xTaskGenericNotify+0x1e0>)
 80046c4:	441a      	add	r2, r3
 80046c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c8:	3304      	adds	r3, #4
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f7fe f980 	bl	80029d2 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80046d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00b      	beq.n	80046f2 <xTaskGenericNotify+0x1aa>
        __asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	617b      	str	r3, [r7, #20]
    }
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	e7fd      	b.n	80046ee <xTaskGenericNotify+0x1a6>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f6:	4b0d      	ldr	r3, [pc, #52]	@ (800472c <xTaskGenericNotify+0x1e4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d907      	bls.n	8004710 <xTaskGenericNotify+0x1c8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8004700:	4b0b      	ldr	r3, [pc, #44]	@ (8004730 <xTaskGenericNotify+0x1e8>)
 8004702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004710:	f000 fd0e 	bl	8005130 <vPortExitCritical>

        return xReturn;
 8004714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8004716:	4618      	mov	r0, r3
 8004718:	3730      	adds	r7, #48	@ 0x30
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	200001fc 	.word	0x200001fc
 8004724:	20000200 	.word	0x20000200
 8004728:	20000124 	.word	0x20000124
 800472c:	20000120 	.word	0x20000120
 8004730:	e000ed04 	.word	0xe000ed04

08004734 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800473e:	4b32      	ldr	r3, [pc, #200]	@ (8004808 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004744:	4b31      	ldr	r3, [pc, #196]	@ (800480c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3304      	adds	r3, #4
 800474a:	4618      	mov	r0, r3
 800474c:	f7fe f99e 	bl	8002a8c <uxListRemove>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10b      	bne.n	800476e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004756:	4b2d      	ldr	r3, [pc, #180]	@ (800480c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475c:	2201      	movs	r2, #1
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43da      	mvns	r2, r3
 8004764:	4b2a      	ldr	r3, [pc, #168]	@ (8004810 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4013      	ands	r3, r2
 800476a:	4a29      	ldr	r2, [pc, #164]	@ (8004810 <prvAddCurrentTaskToDelayedList+0xdc>)
 800476c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d110      	bne.n	8004798 <prvAddCurrentTaskToDelayedList+0x64>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00d      	beq.n	8004798 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800477c:	4b23      	ldr	r3, [pc, #140]	@ (800480c <prvAddCurrentTaskToDelayedList+0xd8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	211b      	movs	r1, #27
 8004782:	4618      	mov	r0, r3
 8004784:	f003 fae8 	bl	8007d58 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004788:	4b20      	ldr	r3, [pc, #128]	@ (800480c <prvAddCurrentTaskToDelayedList+0xd8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3304      	adds	r3, #4
 800478e:	4619      	mov	r1, r3
 8004790:	4820      	ldr	r0, [pc, #128]	@ (8004814 <prvAddCurrentTaskToDelayedList+0xe0>)
 8004792:	f7fe f91e 	bl	80029d2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004796:	e032      	b.n	80047fe <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4413      	add	r3, r2
 800479e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047a0:	4b1a      	ldr	r3, [pc, #104]	@ (800480c <prvAddCurrentTaskToDelayedList+0xd8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d20f      	bcs.n	80047d0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80047b0:	4b16      	ldr	r3, [pc, #88]	@ (800480c <prvAddCurrentTaskToDelayedList+0xd8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2104      	movs	r1, #4
 80047b6:	4618      	mov	r0, r3
 80047b8:	f003 face 	bl	8007d58 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047bc:	4b16      	ldr	r3, [pc, #88]	@ (8004818 <prvAddCurrentTaskToDelayedList+0xe4>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4b12      	ldr	r3, [pc, #72]	@ (800480c <prvAddCurrentTaskToDelayedList+0xd8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3304      	adds	r3, #4
 80047c6:	4619      	mov	r1, r3
 80047c8:	4610      	mov	r0, r2
 80047ca:	f7fe f926 	bl	8002a1a <vListInsert>
}
 80047ce:	e016      	b.n	80047fe <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80047d0:	4b0e      	ldr	r3, [pc, #56]	@ (800480c <prvAddCurrentTaskToDelayedList+0xd8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2104      	movs	r1, #4
 80047d6:	4618      	mov	r0, r3
 80047d8:	f003 fabe 	bl	8007d58 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047dc:	4b0f      	ldr	r3, [pc, #60]	@ (800481c <prvAddCurrentTaskToDelayedList+0xe8>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	4b0a      	ldr	r3, [pc, #40]	@ (800480c <prvAddCurrentTaskToDelayedList+0xd8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4619      	mov	r1, r3
 80047e8:	4610      	mov	r0, r2
 80047ea:	f7fe f916 	bl	8002a1a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80047ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004820 <prvAddCurrentTaskToDelayedList+0xec>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d202      	bcs.n	80047fe <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80047f8:	4a09      	ldr	r2, [pc, #36]	@ (8004820 <prvAddCurrentTaskToDelayedList+0xec>)
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6013      	str	r3, [r2, #0]
}
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	200001fc 	.word	0x200001fc
 800480c:	20000120 	.word	0x20000120
 8004810:	20000200 	.word	0x20000200
 8004814:	200001e4 	.word	0x200001e4
 8004818:	200001b4 	.word	0x200001b4
 800481c:	200001b0 	.word	0x200001b0
 8004820:	20000218 	.word	0x20000218

08004824 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800482a:	2300      	movs	r3, #0
 800482c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800482e:	f000 fae1 	bl	8004df4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004832:	4b12      	ldr	r3, [pc, #72]	@ (800487c <xTimerCreateTimerTask+0x58>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800483a:	4b11      	ldr	r3, [pc, #68]	@ (8004880 <xTimerCreateTimerTask+0x5c>)
 800483c:	9301      	str	r3, [sp, #4]
 800483e:	2302      	movs	r3, #2
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	2300      	movs	r3, #0
 8004844:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004848:	490e      	ldr	r1, [pc, #56]	@ (8004884 <xTimerCreateTimerTask+0x60>)
 800484a:	480f      	ldr	r0, [pc, #60]	@ (8004888 <xTimerCreateTimerTask+0x64>)
 800484c:	f7fe feb4 	bl	80035b8 <xTaskCreate>
 8004850:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10b      	bne.n	8004870 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8004858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	603b      	str	r3, [r7, #0]
    }
 800486a:	bf00      	nop
 800486c:	bf00      	nop
 800486e:	e7fd      	b.n	800486c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004870:	687b      	ldr	r3, [r7, #4]
    }
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000254 	.word	0x20000254
 8004880:	20000258 	.word	0x20000258
 8004884:	080082a4 	.word	0x080082a4
 8004888:	080049c5 	.word	0x080049c5

0800488c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800488c:	b580      	push	{r7, lr}
 800488e:	b08a      	sub	sp, #40	@ 0x28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800489a:	2300      	movs	r3, #0
 800489c:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10b      	bne.n	80048bc <xTimerGenericCommand+0x30>
        __asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	623b      	str	r3, [r7, #32]
    }
 80048b6:	bf00      	nop
 80048b8:	bf00      	nop
 80048ba:	e7fd      	b.n	80048b8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80048bc:	4b19      	ldr	r3, [pc, #100]	@ (8004924 <xTimerGenericCommand+0x98>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d02a      	beq.n	800491a <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b05      	cmp	r3, #5
 80048d4:	dc18      	bgt.n	8004908 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80048d6:	f7ff fd0d 	bl	80042f4 <xTaskGetSchedulerState>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d109      	bne.n	80048f4 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80048e0:	4b10      	ldr	r3, [pc, #64]	@ (8004924 <xTimerGenericCommand+0x98>)
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	f107 0114 	add.w	r1, r7, #20
 80048e8:	2300      	movs	r3, #0
 80048ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ec:	f7fe f9ee 	bl	8002ccc <xQueueGenericSend>
 80048f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80048f2:	e012      	b.n	800491a <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80048f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004924 <xTimerGenericCommand+0x98>)
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	f107 0114 	add.w	r1, r7, #20
 80048fc:	2300      	movs	r3, #0
 80048fe:	2200      	movs	r2, #0
 8004900:	f7fe f9e4 	bl	8002ccc <xQueueGenericSend>
 8004904:	6278      	str	r0, [r7, #36]	@ 0x24
 8004906:	e008      	b.n	800491a <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004908:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <xTimerGenericCommand+0x98>)
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	f107 0114 	add.w	r1, r7, #20
 8004910:	2300      	movs	r3, #0
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	f7fe fb04 	bl	8002f20 <xQueueGenericSendFromISR>
 8004918:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800491c:	4618      	mov	r0, r3
 800491e:	3728      	adds	r7, #40	@ 0x28
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	20000254 	.word	0x20000254

08004928 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af02      	add	r7, sp, #8
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004932:	4b23      	ldr	r3, [pc, #140]	@ (80049c0 <prvProcessExpiredTimer+0x98>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	3304      	adds	r3, #4
 8004940:	4618      	mov	r0, r3
 8004942:	f7fe f8a3 	bl	8002a8c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d023      	beq.n	800499c <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	699a      	ldr	r2, [r3, #24]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	18d1      	adds	r1, r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	6978      	ldr	r0, [r7, #20]
 8004962:	f000 f8d5 	bl	8004b10 <prvInsertTimerInActiveList>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d020      	beq.n	80049ae <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800496c:	2300      	movs	r3, #0
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	2300      	movs	r3, #0
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	2100      	movs	r1, #0
 8004976:	6978      	ldr	r0, [r7, #20]
 8004978:	f7ff ff88 	bl	800488c <xTimerGenericCommand>
 800497c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d114      	bne.n	80049ae <prvProcessExpiredTimer+0x86>
        __asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	60fb      	str	r3, [r7, #12]
    }
 8004996:	bf00      	nop
 8004998:	bf00      	nop
 800499a:	e7fd      	b.n	8004998 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049a2:	f023 0301 	bic.w	r3, r3, #1
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	6978      	ldr	r0, [r7, #20]
 80049b4:	4798      	blx	r3
    }
 80049b6:	bf00      	nop
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	2000024c 	.word	0x2000024c

080049c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049cc:	f107 0308 	add.w	r3, r7, #8
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 f859 	bl	8004a88 <prvGetNextExpireTime>
 80049d6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4619      	mov	r1, r3
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f805 	bl	80049ec <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80049e2:	f000 f8d7 	bl	8004b94 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049e6:	bf00      	nop
 80049e8:	e7f0      	b.n	80049cc <prvTimerTask+0x8>
	...

080049ec <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80049f6:	f7ff f889 	bl	8003b0c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049fa:	f107 0308 	add.w	r3, r7, #8
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 f866 	bl	8004ad0 <prvSampleTimeNow>
 8004a04:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d130      	bne.n	8004a6e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10a      	bne.n	8004a28 <prvProcessTimerOrBlockTask+0x3c>
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d806      	bhi.n	8004a28 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004a1a:	f7ff f885 	bl	8003b28 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a1e:	68f9      	ldr	r1, [r7, #12]
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff ff81 	bl	8004928 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004a26:	e024      	b.n	8004a72 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d008      	beq.n	8004a40 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a2e:	4b13      	ldr	r3, [pc, #76]	@ (8004a7c <prvProcessTimerOrBlockTask+0x90>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <prvProcessTimerOrBlockTask+0x50>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <prvProcessTimerOrBlockTask+0x52>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a40:	4b0f      	ldr	r3, [pc, #60]	@ (8004a80 <prvProcessTimerOrBlockTask+0x94>)
 8004a42:	6818      	ldr	r0, [r3, #0]
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	f7fe fd7f 	bl	8003550 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004a52:	f7ff f869 	bl	8003b28 <xTaskResumeAll>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004a5c:	4b09      	ldr	r3, [pc, #36]	@ (8004a84 <prvProcessTimerOrBlockTask+0x98>)
 8004a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	f3bf 8f6f 	isb	sy
    }
 8004a6c:	e001      	b.n	8004a72 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004a6e:	f7ff f85b 	bl	8003b28 <xTaskResumeAll>
    }
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000250 	.word	0x20000250
 8004a80:	20000254 	.word	0x20000254
 8004a84:	e000ed04 	.word	0xe000ed04

08004a88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a90:	4b0e      	ldr	r3, [pc, #56]	@ (8004acc <prvGetNextExpireTime+0x44>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <prvGetNextExpireTime+0x16>
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	e000      	b.n	8004aa0 <prvGetNextExpireTime+0x18>
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d105      	bne.n	8004ab8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aac:	4b07      	ldr	r3, [pc, #28]	@ (8004acc <prvGetNextExpireTime+0x44>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	e001      	b.n	8004abc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004abc:	68fb      	ldr	r3, [r7, #12]
    }
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	2000024c 	.word	0x2000024c

08004ad0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004ad8:	f7ff f8c8 	bl	8003c6c <xTaskGetTickCount>
 8004adc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004ade:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <prvSampleTimeNow+0x3c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d205      	bcs.n	8004af4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004ae8:	f000 f91e 	bl	8004d28 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e002      	b.n	8004afa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004afa:	4a04      	ldr	r2, [pc, #16]	@ (8004b0c <prvSampleTimeNow+0x3c>)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004b00:	68fb      	ldr	r3, [r7, #12]
    }
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	2000025c 	.word	0x2000025c

08004b10 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d812      	bhi.n	8004b5c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	1ad2      	subs	r2, r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d302      	bcc.n	8004b4a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004b44:	2301      	movs	r3, #1
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	e01b      	b.n	8004b82 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b4a:	4b10      	ldr	r3, [pc, #64]	@ (8004b8c <prvInsertTimerInActiveList+0x7c>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3304      	adds	r3, #4
 8004b52:	4619      	mov	r1, r3
 8004b54:	4610      	mov	r0, r2
 8004b56:	f7fd ff60 	bl	8002a1a <vListInsert>
 8004b5a:	e012      	b.n	8004b82 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d206      	bcs.n	8004b72 <prvInsertTimerInActiveList+0x62>
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d302      	bcc.n	8004b72 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e007      	b.n	8004b82 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b72:	4b07      	ldr	r3, [pc, #28]	@ (8004b90 <prvInsertTimerInActiveList+0x80>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	f7fd ff4c 	bl	8002a1a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004b82:	697b      	ldr	r3, [r7, #20]
    }
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20000250 	.word	0x20000250
 8004b90:	2000024c 	.word	0x2000024c

08004b94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08c      	sub	sp, #48	@ 0x30
 8004b98:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b9a:	e0b2      	b.n	8004d02 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f2c0 80af 	blt.w	8004d02 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d004      	beq.n	8004bba <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fd ff69 	bl	8002a8c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bba:	1d3b      	adds	r3, r7, #4
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff ff87 	bl	8004ad0 <prvSampleTimeNow>
 8004bc2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b09      	cmp	r3, #9
 8004bc8:	f200 8098 	bhi.w	8004cfc <prvProcessReceivedCommands+0x168>
 8004bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd4 <prvProcessReceivedCommands+0x40>)
 8004bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd2:	bf00      	nop
 8004bd4:	08004bfd 	.word	0x08004bfd
 8004bd8:	08004bfd 	.word	0x08004bfd
 8004bdc:	08004bfd 	.word	0x08004bfd
 8004be0:	08004c73 	.word	0x08004c73
 8004be4:	08004c87 	.word	0x08004c87
 8004be8:	08004cd3 	.word	0x08004cd3
 8004bec:	08004bfd 	.word	0x08004bfd
 8004bf0:	08004bfd 	.word	0x08004bfd
 8004bf4:	08004c73 	.word	0x08004c73
 8004bf8:	08004c87 	.word	0x08004c87
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	18d1      	adds	r1, r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a3a      	ldr	r2, [r7, #32]
 8004c1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c1c:	f7ff ff78 	bl	8004b10 <prvInsertTimerInActiveList>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d06c      	beq.n	8004d00 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c2c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d061      	beq.n	8004d00 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	441a      	add	r2, r3
 8004c44:	2300      	movs	r3, #0
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c4e:	f7ff fe1d 	bl	800488c <xTimerGenericCommand>
 8004c52:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d152      	bne.n	8004d00 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	61bb      	str	r3, [r7, #24]
    }
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	e7fd      	b.n	8004c6e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004c84:	e03d      	b.n	8004d02 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	617b      	str	r3, [r7, #20]
    }
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	e7fd      	b.n	8004cba <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	18d1      	adds	r1, r2, r3
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	6a3a      	ldr	r2, [r7, #32]
 8004cca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ccc:	f7ff ff20 	bl	8004b10 <prvInsertTimerInActiveList>
                        break;
 8004cd0:	e017      	b.n	8004d02 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d103      	bne.n	8004ce8 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8004ce0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ce2:	f000 fc07 	bl	80054f4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004ce6:	e00c      	b.n	8004d02 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cee:	f023 0301 	bic.w	r3, r3, #1
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004cfa:	e002      	b.n	8004d02 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004cfc:	bf00      	nop
 8004cfe:	e000      	b.n	8004d02 <prvProcessReceivedCommands+0x16e>
                        break;
 8004d00:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d02:	4b08      	ldr	r3, [pc, #32]	@ (8004d24 <prvProcessReceivedCommands+0x190>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f107 0108 	add.w	r1, r7, #8
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fe f9c9 	bl	80030a4 <xQueueReceive>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f47f af41 	bne.w	8004b9c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	3728      	adds	r7, #40	@ 0x28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20000254 	.word	0x20000254

08004d28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d2e:	e049      	b.n	8004dc4 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d30:	4b2e      	ldr	r3, [pc, #184]	@ (8004dec <prvSwitchTimerLists+0xc4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d3a:	4b2c      	ldr	r3, [pc, #176]	@ (8004dec <prvSwitchTimerLists+0xc4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fd fe9f 	bl	8002a8c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d02f      	beq.n	8004dc4 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d90e      	bls.n	8004d94 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d82:	4b1a      	ldr	r3, [pc, #104]	@ (8004dec <prvSwitchTimerLists+0xc4>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	f7fd fe44 	bl	8002a1a <vListInsert>
 8004d92:	e017      	b.n	8004dc4 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d94:	2300      	movs	r3, #0
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f7ff fd74 	bl	800488c <xTimerGenericCommand>
 8004da4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10b      	bne.n	8004dc4 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	603b      	str	r3, [r7, #0]
    }
 8004dbe:	bf00      	nop
 8004dc0:	bf00      	nop
 8004dc2:	e7fd      	b.n	8004dc0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004dc4:	4b09      	ldr	r3, [pc, #36]	@ (8004dec <prvSwitchTimerLists+0xc4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1b0      	bne.n	8004d30 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004dce:	4b07      	ldr	r3, [pc, #28]	@ (8004dec <prvSwitchTimerLists+0xc4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004dd4:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <prvSwitchTimerLists+0xc8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a04      	ldr	r2, [pc, #16]	@ (8004dec <prvSwitchTimerLists+0xc4>)
 8004dda:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004ddc:	4a04      	ldr	r2, [pc, #16]	@ (8004df0 <prvSwitchTimerLists+0xc8>)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	6013      	str	r3, [r2, #0]
    }
 8004de2:	bf00      	nop
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	2000024c 	.word	0x2000024c
 8004df0:	20000250 	.word	0x20000250

08004df4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004df8:	f000 f968 	bl	80050cc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004dfc:	4b12      	ldr	r3, [pc, #72]	@ (8004e48 <prvCheckForValidListAndQueue+0x54>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d11d      	bne.n	8004e40 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004e04:	4811      	ldr	r0, [pc, #68]	@ (8004e4c <prvCheckForValidListAndQueue+0x58>)
 8004e06:	f7fd fdb7 	bl	8002978 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004e0a:	4811      	ldr	r0, [pc, #68]	@ (8004e50 <prvCheckForValidListAndQueue+0x5c>)
 8004e0c:	f7fd fdb4 	bl	8002978 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004e10:	4b10      	ldr	r3, [pc, #64]	@ (8004e54 <prvCheckForValidListAndQueue+0x60>)
 8004e12:	4a0e      	ldr	r2, [pc, #56]	@ (8004e4c <prvCheckForValidListAndQueue+0x58>)
 8004e14:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004e16:	4b10      	ldr	r3, [pc, #64]	@ (8004e58 <prvCheckForValidListAndQueue+0x64>)
 8004e18:	4a0d      	ldr	r2, [pc, #52]	@ (8004e50 <prvCheckForValidListAndQueue+0x5c>)
 8004e1a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	210c      	movs	r1, #12
 8004e20:	200a      	movs	r0, #10
 8004e22:	f7fd fec7 	bl	8002bb4 <xQueueGenericCreate>
 8004e26:	4603      	mov	r3, r0
 8004e28:	4a07      	ldr	r2, [pc, #28]	@ (8004e48 <prvCheckForValidListAndQueue+0x54>)
 8004e2a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004e2c:	4b06      	ldr	r3, [pc, #24]	@ (8004e48 <prvCheckForValidListAndQueue+0x54>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e34:	4b04      	ldr	r3, [pc, #16]	@ (8004e48 <prvCheckForValidListAndQueue+0x54>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4908      	ldr	r1, [pc, #32]	@ (8004e5c <prvCheckForValidListAndQueue+0x68>)
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe fb56 	bl	80034ec <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004e40:	f000 f976 	bl	8005130 <vPortExitCritical>
    }
 8004e44:	bf00      	nop
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000254 	.word	0x20000254
 8004e4c:	20000224 	.word	0x20000224
 8004e50:	20000238 	.word	0x20000238
 8004e54:	2000024c 	.word	0x2000024c
 8004e58:	20000250 	.word	0x20000250
 8004e5c:	080082ac 	.word	0x080082ac

08004e60 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3b04      	subs	r3, #4
 8004e70:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e78:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3b04      	subs	r3, #4
 8004e7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f023 0201 	bic.w	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3b04      	subs	r3, #4
 8004e8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004e90:	4a0c      	ldr	r2, [pc, #48]	@ (8004ec4 <pxPortInitialiseStack+0x64>)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3b14      	subs	r3, #20
 8004e9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3b04      	subs	r3, #4
 8004ea6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f06f 0202 	mvn.w	r2, #2
 8004eae:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3b20      	subs	r3, #32
 8004eb4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	08004ec9 	.word	0x08004ec9

08004ec8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004ed2:	4b13      	ldr	r3, [pc, #76]	@ (8004f20 <prvTaskExitError+0x58>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d00b      	beq.n	8004ef4 <prvTaskExitError+0x2c>
        __asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	60fb      	str	r3, [r7, #12]
    }
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <prvTaskExitError+0x28>
        __asm volatile
 8004ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	60bb      	str	r3, [r7, #8]
    }
 8004f06:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004f08:	bf00      	nop
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0fc      	beq.n	8004f0a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	20000010 	.word	0x20000010
	...

08004f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004f30:	4b07      	ldr	r3, [pc, #28]	@ (8004f50 <pxCurrentTCBConst2>)
 8004f32:	6819      	ldr	r1, [r3, #0]
 8004f34:	6808      	ldr	r0, [r1, #0]
 8004f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3a:	f380 8809 	msr	PSP, r0
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f04f 0000 	mov.w	r0, #0
 8004f46:	f380 8811 	msr	BASEPRI, r0
 8004f4a:	4770      	bx	lr
 8004f4c:	f3af 8000 	nop.w

08004f50 <pxCurrentTCBConst2>:
 8004f50:	20000120 	.word	0x20000120
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop

08004f58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004f58:	4808      	ldr	r0, [pc, #32]	@ (8004f7c <prvPortStartFirstTask+0x24>)
 8004f5a:	6800      	ldr	r0, [r0, #0]
 8004f5c:	6800      	ldr	r0, [r0, #0]
 8004f5e:	f380 8808 	msr	MSP, r0
 8004f62:	f04f 0000 	mov.w	r0, #0
 8004f66:	f380 8814 	msr	CONTROL, r0
 8004f6a:	b662      	cpsie	i
 8004f6c:	b661      	cpsie	f
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	df00      	svc	0
 8004f78:	bf00      	nop
 8004f7a:	0000      	.short	0x0000
 8004f7c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004f80:	bf00      	nop
 8004f82:	bf00      	nop

08004f84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f8a:	4b47      	ldr	r3, [pc, #284]	@ (80050a8 <xPortStartScheduler+0x124>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a47      	ldr	r2, [pc, #284]	@ (80050ac <xPortStartScheduler+0x128>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d10b      	bne.n	8004fac <xPortStartScheduler+0x28>
        __asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	613b      	str	r3, [r7, #16]
    }
 8004fa6:	bf00      	nop
 8004fa8:	bf00      	nop
 8004faa:	e7fd      	b.n	8004fa8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fac:	4b3e      	ldr	r3, [pc, #248]	@ (80050a8 <xPortStartScheduler+0x124>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a3f      	ldr	r2, [pc, #252]	@ (80050b0 <xPortStartScheduler+0x12c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d10b      	bne.n	8004fce <xPortStartScheduler+0x4a>
        __asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	60fb      	str	r3, [r7, #12]
    }
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	e7fd      	b.n	8004fca <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fce:	4b39      	ldr	r3, [pc, #228]	@ (80050b4 <xPortStartScheduler+0x130>)
 8004fd0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	22ff      	movs	r2, #255	@ 0xff
 8004fde:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	4b31      	ldr	r3, [pc, #196]	@ (80050b8 <xPortStartScheduler+0x134>)
 8004ff4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ff6:	4b31      	ldr	r3, [pc, #196]	@ (80050bc <xPortStartScheduler+0x138>)
 8004ff8:	2207      	movs	r2, #7
 8004ffa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ffc:	e009      	b.n	8005012 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80050bc <xPortStartScheduler+0x138>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3b01      	subs	r3, #1
 8005004:	4a2d      	ldr	r2, [pc, #180]	@ (80050bc <xPortStartScheduler+0x138>)
 8005006:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	b2db      	uxtb	r3, r3
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	b2db      	uxtb	r3, r3
 8005010:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005012:	78fb      	ldrb	r3, [r7, #3]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800501a:	2b80      	cmp	r3, #128	@ 0x80
 800501c:	d0ef      	beq.n	8004ffe <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800501e:	4b27      	ldr	r3, [pc, #156]	@ (80050bc <xPortStartScheduler+0x138>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f1c3 0307 	rsb	r3, r3, #7
 8005026:	2b04      	cmp	r3, #4
 8005028:	d00b      	beq.n	8005042 <xPortStartScheduler+0xbe>
        __asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	60bb      	str	r3, [r7, #8]
    }
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	e7fd      	b.n	800503e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005042:	4b1e      	ldr	r3, [pc, #120]	@ (80050bc <xPortStartScheduler+0x138>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	4a1c      	ldr	r2, [pc, #112]	@ (80050bc <xPortStartScheduler+0x138>)
 800504a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800504c:	4b1b      	ldr	r3, [pc, #108]	@ (80050bc <xPortStartScheduler+0x138>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005054:	4a19      	ldr	r2, [pc, #100]	@ (80050bc <xPortStartScheduler+0x138>)
 8005056:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	b2da      	uxtb	r2, r3
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005060:	4b17      	ldr	r3, [pc, #92]	@ (80050c0 <xPortStartScheduler+0x13c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a16      	ldr	r2, [pc, #88]	@ (80050c0 <xPortStartScheduler+0x13c>)
 8005066:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800506a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800506c:	4b14      	ldr	r3, [pc, #80]	@ (80050c0 <xPortStartScheduler+0x13c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a13      	ldr	r2, [pc, #76]	@ (80050c0 <xPortStartScheduler+0x13c>)
 8005072:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005076:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005078:	f000 f8e8 	bl	800524c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800507c:	4b11      	ldr	r3, [pc, #68]	@ (80050c4 <xPortStartScheduler+0x140>)
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005082:	f000 f907 	bl	8005294 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005086:	4b10      	ldr	r3, [pc, #64]	@ (80050c8 <xPortStartScheduler+0x144>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a0f      	ldr	r2, [pc, #60]	@ (80050c8 <xPortStartScheduler+0x144>)
 800508c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005090:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005092:	f7ff ff61 	bl	8004f58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005096:	f7fe fec9 	bl	8003e2c <vTaskSwitchContext>
    prvTaskExitError();
 800509a:	f7ff ff15 	bl	8004ec8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	e000ed00 	.word	0xe000ed00
 80050ac:	410fc271 	.word	0x410fc271
 80050b0:	410fc270 	.word	0x410fc270
 80050b4:	e000e400 	.word	0xe000e400
 80050b8:	20000260 	.word	0x20000260
 80050bc:	20000264 	.word	0x20000264
 80050c0:	e000ed20 	.word	0xe000ed20
 80050c4:	20000010 	.word	0x20000010
 80050c8:	e000ef34 	.word	0xe000ef34

080050cc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
        __asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	607b      	str	r3, [r7, #4]
    }
 80050e4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80050e6:	4b10      	ldr	r3, [pc, #64]	@ (8005128 <vPortEnterCritical+0x5c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3301      	adds	r3, #1
 80050ec:	4a0e      	ldr	r2, [pc, #56]	@ (8005128 <vPortEnterCritical+0x5c>)
 80050ee:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80050f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005128 <vPortEnterCritical+0x5c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d110      	bne.n	800511a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050f8:	4b0c      	ldr	r3, [pc, #48]	@ (800512c <vPortEnterCritical+0x60>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <vPortEnterCritical+0x4e>
        __asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	603b      	str	r3, [r7, #0]
    }
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	e7fd      	b.n	8005116 <vPortEnterCritical+0x4a>
    }
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000010 	.word	0x20000010
 800512c:	e000ed04 	.word	0xe000ed04

08005130 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005136:	4b12      	ldr	r3, [pc, #72]	@ (8005180 <vPortExitCritical+0x50>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10b      	bne.n	8005156 <vPortExitCritical+0x26>
        __asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	607b      	str	r3, [r7, #4]
    }
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	e7fd      	b.n	8005152 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005156:	4b0a      	ldr	r3, [pc, #40]	@ (8005180 <vPortExitCritical+0x50>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3b01      	subs	r3, #1
 800515c:	4a08      	ldr	r2, [pc, #32]	@ (8005180 <vPortExitCritical+0x50>)
 800515e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005160:	4b07      	ldr	r3, [pc, #28]	@ (8005180 <vPortExitCritical+0x50>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d105      	bne.n	8005174 <vPortExitCritical+0x44>
 8005168:	2300      	movs	r3, #0
 800516a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	f383 8811 	msr	BASEPRI, r3
    }
 8005172:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	20000010 	.word	0x20000010
	...

08005190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005190:	f3ef 8009 	mrs	r0, PSP
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	4b15      	ldr	r3, [pc, #84]	@ (80051f0 <pxCurrentTCBConst>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	f01e 0f10 	tst.w	lr, #16
 80051a0:	bf08      	it	eq
 80051a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051aa:	6010      	str	r0, [r2, #0]
 80051ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80051b4:	f380 8811 	msr	BASEPRI, r0
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f7fe fe34 	bl	8003e2c <vTaskSwitchContext>
 80051c4:	f04f 0000 	mov.w	r0, #0
 80051c8:	f380 8811 	msr	BASEPRI, r0
 80051cc:	bc09      	pop	{r0, r3}
 80051ce:	6819      	ldr	r1, [r3, #0]
 80051d0:	6808      	ldr	r0, [r1, #0]
 80051d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d6:	f01e 0f10 	tst.w	lr, #16
 80051da:	bf08      	it	eq
 80051dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051e0:	f380 8809 	msr	PSP, r0
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	f3af 8000 	nop.w

080051f0 <pxCurrentTCBConst>:
 80051f0:	20000120 	.word	0x20000120
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop

080051f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
        __asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	607b      	str	r3, [r7, #4]
    }
 8005210:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005212:	f002 fc45 	bl	8007aa0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005216:	f7fe fd4b 	bl	8003cb0 <xTaskIncrementTick>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d006      	beq.n	800522e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8005220:	f002 fc9c 	bl	8007b5c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005224:	4b08      	ldr	r3, [pc, #32]	@ (8005248 <SysTick_Handler+0x50>)
 8005226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	e001      	b.n	8005232 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800522e:	f002 fc79 	bl	8007b24 <SEGGER_SYSVIEW_RecordExitISR>
 8005232:	2300      	movs	r3, #0
 8005234:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	f383 8811 	msr	BASEPRI, r3
    }
 800523c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005250:	4b0b      	ldr	r3, [pc, #44]	@ (8005280 <vPortSetupTimerInterrupt+0x34>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005256:	4b0b      	ldr	r3, [pc, #44]	@ (8005284 <vPortSetupTimerInterrupt+0x38>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800525c:	4b0a      	ldr	r3, [pc, #40]	@ (8005288 <vPortSetupTimerInterrupt+0x3c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a0a      	ldr	r2, [pc, #40]	@ (800528c <vPortSetupTimerInterrupt+0x40>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	099b      	lsrs	r3, r3, #6
 8005268:	4a09      	ldr	r2, [pc, #36]	@ (8005290 <vPortSetupTimerInterrupt+0x44>)
 800526a:	3b01      	subs	r3, #1
 800526c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800526e:	4b04      	ldr	r3, [pc, #16]	@ (8005280 <vPortSetupTimerInterrupt+0x34>)
 8005270:	2207      	movs	r2, #7
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	bf00      	nop
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	e000e010 	.word	0xe000e010
 8005284:	e000e018 	.word	0xe000e018
 8005288:	20000000 	.word	0x20000000
 800528c:	10624dd3 	.word	0x10624dd3
 8005290:	e000e014 	.word	0xe000e014

08005294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005294:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80052a4 <vPortEnableVFP+0x10>
 8005298:	6801      	ldr	r1, [r0, #0]
 800529a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800529e:	6001      	str	r1, [r0, #0]
 80052a0:	4770      	bx	lr
 80052a2:	0000      	.short	0x0000
 80052a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop

080052ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80052b2:	f3ef 8305 	mrs	r3, IPSR
 80052b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b0f      	cmp	r3, #15
 80052bc:	d915      	bls.n	80052ea <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052be:	4a18      	ldr	r2, [pc, #96]	@ (8005320 <vPortValidateInterruptPriority+0x74>)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4413      	add	r3, r2
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052c8:	4b16      	ldr	r3, [pc, #88]	@ (8005324 <vPortValidateInterruptPriority+0x78>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	7afa      	ldrb	r2, [r7, #11]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d20b      	bcs.n	80052ea <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	607b      	str	r3, [r7, #4]
    }
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	e7fd      	b.n	80052e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005328 <vPortValidateInterruptPriority+0x7c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052f2:	4b0e      	ldr	r3, [pc, #56]	@ (800532c <vPortValidateInterruptPriority+0x80>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d90b      	bls.n	8005312 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	603b      	str	r3, [r7, #0]
    }
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	e7fd      	b.n	800530e <vPortValidateInterruptPriority+0x62>
    }
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	e000e3f0 	.word	0xe000e3f0
 8005324:	20000260 	.word	0x20000260
 8005328:	e000ed0c 	.word	0xe000ed0c
 800532c:	20000264 	.word	0x20000264

08005330 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	@ 0x28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005338:	2300      	movs	r3, #0
 800533a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800533c:	f7fe fbe6 	bl	8003b0c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005340:	4b66      	ldr	r3, [pc, #408]	@ (80054dc <pvPortMalloc+0x1ac>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005348:	f000 f938 	bl	80055bc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800534c:	4b64      	ldr	r3, [pc, #400]	@ (80054e0 <pvPortMalloc+0x1b0>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4013      	ands	r3, r2
 8005354:	2b00      	cmp	r3, #0
 8005356:	f040 80a9 	bne.w	80054ac <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d02e      	beq.n	80053be <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005360:	2208      	movs	r2, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	429a      	cmp	r2, r3
 800536a:	d228      	bcs.n	80053be <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800536c:	2208      	movs	r2, #8
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4413      	add	r3, r2
 8005372:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	2b00      	cmp	r3, #0
 800537c:	d022      	beq.n	80053c4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f023 0307 	bic.w	r3, r3, #7
 8005384:	3308      	adds	r3, #8
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	429a      	cmp	r2, r3
 800538a:	d215      	bcs.n	80053b8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f023 0307 	bic.w	r3, r3, #7
 8005392:	3308      	adds	r3, #8
 8005394:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	2b00      	cmp	r3, #0
 800539e:	d011      	beq.n	80053c4 <pvPortMalloc+0x94>
        __asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	617b      	str	r3, [r7, #20]
    }
 80053b2:	bf00      	nop
 80053b4:	bf00      	nop
 80053b6:	e7fd      	b.n	80053b4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053bc:	e002      	b.n	80053c4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	607b      	str	r3, [r7, #4]
 80053c2:	e000      	b.n	80053c6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053c4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d06f      	beq.n	80054ac <pvPortMalloc+0x17c>
 80053cc:	4b45      	ldr	r3, [pc, #276]	@ (80054e4 <pvPortMalloc+0x1b4>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d86a      	bhi.n	80054ac <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80053d6:	4b44      	ldr	r3, [pc, #272]	@ (80054e8 <pvPortMalloc+0x1b8>)
 80053d8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80053da:	4b43      	ldr	r3, [pc, #268]	@ (80054e8 <pvPortMalloc+0x1b8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053e0:	e004      	b.n	80053ec <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d903      	bls.n	80053fe <pvPortMalloc+0xce>
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f1      	bne.n	80053e2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80053fe:	4b37      	ldr	r3, [pc, #220]	@ (80054dc <pvPortMalloc+0x1ac>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005404:	429a      	cmp	r2, r3
 8005406:	d051      	beq.n	80054ac <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2208      	movs	r2, #8
 800540e:	4413      	add	r3, r2
 8005410:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	1ad2      	subs	r2, r2, r3
 8005422:	2308      	movs	r3, #8
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	429a      	cmp	r2, r3
 8005428:	d920      	bls.n	800546c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800542a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4413      	add	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00b      	beq.n	8005454 <pvPortMalloc+0x124>
        __asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	613b      	str	r3, [r7, #16]
    }
 800544e:	bf00      	nop
 8005450:	bf00      	nop
 8005452:	e7fd      	b.n	8005450 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	1ad2      	subs	r2, r2, r3
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005466:	69b8      	ldr	r0, [r7, #24]
 8005468:	f000 f90a 	bl	8005680 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800546c:	4b1d      	ldr	r3, [pc, #116]	@ (80054e4 <pvPortMalloc+0x1b4>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	4a1b      	ldr	r2, [pc, #108]	@ (80054e4 <pvPortMalloc+0x1b4>)
 8005478:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800547a:	4b1a      	ldr	r3, [pc, #104]	@ (80054e4 <pvPortMalloc+0x1b4>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	4b1b      	ldr	r3, [pc, #108]	@ (80054ec <pvPortMalloc+0x1bc>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d203      	bcs.n	800548e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005486:	4b17      	ldr	r3, [pc, #92]	@ (80054e4 <pvPortMalloc+0x1b4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a18      	ldr	r2, [pc, #96]	@ (80054ec <pvPortMalloc+0x1bc>)
 800548c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	4b13      	ldr	r3, [pc, #76]	@ (80054e0 <pvPortMalloc+0x1b0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	431a      	orrs	r2, r3
 8005498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800549c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80054a2:	4b13      	ldr	r3, [pc, #76]	@ (80054f0 <pvPortMalloc+0x1c0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3301      	adds	r3, #1
 80054a8:	4a11      	ldr	r2, [pc, #68]	@ (80054f0 <pvPortMalloc+0x1c0>)
 80054aa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80054ac:	f7fe fb3c 	bl	8003b28 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00b      	beq.n	80054d2 <pvPortMalloc+0x1a2>
        __asm volatile
 80054ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	60fb      	str	r3, [r7, #12]
    }
 80054cc:	bf00      	nop
 80054ce:	bf00      	nop
 80054d0:	e7fd      	b.n	80054ce <pvPortMalloc+0x19e>
    return pvReturn;
 80054d2:	69fb      	ldr	r3, [r7, #28]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3728      	adds	r7, #40	@ 0x28
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20012e70 	.word	0x20012e70
 80054e0:	20012e84 	.word	0x20012e84
 80054e4:	20012e74 	.word	0x20012e74
 80054e8:	20012e68 	.word	0x20012e68
 80054ec:	20012e78 	.word	0x20012e78
 80054f0:	20012e7c 	.word	0x20012e7c

080054f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d04f      	beq.n	80055a6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005506:	2308      	movs	r3, #8
 8005508:	425b      	negs	r3, r3
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4413      	add	r3, r2
 800550e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	4b25      	ldr	r3, [pc, #148]	@ (80055b0 <vPortFree+0xbc>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4013      	ands	r3, r2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10b      	bne.n	800553a <vPortFree+0x46>
        __asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	60fb      	str	r3, [r7, #12]
    }
 8005534:	bf00      	nop
 8005536:	bf00      	nop
 8005538:	e7fd      	b.n	8005536 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00b      	beq.n	800555a <vPortFree+0x66>
        __asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	60bb      	str	r3, [r7, #8]
    }
 8005554:	bf00      	nop
 8005556:	bf00      	nop
 8005558:	e7fd      	b.n	8005556 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	4b14      	ldr	r3, [pc, #80]	@ (80055b0 <vPortFree+0xbc>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4013      	ands	r3, r2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01e      	beq.n	80055a6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d11a      	bne.n	80055a6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	4b0e      	ldr	r3, [pc, #56]	@ (80055b0 <vPortFree+0xbc>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	43db      	mvns	r3, r3
 800557a:	401a      	ands	r2, r3
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005580:	f7fe fac4 	bl	8003b0c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	4b0a      	ldr	r3, [pc, #40]	@ (80055b4 <vPortFree+0xc0>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4413      	add	r3, r2
 800558e:	4a09      	ldr	r2, [pc, #36]	@ (80055b4 <vPortFree+0xc0>)
 8005590:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005592:	6938      	ldr	r0, [r7, #16]
 8005594:	f000 f874 	bl	8005680 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005598:	4b07      	ldr	r3, [pc, #28]	@ (80055b8 <vPortFree+0xc4>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3301      	adds	r3, #1
 800559e:	4a06      	ldr	r2, [pc, #24]	@ (80055b8 <vPortFree+0xc4>)
 80055a0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80055a2:	f7fe fac1 	bl	8003b28 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80055a6:	bf00      	nop
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20012e84 	.word	0x20012e84
 80055b4:	20012e74 	.word	0x20012e74
 80055b8:	20012e80 	.word	0x20012e80

080055bc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055c2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80055c6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80055c8:	4b27      	ldr	r3, [pc, #156]	@ (8005668 <prvHeapInit+0xac>)
 80055ca:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00c      	beq.n	80055f0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3307      	adds	r3, #7
 80055da:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0307 	bic.w	r3, r3, #7
 80055e2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005668 <prvHeapInit+0xac>)
 80055ec:	4413      	add	r3, r2
 80055ee:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055f4:	4a1d      	ldr	r2, [pc, #116]	@ (800566c <prvHeapInit+0xb0>)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80055fa:	4b1c      	ldr	r3, [pc, #112]	@ (800566c <prvHeapInit+0xb0>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	4413      	add	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005608:	2208      	movs	r2, #8
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1a9b      	subs	r3, r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0307 	bic.w	r3, r3, #7
 8005616:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4a15      	ldr	r2, [pc, #84]	@ (8005670 <prvHeapInit+0xb4>)
 800561c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800561e:	4b14      	ldr	r3, [pc, #80]	@ (8005670 <prvHeapInit+0xb4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2200      	movs	r2, #0
 8005624:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005626:	4b12      	ldr	r3, [pc, #72]	@ (8005670 <prvHeapInit+0xb4>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	1ad2      	subs	r2, r2, r3
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800563c:	4b0c      	ldr	r3, [pc, #48]	@ (8005670 <prvHeapInit+0xb4>)
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	4a0a      	ldr	r2, [pc, #40]	@ (8005674 <prvHeapInit+0xb8>)
 800564a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	4a09      	ldr	r2, [pc, #36]	@ (8005678 <prvHeapInit+0xbc>)
 8005652:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005654:	4b09      	ldr	r3, [pc, #36]	@ (800567c <prvHeapInit+0xc0>)
 8005656:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800565a:	601a      	str	r2, [r3, #0]
}
 800565c:	bf00      	nop
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	20000268 	.word	0x20000268
 800566c:	20012e68 	.word	0x20012e68
 8005670:	20012e70 	.word	0x20012e70
 8005674:	20012e78 	.word	0x20012e78
 8005678:	20012e74 	.word	0x20012e74
 800567c:	20012e84 	.word	0x20012e84

08005680 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005688:	4b28      	ldr	r3, [pc, #160]	@ (800572c <prvInsertBlockIntoFreeList+0xac>)
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	e002      	b.n	8005694 <prvInsertBlockIntoFreeList+0x14>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d8f7      	bhi.n	800568e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	4413      	add	r3, r2
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d108      	bne.n	80056c2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	441a      	add	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	441a      	add	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d118      	bne.n	8005708 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	4b15      	ldr	r3, [pc, #84]	@ (8005730 <prvInsertBlockIntoFreeList+0xb0>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d00d      	beq.n	80056fe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	441a      	add	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	e008      	b.n	8005710 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005730 <prvInsertBlockIntoFreeList+0xb0>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	e003      	b.n	8005710 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	429a      	cmp	r2, r3
 8005716:	d002      	beq.n	800571e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20012e68 	.word	0x20012e68
 8005730:	20012e70 	.word	0x20012e70

08005734 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005738:	4803      	ldr	r0, [pc, #12]	@ (8005748 <_cbSendSystemDesc+0x14>)
 800573a:	f002 f95b 	bl	80079f4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800573e:	4803      	ldr	r0, [pc, #12]	@ (800574c <_cbSendSystemDesc+0x18>)
 8005740:	f002 f958 	bl	80079f4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005744:	bf00      	nop
 8005746:	bd80      	pop	{r7, pc}
 8005748:	080082b4 	.word	0x080082b4
 800574c:	080082f4 	.word	0x080082f4

08005750 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005754:	4b06      	ldr	r3, [pc, #24]	@ (8005770 <SEGGER_SYSVIEW_Conf+0x20>)
 8005756:	6818      	ldr	r0, [r3, #0]
 8005758:	4b05      	ldr	r3, [pc, #20]	@ (8005770 <SEGGER_SYSVIEW_Conf+0x20>)
 800575a:	6819      	ldr	r1, [r3, #0]
 800575c:	4b05      	ldr	r3, [pc, #20]	@ (8005774 <SEGGER_SYSVIEW_Conf+0x24>)
 800575e:	4a06      	ldr	r2, [pc, #24]	@ (8005778 <SEGGER_SYSVIEW_Conf+0x28>)
 8005760:	f001 fcc4 	bl	80070ec <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005764:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8005768:	f001 fd04 	bl	8007174 <SEGGER_SYSVIEW_SetRAMBase>
}
 800576c:	bf00      	nop
 800576e:	bd80      	pop	{r7, pc}
 8005770:	20000000 	.word	0x20000000
 8005774:	08005735 	.word	0x08005735
 8005778:	08008394 	.word	0x08008394

0800577c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800577c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800577e:	b085      	sub	sp, #20
 8005780:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005782:	2300      	movs	r3, #0
 8005784:	607b      	str	r3, [r7, #4]
 8005786:	e033      	b.n	80057f0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005788:	491e      	ldr	r1, [pc, #120]	@ (8005804 <_cbSendTaskList+0x88>)
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	6818      	ldr	r0, [r3, #0]
 8005798:	491a      	ldr	r1, [pc, #104]	@ (8005804 <_cbSendTaskList+0x88>)
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	440b      	add	r3, r1
 80057a6:	3304      	adds	r3, #4
 80057a8:	6819      	ldr	r1, [r3, #0]
 80057aa:	4c16      	ldr	r4, [pc, #88]	@ (8005804 <_cbSendTaskList+0x88>)
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4423      	add	r3, r4
 80057b8:	3308      	adds	r3, #8
 80057ba:	681c      	ldr	r4, [r3, #0]
 80057bc:	4d11      	ldr	r5, [pc, #68]	@ (8005804 <_cbSendTaskList+0x88>)
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	442b      	add	r3, r5
 80057ca:	330c      	adds	r3, #12
 80057cc:	681d      	ldr	r5, [r3, #0]
 80057ce:	4e0d      	ldr	r6, [pc, #52]	@ (8005804 <_cbSendTaskList+0x88>)
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4433      	add	r3, r6
 80057dc:	3310      	adds	r3, #16
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	462b      	mov	r3, r5
 80057e4:	4622      	mov	r2, r4
 80057e6:	f000 f979 	bl	8005adc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3301      	adds	r3, #1
 80057ee:	607b      	str	r3, [r7, #4]
 80057f0:	4b05      	ldr	r3, [pc, #20]	@ (8005808 <_cbSendTaskList+0x8c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d3c6      	bcc.n	8005788 <_cbSendTaskList+0xc>
  }
}
 80057fa:	bf00      	nop
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005804:	20012e88 	.word	0x20012e88
 8005808:	20012f28 	.word	0x20012f28

0800580c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800580c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005810:	b082      	sub	sp, #8
 8005812:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005814:	f7fe fa3a 	bl	8003c8c <xTaskGetTickCountFromISR>
 8005818:	4603      	mov	r3, r0
 800581a:	2200      	movs	r2, #0
 800581c:	469a      	mov	sl, r3
 800581e:	4693      	mov	fp, r2
 8005820:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005824:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	f04f 0a00 	mov.w	sl, #0
 8005830:	f04f 0b00 	mov.w	fp, #0
 8005834:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005838:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800583c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005840:	4652      	mov	r2, sl
 8005842:	465b      	mov	r3, fp
 8005844:	1a14      	subs	r4, r2, r0
 8005846:	eb63 0501 	sbc.w	r5, r3, r1
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	00ab      	lsls	r3, r5, #2
 8005854:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005858:	00a2      	lsls	r2, r4, #2
 800585a:	4614      	mov	r4, r2
 800585c:	461d      	mov	r5, r3
 800585e:	eb14 0800 	adds.w	r8, r4, r0
 8005862:	eb45 0901 	adc.w	r9, r5, r1
 8005866:	f04f 0200 	mov.w	r2, #0
 800586a:	f04f 0300 	mov.w	r3, #0
 800586e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005872:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005876:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800587a:	4690      	mov	r8, r2
 800587c:	4699      	mov	r9, r3
 800587e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005882:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005886:	4610      	mov	r0, r2
 8005888:	4619      	mov	r1, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005894 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af02      	add	r7, sp, #8
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80058a2:	2205      	movs	r2, #5
 80058a4:	492b      	ldr	r1, [pc, #172]	@ (8005954 <SYSVIEW_AddTask+0xc0>)
 80058a6:	68b8      	ldr	r0, [r7, #8]
 80058a8:	f002 fc40 	bl	800812c <memcmp>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d04b      	beq.n	800594a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80058b2:	4b29      	ldr	r3, [pc, #164]	@ (8005958 <SYSVIEW_AddTask+0xc4>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b07      	cmp	r3, #7
 80058b8:	d903      	bls.n	80058c2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80058ba:	4828      	ldr	r0, [pc, #160]	@ (800595c <SYSVIEW_AddTask+0xc8>)
 80058bc:	f002 fbac 	bl	8008018 <SEGGER_SYSVIEW_Warn>
    return;
 80058c0:	e044      	b.n	800594c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80058c2:	4b25      	ldr	r3, [pc, #148]	@ (8005958 <SYSVIEW_AddTask+0xc4>)
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	4926      	ldr	r1, [pc, #152]	@ (8005960 <SYSVIEW_AddTask+0xcc>)
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80058d6:	4b20      	ldr	r3, [pc, #128]	@ (8005958 <SYSVIEW_AddTask+0xc4>)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	4921      	ldr	r1, [pc, #132]	@ (8005960 <SYSVIEW_AddTask+0xcc>)
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	3304      	adds	r3, #4
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80058ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <SYSVIEW_AddTask+0xc4>)
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	491b      	ldr	r1, [pc, #108]	@ (8005960 <SYSVIEW_AddTask+0xcc>)
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	440b      	add	r3, r1
 80058fc:	3308      	adds	r3, #8
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005902:	4b15      	ldr	r3, [pc, #84]	@ (8005958 <SYSVIEW_AddTask+0xc4>)
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	4916      	ldr	r1, [pc, #88]	@ (8005960 <SYSVIEW_AddTask+0xcc>)
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	330c      	adds	r3, #12
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005918:	4b0f      	ldr	r3, [pc, #60]	@ (8005958 <SYSVIEW_AddTask+0xc4>)
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	4910      	ldr	r1, [pc, #64]	@ (8005960 <SYSVIEW_AddTask+0xcc>)
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	3310      	adds	r3, #16
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800592e:	4b0a      	ldr	r3, [pc, #40]	@ (8005958 <SYSVIEW_AddTask+0xc4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3301      	adds	r3, #1
 8005934:	4a08      	ldr	r2, [pc, #32]	@ (8005958 <SYSVIEW_AddTask+0xc4>)
 8005936:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	68b9      	ldr	r1, [r7, #8]
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 f8ca 	bl	8005adc <SYSVIEW_SendTaskInfo>
 8005948:	e000      	b.n	800594c <SYSVIEW_AddTask+0xb8>
    return;
 800594a:	bf00      	nop

}
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	08008304 	.word	0x08008304
 8005958:	20012f28 	.word	0x20012f28
 800595c:	0800830c 	.word	0x0800830c
 8005960:	20012e88 	.word	0x20012e88

08005964 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800596c:	4b59      	ldr	r3, [pc, #356]	@ (8005ad4 <SYSVIEW_DeleteTask+0x170>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 80ab 	beq.w	8005acc <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	e00d      	b.n	8005998 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800597c:	4956      	ldr	r1, [pc, #344]	@ (8005ad8 <SYSVIEW_DeleteTask+0x174>)
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	440b      	add	r3, r1
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	429a      	cmp	r2, r3
 8005990:	d008      	beq.n	80059a4 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3301      	adds	r3, #1
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	4b4e      	ldr	r3, [pc, #312]	@ (8005ad4 <SYSVIEW_DeleteTask+0x170>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d3ec      	bcc.n	800597c <SYSVIEW_DeleteTask+0x18>
 80059a2:	e000      	b.n	80059a6 <SYSVIEW_DeleteTask+0x42>
      break;
 80059a4:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80059a6:	4b4b      	ldr	r3, [pc, #300]	@ (8005ad4 <SYSVIEW_DeleteTask+0x170>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d111      	bne.n	80059d6 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4a46      	ldr	r2, [pc, #280]	@ (8005ad8 <SYSVIEW_DeleteTask+0x174>)
 80059be:	4413      	add	r3, r2
 80059c0:	2214      	movs	r2, #20
 80059c2:	2100      	movs	r1, #0
 80059c4:	4618      	mov	r0, r3
 80059c6:	f002 fbc1 	bl	800814c <memset>
    _NumTasks--;
 80059ca:	4b42      	ldr	r3, [pc, #264]	@ (8005ad4 <SYSVIEW_DeleteTask+0x170>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	4a40      	ldr	r2, [pc, #256]	@ (8005ad4 <SYSVIEW_DeleteTask+0x170>)
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	e07b      	b.n	8005ace <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80059d6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ad4 <SYSVIEW_DeleteTask+0x170>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d276      	bcs.n	8005ace <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80059e0:	4b3c      	ldr	r3, [pc, #240]	@ (8005ad4 <SYSVIEW_DeleteTask+0x170>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	1e5a      	subs	r2, r3, #1
 80059e6:	493c      	ldr	r1, [pc, #240]	@ (8005ad8 <SYSVIEW_DeleteTask+0x174>)
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	6819      	ldr	r1, [r3, #0]
 80059f4:	4838      	ldr	r0, [pc, #224]	@ (8005ad8 <SYSVIEW_DeleteTask+0x174>)
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4403      	add	r3, r0
 8005a02:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005a04:	4b33      	ldr	r3, [pc, #204]	@ (8005ad4 <SYSVIEW_DeleteTask+0x170>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	1e5a      	subs	r2, r3, #1
 8005a0a:	4933      	ldr	r1, [pc, #204]	@ (8005ad8 <SYSVIEW_DeleteTask+0x174>)
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	3304      	adds	r3, #4
 8005a18:	6819      	ldr	r1, [r3, #0]
 8005a1a:	482f      	ldr	r0, [pc, #188]	@ (8005ad8 <SYSVIEW_DeleteTask+0x174>)
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4403      	add	r3, r0
 8005a28:	3304      	adds	r3, #4
 8005a2a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8005a2c:	4b29      	ldr	r3, [pc, #164]	@ (8005ad4 <SYSVIEW_DeleteTask+0x170>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	1e5a      	subs	r2, r3, #1
 8005a32:	4929      	ldr	r1, [pc, #164]	@ (8005ad8 <SYSVIEW_DeleteTask+0x174>)
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	3308      	adds	r3, #8
 8005a40:	6819      	ldr	r1, [r3, #0]
 8005a42:	4825      	ldr	r0, [pc, #148]	@ (8005ad8 <SYSVIEW_DeleteTask+0x174>)
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4403      	add	r3, r0
 8005a50:	3308      	adds	r3, #8
 8005a52:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8005a54:	4b1f      	ldr	r3, [pc, #124]	@ (8005ad4 <SYSVIEW_DeleteTask+0x170>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	1e5a      	subs	r2, r3, #1
 8005a5a:	491f      	ldr	r1, [pc, #124]	@ (8005ad8 <SYSVIEW_DeleteTask+0x174>)
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	440b      	add	r3, r1
 8005a66:	330c      	adds	r3, #12
 8005a68:	6819      	ldr	r1, [r3, #0]
 8005a6a:	481b      	ldr	r0, [pc, #108]	@ (8005ad8 <SYSVIEW_DeleteTask+0x174>)
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4403      	add	r3, r0
 8005a78:	330c      	adds	r3, #12
 8005a7a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8005a7c:	4b15      	ldr	r3, [pc, #84]	@ (8005ad4 <SYSVIEW_DeleteTask+0x170>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	1e5a      	subs	r2, r3, #1
 8005a82:	4915      	ldr	r1, [pc, #84]	@ (8005ad8 <SYSVIEW_DeleteTask+0x174>)
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	3310      	adds	r3, #16
 8005a90:	6819      	ldr	r1, [r3, #0]
 8005a92:	4811      	ldr	r0, [pc, #68]	@ (8005ad8 <SYSVIEW_DeleteTask+0x174>)
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4403      	add	r3, r0
 8005aa0:	3310      	adds	r3, #16
 8005aa2:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad4 <SYSVIEW_DeleteTask+0x170>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	1e5a      	subs	r2, r3, #1
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4a09      	ldr	r2, [pc, #36]	@ (8005ad8 <SYSVIEW_DeleteTask+0x174>)
 8005ab4:	4413      	add	r3, r2
 8005ab6:	2214      	movs	r2, #20
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f002 fb46 	bl	800814c <memset>
    _NumTasks--;
 8005ac0:	4b04      	ldr	r3, [pc, #16]	@ (8005ad4 <SYSVIEW_DeleteTask+0x170>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	4a03      	ldr	r2, [pc, #12]	@ (8005ad4 <SYSVIEW_DeleteTask+0x170>)
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	e000      	b.n	8005ace <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8005acc:	bf00      	nop
  }
}
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20012f28 	.word	0x20012f28
 8005ad8:	20012e88 	.word	0x20012e88

08005adc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08a      	sub	sp, #40	@ 0x28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005aea:	f107 0314 	add.w	r3, r7, #20
 8005aee:	2214      	movs	r2, #20
 8005af0:	2100      	movs	r1, #0
 8005af2:	4618      	mov	r0, r3
 8005af4:	f002 fb2a 	bl	800814c <memset>
  TaskInfo.TaskID     = TaskID;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005b0c:	f107 0314 	add.w	r3, r7, #20
 8005b10:	4618      	mov	r0, r3
 8005b12:	f001 fe77 	bl	8007804 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005b16:	bf00      	nop
 8005b18:	3728      	adds	r7, #40	@ 0x28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <__NVIC_EnableIRQ>:
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	db0b      	blt.n	8005b4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	f003 021f 	and.w	r2, r3, #31
 8005b38:	4907      	ldr	r1, [pc, #28]	@ (8005b58 <__NVIC_EnableIRQ+0x38>)
 8005b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	2001      	movs	r0, #1
 8005b42:	fa00 f202 	lsl.w	r2, r0, r2
 8005b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	e000e100 	.word	0xe000e100

08005b5c <__NVIC_SetPriority>:
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	6039      	str	r1, [r7, #0]
 8005b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	db0a      	blt.n	8005b86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	490c      	ldr	r1, [pc, #48]	@ (8005ba8 <__NVIC_SetPriority+0x4c>)
 8005b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b7a:	0112      	lsls	r2, r2, #4
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	440b      	add	r3, r1
 8005b80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005b84:	e00a      	b.n	8005b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	4908      	ldr	r1, [pc, #32]	@ (8005bac <__NVIC_SetPriority+0x50>)
 8005b8c:	79fb      	ldrb	r3, [r7, #7]
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	3b04      	subs	r3, #4
 8005b94:	0112      	lsls	r2, r2, #4
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	440b      	add	r3, r1
 8005b9a:	761a      	strb	r2, [r3, #24]
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	e000e100 	.word	0xe000e100
 8005bac:	e000ed00 	.word	0xe000ed00

08005bb0 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005bb6:	f002 fa8b 	bl	80080d0 <SEGGER_SYSVIEW_IsStarted>
 8005bba:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8005bc2:	f001 fca3 	bl	800750c <SEGGER_SYSVIEW_Start>
  }
}
 8005bc6:	bf00      	nop
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005bda:	4b0c      	ldr	r3, [pc, #48]	@ (8005c0c <_cbOnUARTRx+0x3c>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d806      	bhi.n	8005bf0 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8005be2:	4b0a      	ldr	r3, [pc, #40]	@ (8005c0c <_cbOnUARTRx+0x3c>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	3301      	adds	r3, #1
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	4b08      	ldr	r3, [pc, #32]	@ (8005c0c <_cbOnUARTRx+0x3c>)
 8005bec:	701a      	strb	r2, [r3, #0]
    goto Done;
 8005bee:	e009      	b.n	8005c04 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005bf0:	f7ff ffde 	bl	8005bb0 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005bf4:	4b05      	ldr	r3, [pc, #20]	@ (8005c0c <_cbOnUARTRx+0x3c>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	1dfb      	adds	r3, r7, #7
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	4619      	mov	r1, r3
 8005c00:	f000 fb9a 	bl	8006338 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005c04:	bf00      	nop
}
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	20000014 	.word	0x20000014

08005c10 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005c18:	4b14      	ldr	r3, [pc, #80]	@ (8005c6c <_cbOnUARTTx+0x5c>)
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d80f      	bhi.n	8005c40 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005c20:	4b12      	ldr	r3, [pc, #72]	@ (8005c6c <_cbOnUARTTx+0x5c>)
 8005c22:	785b      	ldrb	r3, [r3, #1]
 8005c24:	461a      	mov	r2, r3
 8005c26:	4b12      	ldr	r3, [pc, #72]	@ (8005c70 <_cbOnUARTTx+0x60>)
 8005c28:	5c9a      	ldrb	r2, [r3, r2]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8005c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8005c6c <_cbOnUARTTx+0x5c>)
 8005c30:	785b      	ldrb	r3, [r3, #1]
 8005c32:	3301      	adds	r3, #1
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	4b0d      	ldr	r3, [pc, #52]	@ (8005c6c <_cbOnUARTTx+0x5c>)
 8005c38:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005c3e:	e00f      	b.n	8005c60 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005c40:	4b0a      	ldr	r3, [pc, #40]	@ (8005c6c <_cbOnUARTTx+0x5c>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fa19 	bl	8006080 <SEGGER_RTT_ReadUpBufferNoLock>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	da02      	bge.n	8005c5e <_cbOnUARTTx+0x4e>
    r = 0;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	e000      	b.n	8005c60 <_cbOnUARTTx+0x50>
  }
Done:
 8005c5e:	bf00      	nop
  return r;
 8005c60:	68fb      	ldr	r3, [r7, #12]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000014 	.word	0x20000014
 8005c70:	0800839c 	.word	0x0800839c

08005c74 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005c7c:	4a04      	ldr	r2, [pc, #16]	@ (8005c90 <SEGGER_UART_init+0x1c>)
 8005c7e:	4905      	ldr	r1, [pc, #20]	@ (8005c94 <SEGGER_UART_init+0x20>)
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f863 	bl	8005d4c <HIF_UART_Init>
}
 8005c86:	bf00      	nop
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	08005bd1 	.word	0x08005bd1
 8005c94:	08005c11 	.word	0x08005c11

08005c98 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005d18 <USART2_IRQHandler+0x80>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d011      	beq.n	8005cd2 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005cae:	4b1b      	ldr	r3, [pc, #108]	@ (8005d1c <USART2_IRQHandler+0x84>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f003 030b 	and.w	r3, r3, #11
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d108      	bne.n	8005cd2 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005cc0:	4b17      	ldr	r3, [pc, #92]	@ (8005d20 <USART2_IRQHandler+0x88>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005cc8:	4b15      	ldr	r3, [pc, #84]	@ (8005d20 <USART2_IRQHandler+0x88>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	79fa      	ldrb	r2, [r7, #7]
 8005cce:	4610      	mov	r0, r2
 8005cd0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01a      	beq.n	8005d12 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005cdc:	4b11      	ldr	r3, [pc, #68]	@ (8005d24 <USART2_IRQHandler+0x8c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d015      	beq.n	8005d10 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8005d24 <USART2_IRQHandler+0x8c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	1dfa      	adds	r2, r7, #7
 8005cea:	4610      	mov	r0, r2
 8005cec:	4798      	blx	r3
 8005cee:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d106      	bne.n	8005d04 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8005d28 <USART2_IRQHandler+0x90>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8005d28 <USART2_IRQHandler+0x90>)
 8005cfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	e006      	b.n	8005d12 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005d04:	4b04      	ldr	r3, [pc, #16]	@ (8005d18 <USART2_IRQHandler+0x80>)
 8005d06:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005d08:	79fa      	ldrb	r2, [r7, #7]
 8005d0a:	4b04      	ldr	r3, [pc, #16]	@ (8005d1c <USART2_IRQHandler+0x84>)
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	e000      	b.n	8005d12 <USART2_IRQHandler+0x7a>
      return;
 8005d10:	bf00      	nop
    }
  }
}
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40004400 	.word	0x40004400
 8005d1c:	40004404 	.word	0x40004404
 8005d20:	20012f2c 	.word	0x20012f2c
 8005d24:	20012f30 	.word	0x20012f30
 8005d28:	4000440c 	.word	0x4000440c

08005d2c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005d30:	4b05      	ldr	r3, [pc, #20]	@ (8005d48 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a04      	ldr	r2, [pc, #16]	@ (8005d48 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d3a:	6013      	str	r3, [r2, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	4000440c 	.word	0x4000440c

08005d4c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005d58:	4b2e      	ldr	r3, [pc, #184]	@ (8005e14 <HIF_UART_Init+0xc8>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8005e14 <HIF_UART_Init+0xc8>)
 8005d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d62:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005d64:	4b2c      	ldr	r3, [pc, #176]	@ (8005e18 <HIF_UART_Init+0xcc>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a2b      	ldr	r2, [pc, #172]	@ (8005e18 <HIF_UART_Init+0xcc>)
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005d70:	4b2a      	ldr	r3, [pc, #168]	@ (8005e1c <HIF_UART_Init+0xd0>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d7c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8005d84:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005d86:	4a25      	ldr	r2, [pc, #148]	@ (8005e1c <HIF_UART_Init+0xd0>)
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005d8c:	4b24      	ldr	r3, [pc, #144]	@ (8005e20 <HIF_UART_Init+0xd4>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d98:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005da0:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005da2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e20 <HIF_UART_Init+0xd4>)
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005da8:	4b1e      	ldr	r3, [pc, #120]	@ (8005e24 <HIF_UART_Init+0xd8>)
 8005daa:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8005dae:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005db0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e28 <HIF_UART_Init+0xdc>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005db6:	4b1d      	ldr	r3, [pc, #116]	@ (8005e2c <HIF_UART_Init+0xe0>)
 8005db8:	2280      	movs	r2, #128	@ 0x80
 8005dba:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	00db      	lsls	r3, r3, #3
 8005dc0:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8005e30 <HIF_UART_Init+0xe4>)
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dca:	3301      	adds	r3, #1
 8005dcc:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	085b      	lsrs	r3, r3, #1
 8005dd2:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dda:	d302      	bcc.n	8005de2 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005ddc:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005de0:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	4a11      	ldr	r2, [pc, #68]	@ (8005e34 <HIF_UART_Init+0xe8>)
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005df2:	4a11      	ldr	r2, [pc, #68]	@ (8005e38 <HIF_UART_Init+0xec>)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005df8:	4a10      	ldr	r2, [pc, #64]	@ (8005e3c <HIF_UART_Init+0xf0>)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005dfe:	2106      	movs	r1, #6
 8005e00:	2026      	movs	r0, #38	@ 0x26
 8005e02:	f7ff feab 	bl	8005b5c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005e06:	2026      	movs	r0, #38	@ 0x26
 8005e08:	f7ff fe8a 	bl	8005b20 <__NVIC_EnableIRQ>
}
 8005e0c:	bf00      	nop
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	40023840 	.word	0x40023840
 8005e18:	40023830 	.word	0x40023830
 8005e1c:	40020020 	.word	0x40020020
 8005e20:	40020000 	.word	0x40020000
 8005e24:	4000440c 	.word	0x4000440c
 8005e28:	40004410 	.word	0x40004410
 8005e2c:	40004414 	.word	0x40004414
 8005e30:	0501bd00 	.word	0x0501bd00
 8005e34:	40004408 	.word	0x40004408
 8005e38:	20012f2c 	.word	0x20012f2c
 8005e3c:	20012f30 	.word	0x20012f30

08005e40 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005e46:	4b24      	ldr	r3, [pc, #144]	@ (8005ed8 <_DoInit+0x98>)
 8005e48:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2203      	movs	r2, #3
 8005e4e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2203      	movs	r2, #3
 8005e54:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a20      	ldr	r2, [pc, #128]	@ (8005edc <_DoInit+0x9c>)
 8005e5a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a20      	ldr	r2, [pc, #128]	@ (8005ee0 <_DoInit+0xa0>)
 8005e60:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e68:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a17      	ldr	r2, [pc, #92]	@ (8005edc <_DoInit+0x9c>)
 8005e80:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a17      	ldr	r2, [pc, #92]	@ (8005ee4 <_DoInit+0xa4>)
 8005e86:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2210      	movs	r2, #16
 8005e8c:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3307      	adds	r3, #7
 8005ea4:	4a10      	ldr	r2, [pc, #64]	@ (8005ee8 <_DoInit+0xa8>)
 8005ea6:	6810      	ldr	r0, [r2, #0]
 8005ea8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005eaa:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a0e      	ldr	r2, [pc, #56]	@ (8005eec <_DoInit+0xac>)
 8005eb2:	6810      	ldr	r0, [r2, #0]
 8005eb4:	6018      	str	r0, [r3, #0]
 8005eb6:	8891      	ldrh	r1, [r2, #4]
 8005eb8:	7992      	ldrb	r2, [r2, #6]
 8005eba:	8099      	strh	r1, [r3, #4]
 8005ebc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005ebe:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005ec8:	f3bf 8f5f 	dmb	sy
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	20012f34 	.word	0x20012f34
 8005edc:	0800835c 	.word	0x0800835c
 8005ee0:	20012fdc 	.word	0x20012fdc
 8005ee4:	200133dc 	.word	0x200133dc
 8005ee8:	08008368 	.word	0x08008368
 8005eec:	0800836c 	.word	0x0800836c

08005ef0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08a      	sub	sp, #40	@ 0x28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005efc:	2300      	movs	r3, #0
 8005efe:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d905      	bls.n	8005f20 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f1e:	e007      	b.n	8005f30 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	69b9      	ldr	r1, [r7, #24]
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	1acb      	subs	r3, r1, r3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	bf28      	it	cs
 8005f3e:	4613      	movcs	r3, r2
 8005f40:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4293      	cmp	r3, r2
 8005f48:	bf28      	it	cs
 8005f4a:	4613      	movcs	r3, r2
 8005f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	6978      	ldr	r0, [r7, #20]
 8005f5e:	f002 f921 	bl	80081a4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005f62:	6a3a      	ldr	r2, [r7, #32]
 8005f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f66:	4413      	add	r3, r2
 8005f68:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	4413      	add	r3, r2
 8005f70:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7e:	4413      	add	r3, r2
 8005f80:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d101      	bne.n	8005f90 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f90:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1b2      	bne.n	8005f06 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3728      	adds	r7, #40	@ 0x28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b088      	sub	sp, #32
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d911      	bls.n	8005ff2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	68b9      	ldr	r1, [r7, #8]
 8005fdc:	6938      	ldr	r0, [r7, #16]
 8005fde:	f002 f8e1 	bl	80081a4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005fe2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	441a      	add	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005ff0:	e01f      	b.n	8006032 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	6938      	ldr	r0, [r7, #16]
 8006006:	f002 f8cd 	bl	80081a4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	4413      	add	r3, r2
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4619      	mov	r1, r3
 8006022:	6938      	ldr	r0, [r7, #16]
 8006024:	f002 f8be 	bl	80081a4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006028:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	60da      	str	r2, [r3, #12]
}
 8006032:	bf00      	nop
 8006034:	3720      	adds	r7, #32
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800603a:	b480      	push	{r7}
 800603c:	b087      	sub	sp, #28
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	429a      	cmp	r2, r3
 8006054:	d808      	bhi.n	8006068 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	1ad2      	subs	r2, r2, r3
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	4413      	add	r3, r2
 8006062:	3b01      	subs	r3, #1
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	e004      	b.n	8006072 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	3b01      	subs	r3, #1
 8006070:	617b      	str	r3, [r7, #20]
  }
  return r;
 8006072:	697b      	ldr	r3, [r7, #20]
}
 8006074:	4618      	mov	r0, r3
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006080:	b580      	push	{r7, lr}
 8006082:	b08c      	sub	sp, #48	@ 0x30
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800608c:	4b3e      	ldr	r3, [pc, #248]	@ (8006188 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800608e:	623b      	str	r3, [r7, #32]
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800609a:	f7ff fed1 	bl	8005e40 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	4613      	mov	r3, r2
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	4413      	add	r3, r2
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	4a37      	ldr	r2, [pc, #220]	@ (8006188 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80060ac:	4413      	add	r3, r2
 80060ae:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80060c0:	2300      	movs	r3, #0
 80060c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80060c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d92b      	bls.n	8006124 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4293      	cmp	r3, r2
 80060dc:	bf28      	it	cs
 80060de:	4613      	movcs	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e8:	4413      	add	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	6939      	ldr	r1, [r7, #16]
 80060f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80060f2:	f002 f857 	bl	80081a4 <memcpy>
    NumBytesRead += NumBytesRem;
 80060f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	4413      	add	r3, r2
 80060fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80060fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	4413      	add	r3, r2
 8006104:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800610e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	4413      	add	r3, r2
 8006114:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800611c:	429a      	cmp	r2, r3
 800611e:	d101      	bne.n	8006124 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8006120:	2300      	movs	r3, #0
 8006122:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4293      	cmp	r3, r2
 8006132:	bf28      	it	cs
 8006134:	4613      	movcs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d019      	beq.n	8006172 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006144:	4413      	add	r3, r2
 8006146:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	6939      	ldr	r1, [r7, #16]
 800614c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800614e:	f002 f829 	bl	80081a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8006152:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	4413      	add	r3, r2
 8006158:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800615a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	4413      	add	r3, r2
 8006160:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800616a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	4413      	add	r3, r2
 8006170:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8006172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800617c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800617e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006180:	4618      	mov	r0, r3
 8006182:	3730      	adds	r7, #48	@ 0x30
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	20012f34 	.word	0x20012f34

0800618c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800618c:	b580      	push	{r7, lr}
 800618e:	b08c      	sub	sp, #48	@ 0x30
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006198:	4b3e      	ldr	r3, [pc, #248]	@ (8006294 <SEGGER_RTT_ReadNoLock+0x108>)
 800619a:	623b      	str	r3, [r7, #32]
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <SEGGER_RTT_ReadNoLock+0x1e>
 80061a6:	f7ff fe4b 	bl	8005e40 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4613      	mov	r3, r2
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	4413      	add	r3, r2
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	3360      	adds	r3, #96	@ 0x60
 80061b6:	4a37      	ldr	r2, [pc, #220]	@ (8006294 <SEGGER_RTT_ReadNoLock+0x108>)
 80061b8:	4413      	add	r3, r2
 80061ba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80061cc:	2300      	movs	r3, #0
 80061ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80061d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d92b      	bls.n	8006230 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4293      	cmp	r3, r2
 80061e8:	bf28      	it	cs
 80061ea:	4613      	movcs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f4:	4413      	add	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	6939      	ldr	r1, [r7, #16]
 80061fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80061fe:	f001 ffd1 	bl	80081a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8006202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4413      	add	r3, r2
 8006208:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800620a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	4413      	add	r3, r2
 8006210:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800621a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	4413      	add	r3, r2
 8006220:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006228:	429a      	cmp	r2, r3
 800622a:	d101      	bne.n	8006230 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800622c:	2300      	movs	r3, #0
 800622e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4293      	cmp	r3, r2
 800623e:	bf28      	it	cs
 8006240:	4613      	movcs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d019      	beq.n	800627e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006250:	4413      	add	r3, r2
 8006252:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	6939      	ldr	r1, [r7, #16]
 8006258:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800625a:	f001 ffa3 	bl	80081a4 <memcpy>
    NumBytesRead += NumBytesRem;
 800625e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	4413      	add	r3, r2
 8006264:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8006266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	4413      	add	r3, r2
 800626c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	4413      	add	r3, r2
 800627c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800627e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006288:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800628a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800628c:	4618      	mov	r0, r3
 800628e:	3730      	adds	r7, #48	@ 0x30
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	20012f34 	.word	0x20012f34

08006298 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4613      	mov	r3, r2
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	4413      	add	r3, r2
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	3360      	adds	r3, #96	@ 0x60
 80062b4:	4a1f      	ldr	r2, [pc, #124]	@ (8006334 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80062b6:	4413      	add	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d029      	beq.n	8006316 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d82e      	bhi.n	8006324 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d013      	beq.n	80062f6 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80062ce:	e029      	b.n	8006324 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80062d0:	6978      	ldr	r0, [r7, #20]
 80062d2:	f7ff feb2 	bl	800603a <_GetAvailWriteSpace>
 80062d6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d202      	bcs.n	80062e6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80062e0:	2300      	movs	r3, #0
 80062e2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80062e4:	e021      	b.n	800632a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	69b9      	ldr	r1, [r7, #24]
 80062ee:	6978      	ldr	r0, [r7, #20]
 80062f0:	f7ff fe5b 	bl	8005faa <_WriteNoCheck>
    break;
 80062f4:	e019      	b.n	800632a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80062f6:	6978      	ldr	r0, [r7, #20]
 80062f8:	f7ff fe9f 	bl	800603a <_GetAvailWriteSpace>
 80062fc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	4293      	cmp	r3, r2
 8006304:	bf28      	it	cs
 8006306:	4613      	movcs	r3, r2
 8006308:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800630a:	69fa      	ldr	r2, [r7, #28]
 800630c:	69b9      	ldr	r1, [r7, #24]
 800630e:	6978      	ldr	r0, [r7, #20]
 8006310:	f7ff fe4b 	bl	8005faa <_WriteNoCheck>
    break;
 8006314:	e009      	b.n	800632a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	69b9      	ldr	r1, [r7, #24]
 800631a:	6978      	ldr	r0, [r7, #20]
 800631c:	f7ff fde8 	bl	8005ef0 <_WriteBlocking>
 8006320:	61f8      	str	r0, [r7, #28]
    break;
 8006322:	e002      	b.n	800632a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8006324:	2300      	movs	r3, #0
 8006326:	61fb      	str	r3, [r7, #28]
    break;
 8006328:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800632a:	69fb      	ldr	r3, [r7, #28]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3720      	adds	r7, #32
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	20012f34 	.word	0x20012f34

08006338 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8006344:	4b0e      	ldr	r3, [pc, #56]	@ (8006380 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8006346:	61fb      	str	r3, [r7, #28]
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8006352:	f7ff fd75 	bl	8005e40 <_DoInit>
  SEGGER_RTT_LOCK();
 8006356:	f3ef 8311 	mrs	r3, BASEPRI
 800635a:	f04f 0120 	mov.w	r1, #32
 800635e:	f381 8811 	msr	BASEPRI, r1
 8006362:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	68b9      	ldr	r1, [r7, #8]
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f7ff ff95 	bl	8006298 <SEGGER_RTT_WriteDownBufferNoLock>
 800636e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8006376:	697b      	ldr	r3, [r7, #20]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3720      	adds	r7, #32
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	20012f34 	.word	0x20012f34

08006384 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006392:	4b3d      	ldr	r3, [pc, #244]	@ (8006488 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006394:	61bb      	str	r3, [r7, #24]
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80063a0:	f7ff fd4e 	bl	8005e40 <_DoInit>
  SEGGER_RTT_LOCK();
 80063a4:	f3ef 8311 	mrs	r3, BASEPRI
 80063a8:	f04f 0120 	mov.w	r1, #32
 80063ac:	f381 8811 	msr	BASEPRI, r1
 80063b0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80063b2:	4b35      	ldr	r3, [pc, #212]	@ (8006488 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80063b4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80063b6:	2300      	movs	r3, #0
 80063b8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80063ba:	6939      	ldr	r1, [r7, #16]
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	4613      	mov	r3, r2
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	4413      	add	r3, r2
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	440b      	add	r3, r1
 80063ca:	3304      	adds	r3, #4
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d008      	beq.n	80063e4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	3301      	adds	r3, #1
 80063d6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	429a      	cmp	r2, r3
 80063e0:	dbeb      	blt.n	80063ba <SEGGER_RTT_AllocUpBuffer+0x36>
 80063e2:	e000      	b.n	80063e6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80063e4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	69fa      	ldr	r2, [r7, #28]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	da3f      	bge.n	8006470 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80063f0:	6939      	ldr	r1, [r7, #16]
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	4613      	mov	r3, r2
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	4413      	add	r3, r2
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	440b      	add	r3, r1
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006404:	6939      	ldr	r1, [r7, #16]
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	4613      	mov	r3, r2
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	4413      	add	r3, r2
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	440b      	add	r3, r1
 8006414:	3304      	adds	r3, #4
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800641a:	6939      	ldr	r1, [r7, #16]
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	4613      	mov	r3, r2
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	4413      	add	r3, r2
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	440b      	add	r3, r1
 8006428:	3320      	adds	r3, #32
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800642e:	6939      	ldr	r1, [r7, #16]
 8006430:	69fa      	ldr	r2, [r7, #28]
 8006432:	4613      	mov	r3, r2
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	4413      	add	r3, r2
 8006438:	00db      	lsls	r3, r3, #3
 800643a:	440b      	add	r3, r1
 800643c:	3328      	adds	r3, #40	@ 0x28
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006442:	6939      	ldr	r1, [r7, #16]
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	4613      	mov	r3, r2
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	4413      	add	r3, r2
 800644c:	00db      	lsls	r3, r3, #3
 800644e:	440b      	add	r3, r1
 8006450:	3324      	adds	r3, #36	@ 0x24
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006456:	6939      	ldr	r1, [r7, #16]
 8006458:	69fa      	ldr	r2, [r7, #28]
 800645a:	4613      	mov	r3, r2
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	4413      	add	r3, r2
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	440b      	add	r3, r1
 8006464:	332c      	adds	r3, #44	@ 0x2c
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800646a:	f3bf 8f5f 	dmb	sy
 800646e:	e002      	b.n	8006476 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006470:	f04f 33ff 	mov.w	r3, #4294967295
 8006474:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800647c:	69fb      	ldr	r3, [r7, #28]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3720      	adds	r7, #32
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20012f34 	.word	0x20012f34

0800648c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800649a:	4b33      	ldr	r3, [pc, #204]	@ (8006568 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800649c:	61bb      	str	r3, [r7, #24]
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <SEGGER_RTT_ConfigDownBuffer+0x20>
 80064a8:	f7ff fcca 	bl	8005e40 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80064ac:	4b2e      	ldr	r3, [pc, #184]	@ (8006568 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80064ae:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	461a      	mov	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d24d      	bcs.n	8006558 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80064bc:	f3ef 8311 	mrs	r3, BASEPRI
 80064c0:	f04f 0120 	mov.w	r1, #32
 80064c4:	f381 8811 	msr	BASEPRI, r1
 80064c8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d031      	beq.n	8006534 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80064d0:	6979      	ldr	r1, [r7, #20]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4613      	mov	r3, r2
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	4413      	add	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	440b      	add	r3, r1
 80064de:	3360      	adds	r3, #96	@ 0x60
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80064e4:	6979      	ldr	r1, [r7, #20]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4613      	mov	r3, r2
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	4413      	add	r3, r2
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	440b      	add	r3, r1
 80064f2:	3364      	adds	r3, #100	@ 0x64
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80064f8:	6979      	ldr	r1, [r7, #20]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4613      	mov	r3, r2
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	4413      	add	r3, r2
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	440b      	add	r3, r1
 8006506:	3368      	adds	r3, #104	@ 0x68
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800650c:	6979      	ldr	r1, [r7, #20]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4613      	mov	r3, r2
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	4413      	add	r3, r2
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	440b      	add	r3, r1
 800651a:	3370      	adds	r3, #112	@ 0x70
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8006520:	6979      	ldr	r1, [r7, #20]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	4613      	mov	r3, r2
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	4413      	add	r3, r2
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	440b      	add	r3, r1
 800652e:	336c      	adds	r3, #108	@ 0x6c
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8006534:	6979      	ldr	r1, [r7, #20]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4613      	mov	r3, r2
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	4413      	add	r3, r2
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	440b      	add	r3, r1
 8006542:	3374      	adds	r3, #116	@ 0x74
 8006544:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006546:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006548:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006552:	2300      	movs	r3, #0
 8006554:	61fb      	str	r3, [r7, #28]
 8006556:	e002      	b.n	800655e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8006558:	f04f 33ff 	mov.w	r3, #4294967295
 800655c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800655e:	69fb      	ldr	r3, [r7, #28]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3720      	adds	r7, #32
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	20012f34 	.word	0x20012f34

0800656c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800657c:	e002      	b.n	8006584 <_EncodeStr+0x18>
    Len++;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	3301      	adds	r3, #1
 8006582:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	4413      	add	r3, r2
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1f6      	bne.n	800657e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	429a      	cmp	r2, r3
 8006596:	d901      	bls.n	800659c <_EncodeStr+0x30>
    Len = Limit;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	2bfe      	cmp	r3, #254	@ 0xfe
 80065a0:	d806      	bhi.n	80065b0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	60fa      	str	r2, [r7, #12]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	e011      	b.n	80065d4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	60fa      	str	r2, [r7, #12]
 80065b6:	22ff      	movs	r2, #255	@ 0xff
 80065b8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	60fa      	str	r2, [r7, #12]
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	0a19      	lsrs	r1, r3, #8
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	60fa      	str	r2, [r7, #12]
 80065d0:	b2ca      	uxtb	r2, r1
 80065d2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80065d8:	e00a      	b.n	80065f0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	1c53      	adds	r3, r2, #1
 80065de:	60bb      	str	r3, [r7, #8]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	1c59      	adds	r1, r3, #1
 80065e4:	60f9      	str	r1, [r7, #12]
 80065e6:	7812      	ldrb	r2, [r2, #0]
 80065e8:	701a      	strb	r2, [r3, #0]
    n++;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	3301      	adds	r3, #1
 80065ee:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d3f0      	bcc.n	80065da <_EncodeStr+0x6e>
  }
  return pPayload;
 80065f8:	68fb      	ldr	r3, [r7, #12]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	3304      	adds	r3, #4
}
 8006612:	4618      	mov	r0, r3
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
	...

08006620 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006626:	4b35      	ldr	r3, [pc, #212]	@ (80066fc <_HandleIncomingPacket+0xdc>)
 8006628:	7e1b      	ldrb	r3, [r3, #24]
 800662a:	4618      	mov	r0, r3
 800662c:	1cfb      	adds	r3, r7, #3
 800662e:	2201      	movs	r2, #1
 8006630:	4619      	mov	r1, r3
 8006632:	f7ff fdab 	bl	800618c <SEGGER_RTT_ReadNoLock>
 8006636:	4603      	mov	r3, r0
 8006638:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	dd59      	ble.n	80066f4 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	2b80      	cmp	r3, #128	@ 0x80
 8006644:	d032      	beq.n	80066ac <_HandleIncomingPacket+0x8c>
 8006646:	2b80      	cmp	r3, #128	@ 0x80
 8006648:	dc42      	bgt.n	80066d0 <_HandleIncomingPacket+0xb0>
 800664a:	2b07      	cmp	r3, #7
 800664c:	dc16      	bgt.n	800667c <_HandleIncomingPacket+0x5c>
 800664e:	2b00      	cmp	r3, #0
 8006650:	dd3e      	ble.n	80066d0 <_HandleIncomingPacket+0xb0>
 8006652:	3b01      	subs	r3, #1
 8006654:	2b06      	cmp	r3, #6
 8006656:	d83b      	bhi.n	80066d0 <_HandleIncomingPacket+0xb0>
 8006658:	a201      	add	r2, pc, #4	@ (adr r2, 8006660 <_HandleIncomingPacket+0x40>)
 800665a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665e:	bf00      	nop
 8006660:	08006683 	.word	0x08006683
 8006664:	08006689 	.word	0x08006689
 8006668:	0800668f 	.word	0x0800668f
 800666c:	08006695 	.word	0x08006695
 8006670:	0800669b 	.word	0x0800669b
 8006674:	080066a1 	.word	0x080066a1
 8006678:	080066a7 	.word	0x080066a7
 800667c:	2b7f      	cmp	r3, #127	@ 0x7f
 800667e:	d034      	beq.n	80066ea <_HandleIncomingPacket+0xca>
 8006680:	e026      	b.n	80066d0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006682:	f000 ff43 	bl	800750c <SEGGER_SYSVIEW_Start>
      break;
 8006686:	e035      	b.n	80066f4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006688:	f000 fffc 	bl	8007684 <SEGGER_SYSVIEW_Stop>
      break;
 800668c:	e032      	b.n	80066f4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800668e:	f001 f9d5 	bl	8007a3c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006692:	e02f      	b.n	80066f4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006694:	f001 f99a 	bl	80079cc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006698:	e02c      	b.n	80066f4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800669a:	f001 f819 	bl	80076d0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800669e:	e029      	b.n	80066f4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80066a0:	f001 fc68 	bl	8007f74 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80066a4:	e026      	b.n	80066f4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80066a6:	f001 fc47 	bl	8007f38 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80066aa:	e023      	b.n	80066f4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80066ac:	4b13      	ldr	r3, [pc, #76]	@ (80066fc <_HandleIncomingPacket+0xdc>)
 80066ae:	7e1b      	ldrb	r3, [r3, #24]
 80066b0:	4618      	mov	r0, r3
 80066b2:	1cfb      	adds	r3, r7, #3
 80066b4:	2201      	movs	r2, #1
 80066b6:	4619      	mov	r1, r3
 80066b8:	f7ff fd68 	bl	800618c <SEGGER_RTT_ReadNoLock>
 80066bc:	4603      	mov	r3, r0
 80066be:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	dd13      	ble.n	80066ee <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f001 fbb5 	bl	8007e38 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80066ce:	e00e      	b.n	80066ee <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	b25b      	sxtb	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	da0c      	bge.n	80066f2 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80066d8:	4b08      	ldr	r3, [pc, #32]	@ (80066fc <_HandleIncomingPacket+0xdc>)
 80066da:	7e1b      	ldrb	r3, [r3, #24]
 80066dc:	4618      	mov	r0, r3
 80066de:	1cfb      	adds	r3, r7, #3
 80066e0:	2201      	movs	r2, #1
 80066e2:	4619      	mov	r1, r3
 80066e4:	f7ff fd52 	bl	800618c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80066e8:	e003      	b.n	80066f2 <_HandleIncomingPacket+0xd2>
      break;
 80066ea:	bf00      	nop
 80066ec:	e002      	b.n	80066f4 <_HandleIncomingPacket+0xd4>
      break;
 80066ee:	bf00      	nop
 80066f0:	e000      	b.n	80066f4 <_HandleIncomingPacket+0xd4>
      break;
 80066f2:	bf00      	nop
    }
  }
}
 80066f4:	bf00      	nop
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	200143f4 	.word	0x200143f4

08006700 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006700:	b580      	push	{r7, lr}
 8006702:	b08c      	sub	sp, #48	@ 0x30
 8006704:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006706:	2301      	movs	r3, #1
 8006708:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800670a:	1d3b      	adds	r3, r7, #4
 800670c:	3301      	adds	r3, #1
 800670e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006714:	4b32      	ldr	r3, [pc, #200]	@ (80067e0 <_TrySendOverflowPacket+0xe0>)
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	62bb      	str	r3, [r7, #40]	@ 0x28
 800671a:	e00b      	b.n	8006734 <_TrySendOverflowPacket+0x34>
 800671c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671e:	b2da      	uxtb	r2, r3
 8006720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006722:	1c59      	adds	r1, r3, #1
 8006724:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006726:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006730:	09db      	lsrs	r3, r3, #7
 8006732:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006736:	2b7f      	cmp	r3, #127	@ 0x7f
 8006738:	d8f0      	bhi.n	800671c <_TrySendOverflowPacket+0x1c>
 800673a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006740:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006748:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800674a:	4b26      	ldr	r3, [pc, #152]	@ (80067e4 <_TrySendOverflowPacket+0xe4>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006750:	4b23      	ldr	r3, [pc, #140]	@ (80067e0 <_TrySendOverflowPacket+0xe0>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	627b      	str	r3, [r7, #36]	@ 0x24
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	623b      	str	r3, [r7, #32]
 8006762:	e00b      	b.n	800677c <_TrySendOverflowPacket+0x7c>
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	b2da      	uxtb	r2, r3
 8006768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676a:	1c59      	adds	r1, r3, #1
 800676c:	6279      	str	r1, [r7, #36]	@ 0x24
 800676e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	09db      	lsrs	r3, r3, #7
 800677a:	623b      	str	r3, [r7, #32]
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006780:	d8f0      	bhi.n	8006764 <_TrySendOverflowPacket+0x64>
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	627a      	str	r2, [r7, #36]	@ 0x24
 8006788:	6a3a      	ldr	r2, [r7, #32]
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]
 800678e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006790:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8006792:	4b13      	ldr	r3, [pc, #76]	@ (80067e0 <_TrySendOverflowPacket+0xe0>)
 8006794:	785b      	ldrb	r3, [r3, #1]
 8006796:	4618      	mov	r0, r3
 8006798:	1d3b      	adds	r3, r7, #4
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	461a      	mov	r2, r3
 80067a0:	1d3b      	adds	r3, r7, #4
 80067a2:	4619      	mov	r1, r3
 80067a4:	f7f9 fd14 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80067a8:	4603      	mov	r3, r0
 80067aa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80067ac:	f7ff fabe 	bl	8005d2c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d009      	beq.n	80067ca <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80067b6:	4a0a      	ldr	r2, [pc, #40]	@ (80067e0 <_TrySendOverflowPacket+0xe0>)
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80067bc:	4b08      	ldr	r3, [pc, #32]	@ (80067e0 <_TrySendOverflowPacket+0xe0>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	4b06      	ldr	r3, [pc, #24]	@ (80067e0 <_TrySendOverflowPacket+0xe0>)
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	e004      	b.n	80067d4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80067ca:	4b05      	ldr	r3, [pc, #20]	@ (80067e0 <_TrySendOverflowPacket+0xe0>)
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	3301      	adds	r3, #1
 80067d0:	4a03      	ldr	r2, [pc, #12]	@ (80067e0 <_TrySendOverflowPacket+0xe0>)
 80067d2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80067d4:	693b      	ldr	r3, [r7, #16]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3730      	adds	r7, #48	@ 0x30
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	200143f4 	.word	0x200143f4
 80067e4:	e0001004 	.word	0xe0001004

080067e8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08a      	sub	sp, #40	@ 0x28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80067f4:	4b6d      	ldr	r3, [pc, #436]	@ (80069ac <_SendPacket+0x1c4>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d010      	beq.n	800681e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80067fc:	4b6b      	ldr	r3, [pc, #428]	@ (80069ac <_SendPacket+0x1c4>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 80a5 	beq.w	8006950 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006806:	4b69      	ldr	r3, [pc, #420]	@ (80069ac <_SendPacket+0x1c4>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d109      	bne.n	8006822 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800680e:	f7ff ff77 	bl	8006700 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006812:	4b66      	ldr	r3, [pc, #408]	@ (80069ac <_SendPacket+0x1c4>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b01      	cmp	r3, #1
 8006818:	f040 809c 	bne.w	8006954 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800681c:	e001      	b.n	8006822 <_SendPacket+0x3a>
    goto Send;
 800681e:	bf00      	nop
 8006820:	e000      	b.n	8006824 <_SendPacket+0x3c>
Send:
 8006822:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b1f      	cmp	r3, #31
 8006828:	d809      	bhi.n	800683e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800682a:	4b60      	ldr	r3, [pc, #384]	@ (80069ac <_SendPacket+0x1c4>)
 800682c:	69da      	ldr	r2, [r3, #28]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	fa22 f303 	lsr.w	r3, r2, r3
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	f040 808d 	bne.w	8006958 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b17      	cmp	r3, #23
 8006842:	d807      	bhi.n	8006854 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3b01      	subs	r3, #1
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	b2da      	uxtb	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	e03d      	b.n	80068d0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006860:	d912      	bls.n	8006888 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	09da      	lsrs	r2, r3, #7
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3b01      	subs	r3, #1
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	3a01      	subs	r2, #1
 800687a:	60fa      	str	r2, [r7, #12]
 800687c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006880:	b2da      	uxtb	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	e006      	b.n	8006896 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3b01      	subs	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	b2da      	uxtb	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b7f      	cmp	r3, #127	@ 0x7f
 800689a:	d912      	bls.n	80068c2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	09da      	lsrs	r2, r3, #7
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	3a01      	subs	r2, #1
 80068b4:	60fa      	str	r2, [r7, #12]
 80068b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	701a      	strb	r2, [r3, #0]
 80068c0:	e006      	b.n	80068d0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80068d0:	4b37      	ldr	r3, [pc, #220]	@ (80069b0 <_SendPacket+0x1c8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80068d6:	4b35      	ldr	r3, [pc, #212]	@ (80069ac <_SendPacket+0x1c4>)
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	623b      	str	r3, [r7, #32]
 80068e8:	e00b      	b.n	8006902 <_SendPacket+0x11a>
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f0:	1c59      	adds	r1, r3, #1
 80068f2:	6279      	str	r1, [r7, #36]	@ 0x24
 80068f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	09db      	lsrs	r3, r3, #7
 8006900:	623b      	str	r3, [r7, #32]
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	2b7f      	cmp	r3, #127	@ 0x7f
 8006906:	d8f0      	bhi.n	80068ea <_SendPacket+0x102>
 8006908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690a:	1c5a      	adds	r2, r3, #1
 800690c:	627a      	str	r2, [r7, #36]	@ 0x24
 800690e:	6a3a      	ldr	r2, [r7, #32]
 8006910:	b2d2      	uxtb	r2, r2
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006916:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006918:	4b24      	ldr	r3, [pc, #144]	@ (80069ac <_SendPacket+0x1c4>)
 800691a:	785b      	ldrb	r3, [r3, #1]
 800691c:	4618      	mov	r0, r3
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	461a      	mov	r2, r3
 8006926:	68f9      	ldr	r1, [r7, #12]
 8006928:	f7f9 fc52 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800692c:	4603      	mov	r3, r0
 800692e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006930:	f7ff f9fc 	bl	8005d2c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800693a:	4a1c      	ldr	r2, [pc, #112]	@ (80069ac <_SendPacket+0x1c4>)
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	60d3      	str	r3, [r2, #12]
 8006940:	e00b      	b.n	800695a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006942:	4b1a      	ldr	r3, [pc, #104]	@ (80069ac <_SendPacket+0x1c4>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	3301      	adds	r3, #1
 8006948:	b2da      	uxtb	r2, r3
 800694a:	4b18      	ldr	r3, [pc, #96]	@ (80069ac <_SendPacket+0x1c4>)
 800694c:	701a      	strb	r2, [r3, #0]
 800694e:	e004      	b.n	800695a <_SendPacket+0x172>
    goto SendDone;
 8006950:	bf00      	nop
 8006952:	e002      	b.n	800695a <_SendPacket+0x172>
      goto SendDone;
 8006954:	bf00      	nop
 8006956:	e000      	b.n	800695a <_SendPacket+0x172>
      goto SendDone;
 8006958:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800695a:	4b14      	ldr	r3, [pc, #80]	@ (80069ac <_SendPacket+0x1c4>)
 800695c:	7e1b      	ldrb	r3, [r3, #24]
 800695e:	4619      	mov	r1, r3
 8006960:	4a14      	ldr	r2, [pc, #80]	@ (80069b4 <_SendPacket+0x1cc>)
 8006962:	460b      	mov	r3, r1
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	440b      	add	r3, r1
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	4413      	add	r3, r2
 800696c:	336c      	adds	r3, #108	@ 0x6c
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	4b0e      	ldr	r3, [pc, #56]	@ (80069ac <_SendPacket+0x1c4>)
 8006972:	7e1b      	ldrb	r3, [r3, #24]
 8006974:	4618      	mov	r0, r3
 8006976:	490f      	ldr	r1, [pc, #60]	@ (80069b4 <_SendPacket+0x1cc>)
 8006978:	4603      	mov	r3, r0
 800697a:	005b      	lsls	r3, r3, #1
 800697c:	4403      	add	r3, r0
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	440b      	add	r3, r1
 8006982:	3370      	adds	r3, #112	@ 0x70
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d00b      	beq.n	80069a2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800698a:	4b08      	ldr	r3, [pc, #32]	@ (80069ac <_SendPacket+0x1c4>)
 800698c:	789b      	ldrb	r3, [r3, #2]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d107      	bne.n	80069a2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006992:	4b06      	ldr	r3, [pc, #24]	@ (80069ac <_SendPacket+0x1c4>)
 8006994:	2201      	movs	r2, #1
 8006996:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006998:	f7ff fe42 	bl	8006620 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800699c:	4b03      	ldr	r3, [pc, #12]	@ (80069ac <_SendPacket+0x1c4>)
 800699e:	2200      	movs	r2, #0
 80069a0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80069a2:	bf00      	nop
 80069a4:	3728      	adds	r7, #40	@ 0x28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	200143f4 	.word	0x200143f4
 80069b0:	e0001004 	.word	0xe0001004
 80069b4:	20012f34 	.word	0x20012f34

080069b8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08a      	sub	sp, #40	@ 0x28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	3301      	adds	r3, #1
 80069ce:	2b80      	cmp	r3, #128	@ 0x80
 80069d0:	d80a      	bhi.n	80069e8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	1c59      	adds	r1, r3, #1
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6051      	str	r1, [r2, #4]
 80069dc:	78fa      	ldrb	r2, [r7, #3]
 80069de:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	1c5a      	adds	r2, r3, #1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	2b80      	cmp	r3, #128	@ 0x80
 80069ee:	d15a      	bne.n	8006aa6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	623b      	str	r3, [r7, #32]
 8006a10:	e00b      	b.n	8006a2a <_StoreChar+0x72>
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	1c59      	adds	r1, r3, #1
 8006a1a:	6279      	str	r1, [r7, #36]	@ 0x24
 8006a1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a20:	b2d2      	uxtb	r2, r2
 8006a22:	701a      	strb	r2, [r3, #0]
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	09db      	lsrs	r3, r3, #7
 8006a28:	623b      	str	r3, [r7, #32]
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a2e:	d8f0      	bhi.n	8006a12 <_StoreChar+0x5a>
 8006a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a36:	6a3a      	ldr	r2, [r7, #32]
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	61fb      	str	r3, [r7, #28]
 8006a44:	2300      	movs	r3, #0
 8006a46:	61bb      	str	r3, [r7, #24]
 8006a48:	e00b      	b.n	8006a62 <_StoreChar+0xaa>
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	1c59      	adds	r1, r3, #1
 8006a52:	61f9      	str	r1, [r7, #28]
 8006a54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a58:	b2d2      	uxtb	r2, r2
 8006a5a:	701a      	strb	r2, [r3, #0]
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	09db      	lsrs	r3, r3, #7
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a66:	d8f0      	bhi.n	8006a4a <_StoreChar+0x92>
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	1c5a      	adds	r2, r3, #1
 8006a6c:	61fa      	str	r2, [r7, #28]
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	221a      	movs	r2, #26
 8006a7e:	6939      	ldr	r1, [r7, #16]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7ff feb1 	bl	80067e8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7ff fdbb 	bl	8006606 <_PreparePacket>
 8006a90:	4602      	mov	r2, r0
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	611a      	str	r2, [r3, #16]
  }
}
 8006aa6:	bf00      	nop
 8006aa8:	3728      	adds	r7, #40	@ 0x28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08a      	sub	sp, #40	@ 0x28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006aca:	e007      	b.n	8006adc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006acc:	6a3a      	ldr	r2, [r7, #32]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad4:	623b      	str	r3, [r7, #32]
    Width++;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006adc:	6a3a      	ldr	r2, [r7, #32]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d2f3      	bcs.n	8006acc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d901      	bls.n	8006af0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d000      	beq.n	8006afc <_PrintUnsigned+0x4c>
 8006afa:	e01f      	b.n	8006b3c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8006afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d01c      	beq.n	8006b3c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d005      	beq.n	8006b18 <_PrintUnsigned+0x68>
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d102      	bne.n	8006b18 <_PrintUnsigned+0x68>
        c = '0';
 8006b12:	2330      	movs	r3, #48	@ 0x30
 8006b14:	76fb      	strb	r3, [r7, #27]
 8006b16:	e001      	b.n	8006b1c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8006b18:	2320      	movs	r3, #32
 8006b1a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006b1c:	e007      	b.n	8006b2e <_PrintUnsigned+0x7e>
        FieldWidth--;
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b20:	3b01      	subs	r3, #1
 8006b22:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8006b24:	7efb      	ldrb	r3, [r7, #27]
 8006b26:	4619      	mov	r1, r3
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f7ff ff45 	bl	80069b8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <_PrintUnsigned+0x8c>
 8006b34:	69fa      	ldr	r2, [r7, #28]
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d3f0      	bcc.n	8006b1e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d903      	bls.n	8006b4a <_PrintUnsigned+0x9a>
      NumDigits--;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	e009      	b.n	8006b5e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b52:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d200      	bcs.n	8006b5e <_PrintUnsigned+0xae>
        break;
 8006b5c:	e005      	b.n	8006b6a <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	fb02 f303 	mul.w	r3, r2, r3
 8006b66:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006b68:	e7e8      	b.n	8006b3c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b72:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b78:	fb02 f303 	mul.w	r3, r2, r3
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006b82:	4a15      	ldr	r2, [pc, #84]	@ (8006bd8 <_PrintUnsigned+0x128>)
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	4413      	add	r3, r2
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f7ff ff13 	bl	80069b8 <_StoreChar>
    Digit /= Base;
 8006b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e3      	bne.n	8006b6a <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d011      	beq.n	8006bd0 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8006bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00e      	beq.n	8006bd0 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006bb2:	e006      	b.n	8006bc2 <_PrintUnsigned+0x112>
        FieldWidth--;
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8006bba:	2120      	movs	r1, #32
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f7ff fefb 	bl	80069b8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <_PrintUnsigned+0x120>
 8006bc8:	69fa      	ldr	r2, [r7, #28]
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d3f1      	bcc.n	8006bb4 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8006bd0:	bf00      	nop
 8006bd2:	3728      	adds	r7, #40	@ 0x28
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	080083ac 	.word	0x080083ac

08006bdc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af02      	add	r7, sp, #8
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bfb8      	it	lt
 8006bf0:	425b      	neglt	r3, r3
 8006bf2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006bf8:	e007      	b.n	8006c0a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8006c02:	613b      	str	r3, [r7, #16]
    Width++;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	3301      	adds	r3, #1
 8006c08:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	daf3      	bge.n	8006bfa <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d901      	bls.n	8006c1e <_PrintInt+0x42>
    Width = NumDigits;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00a      	beq.n	8006c3a <_PrintInt+0x5e>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	db04      	blt.n	8006c34 <_PrintInt+0x58>
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <_PrintInt+0x5e>
    FieldWidth--;
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <_PrintInt+0x6e>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d016      	beq.n	8006c78 <_PrintInt+0x9c>
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d111      	bne.n	8006c78 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00e      	beq.n	8006c78 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006c5a:	e006      	b.n	8006c6a <_PrintInt+0x8e>
        FieldWidth--;
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006c62:	2120      	movs	r1, #32
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f7ff fea7 	bl	80069b8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <_PrintInt+0x9c>
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d3f1      	bcc.n	8006c5c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	da07      	bge.n	8006c8e <_PrintInt+0xb2>
    v = -v;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	425b      	negs	r3, r3
 8006c82:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006c84:	212d      	movs	r1, #45	@ 0x2d
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f7ff fe96 	bl	80069b8 <_StoreChar>
 8006c8c:	e008      	b.n	8006ca0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006c98:	212b      	movs	r1, #43	@ 0x2b
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f7ff fe8c 	bl	80069b8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d019      	beq.n	8006cde <_PrintInt+0x102>
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d114      	bne.n	8006cde <_PrintInt+0x102>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d111      	bne.n	8006cde <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00e      	beq.n	8006cde <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006cc0:	e006      	b.n	8006cd0 <_PrintInt+0xf4>
        FieldWidth--;
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006cc8:	2130      	movs	r1, #48	@ 0x30
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f7ff fe74 	bl	80069b8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <_PrintInt+0x102>
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d3f1      	bcc.n	8006cc2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce2:	9301      	str	r3, [sp, #4]
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f7ff fedf 	bl	8006ab0 <_PrintUnsigned>
}
 8006cf2:	bf00      	nop
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
	...

08006cfc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b098      	sub	sp, #96	@ 0x60
 8006d00:	af02      	add	r7, sp, #8
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d08:	f3ef 8311 	mrs	r3, BASEPRI
 8006d0c:	f04f 0120 	mov.w	r1, #32
 8006d10:	f381 8811 	msr	BASEPRI, r1
 8006d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d16:	48b7      	ldr	r0, [pc, #732]	@ (8006ff4 <_VPrintTarget+0x2f8>)
 8006d18:	f7ff fc75 	bl	8006606 <_PreparePacket>
 8006d1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006d1e:	4bb5      	ldr	r3, [pc, #724]	@ (8006ff4 <_VPrintTarget+0x2f8>)
 8006d20:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8006d22:	2300      	movs	r3, #0
 8006d24:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d28:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006d42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 8183 	beq.w	8007052 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006d4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d50:	2b25      	cmp	r3, #37	@ 0x25
 8006d52:	f040 8170 	bne.w	8007036 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006d56:	2300      	movs	r3, #0
 8006d58:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8006d66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d6a:	3b23      	subs	r3, #35	@ 0x23
 8006d6c:	2b0d      	cmp	r3, #13
 8006d6e:	d83f      	bhi.n	8006df0 <_VPrintTarget+0xf4>
 8006d70:	a201      	add	r2, pc, #4	@ (adr r2, 8006d78 <_VPrintTarget+0x7c>)
 8006d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d76:	bf00      	nop
 8006d78:	08006de1 	.word	0x08006de1
 8006d7c:	08006df1 	.word	0x08006df1
 8006d80:	08006df1 	.word	0x08006df1
 8006d84:	08006df1 	.word	0x08006df1
 8006d88:	08006df1 	.word	0x08006df1
 8006d8c:	08006df1 	.word	0x08006df1
 8006d90:	08006df1 	.word	0x08006df1
 8006d94:	08006df1 	.word	0x08006df1
 8006d98:	08006dd1 	.word	0x08006dd1
 8006d9c:	08006df1 	.word	0x08006df1
 8006da0:	08006db1 	.word	0x08006db1
 8006da4:	08006df1 	.word	0x08006df1
 8006da8:	08006df1 	.word	0x08006df1
 8006dac:	08006dc1 	.word	0x08006dc1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006db0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006db2:	f043 0301 	orr.w	r3, r3, #1
 8006db6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	e01a      	b.n	8006df6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006dc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dc2:	f043 0302 	orr.w	r3, r3, #2
 8006dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	e012      	b.n	8006df6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006dd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dd2:	f043 0304 	orr.w	r3, r3, #4
 8006dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	e00a      	b.n	8006df6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006de0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006de2:	f043 0308 	orr.w	r3, r3, #8
 8006de6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	3301      	adds	r3, #1
 8006dec:	60fb      	str	r3, [r7, #12]
 8006dee:	e002      	b.n	8006df6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006df0:	2300      	movs	r3, #0
 8006df2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006df4:	bf00      	nop
        }
      } while (v);
 8006df6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1b0      	bne.n	8006d5e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006e08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006e0e:	d912      	bls.n	8006e36 <_VPrintTarget+0x13a>
 8006e10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e14:	2b39      	cmp	r3, #57	@ 0x39
 8006e16:	d80e      	bhi.n	8006e36 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006e1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	461a      	mov	r2, r3
 8006e2a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e2e:	4413      	add	r3, r2
 8006e30:	3b30      	subs	r3, #48	@ 0x30
 8006e32:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006e34:	e7e4      	b.n	8006e00 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006e36:	2300      	movs	r3, #0
 8006e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8006e42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e46:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e48:	d11d      	bne.n	8006e86 <_VPrintTarget+0x18a>
        sFormat++;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006e58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006e5e:	d912      	bls.n	8006e86 <_VPrintTarget+0x18a>
 8006e60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e64:	2b39      	cmp	r3, #57	@ 0x39
 8006e66:	d80e      	bhi.n	8006e86 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006e6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e70:	4613      	mov	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	461a      	mov	r2, r3
 8006e7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e7e:	4413      	add	r3, r2
 8006e80:	3b30      	subs	r3, #48	@ 0x30
 8006e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8006e84:	e7e4      	b.n	8006e50 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006e8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e92:	2b6c      	cmp	r3, #108	@ 0x6c
 8006e94:	d003      	beq.n	8006e9e <_VPrintTarget+0x1a2>
 8006e96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e9a:	2b68      	cmp	r3, #104	@ 0x68
 8006e9c:	d107      	bne.n	8006eae <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006eac:	e7ef      	b.n	8006e8e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006eae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006eb2:	2b25      	cmp	r3, #37	@ 0x25
 8006eb4:	f000 80b3 	beq.w	800701e <_VPrintTarget+0x322>
 8006eb8:	2b25      	cmp	r3, #37	@ 0x25
 8006eba:	f2c0 80b7 	blt.w	800702c <_VPrintTarget+0x330>
 8006ebe:	2b78      	cmp	r3, #120	@ 0x78
 8006ec0:	f300 80b4 	bgt.w	800702c <_VPrintTarget+0x330>
 8006ec4:	2b58      	cmp	r3, #88	@ 0x58
 8006ec6:	f2c0 80b1 	blt.w	800702c <_VPrintTarget+0x330>
 8006eca:	3b58      	subs	r3, #88	@ 0x58
 8006ecc:	2b20      	cmp	r3, #32
 8006ece:	f200 80ad 	bhi.w	800702c <_VPrintTarget+0x330>
 8006ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed8 <_VPrintTarget+0x1dc>)
 8006ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed8:	08006fcf 	.word	0x08006fcf
 8006edc:	0800702d 	.word	0x0800702d
 8006ee0:	0800702d 	.word	0x0800702d
 8006ee4:	0800702d 	.word	0x0800702d
 8006ee8:	0800702d 	.word	0x0800702d
 8006eec:	0800702d 	.word	0x0800702d
 8006ef0:	0800702d 	.word	0x0800702d
 8006ef4:	0800702d 	.word	0x0800702d
 8006ef8:	0800702d 	.word	0x0800702d
 8006efc:	0800702d 	.word	0x0800702d
 8006f00:	0800702d 	.word	0x0800702d
 8006f04:	08006f5d 	.word	0x08006f5d
 8006f08:	08006f83 	.word	0x08006f83
 8006f0c:	0800702d 	.word	0x0800702d
 8006f10:	0800702d 	.word	0x0800702d
 8006f14:	0800702d 	.word	0x0800702d
 8006f18:	0800702d 	.word	0x0800702d
 8006f1c:	0800702d 	.word	0x0800702d
 8006f20:	0800702d 	.word	0x0800702d
 8006f24:	0800702d 	.word	0x0800702d
 8006f28:	0800702d 	.word	0x0800702d
 8006f2c:	0800702d 	.word	0x0800702d
 8006f30:	0800702d 	.word	0x0800702d
 8006f34:	0800702d 	.word	0x0800702d
 8006f38:	08006ff9 	.word	0x08006ff9
 8006f3c:	0800702d 	.word	0x0800702d
 8006f40:	0800702d 	.word	0x0800702d
 8006f44:	0800702d 	.word	0x0800702d
 8006f48:	0800702d 	.word	0x0800702d
 8006f4c:	08006fa9 	.word	0x08006fa9
 8006f50:	0800702d 	.word	0x0800702d
 8006f54:	0800702d 	.word	0x0800702d
 8006f58:	08006fcf 	.word	0x08006fcf
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	1d19      	adds	r1, r3, #4
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	6011      	str	r1, [r2, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8006f70:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8006f74:	f107 0314 	add.w	r3, r7, #20
 8006f78:	4611      	mov	r1, r2
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff fd1c 	bl	80069b8 <_StoreChar>
        break;
 8006f80:	e055      	b.n	800702e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	1d19      	adds	r1, r3, #4
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6011      	str	r1, [r2, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006f90:	f107 0014 	add.w	r0, r7, #20
 8006f94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f9e:	220a      	movs	r2, #10
 8006fa0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006fa2:	f7ff fe1b 	bl	8006bdc <_PrintInt>
        break;
 8006fa6:	e042      	b.n	800702e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	1d19      	adds	r1, r3, #4
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6011      	str	r1, [r2, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006fb6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006fb8:	f107 0014 	add.w	r0, r7, #20
 8006fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fbe:	9301      	str	r3, [sp, #4]
 8006fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fc6:	220a      	movs	r2, #10
 8006fc8:	f7ff fd72 	bl	8006ab0 <_PrintUnsigned>
        break;
 8006fcc:	e02f      	b.n	800702e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	1d19      	adds	r1, r3, #4
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6011      	str	r1, [r2, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006fdc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006fde:	f107 0014 	add.w	r0, r7, #20
 8006fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fe4:	9301      	str	r3, [sp, #4]
 8006fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fec:	2210      	movs	r2, #16
 8006fee:	f7ff fd5f 	bl	8006ab0 <_PrintUnsigned>
        break;
 8006ff2:	e01c      	b.n	800702e <_VPrintTarget+0x332>
 8006ff4:	20014424 	.word	0x20014424
      case 'p':
        v = va_arg(*pParamList, int);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	1d19      	adds	r1, r3, #4
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6011      	str	r1, [r2, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8007006:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007008:	f107 0014 	add.w	r0, r7, #20
 800700c:	2300      	movs	r3, #0
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	2308      	movs	r3, #8
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	2308      	movs	r3, #8
 8007016:	2210      	movs	r2, #16
 8007018:	f7ff fd4a 	bl	8006ab0 <_PrintUnsigned>
        break;
 800701c:	e007      	b.n	800702e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800701e:	f107 0314 	add.w	r3, r7, #20
 8007022:	2125      	movs	r1, #37	@ 0x25
 8007024:	4618      	mov	r0, r3
 8007026:	f7ff fcc7 	bl	80069b8 <_StoreChar>
        break;
 800702a:	e000      	b.n	800702e <_VPrintTarget+0x332>
      default:
        break;
 800702c:	bf00      	nop
      }
      sFormat++;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3301      	adds	r3, #1
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	e007      	b.n	8007046 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8007036:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800703a:	f107 0314 	add.w	r3, r7, #20
 800703e:	4611      	mov	r1, r2
 8007040:	4618      	mov	r0, r3
 8007042:	f7ff fcb9 	bl	80069b8 <_StoreChar>
    }
  } while (*sFormat);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	f47f ae72 	bne.w	8006d34 <_VPrintTarget+0x38>
 8007050:	e000      	b.n	8007054 <_VPrintTarget+0x358>
      break;
 8007052:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8007054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007056:	2b00      	cmp	r3, #0
 8007058:	d041      	beq.n	80070de <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800705a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	643b      	str	r3, [r7, #64]	@ 0x40
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800706a:	e00b      	b.n	8007084 <_VPrintTarget+0x388>
 800706c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800706e:	b2da      	uxtb	r2, r3
 8007070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007072:	1c59      	adds	r1, r3, #1
 8007074:	6439      	str	r1, [r7, #64]	@ 0x40
 8007076:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	701a      	strb	r2, [r3, #0]
 800707e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007080:	09db      	lsrs	r3, r3, #7
 8007082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007086:	2b7f      	cmp	r3, #127	@ 0x7f
 8007088:	d8f0      	bhi.n	800706c <_VPrintTarget+0x370>
 800708a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800708c:	1c5a      	adds	r2, r3, #1
 800708e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007090:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007098:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800709e:	2300      	movs	r3, #0
 80070a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a2:	e00b      	b.n	80070bc <_VPrintTarget+0x3c0>
 80070a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070aa:	1c59      	adds	r1, r3, #1
 80070ac:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b8:	09db      	lsrs	r3, r3, #7
 80070ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80070bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070be:	2b7f      	cmp	r3, #127	@ 0x7f
 80070c0:	d8f0      	bhi.n	80070a4 <_VPrintTarget+0x3a8>
 80070c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80070c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	69b9      	ldr	r1, [r7, #24]
 80070d6:	221a      	movs	r2, #26
 80070d8:	4618      	mov	r0, r3
 80070da:	f7ff fb85 	bl	80067e8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80070de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80070e4:	bf00      	nop
 80070e6:	3758      	adds	r7, #88	@ 0x58
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af02      	add	r7, sp, #8
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80070fa:	2300      	movs	r3, #0
 80070fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007100:	4917      	ldr	r1, [pc, #92]	@ (8007160 <SEGGER_SYSVIEW_Init+0x74>)
 8007102:	4818      	ldr	r0, [pc, #96]	@ (8007164 <SEGGER_SYSVIEW_Init+0x78>)
 8007104:	f7ff f93e 	bl	8006384 <SEGGER_RTT_AllocUpBuffer>
 8007108:	4603      	mov	r3, r0
 800710a:	b2da      	uxtb	r2, r3
 800710c:	4b16      	ldr	r3, [pc, #88]	@ (8007168 <SEGGER_SYSVIEW_Init+0x7c>)
 800710e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007110:	4b15      	ldr	r3, [pc, #84]	@ (8007168 <SEGGER_SYSVIEW_Init+0x7c>)
 8007112:	785a      	ldrb	r2, [r3, #1]
 8007114:	4b14      	ldr	r3, [pc, #80]	@ (8007168 <SEGGER_SYSVIEW_Init+0x7c>)
 8007116:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007118:	4b13      	ldr	r3, [pc, #76]	@ (8007168 <SEGGER_SYSVIEW_Init+0x7c>)
 800711a:	7e1b      	ldrb	r3, [r3, #24]
 800711c:	4618      	mov	r0, r3
 800711e:	2300      	movs	r3, #0
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	2308      	movs	r3, #8
 8007124:	4a11      	ldr	r2, [pc, #68]	@ (800716c <SEGGER_SYSVIEW_Init+0x80>)
 8007126:	490f      	ldr	r1, [pc, #60]	@ (8007164 <SEGGER_SYSVIEW_Init+0x78>)
 8007128:	f7ff f9b0 	bl	800648c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800712c:	4b0e      	ldr	r3, [pc, #56]	@ (8007168 <SEGGER_SYSVIEW_Init+0x7c>)
 800712e:	2200      	movs	r2, #0
 8007130:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007132:	4b0f      	ldr	r3, [pc, #60]	@ (8007170 <SEGGER_SYSVIEW_Init+0x84>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a0c      	ldr	r2, [pc, #48]	@ (8007168 <SEGGER_SYSVIEW_Init+0x7c>)
 8007138:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800713a:	4a0b      	ldr	r2, [pc, #44]	@ (8007168 <SEGGER_SYSVIEW_Init+0x7c>)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007140:	4a09      	ldr	r2, [pc, #36]	@ (8007168 <SEGGER_SYSVIEW_Init+0x7c>)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8007146:	4a08      	ldr	r2, [pc, #32]	@ (8007168 <SEGGER_SYSVIEW_Init+0x7c>)
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800714c:	4a06      	ldr	r2, [pc, #24]	@ (8007168 <SEGGER_SYSVIEW_Init+0x7c>)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007152:	4b05      	ldr	r3, [pc, #20]	@ (8007168 <SEGGER_SYSVIEW_Init+0x7c>)
 8007154:	2200      	movs	r2, #0
 8007156:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8007158:	bf00      	nop
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	200133ec 	.word	0x200133ec
 8007164:	08008374 	.word	0x08008374
 8007168:	200143f4 	.word	0x200143f4
 800716c:	200143ec 	.word	0x200143ec
 8007170:	e0001004 	.word	0xe0001004

08007174 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800717c:	4a04      	ldr	r2, [pc, #16]	@ (8007190 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6113      	str	r3, [r2, #16]
}
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	200143f4 	.word	0x200143f4

08007194 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800719c:	f3ef 8311 	mrs	r3, BASEPRI
 80071a0:	f04f 0120 	mov.w	r1, #32
 80071a4:	f381 8811 	msr	BASEPRI, r1
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	4808      	ldr	r0, [pc, #32]	@ (80071cc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80071ac:	f7ff fa2b 	bl	8006606 <_PreparePacket>
 80071b0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	68b9      	ldr	r1, [r7, #8]
 80071b6:	68b8      	ldr	r0, [r7, #8]
 80071b8:	f7ff fb16 	bl	80067e8 <_SendPacket>
  RECORD_END();
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f383 8811 	msr	BASEPRI, r3
}
 80071c2:	bf00      	nop
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	20014424 	.word	0x20014424

080071d0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b088      	sub	sp, #32
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80071da:	f3ef 8311 	mrs	r3, BASEPRI
 80071de:	f04f 0120 	mov.w	r1, #32
 80071e2:	f381 8811 	msr	BASEPRI, r1
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	4816      	ldr	r0, [pc, #88]	@ (8007244 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80071ea:	f7ff fa0c 	bl	8006606 <_PreparePacket>
 80071ee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	61fb      	str	r3, [r7, #28]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	61bb      	str	r3, [r7, #24]
 80071fc:	e00b      	b.n	8007216 <SEGGER_SYSVIEW_RecordU32+0x46>
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	b2da      	uxtb	r2, r3
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	1c59      	adds	r1, r3, #1
 8007206:	61f9      	str	r1, [r7, #28]
 8007208:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800720c:	b2d2      	uxtb	r2, r2
 800720e:	701a      	strb	r2, [r3, #0]
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	09db      	lsrs	r3, r3, #7
 8007214:	61bb      	str	r3, [r7, #24]
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	2b7f      	cmp	r3, #127	@ 0x7f
 800721a:	d8f0      	bhi.n	80071fe <SEGGER_SYSVIEW_RecordU32+0x2e>
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	1c5a      	adds	r2, r3, #1
 8007220:	61fa      	str	r2, [r7, #28]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	b2d2      	uxtb	r2, r2
 8007226:	701a      	strb	r2, [r3, #0]
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	68f9      	ldr	r1, [r7, #12]
 8007230:	6938      	ldr	r0, [r7, #16]
 8007232:	f7ff fad9 	bl	80067e8 <_SendPacket>
  RECORD_END();
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f383 8811 	msr	BASEPRI, r3
}
 800723c:	bf00      	nop
 800723e:	3720      	adds	r7, #32
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	20014424 	.word	0x20014424

08007248 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007248:	b580      	push	{r7, lr}
 800724a:	b08c      	sub	sp, #48	@ 0x30
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007254:	f3ef 8311 	mrs	r3, BASEPRI
 8007258:	f04f 0120 	mov.w	r1, #32
 800725c:	f381 8811 	msr	BASEPRI, r1
 8007260:	61fb      	str	r3, [r7, #28]
 8007262:	4825      	ldr	r0, [pc, #148]	@ (80072f8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007264:	f7ff f9cf 	bl	8006606 <_PreparePacket>
 8007268:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007276:	e00b      	b.n	8007290 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727a:	b2da      	uxtb	r2, r3
 800727c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727e:	1c59      	adds	r1, r3, #1
 8007280:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007282:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	701a      	strb	r2, [r3, #0]
 800728a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728c:	09db      	lsrs	r3, r3, #7
 800728e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007292:	2b7f      	cmp	r3, #127	@ 0x7f
 8007294:	d8f0      	bhi.n	8007278 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800729c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	701a      	strb	r2, [r3, #0]
 80072a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	623b      	str	r3, [r7, #32]
 80072ae:	e00b      	b.n	80072c8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b6:	1c59      	adds	r1, r3, #1
 80072b8:	6279      	str	r1, [r7, #36]	@ 0x24
 80072ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	09db      	lsrs	r3, r3, #7
 80072c6:	623b      	str	r3, [r7, #32]
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80072cc:	d8f0      	bhi.n	80072b0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80072d4:	6a3a      	ldr	r2, [r7, #32]
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	701a      	strb	r2, [r3, #0]
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072dc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	6979      	ldr	r1, [r7, #20]
 80072e2:	69b8      	ldr	r0, [r7, #24]
 80072e4:	f7ff fa80 	bl	80067e8 <_SendPacket>
  RECORD_END();
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	f383 8811 	msr	BASEPRI, r3
}
 80072ee:	bf00      	nop
 80072f0:	3730      	adds	r7, #48	@ 0x30
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20014424 	.word	0x20014424

080072fc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08e      	sub	sp, #56	@ 0x38
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800730a:	f3ef 8311 	mrs	r3, BASEPRI
 800730e:	f04f 0120 	mov.w	r1, #32
 8007312:	f381 8811 	msr	BASEPRI, r1
 8007316:	61fb      	str	r3, [r7, #28]
 8007318:	4832      	ldr	r0, [pc, #200]	@ (80073e4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800731a:	f7ff f974 	bl	8006606 <_PreparePacket>
 800731e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	637b      	str	r3, [r7, #52]	@ 0x34
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	633b      	str	r3, [r7, #48]	@ 0x30
 800732c:	e00b      	b.n	8007346 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800732e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007330:	b2da      	uxtb	r2, r3
 8007332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007334:	1c59      	adds	r1, r3, #1
 8007336:	6379      	str	r1, [r7, #52]	@ 0x34
 8007338:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800733c:	b2d2      	uxtb	r2, r2
 800733e:	701a      	strb	r2, [r3, #0]
 8007340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007342:	09db      	lsrs	r3, r3, #7
 8007344:	633b      	str	r3, [r7, #48]	@ 0x30
 8007346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007348:	2b7f      	cmp	r3, #127	@ 0x7f
 800734a:	d8f0      	bhi.n	800732e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800734c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	637a      	str	r2, [r7, #52]	@ 0x34
 8007352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007354:	b2d2      	uxtb	r2, r2
 8007356:	701a      	strb	r2, [r3, #0]
 8007358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800735a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007364:	e00b      	b.n	800737e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8007366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007368:	b2da      	uxtb	r2, r3
 800736a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736c:	1c59      	adds	r1, r3, #1
 800736e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007370:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007374:	b2d2      	uxtb	r2, r2
 8007376:	701a      	strb	r2, [r3, #0]
 8007378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737a:	09db      	lsrs	r3, r3, #7
 800737c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800737e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007380:	2b7f      	cmp	r3, #127	@ 0x7f
 8007382:	d8f0      	bhi.n	8007366 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800738a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800738c:	b2d2      	uxtb	r2, r2
 800738e:	701a      	strb	r2, [r3, #0]
 8007390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007392:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	627b      	str	r3, [r7, #36]	@ 0x24
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	623b      	str	r3, [r7, #32]
 800739c:	e00b      	b.n	80073b6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a4:	1c59      	adds	r1, r3, #1
 80073a6:	6279      	str	r1, [r7, #36]	@ 0x24
 80073a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073ac:	b2d2      	uxtb	r2, r2
 80073ae:	701a      	strb	r2, [r3, #0]
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	09db      	lsrs	r3, r3, #7
 80073b4:	623b      	str	r3, [r7, #32]
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80073ba:	d8f0      	bhi.n	800739e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80073bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073be:	1c5a      	adds	r2, r3, #1
 80073c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80073c2:	6a3a      	ldr	r2, [r7, #32]
 80073c4:	b2d2      	uxtb	r2, r2
 80073c6:	701a      	strb	r2, [r3, #0]
 80073c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	6979      	ldr	r1, [r7, #20]
 80073d0:	69b8      	ldr	r0, [r7, #24]
 80073d2:	f7ff fa09 	bl	80067e8 <_SendPacket>
  RECORD_END();
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	f383 8811 	msr	BASEPRI, r3
}
 80073dc:	bf00      	nop
 80073de:	3738      	adds	r7, #56	@ 0x38
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	20014424 	.word	0x20014424

080073e8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b090      	sub	sp, #64	@ 0x40
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80073f6:	f3ef 8311 	mrs	r3, BASEPRI
 80073fa:	f04f 0120 	mov.w	r1, #32
 80073fe:	f381 8811 	msr	BASEPRI, r1
 8007402:	61fb      	str	r3, [r7, #28]
 8007404:	4840      	ldr	r0, [pc, #256]	@ (8007508 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007406:	f7ff f8fe 	bl	8006606 <_PreparePacket>
 800740a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007418:	e00b      	b.n	8007432 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800741a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741c:	b2da      	uxtb	r2, r3
 800741e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007420:	1c59      	adds	r1, r3, #1
 8007422:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8007424:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007428:	b2d2      	uxtb	r2, r2
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742e:	09db      	lsrs	r3, r3, #7
 8007430:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007434:	2b7f      	cmp	r3, #127	@ 0x7f
 8007436:	d8f0      	bhi.n	800741a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800743e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007440:	b2d2      	uxtb	r2, r2
 8007442:	701a      	strb	r2, [r3, #0]
 8007444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007446:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	637b      	str	r3, [r7, #52]	@ 0x34
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007450:	e00b      	b.n	800746a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007454:	b2da      	uxtb	r2, r3
 8007456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007458:	1c59      	adds	r1, r3, #1
 800745a:	6379      	str	r1, [r7, #52]	@ 0x34
 800745c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007460:	b2d2      	uxtb	r2, r2
 8007462:	701a      	strb	r2, [r3, #0]
 8007464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007466:	09db      	lsrs	r3, r3, #7
 8007468:	633b      	str	r3, [r7, #48]	@ 0x30
 800746a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746c:	2b7f      	cmp	r3, #127	@ 0x7f
 800746e:	d8f0      	bhi.n	8007452 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	637a      	str	r2, [r7, #52]	@ 0x34
 8007476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007478:	b2d2      	uxtb	r2, r2
 800747a:	701a      	strb	r2, [r3, #0]
 800747c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800747e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007488:	e00b      	b.n	80074a2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800748a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748c:	b2da      	uxtb	r2, r3
 800748e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007490:	1c59      	adds	r1, r3, #1
 8007492:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007494:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007498:	b2d2      	uxtb	r2, r2
 800749a:	701a      	strb	r2, [r3, #0]
 800749c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749e:	09db      	lsrs	r3, r3, #7
 80074a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80074a6:	d8f0      	bhi.n	800748a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80074a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074b0:	b2d2      	uxtb	r2, r2
 80074b2:	701a      	strb	r2, [r3, #0]
 80074b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80074bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074be:	623b      	str	r3, [r7, #32]
 80074c0:	e00b      	b.n	80074da <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c8:	1c59      	adds	r1, r3, #1
 80074ca:	6279      	str	r1, [r7, #36]	@ 0x24
 80074cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074d0:	b2d2      	uxtb	r2, r2
 80074d2:	701a      	strb	r2, [r3, #0]
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	09db      	lsrs	r3, r3, #7
 80074d8:	623b      	str	r3, [r7, #32]
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80074de:	d8f0      	bhi.n	80074c2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80074e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80074e6:	6a3a      	ldr	r2, [r7, #32]
 80074e8:	b2d2      	uxtb	r2, r2
 80074ea:	701a      	strb	r2, [r3, #0]
 80074ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ee:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	6979      	ldr	r1, [r7, #20]
 80074f4:	69b8      	ldr	r0, [r7, #24]
 80074f6:	f7ff f977 	bl	80067e8 <_SendPacket>
  RECORD_END();
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	f383 8811 	msr	BASEPRI, r3
}
 8007500:	bf00      	nop
 8007502:	3740      	adds	r7, #64	@ 0x40
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	20014424 	.word	0x20014424

0800750c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800750c:	b580      	push	{r7, lr}
 800750e:	b08c      	sub	sp, #48	@ 0x30
 8007510:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007512:	4b59      	ldr	r3, [pc, #356]	@ (8007678 <SEGGER_SYSVIEW_Start+0x16c>)
 8007514:	2201      	movs	r2, #1
 8007516:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007518:	f3ef 8311 	mrs	r3, BASEPRI
 800751c:	f04f 0120 	mov.w	r1, #32
 8007520:	f381 8811 	msr	BASEPRI, r1
 8007524:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007526:	4b54      	ldr	r3, [pc, #336]	@ (8007678 <SEGGER_SYSVIEW_Start+0x16c>)
 8007528:	785b      	ldrb	r3, [r3, #1]
 800752a:	220a      	movs	r2, #10
 800752c:	4953      	ldr	r1, [pc, #332]	@ (800767c <SEGGER_SYSVIEW_Start+0x170>)
 800752e:	4618      	mov	r0, r3
 8007530:	f7f8 fe4e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800753a:	f7fe fbf7 	bl	8005d2c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800753e:	200a      	movs	r0, #10
 8007540:	f7ff fe28 	bl	8007194 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007544:	f3ef 8311 	mrs	r3, BASEPRI
 8007548:	f04f 0120 	mov.w	r1, #32
 800754c:	f381 8811 	msr	BASEPRI, r1
 8007550:	60bb      	str	r3, [r7, #8]
 8007552:	484b      	ldr	r0, [pc, #300]	@ (8007680 <SEGGER_SYSVIEW_Start+0x174>)
 8007554:	f7ff f857 	bl	8006606 <_PreparePacket>
 8007558:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007562:	4b45      	ldr	r3, [pc, #276]	@ (8007678 <SEGGER_SYSVIEW_Start+0x16c>)
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007568:	e00b      	b.n	8007582 <SEGGER_SYSVIEW_Start+0x76>
 800756a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756c:	b2da      	uxtb	r2, r3
 800756e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007570:	1c59      	adds	r1, r3, #1
 8007572:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007574:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007578:	b2d2      	uxtb	r2, r2
 800757a:	701a      	strb	r2, [r3, #0]
 800757c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757e:	09db      	lsrs	r3, r3, #7
 8007580:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007584:	2b7f      	cmp	r3, #127	@ 0x7f
 8007586:	d8f0      	bhi.n	800756a <SEGGER_SYSVIEW_Start+0x5e>
 8007588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800758e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007590:	b2d2      	uxtb	r2, r2
 8007592:	701a      	strb	r2, [r3, #0]
 8007594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007596:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	627b      	str	r3, [r7, #36]	@ 0x24
 800759c:	4b36      	ldr	r3, [pc, #216]	@ (8007678 <SEGGER_SYSVIEW_Start+0x16c>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	623b      	str	r3, [r7, #32]
 80075a2:	e00b      	b.n	80075bc <SEGGER_SYSVIEW_Start+0xb0>
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075aa:	1c59      	adds	r1, r3, #1
 80075ac:	6279      	str	r1, [r7, #36]	@ 0x24
 80075ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075b2:	b2d2      	uxtb	r2, r2
 80075b4:	701a      	strb	r2, [r3, #0]
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	09db      	lsrs	r3, r3, #7
 80075ba:	623b      	str	r3, [r7, #32]
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	2b7f      	cmp	r3, #127	@ 0x7f
 80075c0:	d8f0      	bhi.n	80075a4 <SEGGER_SYSVIEW_Start+0x98>
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80075c8:	6a3a      	ldr	r2, [r7, #32]
 80075ca:	b2d2      	uxtb	r2, r2
 80075cc:	701a      	strb	r2, [r3, #0]
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	61fb      	str	r3, [r7, #28]
 80075d6:	4b28      	ldr	r3, [pc, #160]	@ (8007678 <SEGGER_SYSVIEW_Start+0x16c>)
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	61bb      	str	r3, [r7, #24]
 80075dc:	e00b      	b.n	80075f6 <SEGGER_SYSVIEW_Start+0xea>
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	1c59      	adds	r1, r3, #1
 80075e6:	61f9      	str	r1, [r7, #28]
 80075e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075ec:	b2d2      	uxtb	r2, r2
 80075ee:	701a      	strb	r2, [r3, #0]
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	09db      	lsrs	r3, r3, #7
 80075f4:	61bb      	str	r3, [r7, #24]
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80075fa:	d8f0      	bhi.n	80075de <SEGGER_SYSVIEW_Start+0xd2>
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	61fa      	str	r2, [r7, #28]
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	b2d2      	uxtb	r2, r2
 8007606:	701a      	strb	r2, [r3, #0]
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	617b      	str	r3, [r7, #20]
 8007610:	2300      	movs	r3, #0
 8007612:	613b      	str	r3, [r7, #16]
 8007614:	e00b      	b.n	800762e <SEGGER_SYSVIEW_Start+0x122>
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	b2da      	uxtb	r2, r3
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	1c59      	adds	r1, r3, #1
 800761e:	6179      	str	r1, [r7, #20]
 8007620:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007624:	b2d2      	uxtb	r2, r2
 8007626:	701a      	strb	r2, [r3, #0]
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	09db      	lsrs	r3, r3, #7
 800762c:	613b      	str	r3, [r7, #16]
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	2b7f      	cmp	r3, #127	@ 0x7f
 8007632:	d8f0      	bhi.n	8007616 <SEGGER_SYSVIEW_Start+0x10a>
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	617a      	str	r2, [r7, #20]
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	b2d2      	uxtb	r2, r2
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007644:	2218      	movs	r2, #24
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7ff f8cd 	bl	80067e8 <_SendPacket>
      RECORD_END();
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007654:	4b08      	ldr	r3, [pc, #32]	@ (8007678 <SEGGER_SYSVIEW_Start+0x16c>)
 8007656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800765c:	4b06      	ldr	r3, [pc, #24]	@ (8007678 <SEGGER_SYSVIEW_Start+0x16c>)
 800765e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007660:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007662:	f000 f9eb 	bl	8007a3c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007666:	f000 f9b1 	bl	80079cc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800766a:	f000 fc83 	bl	8007f74 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800766e:	bf00      	nop
 8007670:	3730      	adds	r7, #48	@ 0x30
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	200143f4 	.word	0x200143f4
 800767c:	080083a0 	.word	0x080083a0
 8007680:	20014424 	.word	0x20014424

08007684 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800768a:	f3ef 8311 	mrs	r3, BASEPRI
 800768e:	f04f 0120 	mov.w	r1, #32
 8007692:	f381 8811 	msr	BASEPRI, r1
 8007696:	607b      	str	r3, [r7, #4]
 8007698:	480b      	ldr	r0, [pc, #44]	@ (80076c8 <SEGGER_SYSVIEW_Stop+0x44>)
 800769a:	f7fe ffb4 	bl	8006606 <_PreparePacket>
 800769e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80076a0:	4b0a      	ldr	r3, [pc, #40]	@ (80076cc <SEGGER_SYSVIEW_Stop+0x48>)
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d007      	beq.n	80076b8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80076a8:	220b      	movs	r2, #11
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6838      	ldr	r0, [r7, #0]
 80076ae:	f7ff f89b 	bl	80067e8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80076b2:	4b06      	ldr	r3, [pc, #24]	@ (80076cc <SEGGER_SYSVIEW_Stop+0x48>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f383 8811 	msr	BASEPRI, r3
}
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20014424 	.word	0x20014424
 80076cc:	200143f4 	.word	0x200143f4

080076d0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08c      	sub	sp, #48	@ 0x30
 80076d4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80076d6:	f3ef 8311 	mrs	r3, BASEPRI
 80076da:	f04f 0120 	mov.w	r1, #32
 80076de:	f381 8811 	msr	BASEPRI, r1
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	4845      	ldr	r0, [pc, #276]	@ (80077fc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80076e6:	f7fe ff8e 	bl	8006606 <_PreparePacket>
 80076ea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076f4:	4b42      	ldr	r3, [pc, #264]	@ (8007800 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076fa:	e00b      	b.n	8007714 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80076fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007702:	1c59      	adds	r1, r3, #1
 8007704:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007706:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800770a:	b2d2      	uxtb	r2, r2
 800770c:	701a      	strb	r2, [r3, #0]
 800770e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007710:	09db      	lsrs	r3, r3, #7
 8007712:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007716:	2b7f      	cmp	r3, #127	@ 0x7f
 8007718:	d8f0      	bhi.n	80076fc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800771a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800771c:	1c5a      	adds	r2, r3, #1
 800771e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007720:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007728:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	627b      	str	r3, [r7, #36]	@ 0x24
 800772e:	4b34      	ldr	r3, [pc, #208]	@ (8007800 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	623b      	str	r3, [r7, #32]
 8007734:	e00b      	b.n	800774e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	b2da      	uxtb	r2, r3
 800773a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773c:	1c59      	adds	r1, r3, #1
 800773e:	6279      	str	r1, [r7, #36]	@ 0x24
 8007740:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007744:	b2d2      	uxtb	r2, r2
 8007746:	701a      	strb	r2, [r3, #0]
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	09db      	lsrs	r3, r3, #7
 800774c:	623b      	str	r3, [r7, #32]
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	2b7f      	cmp	r3, #127	@ 0x7f
 8007752:	d8f0      	bhi.n	8007736 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007756:	1c5a      	adds	r2, r3, #1
 8007758:	627a      	str	r2, [r7, #36]	@ 0x24
 800775a:	6a3a      	ldr	r2, [r7, #32]
 800775c:	b2d2      	uxtb	r2, r2
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007762:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	61fb      	str	r3, [r7, #28]
 8007768:	4b25      	ldr	r3, [pc, #148]	@ (8007800 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	61bb      	str	r3, [r7, #24]
 800776e:	e00b      	b.n	8007788 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	b2da      	uxtb	r2, r3
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	1c59      	adds	r1, r3, #1
 8007778:	61f9      	str	r1, [r7, #28]
 800777a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	09db      	lsrs	r3, r3, #7
 8007786:	61bb      	str	r3, [r7, #24]
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	2b7f      	cmp	r3, #127	@ 0x7f
 800778c:	d8f0      	bhi.n	8007770 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	61fa      	str	r2, [r7, #28]
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	b2d2      	uxtb	r2, r2
 8007798:	701a      	strb	r2, [r3, #0]
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	617b      	str	r3, [r7, #20]
 80077a2:	2300      	movs	r3, #0
 80077a4:	613b      	str	r3, [r7, #16]
 80077a6:	e00b      	b.n	80077c0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	1c59      	adds	r1, r3, #1
 80077b0:	6179      	str	r1, [r7, #20]
 80077b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80077b6:	b2d2      	uxtb	r2, r2
 80077b8:	701a      	strb	r2, [r3, #0]
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	09db      	lsrs	r3, r3, #7
 80077be:	613b      	str	r3, [r7, #16]
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80077c4:	d8f0      	bhi.n	80077a8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	617a      	str	r2, [r7, #20]
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	701a      	strb	r2, [r3, #0]
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80077d6:	2218      	movs	r2, #24
 80077d8:	6879      	ldr	r1, [r7, #4]
 80077da:	68b8      	ldr	r0, [r7, #8]
 80077dc:	f7ff f804 	bl	80067e8 <_SendPacket>
  RECORD_END();
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80077e6:	4b06      	ldr	r3, [pc, #24]	@ (8007800 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80077e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80077ee:	4b04      	ldr	r3, [pc, #16]	@ (8007800 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80077f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f2:	4798      	blx	r3
  }
}
 80077f4:	bf00      	nop
 80077f6:	3730      	adds	r7, #48	@ 0x30
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	20014424 	.word	0x20014424
 8007800:	200143f4 	.word	0x200143f4

08007804 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007804:	b580      	push	{r7, lr}
 8007806:	b092      	sub	sp, #72	@ 0x48
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800780c:	f3ef 8311 	mrs	r3, BASEPRI
 8007810:	f04f 0120 	mov.w	r1, #32
 8007814:	f381 8811 	msr	BASEPRI, r1
 8007818:	617b      	str	r3, [r7, #20]
 800781a:	486a      	ldr	r0, [pc, #424]	@ (80079c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800781c:	f7fe fef3 	bl	8006606 <_PreparePacket>
 8007820:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	647b      	str	r3, [r7, #68]	@ 0x44
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	4b66      	ldr	r3, [pc, #408]	@ (80079c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	643b      	str	r3, [r7, #64]	@ 0x40
 8007836:	e00b      	b.n	8007850 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800783a:	b2da      	uxtb	r2, r3
 800783c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800783e:	1c59      	adds	r1, r3, #1
 8007840:	6479      	str	r1, [r7, #68]	@ 0x44
 8007842:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007846:	b2d2      	uxtb	r2, r2
 8007848:	701a      	strb	r2, [r3, #0]
 800784a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800784c:	09db      	lsrs	r3, r3, #7
 800784e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007852:	2b7f      	cmp	r3, #127	@ 0x7f
 8007854:	d8f0      	bhi.n	8007838 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007856:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007858:	1c5a      	adds	r2, r3, #1
 800785a:	647a      	str	r2, [r7, #68]	@ 0x44
 800785c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800785e:	b2d2      	uxtb	r2, r2
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007864:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007870:	e00b      	b.n	800788a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007874:	b2da      	uxtb	r2, r3
 8007876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007878:	1c59      	adds	r1, r3, #1
 800787a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800787c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007880:	b2d2      	uxtb	r2, r2
 8007882:	701a      	strb	r2, [r3, #0]
 8007884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007886:	09db      	lsrs	r3, r3, #7
 8007888:	63bb      	str	r3, [r7, #56]	@ 0x38
 800788a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788c:	2b7f      	cmp	r3, #127	@ 0x7f
 800788e:	d8f0      	bhi.n	8007872 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007892:	1c5a      	adds	r2, r3, #1
 8007894:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007896:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007898:	b2d2      	uxtb	r2, r2
 800789a:	701a      	strb	r2, [r3, #0]
 800789c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800789e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	2220      	movs	r2, #32
 80078a6:	4619      	mov	r1, r3
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f7fe fe5f 	bl	800656c <_EncodeStr>
 80078ae:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80078b0:	2209      	movs	r2, #9
 80078b2:	68f9      	ldr	r1, [r7, #12]
 80078b4:	6938      	ldr	r0, [r7, #16]
 80078b6:	f7fe ff97 	bl	80067e8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	4b40      	ldr	r3, [pc, #256]	@ (80079c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80078ce:	e00b      	b.n	80078e8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80078d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d2:	b2da      	uxtb	r2, r3
 80078d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d6:	1c59      	adds	r1, r3, #1
 80078d8:	6379      	str	r1, [r7, #52]	@ 0x34
 80078da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80078de:	b2d2      	uxtb	r2, r2
 80078e0:	701a      	strb	r2, [r3, #0]
 80078e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e4:	09db      	lsrs	r3, r3, #7
 80078e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80078e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80078ec:	d8f0      	bhi.n	80078d0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80078ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f0:	1c5a      	adds	r2, r3, #1
 80078f2:	637a      	str	r2, [r7, #52]	@ 0x34
 80078f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078f6:	b2d2      	uxtb	r2, r2
 80078f8:	701a      	strb	r2, [r3, #0]
 80078fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007908:	e00b      	b.n	8007922 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800790a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790c:	b2da      	uxtb	r2, r3
 800790e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007910:	1c59      	adds	r1, r3, #1
 8007912:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007914:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007918:	b2d2      	uxtb	r2, r2
 800791a:	701a      	strb	r2, [r3, #0]
 800791c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791e:	09db      	lsrs	r3, r3, #7
 8007920:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007924:	2b7f      	cmp	r3, #127	@ 0x7f
 8007926:	d8f0      	bhi.n	800790a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800792e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007930:	b2d2      	uxtb	r2, r2
 8007932:	701a      	strb	r2, [r3, #0]
 8007934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007936:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	627b      	str	r3, [r7, #36]	@ 0x24
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	623b      	str	r3, [r7, #32]
 8007942:	e00b      	b.n	800795c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	b2da      	uxtb	r2, r3
 8007948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794a:	1c59      	adds	r1, r3, #1
 800794c:	6279      	str	r1, [r7, #36]	@ 0x24
 800794e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007952:	b2d2      	uxtb	r2, r2
 8007954:	701a      	strb	r2, [r3, #0]
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	09db      	lsrs	r3, r3, #7
 800795a:	623b      	str	r3, [r7, #32]
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007960:	d8f0      	bhi.n	8007944 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	627a      	str	r2, [r7, #36]	@ 0x24
 8007968:	6a3a      	ldr	r2, [r7, #32]
 800796a:	b2d2      	uxtb	r2, r2
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007970:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	61fb      	str	r3, [r7, #28]
 8007976:	2300      	movs	r3, #0
 8007978:	61bb      	str	r3, [r7, #24]
 800797a:	e00b      	b.n	8007994 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	b2da      	uxtb	r2, r3
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	1c59      	adds	r1, r3, #1
 8007984:	61f9      	str	r1, [r7, #28]
 8007986:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800798a:	b2d2      	uxtb	r2, r2
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	09db      	lsrs	r3, r3, #7
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b7f      	cmp	r3, #127	@ 0x7f
 8007998:	d8f0      	bhi.n	800797c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	61fa      	str	r2, [r7, #28]
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	b2d2      	uxtb	r2, r2
 80079a4:	701a      	strb	r2, [r3, #0]
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80079aa:	2215      	movs	r2, #21
 80079ac:	68f9      	ldr	r1, [r7, #12]
 80079ae:	6938      	ldr	r0, [r7, #16]
 80079b0:	f7fe ff1a 	bl	80067e8 <_SendPacket>
  RECORD_END();
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f383 8811 	msr	BASEPRI, r3
}
 80079ba:	bf00      	nop
 80079bc:	3748      	adds	r7, #72	@ 0x48
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20014424 	.word	0x20014424
 80079c8:	200143f4 	.word	0x200143f4

080079cc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80079cc:	b580      	push	{r7, lr}
 80079ce:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80079d0:	4b07      	ldr	r3, [pc, #28]	@ (80079f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d008      	beq.n	80079ea <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80079d8:	4b05      	ldr	r3, [pc, #20]	@ (80079f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80079e2:	4b03      	ldr	r3, [pc, #12]	@ (80079f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	4798      	blx	r3
  }
}
 80079ea:	bf00      	nop
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	200143f4 	.word	0x200143f4

080079f4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80079fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007a00:	f04f 0120 	mov.w	r1, #32
 8007a04:	f381 8811 	msr	BASEPRI, r1
 8007a08:	617b      	str	r3, [r7, #20]
 8007a0a:	480b      	ldr	r0, [pc, #44]	@ (8007a38 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007a0c:	f7fe fdfb 	bl	8006606 <_PreparePacket>
 8007a10:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a12:	2280      	movs	r2, #128	@ 0x80
 8007a14:	6879      	ldr	r1, [r7, #4]
 8007a16:	6938      	ldr	r0, [r7, #16]
 8007a18:	f7fe fda8 	bl	800656c <_EncodeStr>
 8007a1c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007a1e:	220e      	movs	r2, #14
 8007a20:	68f9      	ldr	r1, [r7, #12]
 8007a22:	6938      	ldr	r0, [r7, #16]
 8007a24:	f7fe fee0 	bl	80067e8 <_SendPacket>
  RECORD_END();
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f383 8811 	msr	BASEPRI, r3
}
 8007a2e:	bf00      	nop
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20014424 	.word	0x20014424

08007a3c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007a3c:	b590      	push	{r4, r7, lr}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007a42:	4b15      	ldr	r3, [pc, #84]	@ (8007a98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d01a      	beq.n	8007a80 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007a4a:	4b13      	ldr	r3, [pc, #76]	@ (8007a98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d015      	beq.n	8007a80 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007a54:	4b10      	ldr	r3, [pc, #64]	@ (8007a98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4798      	blx	r3
 8007a5c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007a60:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007a62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a66:	f04f 0200 	mov.w	r2, #0
 8007a6a:	f04f 0300 	mov.w	r3, #0
 8007a6e:	000a      	movs	r2, r1
 8007a70:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007a72:	4613      	mov	r3, r2
 8007a74:	461a      	mov	r2, r3
 8007a76:	4621      	mov	r1, r4
 8007a78:	200d      	movs	r0, #13
 8007a7a:	f7ff fbe5 	bl	8007248 <SEGGER_SYSVIEW_RecordU32x2>
 8007a7e:	e006      	b.n	8007a8e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007a80:	4b06      	ldr	r3, [pc, #24]	@ (8007a9c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4619      	mov	r1, r3
 8007a86:	200c      	movs	r0, #12
 8007a88:	f7ff fba2 	bl	80071d0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007a8c:	bf00      	nop
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd90      	pop	{r4, r7, pc}
 8007a96:	bf00      	nop
 8007a98:	200143f4 	.word	0x200143f4
 8007a9c:	e0001004 	.word	0xe0001004

08007aa0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007aa6:	f3ef 8311 	mrs	r3, BASEPRI
 8007aaa:	f04f 0120 	mov.w	r1, #32
 8007aae:	f381 8811 	msr	BASEPRI, r1
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	4819      	ldr	r0, [pc, #100]	@ (8007b1c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007ab6:	f7fe fda6 	bl	8006606 <_PreparePacket>
 8007aba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007ac0:	4b17      	ldr	r3, [pc, #92]	@ (8007b20 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	617b      	str	r3, [r7, #20]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	613b      	str	r3, [r7, #16]
 8007ad2:	e00b      	b.n	8007aec <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	1c59      	adds	r1, r3, #1
 8007adc:	6179      	str	r1, [r7, #20]
 8007ade:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007ae2:	b2d2      	uxtb	r2, r2
 8007ae4:	701a      	strb	r2, [r3, #0]
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	09db      	lsrs	r3, r3, #7
 8007aea:	613b      	str	r3, [r7, #16]
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	2b7f      	cmp	r3, #127	@ 0x7f
 8007af0:	d8f0      	bhi.n	8007ad4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	617a      	str	r2, [r7, #20]
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	b2d2      	uxtb	r2, r2
 8007afc:	701a      	strb	r2, [r3, #0]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007b02:	2202      	movs	r2, #2
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	68b8      	ldr	r0, [r7, #8]
 8007b08:	f7fe fe6e 	bl	80067e8 <_SendPacket>
  RECORD_END();
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f383 8811 	msr	BASEPRI, r3
}
 8007b12:	bf00      	nop
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20014424 	.word	0x20014424
 8007b20:	e000ed04 	.word	0xe000ed04

08007b24 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007b2a:	f3ef 8311 	mrs	r3, BASEPRI
 8007b2e:	f04f 0120 	mov.w	r1, #32
 8007b32:	f381 8811 	msr	BASEPRI, r1
 8007b36:	607b      	str	r3, [r7, #4]
 8007b38:	4807      	ldr	r0, [pc, #28]	@ (8007b58 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007b3a:	f7fe fd64 	bl	8006606 <_PreparePacket>
 8007b3e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007b40:	2203      	movs	r2, #3
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6838      	ldr	r0, [r7, #0]
 8007b46:	f7fe fe4f 	bl	80067e8 <_SendPacket>
  RECORD_END();
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f383 8811 	msr	BASEPRI, r3
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	20014424 	.word	0x20014424

08007b5c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007b62:	f3ef 8311 	mrs	r3, BASEPRI
 8007b66:	f04f 0120 	mov.w	r1, #32
 8007b6a:	f381 8811 	msr	BASEPRI, r1
 8007b6e:	607b      	str	r3, [r7, #4]
 8007b70:	4807      	ldr	r0, [pc, #28]	@ (8007b90 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007b72:	f7fe fd48 	bl	8006606 <_PreparePacket>
 8007b76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007b78:	2212      	movs	r2, #18
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6838      	ldr	r0, [r7, #0]
 8007b7e:	f7fe fe33 	bl	80067e8 <_SendPacket>
  RECORD_END();
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f383 8811 	msr	BASEPRI, r3
}
 8007b88:	bf00      	nop
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	20014424 	.word	0x20014424

08007b94 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007b9a:	f3ef 8311 	mrs	r3, BASEPRI
 8007b9e:	f04f 0120 	mov.w	r1, #32
 8007ba2:	f381 8811 	msr	BASEPRI, r1
 8007ba6:	607b      	str	r3, [r7, #4]
 8007ba8:	4807      	ldr	r0, [pc, #28]	@ (8007bc8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007baa:	f7fe fd2c 	bl	8006606 <_PreparePacket>
 8007bae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007bb0:	2211      	movs	r2, #17
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6838      	ldr	r0, [r7, #0]
 8007bb6:	f7fe fe17 	bl	80067e8 <_SendPacket>
  RECORD_END();
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f383 8811 	msr	BASEPRI, r3
}
 8007bc0:	bf00      	nop
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	20014424 	.word	0x20014424

08007bcc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007bd4:	f3ef 8311 	mrs	r3, BASEPRI
 8007bd8:	f04f 0120 	mov.w	r1, #32
 8007bdc:	f381 8811 	msr	BASEPRI, r1
 8007be0:	617b      	str	r3, [r7, #20]
 8007be2:	4819      	ldr	r0, [pc, #100]	@ (8007c48 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007be4:	f7fe fd0f 	bl	8006606 <_PreparePacket>
 8007be8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007bee:	4b17      	ldr	r3, [pc, #92]	@ (8007c4c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	61fb      	str	r3, [r7, #28]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	61bb      	str	r3, [r7, #24]
 8007c00:	e00b      	b.n	8007c1a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	1c59      	adds	r1, r3, #1
 8007c0a:	61f9      	str	r1, [r7, #28]
 8007c0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007c10:	b2d2      	uxtb	r2, r2
 8007c12:	701a      	strb	r2, [r3, #0]
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	09db      	lsrs	r3, r3, #7
 8007c18:	61bb      	str	r3, [r7, #24]
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c1e:	d8f0      	bhi.n	8007c02 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	61fa      	str	r2, [r7, #28]
 8007c26:	69ba      	ldr	r2, [r7, #24]
 8007c28:	b2d2      	uxtb	r2, r2
 8007c2a:	701a      	strb	r2, [r3, #0]
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007c30:	2208      	movs	r2, #8
 8007c32:	68f9      	ldr	r1, [r7, #12]
 8007c34:	6938      	ldr	r0, [r7, #16]
 8007c36:	f7fe fdd7 	bl	80067e8 <_SendPacket>
  RECORD_END();
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f383 8811 	msr	BASEPRI, r3
}
 8007c40:	bf00      	nop
 8007c42:	3720      	adds	r7, #32
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	20014424 	.word	0x20014424
 8007c4c:	200143f4 	.word	0x200143f4

08007c50 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007c58:	f3ef 8311 	mrs	r3, BASEPRI
 8007c5c:	f04f 0120 	mov.w	r1, #32
 8007c60:	f381 8811 	msr	BASEPRI, r1
 8007c64:	617b      	str	r3, [r7, #20]
 8007c66:	4819      	ldr	r0, [pc, #100]	@ (8007ccc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007c68:	f7fe fccd 	bl	8006606 <_PreparePacket>
 8007c6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007c72:	4b17      	ldr	r3, [pc, #92]	@ (8007cd0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	61fb      	str	r3, [r7, #28]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	61bb      	str	r3, [r7, #24]
 8007c84:	e00b      	b.n	8007c9e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	1c59      	adds	r1, r3, #1
 8007c8e:	61f9      	str	r1, [r7, #28]
 8007c90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007c94:	b2d2      	uxtb	r2, r2
 8007c96:	701a      	strb	r2, [r3, #0]
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	09db      	lsrs	r3, r3, #7
 8007c9c:	61bb      	str	r3, [r7, #24]
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ca2:	d8f0      	bhi.n	8007c86 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	1c5a      	adds	r2, r3, #1
 8007ca8:	61fa      	str	r2, [r7, #28]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	b2d2      	uxtb	r2, r2
 8007cae:	701a      	strb	r2, [r3, #0]
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007cb4:	2204      	movs	r2, #4
 8007cb6:	68f9      	ldr	r1, [r7, #12]
 8007cb8:	6938      	ldr	r0, [r7, #16]
 8007cba:	f7fe fd95 	bl	80067e8 <_SendPacket>
  RECORD_END();
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f383 8811 	msr	BASEPRI, r3
}
 8007cc4:	bf00      	nop
 8007cc6:	3720      	adds	r7, #32
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	20014424 	.word	0x20014424
 8007cd0:	200143f4 	.word	0x200143f4

08007cd4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007cdc:	f3ef 8311 	mrs	r3, BASEPRI
 8007ce0:	f04f 0120 	mov.w	r1, #32
 8007ce4:	f381 8811 	msr	BASEPRI, r1
 8007ce8:	617b      	str	r3, [r7, #20]
 8007cea:	4819      	ldr	r0, [pc, #100]	@ (8007d50 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007cec:	f7fe fc8b 	bl	8006606 <_PreparePacket>
 8007cf0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007cf6:	4b17      	ldr	r3, [pc, #92]	@ (8007d54 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	61fb      	str	r3, [r7, #28]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	61bb      	str	r3, [r7, #24]
 8007d08:	e00b      	b.n	8007d22 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	1c59      	adds	r1, r3, #1
 8007d12:	61f9      	str	r1, [r7, #28]
 8007d14:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007d18:	b2d2      	uxtb	r2, r2
 8007d1a:	701a      	strb	r2, [r3, #0]
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	09db      	lsrs	r3, r3, #7
 8007d20:	61bb      	str	r3, [r7, #24]
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d26:	d8f0      	bhi.n	8007d0a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	61fa      	str	r2, [r7, #28]
 8007d2e:	69ba      	ldr	r2, [r7, #24]
 8007d30:	b2d2      	uxtb	r2, r2
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007d38:	2206      	movs	r2, #6
 8007d3a:	68f9      	ldr	r1, [r7, #12]
 8007d3c:	6938      	ldr	r0, [r7, #16]
 8007d3e:	f7fe fd53 	bl	80067e8 <_SendPacket>
  RECORD_END();
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f383 8811 	msr	BASEPRI, r3
}
 8007d48:	bf00      	nop
 8007d4a:	3720      	adds	r7, #32
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20014424 	.word	0x20014424
 8007d54:	200143f4 	.word	0x200143f4

08007d58 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	@ 0x28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007d62:	f3ef 8311 	mrs	r3, BASEPRI
 8007d66:	f04f 0120 	mov.w	r1, #32
 8007d6a:	f381 8811 	msr	BASEPRI, r1
 8007d6e:	617b      	str	r3, [r7, #20]
 8007d70:	4827      	ldr	r0, [pc, #156]	@ (8007e10 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007d72:	f7fe fc48 	bl	8006606 <_PreparePacket>
 8007d76:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007d7c:	4b25      	ldr	r3, [pc, #148]	@ (8007e14 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	623b      	str	r3, [r7, #32]
 8007d8e:	e00b      	b.n	8007da8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d96:	1c59      	adds	r1, r3, #1
 8007d98:	6279      	str	r1, [r7, #36]	@ 0x24
 8007d9a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007d9e:	b2d2      	uxtb	r2, r2
 8007da0:	701a      	strb	r2, [r3, #0]
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	09db      	lsrs	r3, r3, #7
 8007da6:	623b      	str	r3, [r7, #32]
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	2b7f      	cmp	r3, #127	@ 0x7f
 8007dac:	d8f0      	bhi.n	8007d90 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	627a      	str	r2, [r7, #36]	@ 0x24
 8007db4:	6a3a      	ldr	r2, [r7, #32]
 8007db6:	b2d2      	uxtb	r2, r2
 8007db8:	701a      	strb	r2, [r3, #0]
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	61fb      	str	r3, [r7, #28]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	61bb      	str	r3, [r7, #24]
 8007dc6:	e00b      	b.n	8007de0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	1c59      	adds	r1, r3, #1
 8007dd0:	61f9      	str	r1, [r7, #28]
 8007dd2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007dd6:	b2d2      	uxtb	r2, r2
 8007dd8:	701a      	strb	r2, [r3, #0]
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	09db      	lsrs	r3, r3, #7
 8007dde:	61bb      	str	r3, [r7, #24]
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007de4:	d8f0      	bhi.n	8007dc8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	1c5a      	adds	r2, r3, #1
 8007dea:	61fa      	str	r2, [r7, #28]
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	b2d2      	uxtb	r2, r2
 8007df0:	701a      	strb	r2, [r3, #0]
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007df6:	2207      	movs	r2, #7
 8007df8:	68f9      	ldr	r1, [r7, #12]
 8007dfa:	6938      	ldr	r0, [r7, #16]
 8007dfc:	f7fe fcf4 	bl	80067e8 <_SendPacket>
  RECORD_END();
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	f383 8811 	msr	BASEPRI, r3
}
 8007e06:	bf00      	nop
 8007e08:	3728      	adds	r7, #40	@ 0x28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	20014424 	.word	0x20014424
 8007e14:	200143f4 	.word	0x200143f4

08007e18 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007e20:	4b04      	ldr	r3, [pc, #16]	@ (8007e34 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	1ad3      	subs	r3, r2, r3
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	200143f4 	.word	0x200143f4

08007e38 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b08c      	sub	sp, #48	@ 0x30
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	4603      	mov	r3, r0
 8007e40:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007e42:	4b3b      	ldr	r3, [pc, #236]	@ (8007f30 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d06d      	beq.n	8007f26 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007e4a:	4b39      	ldr	r3, [pc, #228]	@ (8007f30 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007e50:	2300      	movs	r3, #0
 8007e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e54:	e008      	b.n	8007e68 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d007      	beq.n	8007e72 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e64:	3301      	adds	r3, #1
 8007e66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d3f2      	bcc.n	8007e56 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007e70:	e000      	b.n	8007e74 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007e72:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d055      	beq.n	8007f26 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007e7a:	f3ef 8311 	mrs	r3, BASEPRI
 8007e7e:	f04f 0120 	mov.w	r1, #32
 8007e82:	f381 8811 	msr	BASEPRI, r1
 8007e86:	617b      	str	r3, [r7, #20]
 8007e88:	482a      	ldr	r0, [pc, #168]	@ (8007f34 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007e8a:	f7fe fbbc 	bl	8006606 <_PreparePacket>
 8007e8e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e98:	79fb      	ldrb	r3, [r7, #7]
 8007e9a:	623b      	str	r3, [r7, #32]
 8007e9c:	e00b      	b.n	8007eb6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea4:	1c59      	adds	r1, r3, #1
 8007ea6:	6279      	str	r1, [r7, #36]	@ 0x24
 8007ea8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007eac:	b2d2      	uxtb	r2, r2
 8007eae:	701a      	strb	r2, [r3, #0]
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	09db      	lsrs	r3, r3, #7
 8007eb4:	623b      	str	r3, [r7, #32]
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8007eba:	d8f0      	bhi.n	8007e9e <SEGGER_SYSVIEW_SendModule+0x66>
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ec2:	6a3a      	ldr	r2, [r7, #32]
 8007ec4:	b2d2      	uxtb	r2, r2
 8007ec6:	701a      	strb	r2, [r3, #0]
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eca:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	61fb      	str	r3, [r7, #28]
 8007ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	61bb      	str	r3, [r7, #24]
 8007ed6:	e00b      	b.n	8007ef0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	1c59      	adds	r1, r3, #1
 8007ee0:	61f9      	str	r1, [r7, #28]
 8007ee2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007ee6:	b2d2      	uxtb	r2, r2
 8007ee8:	701a      	strb	r2, [r3, #0]
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	09db      	lsrs	r3, r3, #7
 8007eee:	61bb      	str	r3, [r7, #24]
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ef4:	d8f0      	bhi.n	8007ed8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	61fa      	str	r2, [r7, #28]
 8007efc:	69ba      	ldr	r2, [r7, #24]
 8007efe:	b2d2      	uxtb	r2, r2
 8007f00:	701a      	strb	r2, [r3, #0]
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2280      	movs	r2, #128	@ 0x80
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f7fe fb2c 	bl	800656c <_EncodeStr>
 8007f14:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007f16:	2216      	movs	r2, #22
 8007f18:	68f9      	ldr	r1, [r7, #12]
 8007f1a:	6938      	ldr	r0, [r7, #16]
 8007f1c:	f7fe fc64 	bl	80067e8 <_SendPacket>
      RECORD_END();
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007f26:	bf00      	nop
 8007f28:	3730      	adds	r7, #48	@ 0x30
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	2001441c 	.word	0x2001441c
 8007f34:	20014424 	.word	0x20014424

08007f38 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007f70 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00f      	beq.n	8007f66 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007f46:	4b0a      	ldr	r3, [pc, #40]	@ (8007f70 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d002      	beq.n	8007f5a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1f2      	bne.n	8007f4c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007f66:	bf00      	nop
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	2001441c 	.word	0x2001441c

08007f74 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007f7a:	f3ef 8311 	mrs	r3, BASEPRI
 8007f7e:	f04f 0120 	mov.w	r1, #32
 8007f82:	f381 8811 	msr	BASEPRI, r1
 8007f86:	60fb      	str	r3, [r7, #12]
 8007f88:	4817      	ldr	r0, [pc, #92]	@ (8007fe8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007f8a:	f7fe fb3c 	bl	8006606 <_PreparePacket>
 8007f8e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	617b      	str	r3, [r7, #20]
 8007f98:	4b14      	ldr	r3, [pc, #80]	@ (8007fec <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	613b      	str	r3, [r7, #16]
 8007f9e:	e00b      	b.n	8007fb8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	1c59      	adds	r1, r3, #1
 8007fa8:	6179      	str	r1, [r7, #20]
 8007faa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007fae:	b2d2      	uxtb	r2, r2
 8007fb0:	701a      	strb	r2, [r3, #0]
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	09db      	lsrs	r3, r3, #7
 8007fb6:	613b      	str	r3, [r7, #16]
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	2b7f      	cmp	r3, #127	@ 0x7f
 8007fbc:	d8f0      	bhi.n	8007fa0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	617a      	str	r2, [r7, #20]
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	b2d2      	uxtb	r2, r2
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007fce:	221b      	movs	r2, #27
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	68b8      	ldr	r0, [r7, #8]
 8007fd4:	f7fe fc08 	bl	80067e8 <_SendPacket>
  RECORD_END();
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f383 8811 	msr	BASEPRI, r3
}
 8007fde:	bf00      	nop
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20014424 	.word	0x20014424
 8007fec:	20014420 	.word	0x20014420

08007ff0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007ff0:	b40f      	push	{r0, r1, r2, r3}
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b082      	sub	sp, #8
 8007ff6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007ff8:	f107 0314 	add.w	r3, r7, #20
 8007ffc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007ffe:	1d3b      	adds	r3, r7, #4
 8008000:	461a      	mov	r2, r3
 8008002:	2100      	movs	r1, #0
 8008004:	6938      	ldr	r0, [r7, #16]
 8008006:	f7fe fe79 	bl	8006cfc <_VPrintTarget>
  va_end(ParamList);
}
 800800a:	bf00      	nop
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008014:	b004      	add	sp, #16
 8008016:	4770      	bx	lr

08008018 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008018:	b580      	push	{r7, lr}
 800801a:	b08a      	sub	sp, #40	@ 0x28
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008020:	f3ef 8311 	mrs	r3, BASEPRI
 8008024:	f04f 0120 	mov.w	r1, #32
 8008028:	f381 8811 	msr	BASEPRI, r1
 800802c:	617b      	str	r3, [r7, #20]
 800802e:	4827      	ldr	r0, [pc, #156]	@ (80080cc <SEGGER_SYSVIEW_Warn+0xb4>)
 8008030:	f7fe fae9 	bl	8006606 <_PreparePacket>
 8008034:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008036:	2280      	movs	r2, #128	@ 0x80
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	6938      	ldr	r0, [r7, #16]
 800803c:	f7fe fa96 	bl	800656c <_EncodeStr>
 8008040:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	627b      	str	r3, [r7, #36]	@ 0x24
 8008046:	2301      	movs	r3, #1
 8008048:	623b      	str	r3, [r7, #32]
 800804a:	e00b      	b.n	8008064 <SEGGER_SYSVIEW_Warn+0x4c>
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	b2da      	uxtb	r2, r3
 8008050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008052:	1c59      	adds	r1, r3, #1
 8008054:	6279      	str	r1, [r7, #36]	@ 0x24
 8008056:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800805a:	b2d2      	uxtb	r2, r2
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	6a3b      	ldr	r3, [r7, #32]
 8008060:	09db      	lsrs	r3, r3, #7
 8008062:	623b      	str	r3, [r7, #32]
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	2b7f      	cmp	r3, #127	@ 0x7f
 8008068:	d8f0      	bhi.n	800804c <SEGGER_SYSVIEW_Warn+0x34>
 800806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008070:	6a3a      	ldr	r2, [r7, #32]
 8008072:	b2d2      	uxtb	r2, r2
 8008074:	701a      	strb	r2, [r3, #0]
 8008076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008078:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	61fb      	str	r3, [r7, #28]
 800807e:	2300      	movs	r3, #0
 8008080:	61bb      	str	r3, [r7, #24]
 8008082:	e00b      	b.n	800809c <SEGGER_SYSVIEW_Warn+0x84>
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	b2da      	uxtb	r2, r3
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	1c59      	adds	r1, r3, #1
 800808c:	61f9      	str	r1, [r7, #28]
 800808e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008092:	b2d2      	uxtb	r2, r2
 8008094:	701a      	strb	r2, [r3, #0]
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	09db      	lsrs	r3, r3, #7
 800809a:	61bb      	str	r3, [r7, #24]
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	2b7f      	cmp	r3, #127	@ 0x7f
 80080a0:	d8f0      	bhi.n	8008084 <SEGGER_SYSVIEW_Warn+0x6c>
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	61fa      	str	r2, [r7, #28]
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	b2d2      	uxtb	r2, r2
 80080ac:	701a      	strb	r2, [r3, #0]
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80080b2:	221a      	movs	r2, #26
 80080b4:	68f9      	ldr	r1, [r7, #12]
 80080b6:	6938      	ldr	r0, [r7, #16]
 80080b8:	f7fe fb96 	bl	80067e8 <_SendPacket>
  RECORD_END();
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f383 8811 	msr	BASEPRI, r3
}
 80080c2:	bf00      	nop
 80080c4:	3728      	adds	r7, #40	@ 0x28
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20014424 	.word	0x20014424

080080d0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80080d0:	b580      	push	{r7, lr}
 80080d2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80080d4:	4b13      	ldr	r3, [pc, #76]	@ (8008124 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80080d6:	7e1b      	ldrb	r3, [r3, #24]
 80080d8:	4619      	mov	r1, r3
 80080da:	4a13      	ldr	r2, [pc, #76]	@ (8008128 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80080dc:	460b      	mov	r3, r1
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	440b      	add	r3, r1
 80080e2:	00db      	lsls	r3, r3, #3
 80080e4:	4413      	add	r3, r2
 80080e6:	336c      	adds	r3, #108	@ 0x6c
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008124 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80080ec:	7e1b      	ldrb	r3, [r3, #24]
 80080ee:	4618      	mov	r0, r3
 80080f0:	490d      	ldr	r1, [pc, #52]	@ (8008128 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80080f2:	4603      	mov	r3, r0
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	4403      	add	r3, r0
 80080f8:	00db      	lsls	r3, r3, #3
 80080fa:	440b      	add	r3, r1
 80080fc:	3370      	adds	r3, #112	@ 0x70
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	429a      	cmp	r2, r3
 8008102:	d00b      	beq.n	800811c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8008104:	4b07      	ldr	r3, [pc, #28]	@ (8008124 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8008106:	789b      	ldrb	r3, [r3, #2]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d107      	bne.n	800811c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800810c:	4b05      	ldr	r3, [pc, #20]	@ (8008124 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800810e:	2201      	movs	r2, #1
 8008110:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8008112:	f7fe fa85 	bl	8006620 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8008116:	4b03      	ldr	r3, [pc, #12]	@ (8008124 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8008118:	2200      	movs	r2, #0
 800811a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800811c:	4b01      	ldr	r3, [pc, #4]	@ (8008124 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800811e:	781b      	ldrb	r3, [r3, #0]
}
 8008120:	4618      	mov	r0, r3
 8008122:	bd80      	pop	{r7, pc}
 8008124:	200143f4 	.word	0x200143f4
 8008128:	20012f34 	.word	0x20012f34

0800812c <memcmp>:
 800812c:	b510      	push	{r4, lr}
 800812e:	3901      	subs	r1, #1
 8008130:	4402      	add	r2, r0
 8008132:	4290      	cmp	r0, r2
 8008134:	d101      	bne.n	800813a <memcmp+0xe>
 8008136:	2000      	movs	r0, #0
 8008138:	e005      	b.n	8008146 <memcmp+0x1a>
 800813a:	7803      	ldrb	r3, [r0, #0]
 800813c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008140:	42a3      	cmp	r3, r4
 8008142:	d001      	beq.n	8008148 <memcmp+0x1c>
 8008144:	1b18      	subs	r0, r3, r4
 8008146:	bd10      	pop	{r4, pc}
 8008148:	3001      	adds	r0, #1
 800814a:	e7f2      	b.n	8008132 <memcmp+0x6>

0800814c <memset>:
 800814c:	4402      	add	r2, r0
 800814e:	4603      	mov	r3, r0
 8008150:	4293      	cmp	r3, r2
 8008152:	d100      	bne.n	8008156 <memset+0xa>
 8008154:	4770      	bx	lr
 8008156:	f803 1b01 	strb.w	r1, [r3], #1
 800815a:	e7f9      	b.n	8008150 <memset+0x4>

0800815c <__libc_init_array>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	4d0d      	ldr	r5, [pc, #52]	@ (8008194 <__libc_init_array+0x38>)
 8008160:	4c0d      	ldr	r4, [pc, #52]	@ (8008198 <__libc_init_array+0x3c>)
 8008162:	1b64      	subs	r4, r4, r5
 8008164:	10a4      	asrs	r4, r4, #2
 8008166:	2600      	movs	r6, #0
 8008168:	42a6      	cmp	r6, r4
 800816a:	d109      	bne.n	8008180 <__libc_init_array+0x24>
 800816c:	4d0b      	ldr	r5, [pc, #44]	@ (800819c <__libc_init_array+0x40>)
 800816e:	4c0c      	ldr	r4, [pc, #48]	@ (80081a0 <__libc_init_array+0x44>)
 8008170:	f000 f826 	bl	80081c0 <_init>
 8008174:	1b64      	subs	r4, r4, r5
 8008176:	10a4      	asrs	r4, r4, #2
 8008178:	2600      	movs	r6, #0
 800817a:	42a6      	cmp	r6, r4
 800817c:	d105      	bne.n	800818a <__libc_init_array+0x2e>
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	f855 3b04 	ldr.w	r3, [r5], #4
 8008184:	4798      	blx	r3
 8008186:	3601      	adds	r6, #1
 8008188:	e7ee      	b.n	8008168 <__libc_init_array+0xc>
 800818a:	f855 3b04 	ldr.w	r3, [r5], #4
 800818e:	4798      	blx	r3
 8008190:	3601      	adds	r6, #1
 8008192:	e7f2      	b.n	800817a <__libc_init_array+0x1e>
 8008194:	080083c4 	.word	0x080083c4
 8008198:	080083c4 	.word	0x080083c4
 800819c:	080083c4 	.word	0x080083c4
 80081a0:	080083c8 	.word	0x080083c8

080081a4 <memcpy>:
 80081a4:	440a      	add	r2, r1
 80081a6:	4291      	cmp	r1, r2
 80081a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80081ac:	d100      	bne.n	80081b0 <memcpy+0xc>
 80081ae:	4770      	bx	lr
 80081b0:	b510      	push	{r4, lr}
 80081b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081ba:	4291      	cmp	r1, r2
 80081bc:	d1f9      	bne.n	80081b2 <memcpy+0xe>
 80081be:	bd10      	pop	{r4, pc}

080081c0 <_init>:
 80081c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c2:	bf00      	nop
 80081c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c6:	bc08      	pop	{r3}
 80081c8:	469e      	mov	lr, r3
 80081ca:	4770      	bx	lr

080081cc <_fini>:
 80081cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ce:	bf00      	nop
 80081d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d2:	bc08      	pop	{r3}
 80081d4:	469e      	mov	lr, r3
 80081d6:	4770      	bx	lr
