
009_semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009200  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08009390  08009390  0000a390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009674  08009674  0000b070  2**0
                  CONTENTS
  4 .ARM          00000008  08009674  08009674  0000a674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800967c  0800967c  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800967c  0800967c  0000a67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009680  08009680  0000a680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08009684  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b070  2**0
                  CONTENTS
 10 .bss          0001472c  20000070  20000070  0000b070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001479c  2001479c  0000b070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018656  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003944  00000000  00000000  000236f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  00027040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001160  00000000  00000000  000286c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002521b  00000000  00000000  00029820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a2a3  00000000  00000000  0004ea3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd1f9  00000000  00000000  00068cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145ed7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000068e0  00000000  00000000  00145f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ca  00000000  00000000  0014c7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009378 	.word	0x08009378

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08009378 	.word	0x08009378

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001307c 	.word	0x2001307c

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96a 	b.w	800060c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	460c      	mov	r4, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14e      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035c:	4694      	mov	ip, r2
 800035e:	458c      	cmp	ip, r1
 8000360:	4686      	mov	lr, r0
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	d962      	bls.n	800042e <__udivmoddi4+0xde>
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0320 	rsb	r3, r2, #32
 800036e:	4091      	lsls	r1, r2
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	fa0c fc02 	lsl.w	ip, ip, r2
 8000378:	4319      	orrs	r1, r3
 800037a:	fa00 fe02 	lsl.w	lr, r0, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f f68c 	uxth.w	r6, ip
 8000386:	fbb1 f4f7 	udiv	r4, r1, r7
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb07 1114 	mls	r1, r7, r4, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb04 f106 	mul.w	r1, r4, r6
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003a6:	f080 8112 	bcs.w	80005ce <__udivmoddi4+0x27e>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 810f 	bls.w	80005ce <__udivmoddi4+0x27e>
 80003b0:	3c02      	subs	r4, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a59      	subs	r1, r3, r1
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80003be:	fb07 1110 	mls	r1, r7, r0, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb00 f606 	mul.w	r6, r0, r6
 80003ca:	429e      	cmp	r6, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x94>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d6:	f080 80fc 	bcs.w	80005d2 <__udivmoddi4+0x282>
 80003da:	429e      	cmp	r6, r3
 80003dc:	f240 80f9 	bls.w	80005d2 <__udivmoddi4+0x282>
 80003e0:	4463      	add	r3, ip
 80003e2:	3802      	subs	r0, #2
 80003e4:	1b9b      	subs	r3, r3, r6
 80003e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ea:	2100      	movs	r1, #0
 80003ec:	b11d      	cbz	r5, 80003f6 <__udivmoddi4+0xa6>
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	e9c5 3200 	strd	r3, r2, [r5]
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d905      	bls.n	800040a <__udivmoddi4+0xba>
 80003fe:	b10d      	cbz	r5, 8000404 <__udivmoddi4+0xb4>
 8000400:	e9c5 0100 	strd	r0, r1, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	4608      	mov	r0, r1
 8000408:	e7f5      	b.n	80003f6 <__udivmoddi4+0xa6>
 800040a:	fab3 f183 	clz	r1, r3
 800040e:	2900      	cmp	r1, #0
 8000410:	d146      	bne.n	80004a0 <__udivmoddi4+0x150>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xcc>
 8000416:	4290      	cmp	r0, r2
 8000418:	f0c0 80f0 	bcc.w	80005fc <__udivmoddi4+0x2ac>
 800041c:	1a86      	subs	r6, r0, r2
 800041e:	eb64 0303 	sbc.w	r3, r4, r3
 8000422:	2001      	movs	r0, #1
 8000424:	2d00      	cmp	r5, #0
 8000426:	d0e6      	beq.n	80003f6 <__udivmoddi4+0xa6>
 8000428:	e9c5 6300 	strd	r6, r3, [r5]
 800042c:	e7e3      	b.n	80003f6 <__udivmoddi4+0xa6>
 800042e:	2a00      	cmp	r2, #0
 8000430:	f040 8090 	bne.w	8000554 <__udivmoddi4+0x204>
 8000434:	eba1 040c 	sub.w	r4, r1, ip
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	2101      	movs	r1, #1
 8000442:	fbb4 f6f8 	udiv	r6, r4, r8
 8000446:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044a:	fb08 4416 	mls	r4, r8, r6, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb07 f006 	mul.w	r0, r7, r6
 8000456:	4298      	cmp	r0, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x11c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x11a>
 8000464:	4298      	cmp	r0, r3
 8000466:	f200 80cd 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 800046a:	4626      	mov	r6, r4
 800046c:	1a1c      	subs	r4, r3, r0
 800046e:	fa1f f38e 	uxth.w	r3, lr
 8000472:	fbb4 f0f8 	udiv	r0, r4, r8
 8000476:	fb08 4410 	mls	r4, r8, r0, r4
 800047a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047e:	fb00 f707 	mul.w	r7, r0, r7
 8000482:	429f      	cmp	r7, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x148>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x146>
 8000490:	429f      	cmp	r7, r3
 8000492:	f200 80b0 	bhi.w	80005f6 <__udivmoddi4+0x2a6>
 8000496:	4620      	mov	r0, r4
 8000498:	1bdb      	subs	r3, r3, r7
 800049a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0x9c>
 80004a0:	f1c1 0620 	rsb	r6, r1, #32
 80004a4:	408b      	lsls	r3, r1
 80004a6:	fa22 f706 	lsr.w	r7, r2, r6
 80004aa:	431f      	orrs	r7, r3
 80004ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b0:	fa04 f301 	lsl.w	r3, r4, r1
 80004b4:	ea43 030c 	orr.w	r3, r3, ip
 80004b8:	40f4      	lsrs	r4, r6
 80004ba:	fa00 f801 	lsl.w	r8, r0, r1
 80004be:	0c38      	lsrs	r0, r7, #16
 80004c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c4:	fbb4 fef0 	udiv	lr, r4, r0
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	fb00 441e 	mls	r4, r0, lr, r4
 80004d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d4:	fb0e f90c 	mul.w	r9, lr, ip
 80004d8:	45a1      	cmp	r9, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	d90a      	bls.n	80004f6 <__udivmoddi4+0x1a6>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004e6:	f080 8084 	bcs.w	80005f2 <__udivmoddi4+0x2a2>
 80004ea:	45a1      	cmp	r9, r4
 80004ec:	f240 8081 	bls.w	80005f2 <__udivmoddi4+0x2a2>
 80004f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	eba4 0409 	sub.w	r4, r4, r9
 80004fa:	fa1f f983 	uxth.w	r9, r3
 80004fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000502:	fb00 4413 	mls	r4, r0, r3, r4
 8000506:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800050a:	fb03 fc0c 	mul.w	ip, r3, ip
 800050e:	45a4      	cmp	ip, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x1d2>
 8000512:	193c      	adds	r4, r7, r4
 8000514:	f103 30ff 	add.w	r0, r3, #4294967295
 8000518:	d267      	bcs.n	80005ea <__udivmoddi4+0x29a>
 800051a:	45a4      	cmp	ip, r4
 800051c:	d965      	bls.n	80005ea <__udivmoddi4+0x29a>
 800051e:	3b02      	subs	r3, #2
 8000520:	443c      	add	r4, r7
 8000522:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000526:	fba0 9302 	umull	r9, r3, r0, r2
 800052a:	eba4 040c 	sub.w	r4, r4, ip
 800052e:	429c      	cmp	r4, r3
 8000530:	46ce      	mov	lr, r9
 8000532:	469c      	mov	ip, r3
 8000534:	d351      	bcc.n	80005da <__udivmoddi4+0x28a>
 8000536:	d04e      	beq.n	80005d6 <__udivmoddi4+0x286>
 8000538:	b155      	cbz	r5, 8000550 <__udivmoddi4+0x200>
 800053a:	ebb8 030e 	subs.w	r3, r8, lr
 800053e:	eb64 040c 	sbc.w	r4, r4, ip
 8000542:	fa04 f606 	lsl.w	r6, r4, r6
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431e      	orrs	r6, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	e9c5 6400 	strd	r6, r4, [r5]
 8000550:	2100      	movs	r1, #0
 8000552:	e750      	b.n	80003f6 <__udivmoddi4+0xa6>
 8000554:	f1c2 0320 	rsb	r3, r2, #32
 8000558:	fa20 f103 	lsr.w	r1, r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa24 f303 	lsr.w	r3, r4, r3
 8000564:	4094      	lsls	r4, r2
 8000566:	430c      	orrs	r4, r1
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000570:	fa1f f78c 	uxth.w	r7, ip
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3110 	mls	r1, r8, r0, r3
 800057c:	0c23      	lsrs	r3, r4, #16
 800057e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000582:	fb00 f107 	mul.w	r1, r0, r7
 8000586:	4299      	cmp	r1, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x24c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000592:	d22c      	bcs.n	80005ee <__udivmoddi4+0x29e>
 8000594:	4299      	cmp	r1, r3
 8000596:	d92a      	bls.n	80005ee <__udivmoddi4+0x29e>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1a5b      	subs	r3, r3, r1
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a4:	fb08 3311 	mls	r3, r8, r1, r3
 80005a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ac:	fb01 f307 	mul.w	r3, r1, r7
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x276>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005bc:	d213      	bcs.n	80005e6 <__udivmoddi4+0x296>
 80005be:	42a3      	cmp	r3, r4
 80005c0:	d911      	bls.n	80005e6 <__udivmoddi4+0x296>
 80005c2:	3902      	subs	r1, #2
 80005c4:	4464      	add	r4, ip
 80005c6:	1ae4      	subs	r4, r4, r3
 80005c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005cc:	e739      	b.n	8000442 <__udivmoddi4+0xf2>
 80005ce:	4604      	mov	r4, r0
 80005d0:	e6f0      	b.n	80003b4 <__udivmoddi4+0x64>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e706      	b.n	80003e4 <__udivmoddi4+0x94>
 80005d6:	45c8      	cmp	r8, r9
 80005d8:	d2ae      	bcs.n	8000538 <__udivmoddi4+0x1e8>
 80005da:	ebb9 0e02 	subs.w	lr, r9, r2
 80005de:	eb63 0c07 	sbc.w	ip, r3, r7
 80005e2:	3801      	subs	r0, #1
 80005e4:	e7a8      	b.n	8000538 <__udivmoddi4+0x1e8>
 80005e6:	4631      	mov	r1, r6
 80005e8:	e7ed      	b.n	80005c6 <__udivmoddi4+0x276>
 80005ea:	4603      	mov	r3, r0
 80005ec:	e799      	b.n	8000522 <__udivmoddi4+0x1d2>
 80005ee:	4630      	mov	r0, r6
 80005f0:	e7d4      	b.n	800059c <__udivmoddi4+0x24c>
 80005f2:	46d6      	mov	lr, sl
 80005f4:	e77f      	b.n	80004f6 <__udivmoddi4+0x1a6>
 80005f6:	4463      	add	r3, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e74d      	b.n	8000498 <__udivmoddi4+0x148>
 80005fc:	4606      	mov	r6, r0
 80005fe:	4623      	mov	r3, r4
 8000600:	4608      	mov	r0, r1
 8000602:	e70f      	b.n	8000424 <__udivmoddi4+0xd4>
 8000604:	3e02      	subs	r6, #2
 8000606:	4463      	add	r3, ip
 8000608:	e730      	b.n	800046c <__udivmoddi4+0x11c>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	//this is here to collect segger event time stamp
	DWT->CTRL |= (1 << 0);//Enable CYCCNT in DWT_CTRL.
 8000616:	4b30      	ldr	r3, [pc, #192]	@ (80006d8 <main+0xc8>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a2f      	ldr	r2, [pc, #188]	@ (80006d8 <main+0xc8>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fd0b 	bl	800103c <HAL_Init>
 // HAL_RCC_DeInit();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f86b 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f8f3 	bl	8000814 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062e:	f000 f8c7 	bl	80007c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //SEGGER_UART_init(500000);
  SEGGER_SYSVIEW_Conf();
 8000632:	f005 fa95 	bl	8005b60 <SEGGER_SYSVIEW_Conf>

	//SEGGER_SYSVIEW_Start();

	sprintf(usr_msg,"Demo of Binary semaphore usage between 2 Tasks \r\n");
 8000636:	4929      	ldr	r1, [pc, #164]	@ (80006dc <main+0xcc>)
 8000638:	4829      	ldr	r0, [pc, #164]	@ (80006e0 <main+0xd0>)
 800063a:	f007 fdeb 	bl	8008214 <siprintf>
	SEGGER_SYSVIEW_PrintfTarget(usr_msg);
 800063e:	4828      	ldr	r0, [pc, #160]	@ (80006e0 <main+0xd0>)
 8000640:	f007 fc66 	bl	8007f10 <SEGGER_SYSVIEW_PrintfTarget>
	printmsg(usr_msg);
 8000644:	4826      	ldr	r0, [pc, #152]	@ (80006e0 <main+0xd0>)
 8000646:	f000 fad3 	bl	8000bf0 <printmsg>


    /* Before a semaphore is used it must be explicitly created.
     * In this example a binary semaphore is created . */
    vSemaphoreCreateBinary( xWork );
 800064a:	2203      	movs	r2, #3
 800064c:	2100      	movs	r1, #0
 800064e:	2001      	movs	r0, #1
 8000650:	f002 fc64 	bl	8002f1c <xQueueGenericCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a23      	ldr	r2, [pc, #140]	@ (80006e4 <main+0xd4>)
 8000658:	6013      	str	r3, [r2, #0]
 800065a:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <main+0xd4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <main+0x60>
 8000662:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <main+0xd4>)
 8000664:	6818      	ldr	r0, [r3, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	f002 fce2 	bl	8003034 <xQueueGenericSend>

	/* The queue is created to hold a maximum of 1 Element. */
    xWorkQueue = xQueueCreate( 1, sizeof( unsigned int ) );
 8000670:	2200      	movs	r2, #0
 8000672:	2104      	movs	r1, #4
 8000674:	2001      	movs	r0, #1
 8000676:	f002 fc51 	bl	8002f1c <xQueueGenericCreate>
 800067a:	4603      	mov	r3, r0
 800067c:	4a1a      	ldr	r2, [pc, #104]	@ (80006e8 <main+0xd8>)
 800067e:	6013      	str	r3, [r2, #0]


    /* Check the semaphore and queue was created successfully. */
    if( (xWork != NULL) && (xWorkQueue != NULL) )
 8000680:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <main+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d01b      	beq.n	80006c0 <main+0xb0>
 8000688:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <main+0xd8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d017      	beq.n	80006c0 <main+0xb0>
    {

		/* Create the 'Manager' task.  This is the task that will be synchronized with the Employee task.  The Manager task is created with a high priority  */
        xTaskCreate( vManagerTask, "Manager", 500, NULL, 3, NULL );
 8000690:	2300      	movs	r3, #0
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2303      	movs	r3, #3
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800069e:	4913      	ldr	r1, [pc, #76]	@ (80006ec <main+0xdc>)
 80006a0:	4813      	ldr	r0, [pc, #76]	@ (80006f0 <main+0xe0>)
 80006a2:	f003 fa95 	bl	8003bd0 <xTaskCreate>

        /* Create a employee task with less priority than manager */
        xTaskCreate( vEmployeeTask, "Employee", 500, NULL, 1, NULL );
 80006a6:	2300      	movs	r3, #0
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2301      	movs	r3, #1
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006b4:	490f      	ldr	r1, [pc, #60]	@ (80006f4 <main+0xe4>)
 80006b6:	4810      	ldr	r0, [pc, #64]	@ (80006f8 <main+0xe8>)
 80006b8:	f003 fa8a 	bl	8003bd0 <xTaskCreate>

        /* Start the scheduler so the created tasks start executing. */
        vTaskStartScheduler();
 80006bc:	f003 fc26 	bl	8003f0c <vTaskStartScheduler>
    }

    sprintf(usr_msg,"Queue/Sema create failed.. \r\n");
 80006c0:	490e      	ldr	r1, [pc, #56]	@ (80006fc <main+0xec>)
 80006c2:	4807      	ldr	r0, [pc, #28]	@ (80006e0 <main+0xd0>)
 80006c4:	f007 fda6 	bl	8008214 <siprintf>
   SEGGER_SYSVIEW_PrintfTarget(usr_msg);
 80006c8:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <main+0xd0>)
 80006ca:	f007 fc21 	bl	8007f10 <SEGGER_SYSVIEW_PrintfTarget>
   printmsg(usr_msg);
 80006ce:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <main+0xd0>)
 80006d0:	f000 fa8e 	bl	8000bf0 <printmsg>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <main+0xc4>
 80006d8:	e0001000 	.word	0xe0001000
 80006dc:	08009390 	.word	0x08009390
 80006e0:	200000d4 	.word	0x200000d4
 80006e4:	200001d0 	.word	0x200001d0
 80006e8:	200001d4 	.word	0x200001d4
 80006ec:	080093c4 	.word	0x080093c4
 80006f0:	08000ad1 	.word	0x08000ad1
 80006f4:	080093cc 	.word	0x080093cc
 80006f8:	08000b95 	.word	0x08000b95
 80006fc:	080093d8 	.word	0x080093d8

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	@ 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2230      	movs	r2, #48	@ 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f007 fdf3 	bl	80082fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	4b23      	ldr	r3, [pc, #140]	@ (80007b8 <SystemClock_Config+0xb8>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	4a22      	ldr	r2, [pc, #136]	@ (80007b8 <SystemClock_Config+0xb8>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	@ 0x40
 8000734:	4b20      	ldr	r3, [pc, #128]	@ (80007b8 <SystemClock_Config+0xb8>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <SystemClock_Config+0xbc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a1c      	ldr	r2, [pc, #112]	@ (80007bc <SystemClock_Config+0xbc>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <SystemClock_Config+0xbc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000768:	2300      	movs	r3, #0
 800076a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4618      	mov	r0, r3
 8000772:	f000 ff3d 	bl	80015f0 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800077c:	f000 fa60 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800078c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000796:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 f99e 	bl	8001ae0 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007aa:	f000 fa49 	bl	8000c40 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	@ 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <MX_USART2_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007f8:	f001 fe66 	bl	80024c8 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f000 fa1d 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000008c 	.word	0x2000008c
 8000810:	40004400 	.word	0x40004400

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	@ 0x30
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	4ba2      	ldr	r3, [pc, #648]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4aa1      	ldr	r2, [pc, #644]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000834:	f043 0310 	orr.w	r3, r3, #16
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b9f      	ldr	r3, [pc, #636]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0310 	and.w	r3, r3, #16
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	4b9b      	ldr	r3, [pc, #620]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a9a      	ldr	r2, [pc, #616]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b98      	ldr	r3, [pc, #608]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b94      	ldr	r3, [pc, #592]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a93      	ldr	r2, [pc, #588]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b91      	ldr	r3, [pc, #580]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b8d      	ldr	r3, [pc, #564]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a8c      	ldr	r2, [pc, #560]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b8a      	ldr	r3, [pc, #552]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b86      	ldr	r3, [pc, #536]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a85      	ldr	r2, [pc, #532]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b83      	ldr	r3, [pc, #524]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b7f      	ldr	r3, [pc, #508]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a7e      	ldr	r2, [pc, #504]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b7c      	ldr	r3, [pc, #496]	@ (8000ab8 <MX_GPIO_Init+0x2a4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2108      	movs	r1, #8
 80008d6:	4879      	ldr	r0, [pc, #484]	@ (8000abc <MX_GPIO_Init+0x2a8>)
 80008d8:	f000 fe70 	bl	80015bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	4877      	ldr	r0, [pc, #476]	@ (8000ac0 <MX_GPIO_Init+0x2ac>)
 80008e2:	f000 fe6b 	bl	80015bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e6:	2200      	movs	r2, #0
 80008e8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008ec:	4875      	ldr	r0, [pc, #468]	@ (8000ac4 <MX_GPIO_Init+0x2b0>)
 80008ee:	f000 fe65 	bl	80015bc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008f2:	2308      	movs	r3, #8
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	486c      	ldr	r0, [pc, #432]	@ (8000abc <MX_GPIO_Init+0x2a8>)
 800090a:	f000 fcbb 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800090e:	2301      	movs	r3, #1
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4866      	ldr	r0, [pc, #408]	@ (8000ac0 <MX_GPIO_Init+0x2ac>)
 8000926:	f000 fcad 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800092a:	2308      	movs	r3, #8
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093a:	2305      	movs	r3, #5
 800093c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	485e      	ldr	r0, [pc, #376]	@ (8000ac0 <MX_GPIO_Init+0x2ac>)
 8000946:	f000 fc9d 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094a:	2301      	movs	r3, #1
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	485a      	ldr	r0, [pc, #360]	@ (8000ac8 <MX_GPIO_Init+0x2b4>)
 8000960:	f000 fc90 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000964:	2310      	movs	r3, #16
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000974:	2306      	movs	r3, #6
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4852      	ldr	r0, [pc, #328]	@ (8000ac8 <MX_GPIO_Init+0x2b4>)
 8000980:	f000 fc80 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000984:	23e0      	movs	r3, #224	@ 0xe0
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000994:	2305      	movs	r3, #5
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	484a      	ldr	r0, [pc, #296]	@ (8000ac8 <MX_GPIO_Init+0x2b4>)
 80009a0:	f000 fc70 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009a4:	2304      	movs	r3, #4
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4845      	ldr	r0, [pc, #276]	@ (8000acc <MX_GPIO_Init+0x2b8>)
 80009b8:	f000 fc64 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ce:	2305      	movs	r3, #5
 80009d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	483c      	ldr	r0, [pc, #240]	@ (8000acc <MX_GPIO_Init+0x2b8>)
 80009da:	f000 fc53 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009de:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009e2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4833      	ldr	r0, [pc, #204]	@ (8000ac4 <MX_GPIO_Init+0x2b0>)
 80009f8:	f000 fc44 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009fc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a0e:	2306      	movs	r3, #6
 8000a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4829      	ldr	r0, [pc, #164]	@ (8000ac0 <MX_GPIO_Init+0x2ac>)
 8000a1a:	f000 fc33 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4825      	ldr	r0, [pc, #148]	@ (8000ac8 <MX_GPIO_Init+0x2b4>)
 8000a34:	f000 fc26 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a38:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a4a:	230a      	movs	r3, #10
 8000a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	481c      	ldr	r0, [pc, #112]	@ (8000ac8 <MX_GPIO_Init+0x2b4>)
 8000a56:	f000 fc15 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a5a:	2320      	movs	r3, #32
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4815      	ldr	r0, [pc, #84]	@ (8000ac4 <MX_GPIO_Init+0x2b0>)
 8000a6e:	f000 fc09 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a72:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a78:	2312      	movs	r3, #18
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a84:	2304      	movs	r3, #4
 8000a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480f      	ldr	r0, [pc, #60]	@ (8000acc <MX_GPIO_Init+0x2b8>)
 8000a90:	f000 fbf8 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a98:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4804      	ldr	r0, [pc, #16]	@ (8000abc <MX_GPIO_Init+0x2a8>)
 8000aaa:	f000 fbeb 	bl	8001284 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aae:	bf00      	nop
 8000ab0:	3730      	adds	r7, #48	@ 0x30
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020400 	.word	0x40020400

08000ad0 <vManagerTask>:

/* USER CODE BEGIN 4 */

void vManagerTask( void *pvParameters )
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	 portBASE_TYPE xStatus;

   /* The semaphore is created in the 'empty' state, meaning the semaphore must
	 first be given using the xSemaphoreGive() API function before it
	 can subsequently be taken (obtained) */
   xSemaphoreGive( xWork);
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <vManagerTask+0x74>)
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	2300      	movs	r3, #0
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	f002 faa7 	bl	8003034 <xQueueGenericSend>

   for( ;; )
   {
       /* get a work ticket id(some random number) */
       xWorkTicketId = ( rand() & 0x1FF );
 8000ae6:	f007 fa95 	bl	8008014 <rand>
 8000aea:	4603      	mov	r3, r0
 8000aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000af0:	60bb      	str	r3, [r7, #8]

		/* Sends work ticket id to the work queue */
		xStatus = xQueueSend( xWorkQueue, &xWorkTicketId , portMAX_DELAY ); //Post an item on back of the queue
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <vManagerTask+0x78>)
 8000af4:	6818      	ldr	r0, [r3, #0]
 8000af6:	f107 0108 	add.w	r1, r7, #8
 8000afa:	2300      	movs	r3, #0
 8000afc:	f04f 32ff 	mov.w	r2, #4294967295
 8000b00:	f002 fa98 	bl	8003034 <xQueueGenericSend>
 8000b04:	60f8      	str	r0, [r7, #12]

		if( xStatus != pdPASS )
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d00a      	beq.n	8000b22 <vManagerTask+0x52>
		{
			sprintf(usr_msg,"Could not send to the queue.\r\n");
 8000b0c:	490f      	ldr	r1, [pc, #60]	@ (8000b4c <vManagerTask+0x7c>)
 8000b0e:	4810      	ldr	r0, [pc, #64]	@ (8000b50 <vManagerTask+0x80>)
 8000b10:	f007 fb80 	bl	8008214 <siprintf>
			SEGGER_SYSVIEW_PrintfTarget(usr_msg);
 8000b14:	480e      	ldr	r0, [pc, #56]	@ (8000b50 <vManagerTask+0x80>)
 8000b16:	f007 f9fb 	bl	8007f10 <SEGGER_SYSVIEW_PrintfTarget>
			printmsg(usr_msg);
 8000b1a:	480d      	ldr	r0, [pc, #52]	@ (8000b50 <vManagerTask+0x80>)
 8000b1c:	f000 f868 	bl	8000bf0 <printmsg>
 8000b20:	e7e1      	b.n	8000ae6 <vManagerTask+0x16>


		}else
		{
			/* Manager notifying the employee by "Giving" semaphore */
			xSemaphoreGive( xWork);
 8000b22:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <vManagerTask+0x74>)
 8000b24:	6818      	ldr	r0, [r3, #0]
 8000b26:	2300      	movs	r3, #0
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f002 fa82 	bl	8003034 <xQueueGenericSend>
			/* after assigning the work , just yield the processor because nothing to do */
			taskYIELD();
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <vManagerTask+0x84>)
 8000b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	f3bf 8f4f 	dsb	sy
 8000b3c:	f3bf 8f6f 	isb	sy
       xWorkTicketId = ( rand() & 0x1FF );
 8000b40:	e7d1      	b.n	8000ae6 <vManagerTask+0x16>
 8000b42:	bf00      	nop
 8000b44:	200001d0 	.word	0x200001d0
 8000b48:	200001d4 	.word	0x200001d4
 8000b4c:	080093f8 	.word	0x080093f8
 8000b50:	200000d4 	.word	0x200000d4
 8000b54:	e000ed04 	.word	0xe000ed04

08000b58 <EmployeeDoWork>:
   }
}


void EmployeeDoWork(unsigned char TicketId)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
	/* implement the work according to TickedID */
	sprintf(usr_msg,"Employee task : Working on Ticked id : %d\r\n",TicketId);
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4909      	ldr	r1, [pc, #36]	@ (8000b8c <EmployeeDoWork+0x34>)
 8000b68:	4809      	ldr	r0, [pc, #36]	@ (8000b90 <EmployeeDoWork+0x38>)
 8000b6a:	f007 fb53 	bl	8008214 <siprintf>
	SEGGER_SYSVIEW_PrintfTarget(usr_msg);
 8000b6e:	4808      	ldr	r0, [pc, #32]	@ (8000b90 <EmployeeDoWork+0x38>)
 8000b70:	f007 f9ce 	bl	8007f10 <SEGGER_SYSVIEW_PrintfTarget>
	printmsg(usr_msg);
 8000b74:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <EmployeeDoWork+0x38>)
 8000b76:	f000 f83b 	bl	8000bf0 <printmsg>
	vTaskDelay(TicketId);
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f003 f98b 	bl	8003e98 <vTaskDelay>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	08009418 	.word	0x08009418
 8000b90:	200000d4 	.word	0x200000d4

08000b94 <vEmployeeTask>:

static void vEmployeeTask( void *pvParameters )
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xStatus;
    /* As per most tasks, this task is implemented within an infinite loop. */
    for( ;; )
    {
		/* First Employee tries to take the semaphore, if it is available that means there is a task assigned by manager, otherwise employee task will be blocked */
		xSemaphoreTake( xWork, 0 );
 8000b9c:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <vEmployeeTask+0x4c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 fd46 	bl	8003634 <xQueueSemaphoreTake>

		/* get the ticket id from the work queue */
		xStatus = xQueueReceive( xWorkQueue, &xWorkTicketId, 0 );
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <vEmployeeTask+0x50>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f107 010b 	add.w	r1, r7, #11
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 fc2a 	bl	800340c <xQueueReceive>
 8000bb8:	60f8      	str	r0, [r7, #12]

		if( xStatus == pdPASS )
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d104      	bne.n	8000bca <vEmployeeTask+0x36>
		{
		  /* employee may decode the xWorkTicketId in this function to do the work*/
			EmployeeDoWork(xWorkTicketId);
 8000bc0:	7afb      	ldrb	r3, [r7, #11]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ffc8 	bl	8000b58 <EmployeeDoWork>
 8000bc8:	e7e8      	b.n	8000b9c <vEmployeeTask+0x8>
		}
		else
		{
			/* We did not receive anything from the queue.  This must be an error as this task should only run when the manager assigns at least one work. */
			sprintf(usr_msg,"Employee task : Queue is empty , nothing to do.\r\n");
 8000bca:	4907      	ldr	r1, [pc, #28]	@ (8000be8 <vEmployeeTask+0x54>)
 8000bcc:	4807      	ldr	r0, [pc, #28]	@ (8000bec <vEmployeeTask+0x58>)
 8000bce:	f007 fb21 	bl	8008214 <siprintf>
			SEGGER_SYSVIEW_PrintfTarget(usr_msg);
 8000bd2:	4806      	ldr	r0, [pc, #24]	@ (8000bec <vEmployeeTask+0x58>)
 8000bd4:	f007 f99c 	bl	8007f10 <SEGGER_SYSVIEW_PrintfTarget>
			printmsg(usr_msg);
 8000bd8:	4804      	ldr	r0, [pc, #16]	@ (8000bec <vEmployeeTask+0x58>)
 8000bda:	f000 f809 	bl	8000bf0 <printmsg>
		xSemaphoreTake( xWork, 0 );
 8000bde:	e7dd      	b.n	8000b9c <vEmployeeTask+0x8>
 8000be0:	200001d0 	.word	0x200001d0
 8000be4:	200001d4 	.word	0x200001d4
 8000be8:	08009444 	.word	0x08009444
 8000bec:	200000d4 	.word	0x200000d4

08000bf0 <printmsg>:
		}
    }
}

void printmsg(char *msg)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff fb33 	bl	8000264 <strlen>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	4803      	ldr	r0, [pc, #12]	@ (8000c18 <printmsg+0x28>)
 8000c0a:	f001 fcad 	bl	8002568 <HAL_UART_Transmit>

}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000008c 	.word	0x2000008c

08000c1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a04      	ldr	r2, [pc, #16]	@ (8000c3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d101      	bne.n	8000c32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c2e:	f000 fa27 	bl	8001080 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40001000 	.word	0x40001000

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <Error_Handler+0x8>

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a19      	ldr	r2, [pc, #100]	@ (8000d20 <HAL_UART_MspInit+0x84>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d12b      	bne.n	8000d16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	4a17      	ldr	r2, [pc, #92]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a10      	ldr	r2, [pc, #64]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cf6:	230c      	movs	r3, #12
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d06:	2307      	movs	r3, #7
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <HAL_UART_MspInit+0x8c>)
 8000d12:	f000 fab7 	bl	8001284 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	@ 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40004400 	.word	0x40004400
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000

08000d2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08e      	sub	sp, #56	@ 0x38
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	4b33      	ldr	r3, [pc, #204]	@ (8000e10 <HAL_InitTick+0xe4>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d44:	4a32      	ldr	r2, [pc, #200]	@ (8000e10 <HAL_InitTick+0xe4>)
 8000d46:	f043 0310 	orr.w	r3, r3, #16
 8000d4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4c:	4b30      	ldr	r3, [pc, #192]	@ (8000e10 <HAL_InitTick+0xe4>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d50:	f003 0310 	and.w	r3, r3, #16
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d58:	f107 0210 	add.w	r2, r7, #16
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f001 f8dc 	bl	8001f20 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d68:	6a3b      	ldr	r3, [r7, #32]
 8000d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d103      	bne.n	8000d7a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d72:	f001 f8ad 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
 8000d76:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d78:	e004      	b.n	8000d84 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d7a:	f001 f8a9 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d86:	4a23      	ldr	r2, [pc, #140]	@ (8000e14 <HAL_InitTick+0xe8>)
 8000d88:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8c:	0c9b      	lsrs	r3, r3, #18
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d92:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <HAL_InitTick+0xec>)
 8000d94:	4a21      	ldr	r2, [pc, #132]	@ (8000e1c <HAL_InitTick+0xf0>)
 8000d96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d98:	4b1f      	ldr	r3, [pc, #124]	@ (8000e18 <HAL_InitTick+0xec>)
 8000d9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000da0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e18 <HAL_InitTick+0xec>)
 8000da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000da4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000da6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e18 <HAL_InitTick+0xec>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dac:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <HAL_InitTick+0xec>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db2:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <HAL_InitTick+0xec>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000db8:	4817      	ldr	r0, [pc, #92]	@ (8000e18 <HAL_InitTick+0xec>)
 8000dba:	f001 f8e3 	bl	8001f84 <HAL_TIM_Base_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000dc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d11b      	bne.n	8000e04 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000dcc:	4812      	ldr	r0, [pc, #72]	@ (8000e18 <HAL_InitTick+0xec>)
 8000dce:	f001 f933 	bl	8002038 <HAL_TIM_Base_Start_IT>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000dd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d111      	bne.n	8000e04 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000de0:	2036      	movs	r0, #54	@ 0x36
 8000de2:	f000 fa41 	bl	8001268 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d808      	bhi.n	8000dfe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	2036      	movs	r0, #54	@ 0x36
 8000df2:	f000 fa1d 	bl	8001230 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <HAL_InitTick+0xf4>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	e002      	b.n	8000e04 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3738      	adds	r7, #56	@ 0x38
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800
 8000e14:	431bde83 	.word	0x431bde83
 8000e18:	200001d8 	.word	0x200001d8
 8000e1c:	40001000 	.word	0x40001000
 8000e20:	20000004 	.word	0x20000004

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <NMI_Handler+0x4>

08000e2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <BusFault_Handler+0x4>

08000e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <UsageFault_Handler+0x4>

08000e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e60:	4802      	ldr	r0, [pc, #8]	@ (8000e6c <TIM6_DAC_IRQHandler+0x10>)
 8000e62:	f001 f959 	bl	8002118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200001d8 	.word	0x200001d8

08000e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return 1;
 8000e74:	2301      	movs	r3, #1
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <_kill>:

int _kill(int pid, int sig)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e8a:	f007 fa73 	bl	8008374 <__errno>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2216      	movs	r2, #22
 8000e92:	601a      	str	r2, [r3, #0]
  return -1;
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_exit>:

void _exit (int status)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ffe7 	bl	8000e80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000eb2:	bf00      	nop
 8000eb4:	e7fd      	b.n	8000eb2 <_exit+0x12>

08000eb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	60f8      	str	r0, [r7, #12]
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	e00a      	b.n	8000ede <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ec8:	f3af 8000 	nop.w
 8000ecc:	4601      	mov	r1, r0
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	1c5a      	adds	r2, r3, #1
 8000ed2:	60ba      	str	r2, [r7, #8]
 8000ed4:	b2ca      	uxtb	r2, r1
 8000ed6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	3301      	adds	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	dbf0      	blt.n	8000ec8 <_read+0x12>
  }

  return len;
 8000ee6:	687b      	ldr	r3, [r7, #4]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f18:	605a      	str	r2, [r3, #4]
  return 0;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_isatty>:

int _isatty(int file)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b085      	sub	sp, #20
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f007 f9f4 	bl	8008374 <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	@ (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20020000 	.word	0x20020000
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	20000220 	.word	0x20000220
 8000fc0:	200147a0 	.word	0x200147a0

08000fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <SystemInit+0x20>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <SystemInit+0x20>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001020 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fec:	f7ff ffea 	bl	8000fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ff2:	490d      	ldr	r1, [pc, #52]	@ (8001028 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800102c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001008:	4c0a      	ldr	r4, [pc, #40]	@ (8001034 <LoopFillZerobss+0x22>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001016:	f007 f9b3 	bl	8008380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff faf9 	bl	8000610 <main>
  bx  lr    
 800101e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001020:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800102c:	08009684 	.word	0x08009684
  ldr r2, =_sbss
 8001030:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001034:	2001479c 	.word	0x2001479c

08001038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC_IRQHandler>
	...

0800103c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001040:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0d      	ldr	r2, [pc, #52]	@ (800107c <HAL_Init+0x40>)
 8001046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800104a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800104c:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <HAL_Init+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0a      	ldr	r2, [pc, #40]	@ (800107c <HAL_Init+0x40>)
 8001052:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	@ (800107c <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	@ (800107c <HAL_Init+0x40>)
 800105e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f8d8 	bl	800121a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106a:	200f      	movs	r0, #15
 800106c:	f7ff fe5e 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff fdec 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023c00 	.word	0x40023c00

08001080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_IncTick+0x20>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_IncTick+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <HAL_IncTick+0x24>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000224 	.word	0x20000224

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	@ (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000224 	.word	0x20000224

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	@ (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	@ (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	@ (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	@ 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	@ 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ff4c 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001242:	f7ff ff61 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001246:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	6978      	ldr	r0, [r7, #20]
 800124e:	f7ff ffb1 	bl	80011b4 <NVIC_EncodePriority>
 8001252:	4602      	mov	r2, r0
 8001254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff80 	bl	8001160 <__NVIC_SetPriority>
}
 8001260:	bf00      	nop
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff54 	bl	8001124 <__NVIC_EnableIRQ>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	@ 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	e16b      	b.n	8001578 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	f040 815a 	bne.w	8001572 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d005      	beq.n	80012d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d130      	bne.n	8001338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800130c:	2201      	movs	r2, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f003 0201 	and.w	r2, r3, #1
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b03      	cmp	r3, #3
 8001342:	d017      	beq.n	8001374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d123      	bne.n	80013c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	08da      	lsrs	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3208      	adds	r2, #8
 8001388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	08da      	lsrs	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	69b9      	ldr	r1, [r7, #24]
 80013c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0203 	and.w	r2, r3, #3
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80b4 	beq.w	8001572 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b60      	ldr	r3, [pc, #384]	@ (8001590 <HAL_GPIO_Init+0x30c>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001412:	4a5f      	ldr	r2, [pc, #380]	@ (8001590 <HAL_GPIO_Init+0x30c>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001418:	6453      	str	r3, [r2, #68]	@ 0x44
 800141a:	4b5d      	ldr	r3, [pc, #372]	@ (8001590 <HAL_GPIO_Init+0x30c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001426:	4a5b      	ldr	r2, [pc, #364]	@ (8001594 <HAL_GPIO_Init+0x310>)
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a52      	ldr	r2, [pc, #328]	@ (8001598 <HAL_GPIO_Init+0x314>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d02b      	beq.n	80014aa <HAL_GPIO_Init+0x226>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a51      	ldr	r2, [pc, #324]	@ (800159c <HAL_GPIO_Init+0x318>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d025      	beq.n	80014a6 <HAL_GPIO_Init+0x222>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a50      	ldr	r2, [pc, #320]	@ (80015a0 <HAL_GPIO_Init+0x31c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d01f      	beq.n	80014a2 <HAL_GPIO_Init+0x21e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4f      	ldr	r2, [pc, #316]	@ (80015a4 <HAL_GPIO_Init+0x320>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d019      	beq.n	800149e <HAL_GPIO_Init+0x21a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4e      	ldr	r2, [pc, #312]	@ (80015a8 <HAL_GPIO_Init+0x324>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d013      	beq.n	800149a <HAL_GPIO_Init+0x216>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4d      	ldr	r2, [pc, #308]	@ (80015ac <HAL_GPIO_Init+0x328>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d00d      	beq.n	8001496 <HAL_GPIO_Init+0x212>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4c      	ldr	r2, [pc, #304]	@ (80015b0 <HAL_GPIO_Init+0x32c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d007      	beq.n	8001492 <HAL_GPIO_Init+0x20e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4b      	ldr	r2, [pc, #300]	@ (80015b4 <HAL_GPIO_Init+0x330>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d101      	bne.n	800148e <HAL_GPIO_Init+0x20a>
 800148a:	2307      	movs	r3, #7
 800148c:	e00e      	b.n	80014ac <HAL_GPIO_Init+0x228>
 800148e:	2308      	movs	r3, #8
 8001490:	e00c      	b.n	80014ac <HAL_GPIO_Init+0x228>
 8001492:	2306      	movs	r3, #6
 8001494:	e00a      	b.n	80014ac <HAL_GPIO_Init+0x228>
 8001496:	2305      	movs	r3, #5
 8001498:	e008      	b.n	80014ac <HAL_GPIO_Init+0x228>
 800149a:	2304      	movs	r3, #4
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x228>
 800149e:	2303      	movs	r3, #3
 80014a0:	e004      	b.n	80014ac <HAL_GPIO_Init+0x228>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e002      	b.n	80014ac <HAL_GPIO_Init+0x228>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_GPIO_Init+0x228>
 80014aa:	2300      	movs	r3, #0
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	f002 0203 	and.w	r2, r2, #3
 80014b2:	0092      	lsls	r2, r2, #2
 80014b4:	4093      	lsls	r3, r2
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014bc:	4935      	ldr	r1, [pc, #212]	@ (8001594 <HAL_GPIO_Init+0x310>)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3302      	adds	r3, #2
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ca:	4b3b      	ldr	r3, [pc, #236]	@ (80015b8 <HAL_GPIO_Init+0x334>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ee:	4a32      	ldr	r2, [pc, #200]	@ (80015b8 <HAL_GPIO_Init+0x334>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f4:	4b30      	ldr	r3, [pc, #192]	@ (80015b8 <HAL_GPIO_Init+0x334>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001518:	4a27      	ldr	r2, [pc, #156]	@ (80015b8 <HAL_GPIO_Init+0x334>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800151e:	4b26      	ldr	r3, [pc, #152]	@ (80015b8 <HAL_GPIO_Init+0x334>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001542:	4a1d      	ldr	r2, [pc, #116]	@ (80015b8 <HAL_GPIO_Init+0x334>)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001548:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <HAL_GPIO_Init+0x334>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800156c:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <HAL_GPIO_Init+0x334>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3301      	adds	r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	2b0f      	cmp	r3, #15
 800157c:	f67f ae90 	bls.w	80012a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3724      	adds	r7, #36	@ 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40013800 	.word	0x40013800
 8001598:	40020000 	.word	0x40020000
 800159c:	40020400 	.word	0x40020400
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40021400 	.word	0x40021400
 80015b0:	40021800 	.word	0x40021800
 80015b4:	40021c00 	.word	0x40021c00
 80015b8:	40013c00 	.word	0x40013c00

080015bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]
 80015c8:	4613      	mov	r3, r2
 80015ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015cc:	787b      	ldrb	r3, [r7, #1]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d2:	887a      	ldrh	r2, [r7, #2]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015d8:	e003      	b.n	80015e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015da:	887b      	ldrh	r3, [r7, #2]
 80015dc:	041a      	lsls	r2, r3, #16
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	619a      	str	r2, [r3, #24]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e267      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d075      	beq.n	80016fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800160e:	4b88      	ldr	r3, [pc, #544]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b04      	cmp	r3, #4
 8001618:	d00c      	beq.n	8001634 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800161a:	4b85      	ldr	r3, [pc, #532]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001622:	2b08      	cmp	r3, #8
 8001624:	d112      	bne.n	800164c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001626:	4b82      	ldr	r3, [pc, #520]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800162e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001632:	d10b      	bne.n	800164c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	4b7e      	ldr	r3, [pc, #504]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d05b      	beq.n	80016f8 <HAL_RCC_OscConfig+0x108>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d157      	bne.n	80016f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e242      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001654:	d106      	bne.n	8001664 <HAL_RCC_OscConfig+0x74>
 8001656:	4b76      	ldr	r3, [pc, #472]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a75      	ldr	r2, [pc, #468]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e01d      	b.n	80016a0 <HAL_RCC_OscConfig+0xb0>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x98>
 800166e:	4b70      	ldr	r3, [pc, #448]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a6f      	ldr	r2, [pc, #444]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b6d      	ldr	r3, [pc, #436]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a6c      	ldr	r2, [pc, #432]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0xb0>
 8001688:	4b69      	ldr	r3, [pc, #420]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a68      	ldr	r2, [pc, #416]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800168e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b66      	ldr	r3, [pc, #408]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a65      	ldr	r2, [pc, #404]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800169a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800169e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d013      	beq.n	80016d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fcfe 	bl	80010a8 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff fcfa 	bl	80010a8 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	@ 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e207      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0xc0>
 80016ce:	e014      	b.n	80016fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fcea 	bl	80010a8 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fce6 	bl	80010a8 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	@ 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1f3      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	4b51      	ldr	r3, [pc, #324]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0xe8>
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d063      	beq.n	80017ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001706:	4b4a      	ldr	r3, [pc, #296]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001712:	4b47      	ldr	r3, [pc, #284]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800171a:	2b08      	cmp	r3, #8
 800171c:	d11c      	bne.n	8001758 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171e:	4b44      	ldr	r3, [pc, #272]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d116      	bne.n	8001758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172a:	4b41      	ldr	r3, [pc, #260]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <HAL_RCC_OscConfig+0x152>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d001      	beq.n	8001742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e1c7      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001742:	4b3b      	ldr	r3, [pc, #236]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4937      	ldr	r1, [pc, #220]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001756:	e03a      	b.n	80017ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001760:	4b34      	ldr	r3, [pc, #208]	@ (8001834 <HAL_RCC_OscConfig+0x244>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001766:	f7ff fc9f 	bl	80010a8 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176e:	f7ff fc9b 	bl	80010a8 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e1a8      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001780:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178c:	4b28      	ldr	r3, [pc, #160]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	4925      	ldr	r1, [pc, #148]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]
 80017a0:	e015      	b.n	80017ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a2:	4b24      	ldr	r3, [pc, #144]	@ (8001834 <HAL_RCC_OscConfig+0x244>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fc7e 	bl	80010a8 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff fc7a 	bl	80010a8 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e187      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d036      	beq.n	8001848 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d016      	beq.n	8001810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <HAL_RCC_OscConfig+0x248>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fc5e 	bl	80010a8 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff fc5a 	bl	80010a8 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e167      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001802:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <HAL_RCC_OscConfig+0x240>)
 8001804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x200>
 800180e:	e01b      	b.n	8001848 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001810:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <HAL_RCC_OscConfig+0x248>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff fc47 	bl	80010a8 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181c:	e00e      	b.n	800183c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181e:	f7ff fc43 	bl	80010a8 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d907      	bls.n	800183c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e150      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
 8001830:	40023800 	.word	0x40023800
 8001834:	42470000 	.word	0x42470000
 8001838:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	4b88      	ldr	r3, [pc, #544]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 800183e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1ea      	bne.n	800181e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 8097 	beq.w	8001984 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185a:	4b81      	ldr	r3, [pc, #516]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	4a7c      	ldr	r2, [pc, #496]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001874:	6413      	str	r3, [r2, #64]	@ 0x40
 8001876:	4b7a      	ldr	r3, [pc, #488]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001882:	2301      	movs	r3, #1
 8001884:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001886:	4b77      	ldr	r3, [pc, #476]	@ (8001a64 <HAL_RCC_OscConfig+0x474>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d118      	bne.n	80018c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001892:	4b74      	ldr	r3, [pc, #464]	@ (8001a64 <HAL_RCC_OscConfig+0x474>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a73      	ldr	r2, [pc, #460]	@ (8001a64 <HAL_RCC_OscConfig+0x474>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800189c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189e:	f7ff fc03 	bl	80010a8 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a6:	f7ff fbff 	bl	80010a8 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e10c      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001a64 <HAL_RCC_OscConfig+0x474>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d106      	bne.n	80018da <HAL_RCC_OscConfig+0x2ea>
 80018cc:	4b64      	ldr	r3, [pc, #400]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d0:	4a63      	ldr	r2, [pc, #396]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d8:	e01c      	b.n	8001914 <HAL_RCC_OscConfig+0x324>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b05      	cmp	r3, #5
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0x30c>
 80018e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0x324>
 80018fc:	4b58      	ldr	r3, [pc, #352]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001900:	4a57      	ldr	r2, [pc, #348]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6713      	str	r3, [r2, #112]	@ 0x70
 8001908:	4b55      	ldr	r3, [pc, #340]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190c:	4a54      	ldr	r2, [pc, #336]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 800190e:	f023 0304 	bic.w	r3, r3, #4
 8001912:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d015      	beq.n	8001948 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff fbc4 	bl	80010a8 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001922:	e00a      	b.n	800193a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7ff fbc0 	bl	80010a8 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e0cb      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193a:	4b49      	ldr	r3, [pc, #292]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0ee      	beq.n	8001924 <HAL_RCC_OscConfig+0x334>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001948:	f7ff fbae 	bl	80010a8 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194e:	e00a      	b.n	8001966 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001950:	f7ff fbaa 	bl	80010a8 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0b5      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001966:	4b3e      	ldr	r3, [pc, #248]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ee      	bne.n	8001950 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001972:	7dfb      	ldrb	r3, [r7, #23]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d105      	bne.n	8001984 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001978:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	4a38      	ldr	r2, [pc, #224]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 800197e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001982:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80a1 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800198e:	4b34      	ldr	r3, [pc, #208]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b08      	cmp	r3, #8
 8001998:	d05c      	beq.n	8001a54 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d141      	bne.n	8001a26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b31      	ldr	r3, [pc, #196]	@ (8001a68 <HAL_RCC_OscConfig+0x478>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fb7e 	bl	80010a8 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff fb7a 	bl	80010a8 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e087      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c2:	4b27      	ldr	r3, [pc, #156]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019dc:	019b      	lsls	r3, r3, #6
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e4:	085b      	lsrs	r3, r3, #1
 80019e6:	3b01      	subs	r3, #1
 80019e8:	041b      	lsls	r3, r3, #16
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	491b      	ldr	r1, [pc, #108]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <HAL_RCC_OscConfig+0x478>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff fb53 	bl	80010a8 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a06:	f7ff fb4f 	bl	80010a8 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e05c      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a18:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x416>
 8001a24:	e054      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <HAL_RCC_OscConfig+0x478>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb3c 	bl	80010a8 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff fb38 	bl	80010a8 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e045      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x444>
 8001a52:	e03d      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d107      	bne.n	8001a6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e038      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40007000 	.word	0x40007000
 8001a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <HAL_RCC_OscConfig+0x4ec>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d028      	beq.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d121      	bne.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d11a      	bne.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d111      	bne.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab2:	085b      	lsrs	r3, r3, #1
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d107      	bne.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800

08001ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0cc      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af4:	4b68      	ldr	r3, [pc, #416]	@ (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d90c      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b65      	ldr	r3, [pc, #404]	@ (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b63      	ldr	r3, [pc, #396]	@ (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0b8      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b34:	4b59      	ldr	r3, [pc, #356]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a58      	ldr	r2, [pc, #352]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b4c:	4b53      	ldr	r3, [pc, #332]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4a52      	ldr	r2, [pc, #328]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b58:	4b50      	ldr	r3, [pc, #320]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	494d      	ldr	r1, [pc, #308]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d044      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b47      	ldr	r3, [pc, #284]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d119      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e07f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d003      	beq.n	8001b9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e06f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	4b3b      	ldr	r3, [pc, #236]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e067      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bbe:	4b37      	ldr	r3, [pc, #220]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f023 0203 	bic.w	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4934      	ldr	r1, [pc, #208]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd0:	f7ff fa6a 	bl	80010a8 <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7ff fa66 	bl	80010a8 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e04f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	4b2b      	ldr	r3, [pc, #172]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 020c 	and.w	r2, r3, #12
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1eb      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c00:	4b25      	ldr	r3, [pc, #148]	@ (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d20c      	bcs.n	8001c28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b22      	ldr	r3, [pc, #136]	@ (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b20      	ldr	r3, [pc, #128]	@ (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e032      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4916      	ldr	r1, [pc, #88]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c52:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	490e      	ldr	r1, [pc, #56]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c66:	f000 f821 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	490a      	ldr	r1, [pc, #40]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	5ccb      	ldrb	r3, [r1, r3]
 8001c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7e:	4a09      	ldr	r2, [pc, #36]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c82:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f850 	bl	8000d2c <HAL_InitTick>

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40023c00 	.word	0x40023c00
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08009558 	.word	0x08009558
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004

08001cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb0:	b094      	sub	sp, #80	@ 0x50
 8001cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc4:	4b79      	ldr	r3, [pc, #484]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d00d      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x40>
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	f200 80e1 	bhi.w	8001e98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d003      	beq.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cde:	e0db      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce0:	4b73      	ldr	r3, [pc, #460]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ce4:	e0db      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ce6:	4b73      	ldr	r3, [pc, #460]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cea:	e0d8      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cec:	4b6f      	ldr	r3, [pc, #444]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cf4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d063      	beq.n	8001dca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d02:	4b6a      	ldr	r3, [pc, #424]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	099b      	lsrs	r3, r3, #6
 8001d08:	2200      	movs	r2, #0
 8001d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d16:	2300      	movs	r3, #0
 8001d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d1e:	4622      	mov	r2, r4
 8001d20:	462b      	mov	r3, r5
 8001d22:	f04f 0000 	mov.w	r0, #0
 8001d26:	f04f 0100 	mov.w	r1, #0
 8001d2a:	0159      	lsls	r1, r3, #5
 8001d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d30:	0150      	lsls	r0, r2, #5
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4621      	mov	r1, r4
 8001d38:	1a51      	subs	r1, r2, r1
 8001d3a:	6139      	str	r1, [r7, #16]
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d50:	4659      	mov	r1, fp
 8001d52:	018b      	lsls	r3, r1, #6
 8001d54:	4651      	mov	r1, sl
 8001d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d5a:	4651      	mov	r1, sl
 8001d5c:	018a      	lsls	r2, r1, #6
 8001d5e:	4651      	mov	r1, sl
 8001d60:	ebb2 0801 	subs.w	r8, r2, r1
 8001d64:	4659      	mov	r1, fp
 8001d66:	eb63 0901 	sbc.w	r9, r3, r1
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d7e:	4690      	mov	r8, r2
 8001d80:	4699      	mov	r9, r3
 8001d82:	4623      	mov	r3, r4
 8001d84:	eb18 0303 	adds.w	r3, r8, r3
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	462b      	mov	r3, r5
 8001d8c:	eb49 0303 	adc.w	r3, r9, r3
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d9e:	4629      	mov	r1, r5
 8001da0:	024b      	lsls	r3, r1, #9
 8001da2:	4621      	mov	r1, r4
 8001da4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001da8:	4621      	mov	r1, r4
 8001daa:	024a      	lsls	r2, r1, #9
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001db2:	2200      	movs	r2, #0
 8001db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001db6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001db8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dbc:	f7fe fab0 	bl	8000320 <__aeabi_uldivmod>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dc8:	e058      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dca:	4b38      	ldr	r3, [pc, #224]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	099b      	lsrs	r3, r3, #6
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dda:	623b      	str	r3, [r7, #32]
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001de4:	4642      	mov	r2, r8
 8001de6:	464b      	mov	r3, r9
 8001de8:	f04f 0000 	mov.w	r0, #0
 8001dec:	f04f 0100 	mov.w	r1, #0
 8001df0:	0159      	lsls	r1, r3, #5
 8001df2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001df6:	0150      	lsls	r0, r2, #5
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4641      	mov	r1, r8
 8001dfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e02:	4649      	mov	r1, r9
 8001e04:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e1c:	ebb2 040a 	subs.w	r4, r2, sl
 8001e20:	eb63 050b 	sbc.w	r5, r3, fp
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	00eb      	lsls	r3, r5, #3
 8001e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e32:	00e2      	lsls	r2, r4, #3
 8001e34:	4614      	mov	r4, r2
 8001e36:	461d      	mov	r5, r3
 8001e38:	4643      	mov	r3, r8
 8001e3a:	18e3      	adds	r3, r4, r3
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	464b      	mov	r3, r9
 8001e40:	eb45 0303 	adc.w	r3, r5, r3
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e52:	4629      	mov	r1, r5
 8001e54:	028b      	lsls	r3, r1, #10
 8001e56:	4621      	mov	r1, r4
 8001e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e5c:	4621      	mov	r1, r4
 8001e5e:	028a      	lsls	r2, r1, #10
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e66:	2200      	movs	r2, #0
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	61fa      	str	r2, [r7, #28]
 8001e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e70:	f7fe fa56 	bl	8000320 <__aeabi_uldivmod>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4613      	mov	r3, r2
 8001e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	3301      	adds	r3, #1
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e96:	e002      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e98:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3750      	adds	r7, #80	@ 0x50
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	00f42400 	.word	0x00f42400
 8001eb4:	007a1200 	.word	0x007a1200

08001eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	@ (8001ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000000 	.word	0x20000000

08001ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ed4:	f7ff fff0 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	0a9b      	lsrs	r3, r3, #10
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	4903      	ldr	r1, [pc, #12]	@ (8001ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	08009568 	.word	0x08009568

08001ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001efc:	f7ff ffdc 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	0b5b      	lsrs	r3, r3, #13
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	4903      	ldr	r1, [pc, #12]	@ (8001f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	08009568 	.word	0x08009568

08001f20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_RCC_GetClockConfig+0x5c>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0203 	and.w	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f7c <HAL_RCC_GetClockConfig+0x5c>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f48:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <HAL_RCC_GetClockConfig+0x5c>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_RCC_GetClockConfig+0x5c>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	08db      	lsrs	r3, r3, #3
 8001f5a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f62:	4b07      	ldr	r3, [pc, #28]	@ (8001f80 <HAL_RCC_GetClockConfig+0x60>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0207 	and.w	r2, r3, #7
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	601a      	str	r2, [r3, #0]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40023c00 	.word	0x40023c00

08001f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e041      	b.n	800201a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d106      	bne.n	8001fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f839 	bl	8002022 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	f000 f9c0 	bl	8002348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d001      	beq.n	8002050 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e04e      	b.n	80020ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a23      	ldr	r2, [pc, #140]	@ (80020fc <HAL_TIM_Base_Start_IT+0xc4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d022      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x80>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800207a:	d01d      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x80>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1f      	ldr	r2, [pc, #124]	@ (8002100 <HAL_TIM_Base_Start_IT+0xc8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d018      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x80>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1e      	ldr	r2, [pc, #120]	@ (8002104 <HAL_TIM_Base_Start_IT+0xcc>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d013      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x80>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1c      	ldr	r2, [pc, #112]	@ (8002108 <HAL_TIM_Base_Start_IT+0xd0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00e      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x80>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1b      	ldr	r2, [pc, #108]	@ (800210c <HAL_TIM_Base_Start_IT+0xd4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d009      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x80>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a19      	ldr	r2, [pc, #100]	@ (8002110 <HAL_TIM_Base_Start_IT+0xd8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d004      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x80>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a18      	ldr	r2, [pc, #96]	@ (8002114 <HAL_TIM_Base_Start_IT+0xdc>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d111      	bne.n	80020dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d010      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0201 	orr.w	r2, r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020da:	e007      	b.n	80020ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40010000 	.word	0x40010000
 8002100:	40000400 	.word	0x40000400
 8002104:	40000800 	.word	0x40000800
 8002108:	40000c00 	.word	0x40000c00
 800210c:	40010400 	.word	0x40010400
 8002110:	40014000 	.word	0x40014000
 8002114:	40001800 	.word	0x40001800

08002118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d020      	beq.n	800217c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01b      	beq.n	800217c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0202 	mvn.w	r2, #2
 800214c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8d2 	bl	800230c <HAL_TIM_IC_CaptureCallback>
 8002168:	e005      	b.n	8002176 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f8c4 	bl	80022f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f8d5 	bl	8002320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d020      	beq.n	80021c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01b      	beq.n	80021c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0204 	mvn.w	r2, #4
 8002198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2202      	movs	r2, #2
 800219e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f8ac 	bl	800230c <HAL_TIM_IC_CaptureCallback>
 80021b4:	e005      	b.n	80021c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f89e 	bl	80022f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f8af 	bl	8002320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d020      	beq.n	8002214 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01b      	beq.n	8002214 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0208 	mvn.w	r2, #8
 80021e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2204      	movs	r2, #4
 80021ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f886 	bl	800230c <HAL_TIM_IC_CaptureCallback>
 8002200:	e005      	b.n	800220e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f878 	bl	80022f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f889 	bl	8002320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d020      	beq.n	8002260 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b00      	cmp	r3, #0
 8002226:	d01b      	beq.n	8002260 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0210 	mvn.w	r2, #16
 8002230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2208      	movs	r2, #8
 8002236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f860 	bl	800230c <HAL_TIM_IC_CaptureCallback>
 800224c:	e005      	b.n	800225a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f852 	bl	80022f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f863 	bl	8002320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00c      	beq.n	8002284 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0201 	mvn.w	r2, #1
 800227c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fccc 	bl	8000c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002294:	2b00      	cmp	r3, #0
 8002296:	d007      	beq.n	80022a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80022a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f906 	bl	80024b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00c      	beq.n	80022cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d007      	beq.n	80022cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80022c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f834 	bl	8002334 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0220 	mvn.w	r2, #32
 80022e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f8d8 	bl	80024a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a46      	ldr	r2, [pc, #280]	@ (8002474 <TIM_Base_SetConfig+0x12c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d013      	beq.n	8002388 <TIM_Base_SetConfig+0x40>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002366:	d00f      	beq.n	8002388 <TIM_Base_SetConfig+0x40>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a43      	ldr	r2, [pc, #268]	@ (8002478 <TIM_Base_SetConfig+0x130>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d00b      	beq.n	8002388 <TIM_Base_SetConfig+0x40>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a42      	ldr	r2, [pc, #264]	@ (800247c <TIM_Base_SetConfig+0x134>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d007      	beq.n	8002388 <TIM_Base_SetConfig+0x40>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a41      	ldr	r2, [pc, #260]	@ (8002480 <TIM_Base_SetConfig+0x138>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d003      	beq.n	8002388 <TIM_Base_SetConfig+0x40>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a40      	ldr	r2, [pc, #256]	@ (8002484 <TIM_Base_SetConfig+0x13c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d108      	bne.n	800239a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800238e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a35      	ldr	r2, [pc, #212]	@ (8002474 <TIM_Base_SetConfig+0x12c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d02b      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023a8:	d027      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a32      	ldr	r2, [pc, #200]	@ (8002478 <TIM_Base_SetConfig+0x130>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d023      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a31      	ldr	r2, [pc, #196]	@ (800247c <TIM_Base_SetConfig+0x134>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d01f      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a30      	ldr	r2, [pc, #192]	@ (8002480 <TIM_Base_SetConfig+0x138>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d01b      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002484 <TIM_Base_SetConfig+0x13c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d017      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002488 <TIM_Base_SetConfig+0x140>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a2d      	ldr	r2, [pc, #180]	@ (800248c <TIM_Base_SetConfig+0x144>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00f      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002490 <TIM_Base_SetConfig+0x148>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00b      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002494 <TIM_Base_SetConfig+0x14c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002498 <TIM_Base_SetConfig+0x150>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d003      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a29      	ldr	r2, [pc, #164]	@ (800249c <TIM_Base_SetConfig+0x154>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d108      	bne.n	800240c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	4313      	orrs	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a10      	ldr	r2, [pc, #64]	@ (8002474 <TIM_Base_SetConfig+0x12c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d003      	beq.n	8002440 <TIM_Base_SetConfig+0xf8>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a12      	ldr	r2, [pc, #72]	@ (8002484 <TIM_Base_SetConfig+0x13c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d103      	bne.n	8002448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b01      	cmp	r3, #1
 8002458:	d105      	bne.n	8002466 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f023 0201 	bic.w	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	611a      	str	r2, [r3, #16]
  }
}
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40010000 	.word	0x40010000
 8002478:	40000400 	.word	0x40000400
 800247c:	40000800 	.word	0x40000800
 8002480:	40000c00 	.word	0x40000c00
 8002484:	40010400 	.word	0x40010400
 8002488:	40014000 	.word	0x40014000
 800248c:	40014400 	.word	0x40014400
 8002490:	40014800 	.word	0x40014800
 8002494:	40001800 	.word	0x40001800
 8002498:	40001c00 	.word	0x40001c00
 800249c:	40002000 	.word	0x40002000

080024a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e042      	b.n	8002560 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fe fbd4 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2224      	movs	r2, #36	@ 0x24
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800250a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f973 	bl	80027f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002520:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695a      	ldr	r2, [r3, #20]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002530:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002540:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	@ 0x28
 800256c:	af02      	add	r7, sp, #8
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	4613      	mov	r3, r2
 8002576:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b20      	cmp	r3, #32
 8002586:	d175      	bne.n	8002674 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_UART_Transmit+0x2c>
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e06e      	b.n	8002676 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2221      	movs	r2, #33	@ 0x21
 80025a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025a6:	f7fe fd7f 	bl	80010a8 <HAL_GetTick>
 80025aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	88fa      	ldrh	r2, [r7, #6]
 80025b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	88fa      	ldrh	r2, [r7, #6]
 80025b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025c0:	d108      	bne.n	80025d4 <HAL_UART_Transmit+0x6c>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d104      	bne.n	80025d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	61bb      	str	r3, [r7, #24]
 80025d2:	e003      	b.n	80025dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025dc:	e02e      	b.n	800263c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2200      	movs	r2, #0
 80025e6:	2180      	movs	r1, #128	@ 0x80
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f848 	bl	800267e <UART_WaitOnFlagUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e03a      	b.n	8002676 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10b      	bne.n	800261e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002614:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	3302      	adds	r3, #2
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	e007      	b.n	800262e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	3301      	adds	r3, #1
 800262c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1cb      	bne.n	80025de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2200      	movs	r2, #0
 800264e:	2140      	movs	r1, #64	@ 0x40
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f814 	bl	800267e <UART_WaitOnFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e006      	b.n	8002676 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002674:	2302      	movs	r3, #2
  }
}
 8002676:	4618      	mov	r0, r3
 8002678:	3720      	adds	r7, #32
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	4613      	mov	r3, r2
 800268c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800268e:	e03b      	b.n	8002708 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002696:	d037      	beq.n	8002708 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002698:	f7fe fd06 	bl	80010a8 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	6a3a      	ldr	r2, [r7, #32]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d302      	bcc.n	80026ae <UART_WaitOnFlagUntilTimeout+0x30>
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e03a      	b.n	8002728 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d023      	beq.n	8002708 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b80      	cmp	r3, #128	@ 0x80
 80026c4:	d020      	beq.n	8002708 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b40      	cmp	r3, #64	@ 0x40
 80026ca:	d01d      	beq.n	8002708 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d116      	bne.n	8002708 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f81d 	bl	8002730 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2208      	movs	r2, #8
 80026fa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e00f      	b.n	8002728 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	4013      	ands	r3, r2
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	429a      	cmp	r2, r3
 8002716:	bf0c      	ite	eq
 8002718:	2301      	moveq	r3, #1
 800271a:	2300      	movne	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	429a      	cmp	r2, r3
 8002724:	d0b4      	beq.n	8002690 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002730:	b480      	push	{r7}
 8002732:	b095      	sub	sp, #84	@ 0x54
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	330c      	adds	r3, #12
 800273e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002742:	e853 3f00 	ldrex	r3, [r3]
 8002746:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800274e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	330c      	adds	r3, #12
 8002756:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002758:	643a      	str	r2, [r7, #64]	@ 0x40
 800275a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800275e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002760:	e841 2300 	strex	r3, r2, [r1]
 8002764:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e5      	bne.n	8002738 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3314      	adds	r3, #20
 8002772:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	e853 3f00 	ldrex	r3, [r3]
 800277a:	61fb      	str	r3, [r7, #28]
   return(result);
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3314      	adds	r3, #20
 800278a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800278c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800278e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002790:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002794:	e841 2300 	strex	r3, r2, [r1]
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e5      	bne.n	800276c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d119      	bne.n	80027dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	330c      	adds	r3, #12
 80027ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	e853 3f00 	ldrex	r3, [r3]
 80027b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f023 0310 	bic.w	r3, r3, #16
 80027be:	647b      	str	r3, [r7, #68]	@ 0x44
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	330c      	adds	r3, #12
 80027c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027c8:	61ba      	str	r2, [r7, #24]
 80027ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027cc:	6979      	ldr	r1, [r7, #20]
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	e841 2300 	strex	r3, r2, [r1]
 80027d4:	613b      	str	r3, [r7, #16]
   return(result);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1e5      	bne.n	80027a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80027ea:	bf00      	nop
 80027ec:	3754      	adds	r7, #84	@ 0x54
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027fc:	b0c0      	sub	sp, #256	@ 0x100
 80027fe:	af00      	add	r7, sp, #0
 8002800:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002814:	68d9      	ldr	r1, [r3, #12]
 8002816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	ea40 0301 	orr.w	r3, r0, r1
 8002820:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	431a      	orrs	r2, r3
 8002830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	431a      	orrs	r2, r3
 8002838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002850:	f021 010c 	bic.w	r1, r1, #12
 8002854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800285e:	430b      	orrs	r3, r1
 8002860:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800286e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002872:	6999      	ldr	r1, [r3, #24]
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	ea40 0301 	orr.w	r3, r0, r1
 800287e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4b8f      	ldr	r3, [pc, #572]	@ (8002ac4 <UART_SetConfig+0x2cc>)
 8002888:	429a      	cmp	r2, r3
 800288a:	d005      	beq.n	8002898 <UART_SetConfig+0xa0>
 800288c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4b8d      	ldr	r3, [pc, #564]	@ (8002ac8 <UART_SetConfig+0x2d0>)
 8002894:	429a      	cmp	r2, r3
 8002896:	d104      	bne.n	80028a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002898:	f7ff fb2e 	bl	8001ef8 <HAL_RCC_GetPCLK2Freq>
 800289c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80028a0:	e003      	b.n	80028aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028a2:	f7ff fb15 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
 80028a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028b4:	f040 810c 	bne.w	8002ad0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028bc:	2200      	movs	r2, #0
 80028be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80028c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80028c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80028ca:	4622      	mov	r2, r4
 80028cc:	462b      	mov	r3, r5
 80028ce:	1891      	adds	r1, r2, r2
 80028d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80028d2:	415b      	adcs	r3, r3
 80028d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028da:	4621      	mov	r1, r4
 80028dc:	eb12 0801 	adds.w	r8, r2, r1
 80028e0:	4629      	mov	r1, r5
 80028e2:	eb43 0901 	adc.w	r9, r3, r1
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028fa:	4690      	mov	r8, r2
 80028fc:	4699      	mov	r9, r3
 80028fe:	4623      	mov	r3, r4
 8002900:	eb18 0303 	adds.w	r3, r8, r3
 8002904:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002908:	462b      	mov	r3, r5
 800290a:	eb49 0303 	adc.w	r3, r9, r3
 800290e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800291e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002922:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002926:	460b      	mov	r3, r1
 8002928:	18db      	adds	r3, r3, r3
 800292a:	653b      	str	r3, [r7, #80]	@ 0x50
 800292c:	4613      	mov	r3, r2
 800292e:	eb42 0303 	adc.w	r3, r2, r3
 8002932:	657b      	str	r3, [r7, #84]	@ 0x54
 8002934:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002938:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800293c:	f7fd fcf0 	bl	8000320 <__aeabi_uldivmod>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4b61      	ldr	r3, [pc, #388]	@ (8002acc <UART_SetConfig+0x2d4>)
 8002946:	fba3 2302 	umull	r2, r3, r3, r2
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	011c      	lsls	r4, r3, #4
 800294e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002952:	2200      	movs	r2, #0
 8002954:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002958:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800295c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002960:	4642      	mov	r2, r8
 8002962:	464b      	mov	r3, r9
 8002964:	1891      	adds	r1, r2, r2
 8002966:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002968:	415b      	adcs	r3, r3
 800296a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800296c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002970:	4641      	mov	r1, r8
 8002972:	eb12 0a01 	adds.w	sl, r2, r1
 8002976:	4649      	mov	r1, r9
 8002978:	eb43 0b01 	adc.w	fp, r3, r1
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002988:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800298c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002990:	4692      	mov	sl, r2
 8002992:	469b      	mov	fp, r3
 8002994:	4643      	mov	r3, r8
 8002996:	eb1a 0303 	adds.w	r3, sl, r3
 800299a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800299e:	464b      	mov	r3, r9
 80029a0:	eb4b 0303 	adc.w	r3, fp, r3
 80029a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80029b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80029bc:	460b      	mov	r3, r1
 80029be:	18db      	adds	r3, r3, r3
 80029c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80029c2:	4613      	mov	r3, r2
 80029c4:	eb42 0303 	adc.w	r3, r2, r3
 80029c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80029ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80029ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80029d2:	f7fd fca5 	bl	8000320 <__aeabi_uldivmod>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	4b3b      	ldr	r3, [pc, #236]	@ (8002acc <UART_SetConfig+0x2d4>)
 80029de:	fba3 2301 	umull	r2, r3, r3, r1
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	2264      	movs	r2, #100	@ 0x64
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	1acb      	subs	r3, r1, r3
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80029f2:	4b36      	ldr	r3, [pc, #216]	@ (8002acc <UART_SetConfig+0x2d4>)
 80029f4:	fba3 2302 	umull	r2, r3, r3, r2
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a00:	441c      	add	r4, r3
 8002a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a06:	2200      	movs	r2, #0
 8002a08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a14:	4642      	mov	r2, r8
 8002a16:	464b      	mov	r3, r9
 8002a18:	1891      	adds	r1, r2, r2
 8002a1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a1c:	415b      	adcs	r3, r3
 8002a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a24:	4641      	mov	r1, r8
 8002a26:	1851      	adds	r1, r2, r1
 8002a28:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a2a:	4649      	mov	r1, r9
 8002a2c:	414b      	adcs	r3, r1
 8002a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a3c:	4659      	mov	r1, fp
 8002a3e:	00cb      	lsls	r3, r1, #3
 8002a40:	4651      	mov	r1, sl
 8002a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a46:	4651      	mov	r1, sl
 8002a48:	00ca      	lsls	r2, r1, #3
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4642      	mov	r2, r8
 8002a52:	189b      	adds	r3, r3, r2
 8002a54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a58:	464b      	mov	r3, r9
 8002a5a:	460a      	mov	r2, r1
 8002a5c:	eb42 0303 	adc.w	r3, r2, r3
 8002a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a78:	460b      	mov	r3, r1
 8002a7a:	18db      	adds	r3, r3, r3
 8002a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a7e:	4613      	mov	r3, r2
 8002a80:	eb42 0303 	adc.w	r3, r2, r3
 8002a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002a8e:	f7fd fc47 	bl	8000320 <__aeabi_uldivmod>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4b0d      	ldr	r3, [pc, #52]	@ (8002acc <UART_SetConfig+0x2d4>)
 8002a98:	fba3 1302 	umull	r1, r3, r3, r2
 8002a9c:	095b      	lsrs	r3, r3, #5
 8002a9e:	2164      	movs	r1, #100	@ 0x64
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	3332      	adds	r3, #50	@ 0x32
 8002aaa:	4a08      	ldr	r2, [pc, #32]	@ (8002acc <UART_SetConfig+0x2d4>)
 8002aac:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab0:	095b      	lsrs	r3, r3, #5
 8002ab2:	f003 0207 	and.w	r2, r3, #7
 8002ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4422      	add	r2, r4
 8002abe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ac0:	e106      	b.n	8002cd0 <UART_SetConfig+0x4d8>
 8002ac2:	bf00      	nop
 8002ac4:	40011000 	.word	0x40011000
 8002ac8:	40011400 	.word	0x40011400
 8002acc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ad0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ada:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ade:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002ae2:	4642      	mov	r2, r8
 8002ae4:	464b      	mov	r3, r9
 8002ae6:	1891      	adds	r1, r2, r2
 8002ae8:	6239      	str	r1, [r7, #32]
 8002aea:	415b      	adcs	r3, r3
 8002aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002af2:	4641      	mov	r1, r8
 8002af4:	1854      	adds	r4, r2, r1
 8002af6:	4649      	mov	r1, r9
 8002af8:	eb43 0501 	adc.w	r5, r3, r1
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	00eb      	lsls	r3, r5, #3
 8002b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b0a:	00e2      	lsls	r2, r4, #3
 8002b0c:	4614      	mov	r4, r2
 8002b0e:	461d      	mov	r5, r3
 8002b10:	4643      	mov	r3, r8
 8002b12:	18e3      	adds	r3, r4, r3
 8002b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b18:	464b      	mov	r3, r9
 8002b1a:	eb45 0303 	adc.w	r3, r5, r3
 8002b1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b3e:	4629      	mov	r1, r5
 8002b40:	008b      	lsls	r3, r1, #2
 8002b42:	4621      	mov	r1, r4
 8002b44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b48:	4621      	mov	r1, r4
 8002b4a:	008a      	lsls	r2, r1, #2
 8002b4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b50:	f7fd fbe6 	bl	8000320 <__aeabi_uldivmod>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4b60      	ldr	r3, [pc, #384]	@ (8002cdc <UART_SetConfig+0x4e4>)
 8002b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	011c      	lsls	r4, r3, #4
 8002b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b66:	2200      	movs	r2, #0
 8002b68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b74:	4642      	mov	r2, r8
 8002b76:	464b      	mov	r3, r9
 8002b78:	1891      	adds	r1, r2, r2
 8002b7a:	61b9      	str	r1, [r7, #24]
 8002b7c:	415b      	adcs	r3, r3
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b84:	4641      	mov	r1, r8
 8002b86:	1851      	adds	r1, r2, r1
 8002b88:	6139      	str	r1, [r7, #16]
 8002b8a:	4649      	mov	r1, r9
 8002b8c:	414b      	adcs	r3, r1
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b9c:	4659      	mov	r1, fp
 8002b9e:	00cb      	lsls	r3, r1, #3
 8002ba0:	4651      	mov	r1, sl
 8002ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ba6:	4651      	mov	r1, sl
 8002ba8:	00ca      	lsls	r2, r1, #3
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4642      	mov	r2, r8
 8002bb2:	189b      	adds	r3, r3, r2
 8002bb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002bb8:	464b      	mov	r3, r9
 8002bba:	460a      	mov	r2, r1
 8002bbc:	eb42 0303 	adc.w	r3, r2, r3
 8002bc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002bdc:	4649      	mov	r1, r9
 8002bde:	008b      	lsls	r3, r1, #2
 8002be0:	4641      	mov	r1, r8
 8002be2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002be6:	4641      	mov	r1, r8
 8002be8:	008a      	lsls	r2, r1, #2
 8002bea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002bee:	f7fd fb97 	bl	8000320 <__aeabi_uldivmod>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4b38      	ldr	r3, [pc, #224]	@ (8002cdc <UART_SetConfig+0x4e4>)
 8002bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2264      	movs	r2, #100	@ 0x64
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	1acb      	subs	r3, r1, r3
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	3332      	adds	r3, #50	@ 0x32
 8002c0c:	4a33      	ldr	r2, [pc, #204]	@ (8002cdc <UART_SetConfig+0x4e4>)
 8002c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c18:	441c      	add	r4, r3
 8002c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c1e:	2200      	movs	r2, #0
 8002c20:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c22:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c28:	4642      	mov	r2, r8
 8002c2a:	464b      	mov	r3, r9
 8002c2c:	1891      	adds	r1, r2, r2
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	415b      	adcs	r3, r3
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c38:	4641      	mov	r1, r8
 8002c3a:	1851      	adds	r1, r2, r1
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	4649      	mov	r1, r9
 8002c40:	414b      	adcs	r3, r1
 8002c42:	607b      	str	r3, [r7, #4]
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c50:	4659      	mov	r1, fp
 8002c52:	00cb      	lsls	r3, r1, #3
 8002c54:	4651      	mov	r1, sl
 8002c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c5a:	4651      	mov	r1, sl
 8002c5c:	00ca      	lsls	r2, r1, #3
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4619      	mov	r1, r3
 8002c62:	4603      	mov	r3, r0
 8002c64:	4642      	mov	r2, r8
 8002c66:	189b      	adds	r3, r3, r2
 8002c68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c6a:	464b      	mov	r3, r9
 8002c6c:	460a      	mov	r2, r1
 8002c6e:	eb42 0303 	adc.w	r3, r2, r3
 8002c72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c7e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002c8c:	4649      	mov	r1, r9
 8002c8e:	008b      	lsls	r3, r1, #2
 8002c90:	4641      	mov	r1, r8
 8002c92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c96:	4641      	mov	r1, r8
 8002c98:	008a      	lsls	r2, r1, #2
 8002c9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002c9e:	f7fd fb3f 	bl	8000320 <__aeabi_uldivmod>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cdc <UART_SetConfig+0x4e4>)
 8002ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	2164      	movs	r1, #100	@ 0x64
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	3332      	adds	r3, #50	@ 0x32
 8002cba:	4a08      	ldr	r2, [pc, #32]	@ (8002cdc <UART_SetConfig+0x4e4>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	f003 020f 	and.w	r2, r3, #15
 8002cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4422      	add	r2, r4
 8002cce:	609a      	str	r2, [r3, #8]
}
 8002cd0:	bf00      	nop
 8002cd2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cdc:	51eb851f 	.word	0x51eb851f

08002ce0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f103 0208 	add.w	r2, r3, #8
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f103 0208 	add.w	r2, r3, #8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f103 0208 	add.w	r2, r3, #8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	601a      	str	r2, [r3, #0]
}
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002d82:	b480      	push	{r7}
 8002d84:	b085      	sub	sp, #20
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d103      	bne.n	8002da2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e00c      	b.n	8002dbc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3308      	adds	r3, #8
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	e002      	b.n	8002db0 <vListInsert+0x2e>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d2f6      	bcs.n	8002daa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	601a      	str	r2, [r3, #0]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6892      	ldr	r2, [r2, #8]
 8002e0a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6852      	ldr	r2, [r2, #4]
 8002e14:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d103      	bne.n	8002e28 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	1e5a      	subs	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10b      	bne.n	8002e74 <xQueueGenericReset+0x2c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002e6e:	bf00      	nop
 8002e70:	bf00      	nop
 8002e72:	e7fd      	b.n	8002e70 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002e74:	f002 fb32 	bl	80054dc <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e80:	68f9      	ldr	r1, [r7, #12]
 8002e82:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	441a      	add	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	68f9      	ldr	r1, [r7, #12]
 8002ea8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	441a      	add	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	22ff      	movs	r2, #255	@ 0xff
 8002eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	22ff      	movs	r2, #255	@ 0xff
 8002ec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d114      	bne.n	8002ef4 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01a      	beq.n	8002f08 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3310      	adds	r3, #16
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f001 faca 	bl	8004470 <xTaskRemoveFromEventList>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d012      	beq.n	8002f08 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <xQueueGenericReset+0xd0>)
 8002ee4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	e009      	b.n	8002f08 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	3310      	adds	r3, #16
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fef1 	bl	8002ce0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	3324      	adds	r3, #36	@ 0x24
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff feec 	bl	8002ce0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002f08:	f002 fb1a 	bl	8005540 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002f0c:	2301      	movs	r3, #1
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	e000ed04 	.word	0xe000ed04

08002f1c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08c      	sub	sp, #48	@ 0x30
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	4613      	mov	r3, r2
 8002f28:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10b      	bne.n	8002f48 <xQueueGenericCreate+0x2c>
        __asm volatile
 8002f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	61bb      	str	r3, [r7, #24]
    }
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	e7fd      	b.n	8002f44 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	fb02 f303 	mul.w	r3, r2, r3
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d006      	beq.n	8002f66 <xQueueGenericCreate+0x4a>
 8002f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d101      	bne.n	8002f6a <xQueueGenericCreate+0x4e>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <xQueueGenericCreate+0x50>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10b      	bne.n	8002f88 <xQueueGenericCreate+0x6c>
        __asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	617b      	str	r3, [r7, #20]
    }
 8002f82:	bf00      	nop
 8002f84:	bf00      	nop
 8002f86:	e7fd      	b.n	8002f84 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002f8e:	d90b      	bls.n	8002fa8 <xQueueGenericCreate+0x8c>
        __asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	613b      	str	r3, [r7, #16]
    }
 8002fa2:	bf00      	nop
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002faa:	3350      	adds	r3, #80	@ 0x50
 8002fac:	4618      	mov	r0, r3
 8002fae:	f002 fbc7 	bl	8005740 <pvPortMalloc>
 8002fb2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00d      	beq.n	8002fd6 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3350      	adds	r3, #80	@ 0x50
 8002fc2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002fc4:	79fa      	ldrb	r2, [r7, #7]
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f805 	bl	8002fe0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
    }
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3728      	adds	r7, #40	@ 0x28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d103      	bne.n	8002ffc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	e002      	b.n	8003002 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800300e:	2101      	movs	r1, #1
 8003010:	69b8      	ldr	r0, [r7, #24]
 8003012:	f7ff ff19 	bl	8002e48 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	68f9      	ldr	r1, [r7, #12]
 8003024:	2073      	movs	r0, #115	@ 0x73
 8003026:	f004 f8f9 	bl	800721c <SEGGER_SYSVIEW_RecordU32x3>
}
 800302a:	bf00      	nop
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b090      	sub	sp, #64	@ 0x40
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003042:	2300      	movs	r3, #0
 8003044:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800304a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10b      	bne.n	8003068 <xQueueGenericSend+0x34>
        __asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003062:	bf00      	nop
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d103      	bne.n	8003076 <xQueueGenericSend+0x42>
 800306e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <xQueueGenericSend+0x46>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <xQueueGenericSend+0x48>
 800307a:	2300      	movs	r3, #0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10b      	bne.n	8003098 <xQueueGenericSend+0x64>
        __asm volatile
 8003080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003092:	bf00      	nop
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d103      	bne.n	80030a6 <xQueueGenericSend+0x72>
 800309e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <xQueueGenericSend+0x76>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <xQueueGenericSend+0x78>
 80030aa:	2300      	movs	r3, #0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10b      	bne.n	80030c8 <xQueueGenericSend+0x94>
        __asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	623b      	str	r3, [r7, #32]
    }
 80030c2:	bf00      	nop
 80030c4:	bf00      	nop
 80030c6:	e7fd      	b.n	80030c4 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030c8:	f001 fb76 	bl	80047b8 <xTaskGetSchedulerState>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <xQueueGenericSend+0xa4>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <xQueueGenericSend+0xa8>
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <xQueueGenericSend+0xaa>
 80030dc:	2300      	movs	r3, #0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10b      	bne.n	80030fa <xQueueGenericSend+0xc6>
        __asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	61fb      	str	r3, [r7, #28]
    }
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop
 80030f8:	e7fd      	b.n	80030f6 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80030fa:	f002 f9ef 	bl	80054dc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003106:	429a      	cmp	r2, r3
 8003108:	d302      	bcc.n	8003110 <xQueueGenericSend+0xdc>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d136      	bne.n	800317e <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 8003110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003112:	4618      	mov	r0, r3
 8003114:	f004 fe10 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	460b      	mov	r3, r1
 8003122:	4601      	mov	r1, r0
 8003124:	205a      	movs	r0, #90	@ 0x5a
 8003126:	f004 f8ef 	bl	8007308 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003130:	f000 fbd8 	bl	80038e4 <prvCopyDataToQueue>
 8003134:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313a:	2b00      	cmp	r3, #0
 800313c:	d010      	beq.n	8003160 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800313e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003140:	3324      	adds	r3, #36	@ 0x24
 8003142:	4618      	mov	r0, r3
 8003144:	f001 f994 	bl	8004470 <xTaskRemoveFromEventList>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d013      	beq.n	8003176 <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800314e:	4b4d      	ldr	r3, [pc, #308]	@ (8003284 <xQueueGenericSend+0x250>)
 8003150:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	e00a      	b.n	8003176 <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003162:	2b00      	cmp	r3, #0
 8003164:	d007      	beq.n	8003176 <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003166:	4b47      	ldr	r3, [pc, #284]	@ (8003284 <xQueueGenericSend+0x250>)
 8003168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003176:	f002 f9e3 	bl	8005540 <vPortExitCritical>
                return pdPASS;
 800317a:	2301      	movs	r3, #1
 800317c:	e07d      	b.n	800327a <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d110      	bne.n	80031a6 <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003184:	f002 f9dc 	bl	8005540 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8003188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318a:	4618      	mov	r0, r3
 800318c:	f004 fdd4 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	460b      	mov	r3, r1
 800319a:	4601      	mov	r1, r0
 800319c:	205a      	movs	r0, #90	@ 0x5a
 800319e:	f004 f8b3 	bl	8007308 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e069      	b.n	800327a <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 80031a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d106      	bne.n	80031ba <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4618      	mov	r0, r3
 80031b2:	f001 f9c5 	bl	8004540 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80031b6:	2301      	movs	r3, #1
 80031b8:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80031ba:	f002 f9c1 	bl	8005540 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80031be:	f000 ff07 	bl	8003fd0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80031c2:	f002 f98b 	bl	80054dc <vPortEnterCritical>
 80031c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d2:	d103      	bne.n	80031dc <xQueueGenericSend+0x1a8>
 80031d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031e2:	b25b      	sxtb	r3, r3
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e8:	d103      	bne.n	80031f2 <xQueueGenericSend+0x1be>
 80031ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031f2:	f002 f9a5 	bl	8005540 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031f6:	1d3a      	adds	r2, r7, #4
 80031f8:	f107 0314 	add.w	r3, r7, #20
 80031fc:	4611      	mov	r1, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f001 f9b4 	bl	800456c <xTaskCheckForTimeOut>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d124      	bne.n	8003254 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800320a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800320c:	f000 fc62 	bl	8003ad4 <prvIsQueueFull>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d018      	beq.n	8003248 <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003218:	3310      	adds	r3, #16
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4611      	mov	r1, r2
 800321e:	4618      	mov	r0, r3
 8003220:	f001 f8d0 	bl	80043c4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003226:	f000 fbed 	bl	8003a04 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800322a:	f000 fedf 	bl	8003fec <xTaskResumeAll>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	f47f af62 	bne.w	80030fa <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8003236:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <xQueueGenericSend+0x250>)
 8003238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	e758      	b.n	80030fa <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003248:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800324a:	f000 fbdb 	bl	8003a04 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800324e:	f000 fecd 	bl	8003fec <xTaskResumeAll>
 8003252:	e752      	b.n	80030fa <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003254:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003256:	f000 fbd5 	bl	8003a04 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800325a:	f000 fec7 	bl	8003fec <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800325e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003260:	4618      	mov	r0, r3
 8003262:	f004 fd69 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	460b      	mov	r3, r1
 8003270:	4601      	mov	r1, r0
 8003272:	205a      	movs	r0, #90	@ 0x5a
 8003274:	f004 f848 	bl	8007308 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8003278:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800327a:	4618      	mov	r0, r3
 800327c:	3738      	adds	r7, #56	@ 0x38
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	e000ed04 	.word	0xe000ed04

08003288 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b090      	sub	sp, #64	@ 0x40
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800329a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10b      	bne.n	80032b8 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80032b2:	bf00      	nop
 80032b4:	bf00      	nop
 80032b6:	e7fd      	b.n	80032b4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d103      	bne.n	80032c6 <xQueueGenericSendFromISR+0x3e>
 80032be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <xQueueGenericSendFromISR+0x42>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <xQueueGenericSendFromISR+0x44>
 80032ca:	2300      	movs	r3, #0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10b      	bne.n	80032e8 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 80032d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80032e2:	bf00      	nop
 80032e4:	bf00      	nop
 80032e6:	e7fd      	b.n	80032e4 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d103      	bne.n	80032f6 <xQueueGenericSendFromISR+0x6e>
 80032ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <xQueueGenericSendFromISR+0x72>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <xQueueGenericSendFromISR+0x74>
 80032fa:	2300      	movs	r3, #0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10b      	bne.n	8003318 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	623b      	str	r3, [r7, #32]
    }
 8003312:	bf00      	nop
 8003314:	bf00      	nop
 8003316:	e7fd      	b.n	8003314 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003318:	f002 f9d0 	bl	80056bc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800331c:	f3ef 8211 	mrs	r2, BASEPRI
 8003320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	61fa      	str	r2, [r7, #28]
 8003332:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003334:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003336:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800333a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800333c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800333e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003340:	429a      	cmp	r2, r3
 8003342:	d302      	bcc.n	800334a <xQueueGenericSendFromISR+0xc2>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d149      	bne.n	80033de <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800334a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800334c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003350:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003358:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800335a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800335c:	4618      	mov	r0, r3
 800335e:	f004 fceb 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 8003362:	4601      	mov	r1, r0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	461a      	mov	r2, r3
 8003368:	2060      	movs	r0, #96	@ 0x60
 800336a:	f003 fefd 	bl	8007168 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003374:	f000 fab6 	bl	80038e4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003378:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d112      	bne.n	80033a8 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	2b00      	cmp	r3, #0
 8003388:	d026      	beq.n	80033d8 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800338a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800338c:	3324      	adds	r3, #36	@ 0x24
 800338e:	4618      	mov	r0, r3
 8003390:	f001 f86e 	bl	8004470 <xTaskRemoveFromEventList>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01e      	beq.n	80033d8 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01b      	beq.n	80033d8 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e017      	b.n	80033d8 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80033a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80033ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80033ae:	d10b      	bne.n	80033c8 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 80033b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	617b      	str	r3, [r7, #20]
    }
 80033c2:	bf00      	nop
 80033c4:	bf00      	nop
 80033c6:	e7fd      	b.n	80033c4 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80033c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80033cc:	3301      	adds	r3, #1
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	b25a      	sxtb	r2, r3
 80033d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80033d8:	2301      	movs	r3, #1
 80033da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 80033dc:	e00b      	b.n	80033f6 <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80033de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e0:	4618      	mov	r0, r3
 80033e2:	f004 fca9 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 80033e6:	4601      	mov	r1, r0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	461a      	mov	r2, r3
 80033ec:	2060      	movs	r0, #96	@ 0x60
 80033ee:	f003 febb 	bl	8007168 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003400:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003404:	4618      	mov	r0, r3
 8003406:	3740      	adds	r7, #64	@ 0x40
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b08f      	sub	sp, #60	@ 0x3c
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003418:	2300      	movs	r3, #0
 800341a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10b      	bne.n	800343e <xQueueReceive+0x32>
        __asm volatile
 8003426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	623b      	str	r3, [r7, #32]
    }
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	e7fd      	b.n	800343a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d103      	bne.n	800344c <xQueueReceive+0x40>
 8003444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <xQueueReceive+0x44>
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <xQueueReceive+0x46>
 8003450:	2300      	movs	r3, #0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10b      	bne.n	800346e <xQueueReceive+0x62>
        __asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	61fb      	str	r3, [r7, #28]
    }
 8003468:	bf00      	nop
 800346a:	bf00      	nop
 800346c:	e7fd      	b.n	800346a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800346e:	f001 f9a3 	bl	80047b8 <xTaskGetSchedulerState>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d102      	bne.n	800347e <xQueueReceive+0x72>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <xQueueReceive+0x76>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <xQueueReceive+0x78>
 8003482:	2300      	movs	r3, #0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10b      	bne.n	80034a0 <xQueueReceive+0x94>
        __asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	61bb      	str	r3, [r7, #24]
    }
 800349a:	bf00      	nop
 800349c:	bf00      	nop
 800349e:	e7fd      	b.n	800349c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80034a0:	f002 f81c 	bl	80054dc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d02f      	beq.n	8003510 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034b4:	f000 fa80 	bl	80039b8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80034b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ba:	4618      	mov	r0, r3
 80034bc:	f004 fc3c 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 80034c0:	4604      	mov	r4, r0
 80034c2:	2000      	movs	r0, #0
 80034c4:	f004 fc38 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 80034c8:	4602      	mov	r2, r0
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2101      	movs	r1, #1
 80034ce:	9100      	str	r1, [sp, #0]
 80034d0:	4621      	mov	r1, r4
 80034d2:	205c      	movs	r0, #92	@ 0x5c
 80034d4:	f003 ff18 	bl	8007308 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80034d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034da:	1e5a      	subs	r2, r3, #1
 80034dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034de:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00f      	beq.n	8003508 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ea:	3310      	adds	r3, #16
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 ffbf 	bl	8004470 <xTaskRemoveFromEventList>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d007      	beq.n	8003508 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80034f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003630 <xQueueReceive+0x224>)
 80034fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003508:	f002 f81a 	bl	8005540 <vPortExitCritical>
                return pdPASS;
 800350c:	2301      	movs	r3, #1
 800350e:	e08a      	b.n	8003626 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d113      	bne.n	800353e <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003516:	f002 f813 	bl	8005540 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800351a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351c:	4618      	mov	r0, r3
 800351e:	f004 fc0b 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 8003522:	4604      	mov	r4, r0
 8003524:	2000      	movs	r0, #0
 8003526:	f004 fc07 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 800352a:	4602      	mov	r2, r0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2101      	movs	r1, #1
 8003530:	9100      	str	r1, [sp, #0]
 8003532:	4621      	mov	r1, r4
 8003534:	205c      	movs	r0, #92	@ 0x5c
 8003536:	f003 fee7 	bl	8007308 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800353a:	2300      	movs	r3, #0
 800353c:	e073      	b.n	8003626 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800353e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d106      	bne.n	8003552 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003544:	f107 0310 	add.w	r3, r7, #16
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fff9 	bl	8004540 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800354e:	2301      	movs	r3, #1
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003552:	f001 fff5 	bl	8005540 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003556:	f000 fd3b 	bl	8003fd0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800355a:	f001 ffbf 	bl	80054dc <vPortEnterCritical>
 800355e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003560:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003564:	b25b      	sxtb	r3, r3
 8003566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356a:	d103      	bne.n	8003574 <xQueueReceive+0x168>
 800356c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003576:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800357a:	b25b      	sxtb	r3, r3
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d103      	bne.n	800358a <xQueueReceive+0x17e>
 8003582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800358a:	f001 ffd9 	bl	8005540 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800358e:	1d3a      	adds	r2, r7, #4
 8003590:	f107 0310 	add.w	r3, r7, #16
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f000 ffe8 	bl	800456c <xTaskCheckForTimeOut>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d124      	bne.n	80035ec <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035a4:	f000 fa80 	bl	8003aa8 <prvIsQueueEmpty>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d018      	beq.n	80035e0 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b0:	3324      	adds	r3, #36	@ 0x24
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 ff04 	bl	80043c4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80035bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035be:	f000 fa21 	bl	8003a04 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80035c2:	f000 fd13 	bl	8003fec <xTaskResumeAll>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f47f af69 	bne.w	80034a0 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80035ce:	4b18      	ldr	r3, [pc, #96]	@ (8003630 <xQueueReceive+0x224>)
 80035d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	e75f      	b.n	80034a0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80035e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035e2:	f000 fa0f 	bl	8003a04 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80035e6:	f000 fd01 	bl	8003fec <xTaskResumeAll>
 80035ea:	e759      	b.n	80034a0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80035ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035ee:	f000 fa09 	bl	8003a04 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80035f2:	f000 fcfb 	bl	8003fec <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035f8:	f000 fa56 	bl	8003aa8 <prvIsQueueEmpty>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f43f af4e 	beq.w	80034a0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003606:	4618      	mov	r0, r3
 8003608:	f004 fb96 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 800360c:	4604      	mov	r4, r0
 800360e:	2000      	movs	r0, #0
 8003610:	f004 fb92 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 8003614:	4602      	mov	r2, r0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2101      	movs	r1, #1
 800361a:	9100      	str	r1, [sp, #0]
 800361c:	4621      	mov	r1, r4
 800361e:	205c      	movs	r0, #92	@ 0x5c
 8003620:	f003 fe72 	bl	8007308 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003624:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003626:	4618      	mov	r0, r3
 8003628:	3734      	adds	r7, #52	@ 0x34
 800362a:	46bd      	mov	sp, r7
 800362c:	bd90      	pop	{r4, r7, pc}
 800362e:	bf00      	nop
 8003630:	e000ed04 	.word	0xe000ed04

08003634 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003634:	b590      	push	{r4, r7, lr}
 8003636:	b091      	sub	sp, #68	@ 0x44
 8003638:	af02      	add	r7, sp, #8
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800363e:	2300      	movs	r3, #0
 8003640:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003646:	2300      	movs	r3, #0
 8003648:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800364a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <xQueueSemaphoreTake+0x34>
        __asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	623b      	str	r3, [r7, #32]
    }
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	e7fd      	b.n	8003664 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800366a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00b      	beq.n	8003688 <xQueueSemaphoreTake+0x54>
        __asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	61fb      	str	r3, [r7, #28]
    }
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	e7fd      	b.n	8003684 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003688:	f001 f896 	bl	80047b8 <xTaskGetSchedulerState>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <xQueueSemaphoreTake+0x64>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <xQueueSemaphoreTake+0x68>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <xQueueSemaphoreTake+0x6a>
 800369c:	2300      	movs	r3, #0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10b      	bne.n	80036ba <xQueueSemaphoreTake+0x86>
        __asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	61bb      	str	r3, [r7, #24]
    }
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop
 80036b8:	e7fd      	b.n	80036b6 <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80036ba:	f001 ff0f 	bl	80054dc <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80036be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c2:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80036c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d034      	beq.n	8003734 <xQueueSemaphoreTake+0x100>
            {
                traceQUEUE_RECEIVE( pxQueue );
 80036ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036cc:	4618      	mov	r0, r3
 80036ce:	f004 fb33 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 80036d2:	4604      	mov	r4, r0
 80036d4:	2000      	movs	r0, #0
 80036d6:	f004 fb2f 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 80036da:	4602      	mov	r2, r0
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2101      	movs	r1, #1
 80036e0:	9100      	str	r1, [sp, #0]
 80036e2:	4621      	mov	r1, r4
 80036e4:	205c      	movs	r0, #92	@ 0x5c
 80036e6:	f003 fe0f 	bl	8007308 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80036ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ec:	1e5a      	subs	r2, r3, #1
 80036ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f0:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d104      	bne.n	8003704 <xQueueSemaphoreTake+0xd0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80036fa:	f001 fa11 	bl	8004b20 <pvTaskIncrementMutexHeldCount>
 80036fe:	4602      	mov	r2, r0
 8003700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003702:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00f      	beq.n	800372c <xQueueSemaphoreTake+0xf8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800370c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800370e:	3310      	adds	r3, #16
 8003710:	4618      	mov	r0, r3
 8003712:	f000 fead 	bl	8004470 <xTaskRemoveFromEventList>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d007      	beq.n	800372c <xQueueSemaphoreTake+0xf8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800371c:	4b64      	ldr	r3, [pc, #400]	@ (80038b0 <xQueueSemaphoreTake+0x27c>)
 800371e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800372c:	f001 ff08 	bl	8005540 <vPortExitCritical>
                return pdPASS;
 8003730:	2301      	movs	r3, #1
 8003732:	e0b8      	b.n	80038a6 <xQueueSemaphoreTake+0x272>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d122      	bne.n	8003780 <xQueueSemaphoreTake+0x14c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00b      	beq.n	8003758 <xQueueSemaphoreTake+0x124>
        __asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	617b      	str	r3, [r7, #20]
    }
 8003752:	bf00      	nop
 8003754:	bf00      	nop
 8003756:	e7fd      	b.n	8003754 <xQueueSemaphoreTake+0x120>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003758:	f001 fef2 	bl	8005540 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800375c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375e:	4618      	mov	r0, r3
 8003760:	f004 faea 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 8003764:	4604      	mov	r4, r0
 8003766:	2000      	movs	r0, #0
 8003768:	f004 fae6 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 800376c:	4602      	mov	r2, r0
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2101      	movs	r1, #1
 8003772:	9100      	str	r1, [sp, #0]
 8003774:	4621      	mov	r1, r4
 8003776:	205c      	movs	r0, #92	@ 0x5c
 8003778:	f003 fdc6 	bl	8007308 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800377c:	2300      	movs	r3, #0
 800377e:	e092      	b.n	80038a6 <xQueueSemaphoreTake+0x272>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <xQueueSemaphoreTake+0x160>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003786:	f107 030c 	add.w	r3, r7, #12
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fed8 	bl	8004540 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003790:	2301      	movs	r3, #1
 8003792:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003794:	f001 fed4 	bl	8005540 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003798:	f000 fc1a 	bl	8003fd0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800379c:	f001 fe9e 	bl	80054dc <vPortEnterCritical>
 80037a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037a6:	b25b      	sxtb	r3, r3
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ac:	d103      	bne.n	80037b6 <xQueueSemaphoreTake+0x182>
 80037ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037bc:	b25b      	sxtb	r3, r3
 80037be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c2:	d103      	bne.n	80037cc <xQueueSemaphoreTake+0x198>
 80037c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037cc:	f001 feb8 	bl	8005540 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037d0:	463a      	mov	r2, r7
 80037d2:	f107 030c 	add.w	r3, r7, #12
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fec7 	bl	800456c <xTaskCheckForTimeOut>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d132      	bne.n	800384a <xQueueSemaphoreTake+0x216>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80037e6:	f000 f95f 	bl	8003aa8 <prvIsQueueEmpty>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d026      	beq.n	800383e <xQueueSemaphoreTake+0x20a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d109      	bne.n	800380c <xQueueSemaphoreTake+0x1d8>
                        {
                            taskENTER_CRITICAL();
 80037f8:	f001 fe70 	bl	80054dc <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80037fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fff7 	bl	80047f4 <xTaskPriorityInherit>
 8003806:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 8003808:	f001 fe9a 	bl	8005540 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800380c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380e:	3324      	adds	r3, #36	@ 0x24
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	4611      	mov	r1, r2
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fdd5 	bl	80043c4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800381a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800381c:	f000 f8f2 	bl	8003a04 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003820:	f000 fbe4 	bl	8003fec <xTaskResumeAll>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	f47f af47 	bne.w	80036ba <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 800382c:	4b20      	ldr	r3, [pc, #128]	@ (80038b0 <xQueueSemaphoreTake+0x27c>)
 800382e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	e73d      	b.n	80036ba <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800383e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003840:	f000 f8e0 	bl	8003a04 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003844:	f000 fbd2 	bl	8003fec <xTaskResumeAll>
 8003848:	e737      	b.n	80036ba <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800384a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800384c:	f000 f8da 	bl	8003a04 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003850:	f000 fbcc 	bl	8003fec <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003854:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003856:	f000 f927 	bl	8003aa8 <prvIsQueueEmpty>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	f43f af2c 	beq.w	80036ba <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00d      	beq.n	8003884 <xQueueSemaphoreTake+0x250>
                        {
                            taskENTER_CRITICAL();
 8003868:	f001 fe38 	bl	80054dc <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800386c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800386e:	f000 f821 	bl	80038b4 <prvGetDisinheritPriorityAfterTimeout>
 8003872:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800387a:	4618      	mov	r0, r3
 800387c:	f001 f8b6 	bl	80049ec <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003880:	f001 fe5e 	bl	8005540 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003886:	4618      	mov	r0, r3
 8003888:	f004 fa56 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 800388c:	4604      	mov	r4, r0
 800388e:	2000      	movs	r0, #0
 8003890:	f004 fa52 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 8003894:	4602      	mov	r2, r0
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2101      	movs	r1, #1
 800389a:	9100      	str	r1, [sp, #0]
 800389c:	4621      	mov	r1, r4
 800389e:	205c      	movs	r0, #92	@ 0x5c
 80038a0:	f003 fd32 	bl	8007308 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80038a4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	373c      	adds	r7, #60	@ 0x3c
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd90      	pop	{r4, r7, pc}
 80038ae:	bf00      	nop
 80038b0:	e000ed04 	.word	0xe000ed04

080038b4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d006      	beq.n	80038d2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f1c3 0305 	rsb	r3, r3, #5
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	e001      	b.n	80038d6 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80038d6:	68fb      	ldr	r3, [r7, #12]
    }
 80038d8:	4618      	mov	r0, r3
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10d      	bne.n	800391e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d14d      	bne.n	80039a6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	4618      	mov	r0, r3
 8003910:	f000 ffea 	bl	80048e8 <xTaskPriorityDisinherit>
 8003914:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	e043      	b.n	80039a6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d119      	bne.n	8003958 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6858      	ldr	r0, [r3, #4]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	461a      	mov	r2, r3
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	f004 fd4d 	bl	80083ce <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393c:	441a      	add	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	429a      	cmp	r2, r3
 800394c:	d32b      	bcc.n	80039a6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	e026      	b.n	80039a6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	68d8      	ldr	r0, [r3, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003960:	461a      	mov	r2, r3
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	f004 fd33 	bl	80083ce <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	425b      	negs	r3, r3
 8003972:	441a      	add	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d207      	bcs.n	8003994 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398c:	425b      	negs	r3, r3
 800398e:	441a      	add	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d105      	bne.n	80039a6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80039ae:	697b      	ldr	r3, [r7, #20]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d018      	beq.n	80039fc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d2:	441a      	add	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d303      	bcc.n	80039ec <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68d9      	ldr	r1, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	461a      	mov	r2, r3
 80039f6:	6838      	ldr	r0, [r7, #0]
 80039f8:	f004 fce9 	bl	80083ce <memcpy>
    }
}
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003a0c:	f001 fd66 	bl	80054dc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a16:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a18:	e011      	b.n	8003a3e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d012      	beq.n	8003a48 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3324      	adds	r3, #36	@ 0x24
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fd22 	bl	8004470 <xTaskRemoveFromEventList>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003a32:	f000 fe03 	bl	800463c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	dce9      	bgt.n	8003a1a <prvUnlockQueue+0x16>
 8003a46:	e000      	b.n	8003a4a <prvUnlockQueue+0x46>
                        break;
 8003a48:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	22ff      	movs	r2, #255	@ 0xff
 8003a4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003a52:	f001 fd75 	bl	8005540 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003a56:	f001 fd41 	bl	80054dc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a60:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a62:	e011      	b.n	8003a88 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d012      	beq.n	8003a92 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3310      	adds	r3, #16
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fcfd 	bl	8004470 <xTaskRemoveFromEventList>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003a7c:	f000 fdde 	bl	800463c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003a80:	7bbb      	ldrb	r3, [r7, #14]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	dce9      	bgt.n	8003a64 <prvUnlockQueue+0x60>
 8003a90:	e000      	b.n	8003a94 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003a92:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	22ff      	movs	r2, #255	@ 0xff
 8003a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003a9c:	f001 fd50 	bl	8005540 <vPortExitCritical>
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003ab0:	f001 fd14 	bl	80054dc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003abc:	2301      	movs	r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	e001      	b.n	8003ac6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003ac6:	f001 fd3b 	bl	8005540 <vPortExitCritical>

    return xReturn;
 8003aca:	68fb      	ldr	r3, [r7, #12]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003adc:	f001 fcfe 	bl	80054dc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d102      	bne.n	8003af2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003aec:	2301      	movs	r3, #1
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e001      	b.n	8003af6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003af6:	f001 fd23 	bl	8005540 <vPortExitCritical>

    return xReturn;
 8003afa:	68fb      	ldr	r3, [r7, #12]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	e01e      	b.n	8003b52 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b14:	4a13      	ldr	r2, [pc, #76]	@ (8003b64 <vQueueAddToRegistry+0x60>)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d115      	bne.n	8003b4c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b20:	4910      	ldr	r1, [pc, #64]	@ (8003b64 <vQueueAddToRegistry+0x60>)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8003b64 <vQueueAddToRegistry+0x60>)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f004 f8fd 	bl	8007d38 <SEGGER_SYSVIEW_ShrinkId>
 8003b3e:	4601      	mov	r1, r0
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	2071      	movs	r0, #113	@ 0x71
 8003b46:	f003 fb0f 	bl	8007168 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8003b4a:	e006      	b.n	8003b5a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b07      	cmp	r3, #7
 8003b56:	d9dd      	bls.n	8003b14 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003b58:	bf00      	nop
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000228 	.word	0x20000228

08003b68 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003b78:	f001 fcb0 	bl	80054dc <vPortEnterCritical>
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b82:	b25b      	sxtb	r3, r3
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d103      	bne.n	8003b92 <vQueueWaitForMessageRestricted+0x2a>
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b98:	b25b      	sxtb	r3, r3
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9e:	d103      	bne.n	8003ba8 <vQueueWaitForMessageRestricted+0x40>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ba8:	f001 fcca 	bl	8005540 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d106      	bne.n	8003bc2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	3324      	adds	r3, #36	@ 0x24
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fc27 	bl	8004410 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003bc2:	6978      	ldr	r0, [r7, #20]
 8003bc4:	f7ff ff1e 	bl	8003a04 <prvUnlockQueue>
    }
 8003bc8:	bf00      	nop
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08c      	sub	sp, #48	@ 0x30
 8003bd4:	af04      	add	r7, sp, #16
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f001 fdab 	bl	8005740 <pvPortMalloc>
 8003bea:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00e      	beq.n	8003c10 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bf2:	2058      	movs	r0, #88	@ 0x58
 8003bf4:	f001 fda4 	bl	8005740 <pvPortMalloc>
 8003bf8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c06:	e005      	b.n	8003c14 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003c08:	6978      	ldr	r0, [r7, #20]
 8003c0a:	f001 fe7b 	bl	8005904 <vPortFree>
 8003c0e:	e001      	b.n	8003c14 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d013      	beq.n	8003c42 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c1a:	88fa      	ldrh	r2, [r7, #6]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	9303      	str	r3, [sp, #12]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	9302      	str	r3, [sp, #8]
 8003c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68b9      	ldr	r1, [r7, #8]
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 f80e 	bl	8003c52 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003c36:	69f8      	ldr	r0, [r7, #28]
 8003c38:	f000 f8a2 	bl	8003d80 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	61bb      	str	r3, [r7, #24]
 8003c40:	e002      	b.n	8003c48 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c42:	f04f 33ff 	mov.w	r3, #4294967295
 8003c46:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003c48:	69bb      	ldr	r3, [r7, #24]
    }
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b088      	sub	sp, #32
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c62:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	21a5      	movs	r1, #165	@ 0xa5
 8003c6c:	f004 fb45 	bl	80082fa <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	f023 0307 	bic.w	r3, r3, #7
 8003c88:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00b      	beq.n	8003cac <prvInitialiseNewTask+0x5a>
        __asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	617b      	str	r3, [r7, #20]
    }
 8003ca6:	bf00      	nop
 8003ca8:	bf00      	nop
 8003caa:	e7fd      	b.n	8003ca8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d01f      	beq.n	8003cf2 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	e012      	b.n	8003cde <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	7819      	ldrb	r1, [r3, #0]
 8003cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3334      	adds	r3, #52	@ 0x34
 8003cc8:	460a      	mov	r2, r1
 8003cca:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d006      	beq.n	8003ce6 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	2b09      	cmp	r3, #9
 8003ce2:	d9e9      	bls.n	8003cb8 <prvInitialiseNewTask+0x66>
 8003ce4:	e000      	b.n	8003ce8 <prvInitialiseNewTask+0x96>
            {
                break;
 8003ce6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003cf0:	e003      	b.n	8003cfa <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d901      	bls.n	8003d04 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d00:	2304      	movs	r3, #4
 8003d02:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d08:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d0e:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d12:	2200      	movs	r2, #0
 8003d14:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d18:	3304      	adds	r3, #4
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff f800 	bl	8002d20 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d22:	3318      	adds	r3, #24
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe fffb 	bl	8002d20 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d2e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d32:	f1c3 0205 	rsb	r2, r3, #5
 8003d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d38:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d3e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d42:	3350      	adds	r3, #80	@ 0x50
 8003d44:	2204      	movs	r2, #4
 8003d46:	2100      	movs	r1, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f004 fad6 	bl	80082fa <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d50:	3354      	adds	r3, #84	@ 0x54
 8003d52:	2201      	movs	r2, #1
 8003d54:	2100      	movs	r1, #0
 8003d56:	4618      	mov	r0, r3
 8003d58:	f004 facf 	bl	80082fa <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	68f9      	ldr	r1, [r7, #12]
 8003d60:	69b8      	ldr	r0, [r7, #24]
 8003d62:	f001 fa87 	bl	8005274 <pxPortInitialiseStack>
 8003d66:	4602      	mov	r2, r0
 8003d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d76:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d78:	bf00      	nop
 8003d7a:	3720      	adds	r7, #32
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003d80:	b5b0      	push	{r4, r5, r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003d88:	f001 fba8 	bl	80054dc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e7c <prvAddNewTaskToReadyList+0xfc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3301      	adds	r3, #1
 8003d92:	4a3a      	ldr	r2, [pc, #232]	@ (8003e7c <prvAddNewTaskToReadyList+0xfc>)
 8003d94:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003d96:	4b3a      	ldr	r3, [pc, #232]	@ (8003e80 <prvAddNewTaskToReadyList+0x100>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d109      	bne.n	8003db2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003d9e:	4a38      	ldr	r2, [pc, #224]	@ (8003e80 <prvAddNewTaskToReadyList+0x100>)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003da4:	4b35      	ldr	r3, [pc, #212]	@ (8003e7c <prvAddNewTaskToReadyList+0xfc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d110      	bne.n	8003dce <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003dac:	f000 fc6a 	bl	8004684 <prvInitialiseTaskLists>
 8003db0:	e00d      	b.n	8003dce <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003db2:	4b34      	ldr	r3, [pc, #208]	@ (8003e84 <prvAddNewTaskToReadyList+0x104>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003dba:	4b31      	ldr	r3, [pc, #196]	@ (8003e80 <prvAddNewTaskToReadyList+0x100>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d802      	bhi.n	8003dce <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8003e80 <prvAddNewTaskToReadyList+0x100>)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003dce:	4b2e      	ldr	r3, [pc, #184]	@ (8003e88 <prvAddNewTaskToReadyList+0x108>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8003e88 <prvAddNewTaskToReadyList+0x108>)
 8003dd6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8003e88 <prvAddNewTaskToReadyList+0x108>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d016      	beq.n	8003e14 <prvAddNewTaskToReadyList+0x94>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f003 fe7f 	bl	8007aec <SEGGER_SYSVIEW_OnTaskCreate>
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	461d      	mov	r5, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	461c      	mov	r4, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0a:	1ae3      	subs	r3, r4, r3
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	462b      	mov	r3, r5
 8003e10:	f001 ff48 	bl	8005ca4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f003 feec 	bl	8007bf4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e20:	2201      	movs	r2, #1
 8003e22:	409a      	lsls	r2, r3
 8003e24:	4b19      	ldr	r3, [pc, #100]	@ (8003e8c <prvAddNewTaskToReadyList+0x10c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	4a18      	ldr	r2, [pc, #96]	@ (8003e8c <prvAddNewTaskToReadyList+0x10c>)
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4a15      	ldr	r2, [pc, #84]	@ (8003e90 <prvAddNewTaskToReadyList+0x110>)
 8003e3c:	441a      	add	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4619      	mov	r1, r3
 8003e44:	4610      	mov	r0, r2
 8003e46:	f7fe ff78 	bl	8002d3a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003e4a:	f001 fb79 	bl	8005540 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e84 <prvAddNewTaskToReadyList+0x104>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00e      	beq.n	8003e74 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e56:	4b0a      	ldr	r3, [pc, #40]	@ (8003e80 <prvAddNewTaskToReadyList+0x100>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d207      	bcs.n	8003e74 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003e64:	4b0b      	ldr	r3, [pc, #44]	@ (8003e94 <prvAddNewTaskToReadyList+0x114>)
 8003e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003e7c:	20000340 	.word	0x20000340
 8003e80:	20000268 	.word	0x20000268
 8003e84:	2000034c 	.word	0x2000034c
 8003e88:	2000035c 	.word	0x2000035c
 8003e8c:	20000348 	.word	0x20000348
 8003e90:	2000026c 	.word	0x2000026c
 8003e94:	e000ed04 	.word	0xe000ed04

08003e98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01c      	beq.n	8003ee4 <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003eaa:	4b16      	ldr	r3, [pc, #88]	@ (8003f04 <vTaskDelay+0x6c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <vTaskDelay+0x32>
        __asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	60bb      	str	r3, [r7, #8]
    }
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	e7fd      	b.n	8003ec6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003eca:	f000 f881 	bl	8003fd0 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	2023      	movs	r0, #35	@ 0x23
 8003ed2:	f003 f90d 	bl	80070f0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fe35 	bl	8004b48 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003ede:	f000 f885 	bl	8003fec <xTaskResumeAll>
 8003ee2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d107      	bne.n	8003efa <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 8003eea:	4b07      	ldr	r3, [pc, #28]	@ (8003f08 <vTaskDelay+0x70>)
 8003eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000368 	.word	0x20000368
 8003f08:	e000ed04 	.word	0xe000ed04

08003f0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003f12:	4b27      	ldr	r3, [pc, #156]	@ (8003fb0 <vTaskStartScheduler+0xa4>)
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	2300      	movs	r3, #0
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	2282      	movs	r2, #130	@ 0x82
 8003f1e:	4925      	ldr	r1, [pc, #148]	@ (8003fb4 <vTaskStartScheduler+0xa8>)
 8003f20:	4825      	ldr	r0, [pc, #148]	@ (8003fb8 <vTaskStartScheduler+0xac>)
 8003f22:	f7ff fe55 	bl	8003bd0 <xTaskCreate>
 8003f26:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d102      	bne.n	8003f34 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003f2e:	f000 fe83 	bl	8004c38 <xTimerCreateTimerTask>
 8003f32:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d124      	bne.n	8003f84 <vTaskStartScheduler+0x78>
        __asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	60bb      	str	r3, [r7, #8]
    }
 8003f4c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003fbc <vTaskStartScheduler+0xb0>)
 8003f50:	f04f 32ff 	mov.w	r2, #4294967295
 8003f54:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003f56:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc0 <vTaskStartScheduler+0xb4>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f5c:	4b19      	ldr	r3, [pc, #100]	@ (8003fc4 <vTaskStartScheduler+0xb8>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003f62:	4b19      	ldr	r3, [pc, #100]	@ (8003fc8 <vTaskStartScheduler+0xbc>)
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	4b12      	ldr	r3, [pc, #72]	@ (8003fb0 <vTaskStartScheduler+0xa4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d102      	bne.n	8003f74 <vTaskStartScheduler+0x68>
 8003f6e:	f003 fda1 	bl	8007ab4 <SEGGER_SYSVIEW_OnIdle>
 8003f72:	e004      	b.n	8003f7e <vTaskStartScheduler+0x72>
 8003f74:	4b14      	ldr	r3, [pc, #80]	@ (8003fc8 <vTaskStartScheduler+0xbc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f003 fdf9 	bl	8007b70 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003f7e:	f001 fa09 	bl	8005394 <xPortStartScheduler>
 8003f82:	e00f      	b.n	8003fa4 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d10b      	bne.n	8003fa4 <vTaskStartScheduler+0x98>
        __asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	607b      	str	r3, [r7, #4]
    }
 8003f9e:	bf00      	nop
 8003fa0:	bf00      	nop
 8003fa2:	e7fd      	b.n	8003fa0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003fa4:	4b09      	ldr	r3, [pc, #36]	@ (8003fcc <vTaskStartScheduler+0xc0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000364 	.word	0x20000364
 8003fb4:	08009478 	.word	0x08009478
 8003fb8:	08004655 	.word	0x08004655
 8003fbc:	20000360 	.word	0x20000360
 8003fc0:	2000034c 	.word	0x2000034c
 8003fc4:	20000344 	.word	0x20000344
 8003fc8:	20000268 	.word	0x20000268
 8003fcc:	2000000c 	.word	0x2000000c

08003fd0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003fd4:	4b04      	ldr	r3, [pc, #16]	@ (8003fe8 <vTaskSuspendAll+0x18>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	4a03      	ldr	r2, [pc, #12]	@ (8003fe8 <vTaskSuspendAll+0x18>)
 8003fdc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003fde:	bf00      	nop
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	20000368 	.word	0x20000368

08003fec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003ffa:	4b44      	ldr	r3, [pc, #272]	@ (800410c <xTaskResumeAll+0x120>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10b      	bne.n	800401a <xTaskResumeAll+0x2e>
        __asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	603b      	str	r3, [r7, #0]
    }
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	e7fd      	b.n	8004016 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800401a:	f001 fa5f 	bl	80054dc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800401e:	4b3b      	ldr	r3, [pc, #236]	@ (800410c <xTaskResumeAll+0x120>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3b01      	subs	r3, #1
 8004024:	4a39      	ldr	r2, [pc, #228]	@ (800410c <xTaskResumeAll+0x120>)
 8004026:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004028:	4b38      	ldr	r3, [pc, #224]	@ (800410c <xTaskResumeAll+0x120>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d165      	bne.n	80040fc <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004030:	4b37      	ldr	r3, [pc, #220]	@ (8004110 <xTaskResumeAll+0x124>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d061      	beq.n	80040fc <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004038:	e032      	b.n	80040a0 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800403a:	4b36      	ldr	r3, [pc, #216]	@ (8004114 <xTaskResumeAll+0x128>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	3318      	adds	r3, #24
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe fed4 	bl	8002df4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3304      	adds	r3, #4
 8004050:	4618      	mov	r0, r3
 8004052:	f7fe fecf 	bl	8002df4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4618      	mov	r0, r3
 800405a:	f003 fdcb 	bl	8007bf4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004062:	2201      	movs	r2, #1
 8004064:	409a      	lsls	r2, r3
 8004066:	4b2c      	ldr	r3, [pc, #176]	@ (8004118 <xTaskResumeAll+0x12c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4313      	orrs	r3, r2
 800406c:	4a2a      	ldr	r2, [pc, #168]	@ (8004118 <xTaskResumeAll+0x12c>)
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4a27      	ldr	r2, [pc, #156]	@ (800411c <xTaskResumeAll+0x130>)
 800407e:	441a      	add	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f7fe fe57 	bl	8002d3a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004090:	4b23      	ldr	r3, [pc, #140]	@ (8004120 <xTaskResumeAll+0x134>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004096:	429a      	cmp	r2, r3
 8004098:	d302      	bcc.n	80040a0 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800409a:	4b22      	ldr	r3, [pc, #136]	@ (8004124 <xTaskResumeAll+0x138>)
 800409c:	2201      	movs	r2, #1
 800409e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004114 <xTaskResumeAll+0x128>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1c8      	bne.n	800403a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80040ae:	f000 fb67 	bl	8004780 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004128 <xTaskResumeAll+0x13c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d010      	beq.n	80040e0 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80040be:	f000 f859 	bl	8004174 <xTaskIncrementTick>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 80040c8:	4b16      	ldr	r3, [pc, #88]	@ (8004124 <xTaskResumeAll+0x138>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f1      	bne.n	80040be <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 80040da:	4b13      	ldr	r3, [pc, #76]	@ (8004128 <xTaskResumeAll+0x13c>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80040e0:	4b10      	ldr	r3, [pc, #64]	@ (8004124 <xTaskResumeAll+0x138>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80040e8:	2301      	movs	r3, #1
 80040ea:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80040ec:	4b0f      	ldr	r3, [pc, #60]	@ (800412c <xTaskResumeAll+0x140>)
 80040ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80040fc:	f001 fa20 	bl	8005540 <vPortExitCritical>

    return xAlreadyYielded;
 8004100:	68bb      	ldr	r3, [r7, #8]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000368 	.word	0x20000368
 8004110:	20000340 	.word	0x20000340
 8004114:	20000300 	.word	0x20000300
 8004118:	20000348 	.word	0x20000348
 800411c:	2000026c 	.word	0x2000026c
 8004120:	20000268 	.word	0x20000268
 8004124:	20000354 	.word	0x20000354
 8004128:	20000350 	.word	0x20000350
 800412c:	e000ed04 	.word	0xe000ed04

08004130 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004136:	4b05      	ldr	r3, [pc, #20]	@ (800414c <xTaskGetTickCount+0x1c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800413c:	687b      	ldr	r3, [r7, #4]
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000344 	.word	0x20000344

08004150 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004156:	f001 fab1 	bl	80056bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800415a:	2300      	movs	r3, #0
 800415c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800415e:	4b04      	ldr	r3, [pc, #16]	@ (8004170 <xTaskGetTickCountFromISR+0x20>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004164:	683b      	ldr	r3, [r7, #0]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000344 	.word	0x20000344

08004174 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800417e:	4b51      	ldr	r3, [pc, #324]	@ (80042c4 <xTaskIncrementTick+0x150>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	f040 8093 	bne.w	80042ae <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004188:	4b4f      	ldr	r3, [pc, #316]	@ (80042c8 <xTaskIncrementTick+0x154>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3301      	adds	r3, #1
 800418e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004190:	4a4d      	ldr	r2, [pc, #308]	@ (80042c8 <xTaskIncrementTick+0x154>)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d121      	bne.n	80041e0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800419c:	4b4b      	ldr	r3, [pc, #300]	@ (80042cc <xTaskIncrementTick+0x158>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00b      	beq.n	80041be <xTaskIncrementTick+0x4a>
        __asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	603b      	str	r3, [r7, #0]
    }
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	e7fd      	b.n	80041ba <xTaskIncrementTick+0x46>
 80041be:	4b43      	ldr	r3, [pc, #268]	@ (80042cc <xTaskIncrementTick+0x158>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	4b42      	ldr	r3, [pc, #264]	@ (80042d0 <xTaskIncrementTick+0x15c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a40      	ldr	r2, [pc, #256]	@ (80042cc <xTaskIncrementTick+0x158>)
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	4a40      	ldr	r2, [pc, #256]	@ (80042d0 <xTaskIncrementTick+0x15c>)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4b40      	ldr	r3, [pc, #256]	@ (80042d4 <xTaskIncrementTick+0x160>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3301      	adds	r3, #1
 80041d8:	4a3e      	ldr	r2, [pc, #248]	@ (80042d4 <xTaskIncrementTick+0x160>)
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	f000 fad0 	bl	8004780 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80041e0:	4b3d      	ldr	r3, [pc, #244]	@ (80042d8 <xTaskIncrementTick+0x164>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d34c      	bcc.n	8004284 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041ea:	4b38      	ldr	r3, [pc, #224]	@ (80042cc <xTaskIncrementTick+0x158>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d104      	bne.n	80041fe <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041f4:	4b38      	ldr	r3, [pc, #224]	@ (80042d8 <xTaskIncrementTick+0x164>)
 80041f6:	f04f 32ff 	mov.w	r2, #4294967295
 80041fa:	601a      	str	r2, [r3, #0]
                    break;
 80041fc:	e042      	b.n	8004284 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041fe:	4b33      	ldr	r3, [pc, #204]	@ (80042cc <xTaskIncrementTick+0x158>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	429a      	cmp	r2, r3
 8004214:	d203      	bcs.n	800421e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004216:	4a30      	ldr	r2, [pc, #192]	@ (80042d8 <xTaskIncrementTick+0x164>)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800421c:	e032      	b.n	8004284 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	3304      	adds	r3, #4
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe fde6 	bl	8002df4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422c:	2b00      	cmp	r3, #0
 800422e:	d004      	beq.n	800423a <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	3318      	adds	r3, #24
 8004234:	4618      	mov	r0, r3
 8004236:	f7fe fddd 	bl	8002df4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4618      	mov	r0, r3
 800423e:	f003 fcd9 	bl	8007bf4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004246:	2201      	movs	r2, #1
 8004248:	409a      	lsls	r2, r3
 800424a:	4b24      	ldr	r3, [pc, #144]	@ (80042dc <xTaskIncrementTick+0x168>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4313      	orrs	r3, r2
 8004250:	4a22      	ldr	r2, [pc, #136]	@ (80042dc <xTaskIncrementTick+0x168>)
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4a1f      	ldr	r2, [pc, #124]	@ (80042e0 <xTaskIncrementTick+0x16c>)
 8004262:	441a      	add	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	3304      	adds	r3, #4
 8004268:	4619      	mov	r1, r3
 800426a:	4610      	mov	r0, r2
 800426c:	f7fe fd65 	bl	8002d3a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004274:	4b1b      	ldr	r3, [pc, #108]	@ (80042e4 <xTaskIncrementTick+0x170>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427a:	429a      	cmp	r2, r3
 800427c:	d3b5      	bcc.n	80041ea <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800427e:	2301      	movs	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004282:	e7b2      	b.n	80041ea <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004284:	4b17      	ldr	r3, [pc, #92]	@ (80042e4 <xTaskIncrementTick+0x170>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428a:	4915      	ldr	r1, [pc, #84]	@ (80042e0 <xTaskIncrementTick+0x16c>)
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d901      	bls.n	80042a0 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 800429c:	2301      	movs	r3, #1
 800429e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80042a0:	4b11      	ldr	r3, [pc, #68]	@ (80042e8 <xTaskIncrementTick+0x174>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d007      	beq.n	80042b8 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 80042a8:	2301      	movs	r3, #1
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e004      	b.n	80042b8 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80042ae:	4b0f      	ldr	r3, [pc, #60]	@ (80042ec <xTaskIncrementTick+0x178>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3301      	adds	r3, #1
 80042b4:	4a0d      	ldr	r2, [pc, #52]	@ (80042ec <xTaskIncrementTick+0x178>)
 80042b6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80042b8:	697b      	ldr	r3, [r7, #20]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000368 	.word	0x20000368
 80042c8:	20000344 	.word	0x20000344
 80042cc:	200002f8 	.word	0x200002f8
 80042d0:	200002fc 	.word	0x200002fc
 80042d4:	20000358 	.word	0x20000358
 80042d8:	20000360 	.word	0x20000360
 80042dc:	20000348 	.word	0x20000348
 80042e0:	2000026c 	.word	0x2000026c
 80042e4:	20000268 	.word	0x20000268
 80042e8:	20000354 	.word	0x20000354
 80042ec:	20000350 	.word	0x20000350

080042f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042f6:	4b2d      	ldr	r3, [pc, #180]	@ (80043ac <vTaskSwitchContext+0xbc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80042fe:	4b2c      	ldr	r3, [pc, #176]	@ (80043b0 <vTaskSwitchContext+0xc0>)
 8004300:	2201      	movs	r2, #1
 8004302:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004304:	e04e      	b.n	80043a4 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8004306:	4b2a      	ldr	r3, [pc, #168]	@ (80043b0 <vTaskSwitchContext+0xc0>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800430c:	4b29      	ldr	r3, [pc, #164]	@ (80043b4 <vTaskSwitchContext+0xc4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	fab3 f383 	clz	r3, r3
 8004318:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800431a:	7afb      	ldrb	r3, [r7, #11]
 800431c:	f1c3 031f 	rsb	r3, r3, #31
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	4925      	ldr	r1, [pc, #148]	@ (80043b8 <vTaskSwitchContext+0xc8>)
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10b      	bne.n	800434e <vTaskSwitchContext+0x5e>
        __asm volatile
 8004336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	607b      	str	r3, [r7, #4]
    }
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	e7fd      	b.n	800434a <vTaskSwitchContext+0x5a>
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4a17      	ldr	r2, [pc, #92]	@ (80043b8 <vTaskSwitchContext+0xc8>)
 800435a:	4413      	add	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	3308      	adds	r3, #8
 8004370:	429a      	cmp	r2, r3
 8004372:	d104      	bne.n	800437e <vTaskSwitchContext+0x8e>
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	605a      	str	r2, [r3, #4]
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4a0d      	ldr	r2, [pc, #52]	@ (80043bc <vTaskSwitchContext+0xcc>)
 8004386:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8004388:	4b0c      	ldr	r3, [pc, #48]	@ (80043bc <vTaskSwitchContext+0xcc>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	4b0c      	ldr	r3, [pc, #48]	@ (80043c0 <vTaskSwitchContext+0xd0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d102      	bne.n	800439a <vTaskSwitchContext+0xaa>
 8004394:	f003 fb8e 	bl	8007ab4 <SEGGER_SYSVIEW_OnIdle>
}
 8004398:	e004      	b.n	80043a4 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800439a:	4b08      	ldr	r3, [pc, #32]	@ (80043bc <vTaskSwitchContext+0xcc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f003 fbe6 	bl	8007b70 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80043a4:	bf00      	nop
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000368 	.word	0x20000368
 80043b0:	20000354 	.word	0x20000354
 80043b4:	20000348 	.word	0x20000348
 80043b8:	2000026c 	.word	0x2000026c
 80043bc:	20000268 	.word	0x20000268
 80043c0:	20000364 	.word	0x20000364

080043c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	60fb      	str	r3, [r7, #12]
    }
 80043e6:	bf00      	nop
 80043e8:	bf00      	nop
 80043ea:	e7fd      	b.n	80043e8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043ec:	4b07      	ldr	r3, [pc, #28]	@ (800440c <vTaskPlaceOnEventList+0x48>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3318      	adds	r3, #24
 80043f2:	4619      	mov	r1, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7fe fcc4 	bl	8002d82 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043fa:	2101      	movs	r1, #1
 80043fc:	6838      	ldr	r0, [r7, #0]
 80043fe:	f000 fba3 	bl	8004b48 <prvAddCurrentTaskToDelayedList>
}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000268 	.word	0x20000268

08004410 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10b      	bne.n	800443a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	617b      	str	r3, [r7, #20]
    }
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	e7fd      	b.n	8004436 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800443a:	4b0c      	ldr	r3, [pc, #48]	@ (800446c <vTaskPlaceOnEventListRestricted+0x5c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3318      	adds	r3, #24
 8004440:	4619      	mov	r1, r3
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f7fe fc79 	bl	8002d3a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 800444e:	f04f 33ff 	mov.w	r3, #4294967295
 8004452:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004454:	2024      	movs	r0, #36	@ 0x24
 8004456:	f002 fe2d 	bl	80070b4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	68b8      	ldr	r0, [r7, #8]
 800445e:	f000 fb73 	bl	8004b48 <prvAddCurrentTaskToDelayedList>
    }
 8004462:	bf00      	nop
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000268 	.word	0x20000268

08004470 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10b      	bne.n	800449e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	60fb      	str	r3, [r7, #12]
    }
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	e7fd      	b.n	800449a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	3318      	adds	r3, #24
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fe fca6 	bl	8002df4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004528 <xTaskRemoveFromEventList+0xb8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d120      	bne.n	80044f2 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fe fc9d 	bl	8002df4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4618      	mov	r0, r3
 80044be:	f003 fb99 	bl	8007bf4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c6:	2201      	movs	r2, #1
 80044c8:	409a      	lsls	r2, r3
 80044ca:	4b18      	ldr	r3, [pc, #96]	@ (800452c <xTaskRemoveFromEventList+0xbc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	4a16      	ldr	r2, [pc, #88]	@ (800452c <xTaskRemoveFromEventList+0xbc>)
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4a13      	ldr	r2, [pc, #76]	@ (8004530 <xTaskRemoveFromEventList+0xc0>)
 80044e2:	441a      	add	r2, r3
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	3304      	adds	r3, #4
 80044e8:	4619      	mov	r1, r3
 80044ea:	4610      	mov	r0, r2
 80044ec:	f7fe fc25 	bl	8002d3a <vListInsertEnd>
 80044f0:	e005      	b.n	80044fe <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	3318      	adds	r3, #24
 80044f6:	4619      	mov	r1, r3
 80044f8:	480e      	ldr	r0, [pc, #56]	@ (8004534 <xTaskRemoveFromEventList+0xc4>)
 80044fa:	f7fe fc1e 	bl	8002d3a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004502:	4b0d      	ldr	r3, [pc, #52]	@ (8004538 <xTaskRemoveFromEventList+0xc8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004508:	429a      	cmp	r2, r3
 800450a:	d905      	bls.n	8004518 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800450c:	2301      	movs	r3, #1
 800450e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004510:	4b0a      	ldr	r3, [pc, #40]	@ (800453c <xTaskRemoveFromEventList+0xcc>)
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	e001      	b.n	800451c <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800451c:	697b      	ldr	r3, [r7, #20]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20000368 	.word	0x20000368
 800452c:	20000348 	.word	0x20000348
 8004530:	2000026c 	.word	0x2000026c
 8004534:	20000300 	.word	0x20000300
 8004538:	20000268 	.word	0x20000268
 800453c:	20000354 	.word	0x20000354

08004540 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004548:	4b06      	ldr	r3, [pc, #24]	@ (8004564 <vTaskInternalSetTimeOutState+0x24>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004550:	4b05      	ldr	r3, [pc, #20]	@ (8004568 <vTaskInternalSetTimeOutState+0x28>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	605a      	str	r2, [r3, #4]
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	20000358 	.word	0x20000358
 8004568:	20000344 	.word	0x20000344

0800456c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10b      	bne.n	8004594 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	613b      	str	r3, [r7, #16]
    }
 800458e:	bf00      	nop
 8004590:	bf00      	nop
 8004592:	e7fd      	b.n	8004590 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10b      	bne.n	80045b2 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800459a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	60fb      	str	r3, [r7, #12]
    }
 80045ac:	bf00      	nop
 80045ae:	bf00      	nop
 80045b0:	e7fd      	b.n	80045ae <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80045b2:	f000 ff93 	bl	80054dc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80045b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004634 <xTaskCheckForTimeOut+0xc8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ce:	d102      	bne.n	80045d6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	e026      	b.n	8004624 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b17      	ldr	r3, [pc, #92]	@ (8004638 <xTaskCheckForTimeOut+0xcc>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d00a      	beq.n	80045f8 <xTaskCheckForTimeOut+0x8c>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d305      	bcc.n	80045f8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80045ec:	2301      	movs	r3, #1
 80045ee:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e015      	b.n	8004624 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d20b      	bcs.n	800461a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	1ad2      	subs	r2, r2, r3
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff ff96 	bl	8004540 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	e004      	b.n	8004624 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004620:	2301      	movs	r3, #1
 8004622:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004624:	f000 ff8c 	bl	8005540 <vPortExitCritical>

    return xReturn;
 8004628:	69fb      	ldr	r3, [r7, #28]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3720      	adds	r7, #32
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000344 	.word	0x20000344
 8004638:	20000358 	.word	0x20000358

0800463c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004640:	4b03      	ldr	r3, [pc, #12]	@ (8004650 <vTaskMissedYield+0x14>)
 8004642:	2201      	movs	r2, #1
 8004644:	601a      	str	r2, [r3, #0]
}
 8004646:	bf00      	nop
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	20000354 	.word	0x20000354

08004654 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800465c:	f000 f852 	bl	8004704 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004660:	4b06      	ldr	r3, [pc, #24]	@ (800467c <prvIdleTask+0x28>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d9f9      	bls.n	800465c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004668:	4b05      	ldr	r3, [pc, #20]	@ (8004680 <prvIdleTask+0x2c>)
 800466a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004678:	e7f0      	b.n	800465c <prvIdleTask+0x8>
 800467a:	bf00      	nop
 800467c:	2000026c 	.word	0x2000026c
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800468a:	2300      	movs	r3, #0
 800468c:	607b      	str	r3, [r7, #4]
 800468e:	e00c      	b.n	80046aa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4a12      	ldr	r2, [pc, #72]	@ (80046e4 <prvInitialiseTaskLists+0x60>)
 800469c:	4413      	add	r3, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe fb1e 	bl	8002ce0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3301      	adds	r3, #1
 80046a8:	607b      	str	r3, [r7, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d9ef      	bls.n	8004690 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80046b0:	480d      	ldr	r0, [pc, #52]	@ (80046e8 <prvInitialiseTaskLists+0x64>)
 80046b2:	f7fe fb15 	bl	8002ce0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80046b6:	480d      	ldr	r0, [pc, #52]	@ (80046ec <prvInitialiseTaskLists+0x68>)
 80046b8:	f7fe fb12 	bl	8002ce0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80046bc:	480c      	ldr	r0, [pc, #48]	@ (80046f0 <prvInitialiseTaskLists+0x6c>)
 80046be:	f7fe fb0f 	bl	8002ce0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80046c2:	480c      	ldr	r0, [pc, #48]	@ (80046f4 <prvInitialiseTaskLists+0x70>)
 80046c4:	f7fe fb0c 	bl	8002ce0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80046c8:	480b      	ldr	r0, [pc, #44]	@ (80046f8 <prvInitialiseTaskLists+0x74>)
 80046ca:	f7fe fb09 	bl	8002ce0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80046ce:	4b0b      	ldr	r3, [pc, #44]	@ (80046fc <prvInitialiseTaskLists+0x78>)
 80046d0:	4a05      	ldr	r2, [pc, #20]	@ (80046e8 <prvInitialiseTaskLists+0x64>)
 80046d2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004700 <prvInitialiseTaskLists+0x7c>)
 80046d6:	4a05      	ldr	r2, [pc, #20]	@ (80046ec <prvInitialiseTaskLists+0x68>)
 80046d8:	601a      	str	r2, [r3, #0]
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	2000026c 	.word	0x2000026c
 80046e8:	200002d0 	.word	0x200002d0
 80046ec:	200002e4 	.word	0x200002e4
 80046f0:	20000300 	.word	0x20000300
 80046f4:	20000314 	.word	0x20000314
 80046f8:	2000032c 	.word	0x2000032c
 80046fc:	200002f8 	.word	0x200002f8
 8004700:	200002fc 	.word	0x200002fc

08004704 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800470a:	e019      	b.n	8004740 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800470c:	f000 fee6 	bl	80054dc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004710:	4b10      	ldr	r3, [pc, #64]	@ (8004754 <prvCheckTasksWaitingTermination+0x50>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	4618      	mov	r0, r3
 800471e:	f7fe fb69 	bl	8002df4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004722:	4b0d      	ldr	r3, [pc, #52]	@ (8004758 <prvCheckTasksWaitingTermination+0x54>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3b01      	subs	r3, #1
 8004728:	4a0b      	ldr	r2, [pc, #44]	@ (8004758 <prvCheckTasksWaitingTermination+0x54>)
 800472a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800472c:	4b0b      	ldr	r3, [pc, #44]	@ (800475c <prvCheckTasksWaitingTermination+0x58>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3b01      	subs	r3, #1
 8004732:	4a0a      	ldr	r2, [pc, #40]	@ (800475c <prvCheckTasksWaitingTermination+0x58>)
 8004734:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004736:	f000 ff03 	bl	8005540 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f810 	bl	8004760 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004740:	4b06      	ldr	r3, [pc, #24]	@ (800475c <prvCheckTasksWaitingTermination+0x58>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e1      	bne.n	800470c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	20000314 	.word	0x20000314
 8004758:	20000340 	.word	0x20000340
 800475c:	20000328 	.word	0x20000328

08004760 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476c:	4618      	mov	r0, r3
 800476e:	f001 f8c9 	bl	8005904 <vPortFree>
                vPortFree( pxTCB );
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f001 f8c6 	bl	8005904 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004784:	4b0a      	ldr	r3, [pc, #40]	@ (80047b0 <prvResetNextTaskUnblockTime+0x30>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d104      	bne.n	8004798 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800478e:	4b09      	ldr	r3, [pc, #36]	@ (80047b4 <prvResetNextTaskUnblockTime+0x34>)
 8004790:	f04f 32ff 	mov.w	r2, #4294967295
 8004794:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004796:	e005      	b.n	80047a4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004798:	4b05      	ldr	r3, [pc, #20]	@ (80047b0 <prvResetNextTaskUnblockTime+0x30>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a04      	ldr	r2, [pc, #16]	@ (80047b4 <prvResetNextTaskUnblockTime+0x34>)
 80047a2:	6013      	str	r3, [r2, #0]
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	200002f8 	.word	0x200002f8
 80047b4:	20000360 	.word	0x20000360

080047b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80047be:	4b0b      	ldr	r3, [pc, #44]	@ (80047ec <xTaskGetSchedulerState+0x34>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d102      	bne.n	80047cc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80047c6:	2301      	movs	r3, #1
 80047c8:	607b      	str	r3, [r7, #4]
 80047ca:	e008      	b.n	80047de <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047cc:	4b08      	ldr	r3, [pc, #32]	@ (80047f0 <xTaskGetSchedulerState+0x38>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d102      	bne.n	80047da <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80047d4:	2302      	movs	r3, #2
 80047d6:	607b      	str	r3, [r7, #4]
 80047d8:	e001      	b.n	80047de <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80047da:	2300      	movs	r3, #0
 80047dc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80047de:	687b      	ldr	r3, [r7, #4]
    }
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	2000034c 	.word	0x2000034c
 80047f0:	20000368 	.word	0x20000368

080047f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d063      	beq.n	80048d2 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800480e:	4b33      	ldr	r3, [pc, #204]	@ (80048dc <xTaskPriorityInherit+0xe8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004814:	429a      	cmp	r2, r3
 8004816:	d253      	bcs.n	80048c0 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	db06      	blt.n	800482e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004820:	4b2e      	ldr	r3, [pc, #184]	@ (80048dc <xTaskPriorityInherit+0xe8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004826:	f1c3 0205 	rsb	r2, r3, #5
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	6959      	ldr	r1, [r3, #20]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004836:	4613      	mov	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4a28      	ldr	r2, [pc, #160]	@ (80048e0 <xTaskPriorityInherit+0xec>)
 8004840:	4413      	add	r3, r2
 8004842:	4299      	cmp	r1, r3
 8004844:	d12f      	bne.n	80048a6 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	3304      	adds	r3, #4
 800484a:	4618      	mov	r0, r3
 800484c:	f7fe fad2 	bl	8002df4 <uxListRemove>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10a      	bne.n	800486c <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485a:	2201      	movs	r2, #1
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43da      	mvns	r2, r3
 8004862:	4b20      	ldr	r3, [pc, #128]	@ (80048e4 <xTaskPriorityInherit+0xf0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4013      	ands	r3, r2
 8004868:	4a1e      	ldr	r2, [pc, #120]	@ (80048e4 <xTaskPriorityInherit+0xf0>)
 800486a:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800486c:	4b1b      	ldr	r3, [pc, #108]	@ (80048dc <xTaskPriorityInherit+0xe8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487a:	2201      	movs	r2, #1
 800487c:	409a      	lsls	r2, r3
 800487e:	4b19      	ldr	r3, [pc, #100]	@ (80048e4 <xTaskPriorityInherit+0xf0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4313      	orrs	r3, r2
 8004884:	4a17      	ldr	r2, [pc, #92]	@ (80048e4 <xTaskPriorityInherit+0xf0>)
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4a12      	ldr	r2, [pc, #72]	@ (80048e0 <xTaskPriorityInherit+0xec>)
 8004896:	441a      	add	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	3304      	adds	r3, #4
 800489c:	4619      	mov	r1, r3
 800489e:	4610      	mov	r0, r2
 80048a0:	f7fe fa4b 	bl	8002d3a <vListInsertEnd>
 80048a4:	e004      	b.n	80048b0 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80048a6:	4b0d      	ldr	r3, [pc, #52]	@ (80048dc <xTaskPriorityInherit+0xe8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4619      	mov	r1, r3
 80048b4:	2049      	movs	r0, #73	@ 0x49
 80048b6:	f002 fc1b 	bl	80070f0 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80048ba:	2301      	movs	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	e008      	b.n	80048d2 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048c4:	4b05      	ldr	r3, [pc, #20]	@ (80048dc <xTaskPriorityInherit+0xe8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d201      	bcs.n	80048d2 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80048ce:	2301      	movs	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80048d2:	68fb      	ldr	r3, [r7, #12]
    }
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000268 	.word	0x20000268
 80048e0:	2000026c 	.word	0x2000026c
 80048e4:	20000348 	.word	0x20000348

080048e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d06a      	beq.n	80049d4 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80048fe:	4b38      	ldr	r3, [pc, #224]	@ (80049e0 <xTaskPriorityDisinherit+0xf8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	429a      	cmp	r2, r3
 8004906:	d00b      	beq.n	8004920 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	60fb      	str	r3, [r7, #12]
    }
 800491a:	bf00      	nop
 800491c:	bf00      	nop
 800491e:	e7fd      	b.n	800491c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10b      	bne.n	8004940 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8004928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	60bb      	str	r3, [r7, #8]
    }
 800493a:	bf00      	nop
 800493c:	bf00      	nop
 800493e:	e7fd      	b.n	800493c <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004944:	1e5a      	subs	r2, r3, #1
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004952:	429a      	cmp	r2, r3
 8004954:	d03e      	beq.n	80049d4 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d13a      	bne.n	80049d4 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	3304      	adds	r3, #4
 8004962:	4618      	mov	r0, r3
 8004964:	f7fe fa46 	bl	8002df4 <uxListRemove>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004972:	2201      	movs	r2, #1
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	43da      	mvns	r2, r3
 800497a:	4b1a      	ldr	r3, [pc, #104]	@ (80049e4 <xTaskPriorityDisinherit+0xfc>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4013      	ands	r3, r2
 8004980:	4a18      	ldr	r2, [pc, #96]	@ (80049e4 <xTaskPriorityDisinherit+0xfc>)
 8004982:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4619      	mov	r1, r3
 8004988:	204a      	movs	r0, #74	@ 0x4a
 800498a:	f002 fbb1 	bl	80070f0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499a:	f1c3 0205 	rsb	r2, r3, #5
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a6:	2201      	movs	r2, #1
 80049a8:	409a      	lsls	r2, r3
 80049aa:	4b0e      	ldr	r3, [pc, #56]	@ (80049e4 <xTaskPriorityDisinherit+0xfc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	4a0c      	ldr	r2, [pc, #48]	@ (80049e4 <xTaskPriorityDisinherit+0xfc>)
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4a09      	ldr	r2, [pc, #36]	@ (80049e8 <xTaskPriorityDisinherit+0x100>)
 80049c2:	441a      	add	r2, r3
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	3304      	adds	r3, #4
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f7fe f9b5 	bl	8002d3a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80049d0:	2301      	movs	r3, #1
 80049d2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80049d4:	697b      	ldr	r3, [r7, #20]
    }
 80049d6:	4618      	mov	r0, r3
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20000268 	.word	0x20000268
 80049e4:	20000348 	.word	0x20000348
 80049e8:	2000026c 	.word	0x2000026c

080049ec <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80049fa:	2301      	movs	r3, #1
 80049fc:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 8083 	beq.w	8004b0c <vTaskPriorityDisinheritAfterTimeout+0x120>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10b      	bne.n	8004a26 <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	60fb      	str	r3, [r7, #12]
    }
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	e7fd      	b.n	8004a22 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d902      	bls.n	8004a36 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	61fb      	str	r3, [r7, #28]
 8004a34:	e002      	b.n	8004a3c <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a3a:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d062      	beq.n	8004b0c <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d15d      	bne.n	8004b0c <vTaskPriorityDisinheritAfterTimeout+0x120>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004a50:	4b30      	ldr	r3, [pc, #192]	@ (8004b14 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d10b      	bne.n	8004a72 <vTaskPriorityDisinheritAfterTimeout+0x86>
        __asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	60bb      	str	r3, [r7, #8]
    }
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	e7fd      	b.n	8004a6e <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4619      	mov	r1, r3
 8004a76:	204a      	movs	r0, #74	@ 0x4a
 8004a78:	f002 fb3a 	bl	80070f0 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a80:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	db04      	blt.n	8004a9a <vTaskPriorityDisinheritAfterTimeout+0xae>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f1c3 0205 	rsb	r2, r3, #5
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	6959      	ldr	r1, [r3, #20]
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8004b18 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004aaa:	4413      	add	r3, r2
 8004aac:	4299      	cmp	r1, r3
 8004aae:	d12d      	bne.n	8004b0c <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fe f99d 	bl	8002df4 <uxListRemove>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <vTaskPriorityDisinheritAfterTimeout+0xea>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aca:	43da      	mvns	r2, r3
 8004acc:	4b13      	ldr	r3, [pc, #76]	@ (8004b1c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	4a12      	ldr	r2, [pc, #72]	@ (8004b1c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004ad4:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f003 f88b 	bl	8007bf4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b1c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	4a0b      	ldr	r2, [pc, #44]	@ (8004b1c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4a06      	ldr	r2, [pc, #24]	@ (8004b18 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004afe:	441a      	add	r2, r3
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	3304      	adds	r3, #4
 8004b04:	4619      	mov	r1, r3
 8004b06:	4610      	mov	r0, r2
 8004b08:	f7fe f917 	bl	8002d3a <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004b0c:	bf00      	nop
 8004b0e:	3720      	adds	r7, #32
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20000268 	.word	0x20000268
 8004b18:	2000026c 	.word	0x2000026c
 8004b1c:	20000348 	.word	0x20000348

08004b20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004b24:	4b07      	ldr	r3, [pc, #28]	@ (8004b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d004      	beq.n	8004b36 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004b2c:	4b05      	ldr	r3, [pc, #20]	@ (8004b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b32:	3201      	adds	r2, #1
 8004b34:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 8004b36:	4b03      	ldr	r3, [pc, #12]	@ (8004b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b38:	681b      	ldr	r3, [r3, #0]
    }
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	20000268 	.word	0x20000268

08004b48 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004b52:	4b32      	ldr	r3, [pc, #200]	@ (8004c1c <prvAddCurrentTaskToDelayedList+0xd4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b58:	4b31      	ldr	r3, [pc, #196]	@ (8004c20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe f948 	bl	8002df4 <uxListRemove>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8004c20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b70:	2201      	movs	r2, #1
 8004b72:	fa02 f303 	lsl.w	r3, r2, r3
 8004b76:	43da      	mvns	r2, r3
 8004b78:	4b2a      	ldr	r3, [pc, #168]	@ (8004c24 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	4a29      	ldr	r2, [pc, #164]	@ (8004c24 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004b80:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d110      	bne.n	8004bac <prvAddCurrentTaskToDelayedList+0x64>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004b90:	4b23      	ldr	r3, [pc, #140]	@ (8004c20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	211b      	movs	r1, #27
 8004b96:	4618      	mov	r0, r3
 8004b98:	f003 f86e 	bl	8007c78 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b9c:	4b20      	ldr	r3, [pc, #128]	@ (8004c20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4820      	ldr	r0, [pc, #128]	@ (8004c28 <prvAddCurrentTaskToDelayedList+0xe0>)
 8004ba6:	f7fe f8c8 	bl	8002d3a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004baa:	e032      	b.n	8004c12 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d20f      	bcs.n	8004be4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004bc4:	4b16      	ldr	r3, [pc, #88]	@ (8004c20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2104      	movs	r1, #4
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f003 f854 	bl	8007c78 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bd0:	4b16      	ldr	r3, [pc, #88]	@ (8004c2c <prvAddCurrentTaskToDelayedList+0xe4>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	4b12      	ldr	r3, [pc, #72]	@ (8004c20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4610      	mov	r0, r2
 8004bde:	f7fe f8d0 	bl	8002d82 <vListInsert>
}
 8004be2:	e016      	b.n	8004c12 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004be4:	4b0e      	ldr	r3, [pc, #56]	@ (8004c20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2104      	movs	r1, #4
 8004bea:	4618      	mov	r0, r3
 8004bec:	f003 f844 	bl	8007c78 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8004c30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8004c20 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	f7fe f8c0 	bl	8002d82 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004c02:	4b0c      	ldr	r3, [pc, #48]	@ (8004c34 <prvAddCurrentTaskToDelayedList+0xec>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d202      	bcs.n	8004c12 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8004c0c:	4a09      	ldr	r2, [pc, #36]	@ (8004c34 <prvAddCurrentTaskToDelayedList+0xec>)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	6013      	str	r3, [r2, #0]
}
 8004c12:	bf00      	nop
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000344 	.word	0x20000344
 8004c20:	20000268 	.word	0x20000268
 8004c24:	20000348 	.word	0x20000348
 8004c28:	2000032c 	.word	0x2000032c
 8004c2c:	200002fc 	.word	0x200002fc
 8004c30:	200002f8 	.word	0x200002f8
 8004c34:	20000360 	.word	0x20000360

08004c38 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004c42:	f000 fae1 	bl	8005208 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004c46:	4b12      	ldr	r3, [pc, #72]	@ (8004c90 <xTimerCreateTimerTask+0x58>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00b      	beq.n	8004c66 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004c4e:	4b11      	ldr	r3, [pc, #68]	@ (8004c94 <xTimerCreateTimerTask+0x5c>)
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	2302      	movs	r3, #2
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	2300      	movs	r3, #0
 8004c58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004c5c:	490e      	ldr	r1, [pc, #56]	@ (8004c98 <xTimerCreateTimerTask+0x60>)
 8004c5e:	480f      	ldr	r0, [pc, #60]	@ (8004c9c <xTimerCreateTimerTask+0x64>)
 8004c60:	f7fe ffb6 	bl	8003bd0 <xTaskCreate>
 8004c64:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10b      	bne.n	8004c84 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8004c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	603b      	str	r3, [r7, #0]
    }
 8004c7e:	bf00      	nop
 8004c80:	bf00      	nop
 8004c82:	e7fd      	b.n	8004c80 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004c84:	687b      	ldr	r3, [r7, #4]
    }
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	2000039c 	.word	0x2000039c
 8004c94:	200003a0 	.word	0x200003a0
 8004c98:	08009480 	.word	0x08009480
 8004c9c:	08004dd9 	.word	0x08004dd9

08004ca0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	@ 0x28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <xTimerGenericCommand+0x30>
        __asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	623b      	str	r3, [r7, #32]
    }
 8004cca:	bf00      	nop
 8004ccc:	bf00      	nop
 8004cce:	e7fd      	b.n	8004ccc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004cd0:	4b19      	ldr	r3, [pc, #100]	@ (8004d38 <xTimerGenericCommand+0x98>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d02a      	beq.n	8004d2e <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b05      	cmp	r3, #5
 8004ce8:	dc18      	bgt.n	8004d1c <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cea:	f7ff fd65 	bl	80047b8 <xTaskGetSchedulerState>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d109      	bne.n	8004d08 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cf4:	4b10      	ldr	r3, [pc, #64]	@ (8004d38 <xTimerGenericCommand+0x98>)
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	f107 0114 	add.w	r1, r7, #20
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d00:	f7fe f998 	bl	8003034 <xQueueGenericSend>
 8004d04:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d06:	e012      	b.n	8004d2e <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d08:	4b0b      	ldr	r3, [pc, #44]	@ (8004d38 <xTimerGenericCommand+0x98>)
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	f107 0114 	add.w	r1, r7, #20
 8004d10:	2300      	movs	r3, #0
 8004d12:	2200      	movs	r2, #0
 8004d14:	f7fe f98e 	bl	8003034 <xQueueGenericSend>
 8004d18:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d1a:	e008      	b.n	8004d2e <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d1c:	4b06      	ldr	r3, [pc, #24]	@ (8004d38 <xTimerGenericCommand+0x98>)
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	f107 0114 	add.w	r1, r7, #20
 8004d24:	2300      	movs	r3, #0
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	f7fe faae 	bl	8003288 <xQueueGenericSendFromISR>
 8004d2c:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8004d30:	4618      	mov	r0, r3
 8004d32:	3728      	adds	r7, #40	@ 0x28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	2000039c 	.word	0x2000039c

08004d3c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d46:	4b23      	ldr	r3, [pc, #140]	@ (8004dd4 <prvProcessExpiredTimer+0x98>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fe f84d 	bl	8002df4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d023      	beq.n	8004db0 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	699a      	ldr	r2, [r3, #24]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	18d1      	adds	r1, r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	6978      	ldr	r0, [r7, #20]
 8004d76:	f000 f8d5 	bl	8004f24 <prvInsertTimerInActiveList>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d020      	beq.n	8004dc2 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d80:	2300      	movs	r3, #0
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	2300      	movs	r3, #0
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	2100      	movs	r1, #0
 8004d8a:	6978      	ldr	r0, [r7, #20]
 8004d8c:	f7ff ff88 	bl	8004ca0 <xTimerGenericCommand>
 8004d90:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d114      	bne.n	8004dc2 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	60fb      	str	r3, [r7, #12]
    }
 8004daa:	bf00      	nop
 8004dac:	bf00      	nop
 8004dae:	e7fd      	b.n	8004dac <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004db6:	f023 0301 	bic.w	r3, r3, #1
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	6978      	ldr	r0, [r7, #20]
 8004dc8:	4798      	blx	r3
    }
 8004dca:	bf00      	nop
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000394 	.word	0x20000394

08004dd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004de0:	f107 0308 	add.w	r3, r7, #8
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 f859 	bl	8004e9c <prvGetNextExpireTime>
 8004dea:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4619      	mov	r1, r3
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 f805 	bl	8004e00 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004df6:	f000 f8d7 	bl	8004fa8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dfa:	bf00      	nop
 8004dfc:	e7f0      	b.n	8004de0 <prvTimerTask+0x8>
	...

08004e00 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004e0a:	f7ff f8e1 	bl	8003fd0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e0e:	f107 0308 	add.w	r3, r7, #8
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 f866 	bl	8004ee4 <prvSampleTimeNow>
 8004e18:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d130      	bne.n	8004e82 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <prvProcessTimerOrBlockTask+0x3c>
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d806      	bhi.n	8004e3c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004e2e:	f7ff f8dd 	bl	8003fec <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e32:	68f9      	ldr	r1, [r7, #12]
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff ff81 	bl	8004d3c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004e3a:	e024      	b.n	8004e86 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d008      	beq.n	8004e54 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e42:	4b13      	ldr	r3, [pc, #76]	@ (8004e90 <prvProcessTimerOrBlockTask+0x90>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <prvProcessTimerOrBlockTask+0x50>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <prvProcessTimerOrBlockTask+0x52>
 8004e50:	2300      	movs	r3, #0
 8004e52:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e54:	4b0f      	ldr	r3, [pc, #60]	@ (8004e94 <prvProcessTimerOrBlockTask+0x94>)
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	4619      	mov	r1, r3
 8004e62:	f7fe fe81 	bl	8003b68 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004e66:	f7ff f8c1 	bl	8003fec <xTaskResumeAll>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10a      	bne.n	8004e86 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004e70:	4b09      	ldr	r3, [pc, #36]	@ (8004e98 <prvProcessTimerOrBlockTask+0x98>)
 8004e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
    }
 8004e80:	e001      	b.n	8004e86 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004e82:	f7ff f8b3 	bl	8003fec <xTaskResumeAll>
    }
 8004e86:	bf00      	nop
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20000398 	.word	0x20000398
 8004e94:	2000039c 	.word	0x2000039c
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee0 <prvGetNextExpireTime+0x44>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <prvGetNextExpireTime+0x16>
 8004eae:	2201      	movs	r2, #1
 8004eb0:	e000      	b.n	8004eb4 <prvGetNextExpireTime+0x18>
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d105      	bne.n	8004ecc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ec0:	4b07      	ldr	r3, [pc, #28]	@ (8004ee0 <prvGetNextExpireTime+0x44>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	e001      	b.n	8004ed0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
    }
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000394 	.word	0x20000394

08004ee4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004eec:	f7ff f920 	bl	8004130 <xTaskGetTickCount>
 8004ef0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8004f20 <prvSampleTimeNow+0x3c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d205      	bcs.n	8004f08 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004efc:	f000 f91e 	bl	800513c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	e002      	b.n	8004f0e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004f0e:	4a04      	ldr	r2, [pc, #16]	@ (8004f20 <prvSampleTimeNow+0x3c>)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004f14:	68fb      	ldr	r3, [r7, #12]
    }
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200003a4 	.word	0x200003a4

08004f24 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d812      	bhi.n	8004f70 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	1ad2      	subs	r2, r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d302      	bcc.n	8004f5e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	e01b      	b.n	8004f96 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f5e:	4b10      	ldr	r3, [pc, #64]	@ (8004fa0 <prvInsertTimerInActiveList+0x7c>)
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4619      	mov	r1, r3
 8004f68:	4610      	mov	r0, r2
 8004f6a:	f7fd ff0a 	bl	8002d82 <vListInsert>
 8004f6e:	e012      	b.n	8004f96 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d206      	bcs.n	8004f86 <prvInsertTimerInActiveList+0x62>
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d302      	bcc.n	8004f86 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004f80:	2301      	movs	r3, #1
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	e007      	b.n	8004f96 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f86:	4b07      	ldr	r3, [pc, #28]	@ (8004fa4 <prvInsertTimerInActiveList+0x80>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f7fd fef6 	bl	8002d82 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004f96:	697b      	ldr	r3, [r7, #20]
    }
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20000398 	.word	0x20000398
 8004fa4:	20000394 	.word	0x20000394

08004fa8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08c      	sub	sp, #48	@ 0x30
 8004fac:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fae:	e0b2      	b.n	8005116 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f2c0 80af 	blt.w	8005116 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d004      	beq.n	8004fce <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fd ff13 	bl	8002df4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fce:	1d3b      	adds	r3, r7, #4
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff ff87 	bl	8004ee4 <prvSampleTimeNow>
 8004fd6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b09      	cmp	r3, #9
 8004fdc:	f200 8098 	bhi.w	8005110 <prvProcessReceivedCommands+0x168>
 8004fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe8 <prvProcessReceivedCommands+0x40>)
 8004fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe6:	bf00      	nop
 8004fe8:	08005011 	.word	0x08005011
 8004fec:	08005011 	.word	0x08005011
 8004ff0:	08005011 	.word	0x08005011
 8004ff4:	08005087 	.word	0x08005087
 8004ff8:	0800509b 	.word	0x0800509b
 8004ffc:	080050e7 	.word	0x080050e7
 8005000:	08005011 	.word	0x08005011
 8005004:	08005011 	.word	0x08005011
 8005008:	08005087 	.word	0x08005087
 800500c:	0800509b 	.word	0x0800509b
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	b2da      	uxtb	r2, r3
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	18d1      	adds	r1, r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a3a      	ldr	r2, [r7, #32]
 800502e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005030:	f7ff ff78 	bl	8004f24 <prvInsertTimerInActiveList>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d06c      	beq.n	8005114 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005040:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005044:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d061      	beq.n	8005114 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	441a      	add	r2, r3
 8005058:	2300      	movs	r3, #0
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	2300      	movs	r3, #0
 800505e:	2100      	movs	r1, #0
 8005060:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005062:	f7ff fe1d 	bl	8004ca0 <xTimerGenericCommand>
 8005066:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d152      	bne.n	8005114 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	61bb      	str	r3, [r7, #24]
    }
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005088:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	b2da      	uxtb	r2, r3
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005098:	e03d      	b.n	8005116 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10b      	bne.n	80050d2 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	617b      	str	r3, [r7, #20]
    }
 80050cc:	bf00      	nop
 80050ce:	bf00      	nop
 80050d0:	e7fd      	b.n	80050ce <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	18d1      	adds	r1, r2, r3
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	6a3a      	ldr	r2, [r7, #32]
 80050de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050e0:	f7ff ff20 	bl	8004f24 <prvInsertTimerInActiveList>
                        break;
 80050e4:	e017      	b.n	8005116 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d103      	bne.n	80050fc <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 80050f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050f6:	f000 fc05 	bl	8005904 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80050fa:	e00c      	b.n	8005116 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	b2da      	uxtb	r2, r3
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800510e:	e002      	b.n	8005116 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005110:	bf00      	nop
 8005112:	e000      	b.n	8005116 <prvProcessReceivedCommands+0x16e>
                        break;
 8005114:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005116:	4b08      	ldr	r3, [pc, #32]	@ (8005138 <prvProcessReceivedCommands+0x190>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f107 0108 	add.w	r1, r7, #8
 800511e:	2200      	movs	r2, #0
 8005120:	4618      	mov	r0, r3
 8005122:	f7fe f973 	bl	800340c <xQueueReceive>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	f47f af41 	bne.w	8004fb0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800512e:	bf00      	nop
 8005130:	bf00      	nop
 8005132:	3728      	adds	r7, #40	@ 0x28
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	2000039c 	.word	0x2000039c

0800513c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005142:	e049      	b.n	80051d8 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005144:	4b2e      	ldr	r3, [pc, #184]	@ (8005200 <prvSwitchTimerLists+0xc4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800514e:	4b2c      	ldr	r3, [pc, #176]	@ (8005200 <prvSwitchTimerLists+0xc4>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	3304      	adds	r3, #4
 800515c:	4618      	mov	r0, r3
 800515e:	f7fd fe49 	bl	8002df4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	d02f      	beq.n	80051d8 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4413      	add	r3, r2
 8005180:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	429a      	cmp	r2, r3
 8005188:	d90e      	bls.n	80051a8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005196:	4b1a      	ldr	r3, [pc, #104]	@ (8005200 <prvSwitchTimerLists+0xc4>)
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3304      	adds	r3, #4
 800519e:	4619      	mov	r1, r3
 80051a0:	4610      	mov	r0, r2
 80051a2:	f7fd fdee 	bl	8002d82 <vListInsert>
 80051a6:	e017      	b.n	80051d8 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051a8:	2300      	movs	r3, #0
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	2300      	movs	r3, #0
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	2100      	movs	r1, #0
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f7ff fd74 	bl	8004ca0 <xTimerGenericCommand>
 80051b8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10b      	bne.n	80051d8 <prvSwitchTimerLists+0x9c>
        __asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	603b      	str	r3, [r7, #0]
    }
 80051d2:	bf00      	nop
 80051d4:	bf00      	nop
 80051d6:	e7fd      	b.n	80051d4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051d8:	4b09      	ldr	r3, [pc, #36]	@ (8005200 <prvSwitchTimerLists+0xc4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1b0      	bne.n	8005144 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80051e2:	4b07      	ldr	r3, [pc, #28]	@ (8005200 <prvSwitchTimerLists+0xc4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80051e8:	4b06      	ldr	r3, [pc, #24]	@ (8005204 <prvSwitchTimerLists+0xc8>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a04      	ldr	r2, [pc, #16]	@ (8005200 <prvSwitchTimerLists+0xc4>)
 80051ee:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80051f0:	4a04      	ldr	r2, [pc, #16]	@ (8005204 <prvSwitchTimerLists+0xc8>)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	6013      	str	r3, [r2, #0]
    }
 80051f6:	bf00      	nop
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20000394 	.word	0x20000394
 8005204:	20000398 	.word	0x20000398

08005208 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800520c:	f000 f966 	bl	80054dc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005210:	4b12      	ldr	r3, [pc, #72]	@ (800525c <prvCheckForValidListAndQueue+0x54>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d11d      	bne.n	8005254 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005218:	4811      	ldr	r0, [pc, #68]	@ (8005260 <prvCheckForValidListAndQueue+0x58>)
 800521a:	f7fd fd61 	bl	8002ce0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800521e:	4811      	ldr	r0, [pc, #68]	@ (8005264 <prvCheckForValidListAndQueue+0x5c>)
 8005220:	f7fd fd5e 	bl	8002ce0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005224:	4b10      	ldr	r3, [pc, #64]	@ (8005268 <prvCheckForValidListAndQueue+0x60>)
 8005226:	4a0e      	ldr	r2, [pc, #56]	@ (8005260 <prvCheckForValidListAndQueue+0x58>)
 8005228:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800522a:	4b10      	ldr	r3, [pc, #64]	@ (800526c <prvCheckForValidListAndQueue+0x64>)
 800522c:	4a0d      	ldr	r2, [pc, #52]	@ (8005264 <prvCheckForValidListAndQueue+0x5c>)
 800522e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005230:	2200      	movs	r2, #0
 8005232:	210c      	movs	r1, #12
 8005234:	200a      	movs	r0, #10
 8005236:	f7fd fe71 	bl	8002f1c <xQueueGenericCreate>
 800523a:	4603      	mov	r3, r0
 800523c:	4a07      	ldr	r2, [pc, #28]	@ (800525c <prvCheckForValidListAndQueue+0x54>)
 800523e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005240:	4b06      	ldr	r3, [pc, #24]	@ (800525c <prvCheckForValidListAndQueue+0x54>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005248:	4b04      	ldr	r3, [pc, #16]	@ (800525c <prvCheckForValidListAndQueue+0x54>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4908      	ldr	r1, [pc, #32]	@ (8005270 <prvCheckForValidListAndQueue+0x68>)
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe fc58 	bl	8003b04 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005254:	f000 f974 	bl	8005540 <vPortExitCritical>
    }
 8005258:	bf00      	nop
 800525a:	bd80      	pop	{r7, pc}
 800525c:	2000039c 	.word	0x2000039c
 8005260:	2000036c 	.word	0x2000036c
 8005264:	20000380 	.word	0x20000380
 8005268:	20000394 	.word	0x20000394
 800526c:	20000398 	.word	0x20000398
 8005270:	08009488 	.word	0x08009488

08005274 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3b04      	subs	r3, #4
 8005284:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800528c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3b04      	subs	r3, #4
 8005292:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f023 0201 	bic.w	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3b04      	subs	r3, #4
 80052a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80052a4:	4a0c      	ldr	r2, [pc, #48]	@ (80052d8 <pxPortInitialiseStack+0x64>)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3b14      	subs	r3, #20
 80052ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3b04      	subs	r3, #4
 80052ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f06f 0202 	mvn.w	r2, #2
 80052c2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3b20      	subs	r3, #32
 80052c8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80052ca:	68fb      	ldr	r3, [r7, #12]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	080052dd 	.word	0x080052dd

080052dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80052e6:	4b13      	ldr	r3, [pc, #76]	@ (8005334 <prvTaskExitError+0x58>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ee:	d00b      	beq.n	8005308 <prvTaskExitError+0x2c>
        __asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	60fb      	str	r3, [r7, #12]
    }
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	e7fd      	b.n	8005304 <prvTaskExitError+0x28>
        __asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	60bb      	str	r3, [r7, #8]
    }
 800531a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800531c:	bf00      	nop
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0fc      	beq.n	800531e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	20000010 	.word	0x20000010
	...

08005340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005340:	4b07      	ldr	r3, [pc, #28]	@ (8005360 <pxCurrentTCBConst2>)
 8005342:	6819      	ldr	r1, [r3, #0]
 8005344:	6808      	ldr	r0, [r1, #0]
 8005346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534a:	f380 8809 	msr	PSP, r0
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	f380 8811 	msr	BASEPRI, r0
 800535a:	4770      	bx	lr
 800535c:	f3af 8000 	nop.w

08005360 <pxCurrentTCBConst2>:
 8005360:	20000268 	.word	0x20000268
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop

08005368 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005368:	4808      	ldr	r0, [pc, #32]	@ (800538c <prvPortStartFirstTask+0x24>)
 800536a:	6800      	ldr	r0, [r0, #0]
 800536c:	6800      	ldr	r0, [r0, #0]
 800536e:	f380 8808 	msr	MSP, r0
 8005372:	f04f 0000 	mov.w	r0, #0
 8005376:	f380 8814 	msr	CONTROL, r0
 800537a:	b662      	cpsie	i
 800537c:	b661      	cpsie	f
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	df00      	svc	0
 8005388:	bf00      	nop
 800538a:	0000      	.short	0x0000
 800538c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005390:	bf00      	nop
 8005392:	bf00      	nop

08005394 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800539a:	4b47      	ldr	r3, [pc, #284]	@ (80054b8 <xPortStartScheduler+0x124>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a47      	ldr	r2, [pc, #284]	@ (80054bc <xPortStartScheduler+0x128>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d10b      	bne.n	80053bc <xPortStartScheduler+0x28>
        __asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	613b      	str	r3, [r7, #16]
    }
 80053b6:	bf00      	nop
 80053b8:	bf00      	nop
 80053ba:	e7fd      	b.n	80053b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053bc:	4b3e      	ldr	r3, [pc, #248]	@ (80054b8 <xPortStartScheduler+0x124>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a3f      	ldr	r2, [pc, #252]	@ (80054c0 <xPortStartScheduler+0x12c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d10b      	bne.n	80053de <xPortStartScheduler+0x4a>
        __asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	60fb      	str	r3, [r7, #12]
    }
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	e7fd      	b.n	80053da <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053de:	4b39      	ldr	r3, [pc, #228]	@ (80054c4 <xPortStartScheduler+0x130>)
 80053e0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	22ff      	movs	r2, #255	@ 0xff
 80053ee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005400:	b2da      	uxtb	r2, r3
 8005402:	4b31      	ldr	r3, [pc, #196]	@ (80054c8 <xPortStartScheduler+0x134>)
 8005404:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005406:	4b31      	ldr	r3, [pc, #196]	@ (80054cc <xPortStartScheduler+0x138>)
 8005408:	2207      	movs	r2, #7
 800540a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800540c:	e009      	b.n	8005422 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800540e:	4b2f      	ldr	r3, [pc, #188]	@ (80054cc <xPortStartScheduler+0x138>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3b01      	subs	r3, #1
 8005414:	4a2d      	ldr	r2, [pc, #180]	@ (80054cc <xPortStartScheduler+0x138>)
 8005416:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	b2db      	uxtb	r3, r3
 8005420:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800542a:	2b80      	cmp	r3, #128	@ 0x80
 800542c:	d0ef      	beq.n	800540e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800542e:	4b27      	ldr	r3, [pc, #156]	@ (80054cc <xPortStartScheduler+0x138>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f1c3 0307 	rsb	r3, r3, #7
 8005436:	2b04      	cmp	r3, #4
 8005438:	d00b      	beq.n	8005452 <xPortStartScheduler+0xbe>
        __asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	60bb      	str	r3, [r7, #8]
    }
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	e7fd      	b.n	800544e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005452:	4b1e      	ldr	r3, [pc, #120]	@ (80054cc <xPortStartScheduler+0x138>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	4a1c      	ldr	r2, [pc, #112]	@ (80054cc <xPortStartScheduler+0x138>)
 800545a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800545c:	4b1b      	ldr	r3, [pc, #108]	@ (80054cc <xPortStartScheduler+0x138>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005464:	4a19      	ldr	r2, [pc, #100]	@ (80054cc <xPortStartScheduler+0x138>)
 8005466:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	b2da      	uxtb	r2, r3
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005470:	4b17      	ldr	r3, [pc, #92]	@ (80054d0 <xPortStartScheduler+0x13c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a16      	ldr	r2, [pc, #88]	@ (80054d0 <xPortStartScheduler+0x13c>)
 8005476:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800547a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800547c:	4b14      	ldr	r3, [pc, #80]	@ (80054d0 <xPortStartScheduler+0x13c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a13      	ldr	r2, [pc, #76]	@ (80054d0 <xPortStartScheduler+0x13c>)
 8005482:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005486:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005488:	f000 f8e8 	bl	800565c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800548c:	4b11      	ldr	r3, [pc, #68]	@ (80054d4 <xPortStartScheduler+0x140>)
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005492:	f000 f907 	bl	80056a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005496:	4b10      	ldr	r3, [pc, #64]	@ (80054d8 <xPortStartScheduler+0x144>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a0f      	ldr	r2, [pc, #60]	@ (80054d8 <xPortStartScheduler+0x144>)
 800549c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80054a0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80054a2:	f7ff ff61 	bl	8005368 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80054a6:	f7fe ff23 	bl	80042f0 <vTaskSwitchContext>
    prvTaskExitError();
 80054aa:	f7ff ff17 	bl	80052dc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	e000ed00 	.word	0xe000ed00
 80054bc:	410fc271 	.word	0x410fc271
 80054c0:	410fc270 	.word	0x410fc270
 80054c4:	e000e400 	.word	0xe000e400
 80054c8:	200003a8 	.word	0x200003a8
 80054cc:	200003ac 	.word	0x200003ac
 80054d0:	e000ed20 	.word	0xe000ed20
 80054d4:	20000010 	.word	0x20000010
 80054d8:	e000ef34 	.word	0xe000ef34

080054dc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
        __asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	607b      	str	r3, [r7, #4]
    }
 80054f4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80054f6:	4b10      	ldr	r3, [pc, #64]	@ (8005538 <vPortEnterCritical+0x5c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3301      	adds	r3, #1
 80054fc:	4a0e      	ldr	r2, [pc, #56]	@ (8005538 <vPortEnterCritical+0x5c>)
 80054fe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005500:	4b0d      	ldr	r3, [pc, #52]	@ (8005538 <vPortEnterCritical+0x5c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d110      	bne.n	800552a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005508:	4b0c      	ldr	r3, [pc, #48]	@ (800553c <vPortEnterCritical+0x60>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <vPortEnterCritical+0x4e>
        __asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	603b      	str	r3, [r7, #0]
    }
 8005524:	bf00      	nop
 8005526:	bf00      	nop
 8005528:	e7fd      	b.n	8005526 <vPortEnterCritical+0x4a>
    }
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000010 	.word	0x20000010
 800553c:	e000ed04 	.word	0xe000ed04

08005540 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005546:	4b12      	ldr	r3, [pc, #72]	@ (8005590 <vPortExitCritical+0x50>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10b      	bne.n	8005566 <vPortExitCritical+0x26>
        __asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	607b      	str	r3, [r7, #4]
    }
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	e7fd      	b.n	8005562 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005566:	4b0a      	ldr	r3, [pc, #40]	@ (8005590 <vPortExitCritical+0x50>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3b01      	subs	r3, #1
 800556c:	4a08      	ldr	r2, [pc, #32]	@ (8005590 <vPortExitCritical+0x50>)
 800556e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005570:	4b07      	ldr	r3, [pc, #28]	@ (8005590 <vPortExitCritical+0x50>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d105      	bne.n	8005584 <vPortExitCritical+0x44>
 8005578:	2300      	movs	r3, #0
 800557a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	f383 8811 	msr	BASEPRI, r3
    }
 8005582:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	20000010 	.word	0x20000010
	...

080055a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80055a0:	f3ef 8009 	mrs	r0, PSP
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	4b15      	ldr	r3, [pc, #84]	@ (8005600 <pxCurrentTCBConst>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	f01e 0f10 	tst.w	lr, #16
 80055b0:	bf08      	it	eq
 80055b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ba:	6010      	str	r0, [r2, #0]
 80055bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80055c4:	f380 8811 	msr	BASEPRI, r0
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f7fe fe8e 	bl	80042f0 <vTaskSwitchContext>
 80055d4:	f04f 0000 	mov.w	r0, #0
 80055d8:	f380 8811 	msr	BASEPRI, r0
 80055dc:	bc09      	pop	{r0, r3}
 80055de:	6819      	ldr	r1, [r3, #0]
 80055e0:	6808      	ldr	r0, [r1, #0]
 80055e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e6:	f01e 0f10 	tst.w	lr, #16
 80055ea:	bf08      	it	eq
 80055ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055f0:	f380 8809 	msr	PSP, r0
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	f3af 8000 	nop.w

08005600 <pxCurrentTCBConst>:
 8005600:	20000268 	.word	0x20000268
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005604:	bf00      	nop
 8005606:	bf00      	nop

08005608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
        __asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	607b      	str	r3, [r7, #4]
    }
 8005620:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005622:	f002 f9cd 	bl	80079c0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005626:	f7fe fda5 	bl	8004174 <xTaskIncrementTick>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d006      	beq.n	800563e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8005630:	f002 fa24 	bl	8007a7c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005634:	4b08      	ldr	r3, [pc, #32]	@ (8005658 <SysTick_Handler+0x50>)
 8005636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	e001      	b.n	8005642 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800563e:	f002 fa01 	bl	8007a44 <SEGGER_SYSVIEW_RecordExitISR>
 8005642:	2300      	movs	r3, #0
 8005644:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	f383 8811 	msr	BASEPRI, r3
    }
 800564c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800564e:	bf00      	nop
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	e000ed04 	.word	0xe000ed04

0800565c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005660:	4b0b      	ldr	r3, [pc, #44]	@ (8005690 <vPortSetupTimerInterrupt+0x34>)
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005666:	4b0b      	ldr	r3, [pc, #44]	@ (8005694 <vPortSetupTimerInterrupt+0x38>)
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800566c:	4b0a      	ldr	r3, [pc, #40]	@ (8005698 <vPortSetupTimerInterrupt+0x3c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a0a      	ldr	r2, [pc, #40]	@ (800569c <vPortSetupTimerInterrupt+0x40>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	099b      	lsrs	r3, r3, #6
 8005678:	4a09      	ldr	r2, [pc, #36]	@ (80056a0 <vPortSetupTimerInterrupt+0x44>)
 800567a:	3b01      	subs	r3, #1
 800567c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800567e:	4b04      	ldr	r3, [pc, #16]	@ (8005690 <vPortSetupTimerInterrupt+0x34>)
 8005680:	2207      	movs	r2, #7
 8005682:	601a      	str	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	e000e010 	.word	0xe000e010
 8005694:	e000e018 	.word	0xe000e018
 8005698:	20000000 	.word	0x20000000
 800569c:	10624dd3 	.word	0x10624dd3
 80056a0:	e000e014 	.word	0xe000e014

080056a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80056a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80056b4 <vPortEnableVFP+0x10>
 80056a8:	6801      	ldr	r1, [r0, #0]
 80056aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80056ae:	6001      	str	r1, [r0, #0]
 80056b0:	4770      	bx	lr
 80056b2:	0000      	.short	0x0000
 80056b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop

080056bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80056c2:	f3ef 8305 	mrs	r3, IPSR
 80056c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b0f      	cmp	r3, #15
 80056cc:	d915      	bls.n	80056fa <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056ce:	4a18      	ldr	r2, [pc, #96]	@ (8005730 <vPortValidateInterruptPriority+0x74>)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056d8:	4b16      	ldr	r3, [pc, #88]	@ (8005734 <vPortValidateInterruptPriority+0x78>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	7afa      	ldrb	r2, [r7, #11]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d20b      	bcs.n	80056fa <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	607b      	str	r3, [r7, #4]
    }
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop
 80056f8:	e7fd      	b.n	80056f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005738 <vPortValidateInterruptPriority+0x7c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005702:	4b0e      	ldr	r3, [pc, #56]	@ (800573c <vPortValidateInterruptPriority+0x80>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d90b      	bls.n	8005722 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	603b      	str	r3, [r7, #0]
    }
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	e7fd      	b.n	800571e <vPortValidateInterruptPriority+0x62>
    }
 8005722:	bf00      	nop
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	e000e3f0 	.word	0xe000e3f0
 8005734:	200003a8 	.word	0x200003a8
 8005738:	e000ed0c 	.word	0xe000ed0c
 800573c:	200003ac 	.word	0x200003ac

08005740 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08a      	sub	sp, #40	@ 0x28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005748:	2300      	movs	r3, #0
 800574a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800574c:	f7fe fc40 	bl	8003fd0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005750:	4b66      	ldr	r3, [pc, #408]	@ (80058ec <pvPortMalloc+0x1ac>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005758:	f000 f938 	bl	80059cc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800575c:	4b64      	ldr	r3, [pc, #400]	@ (80058f0 <pvPortMalloc+0x1b0>)
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4013      	ands	r3, r2
 8005764:	2b00      	cmp	r3, #0
 8005766:	f040 80a9 	bne.w	80058bc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d02e      	beq.n	80057ce <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005770:	2208      	movs	r2, #8
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	429a      	cmp	r2, r3
 800577a:	d228      	bcs.n	80057ce <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800577c:	2208      	movs	r2, #8
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4413      	add	r3, r2
 8005782:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	2b00      	cmp	r3, #0
 800578c:	d022      	beq.n	80057d4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f023 0307 	bic.w	r3, r3, #7
 8005794:	3308      	adds	r3, #8
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	429a      	cmp	r2, r3
 800579a:	d215      	bcs.n	80057c8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f023 0307 	bic.w	r3, r3, #7
 80057a2:	3308      	adds	r3, #8
 80057a4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d011      	beq.n	80057d4 <pvPortMalloc+0x94>
        __asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	617b      	str	r3, [r7, #20]
    }
 80057c2:	bf00      	nop
 80057c4:	bf00      	nop
 80057c6:	e7fd      	b.n	80057c4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057cc:	e002      	b.n	80057d4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	607b      	str	r3, [r7, #4]
 80057d2:	e000      	b.n	80057d6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057d4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d06f      	beq.n	80058bc <pvPortMalloc+0x17c>
 80057dc:	4b45      	ldr	r3, [pc, #276]	@ (80058f4 <pvPortMalloc+0x1b4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d86a      	bhi.n	80058bc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80057e6:	4b44      	ldr	r3, [pc, #272]	@ (80058f8 <pvPortMalloc+0x1b8>)
 80057e8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80057ea:	4b43      	ldr	r3, [pc, #268]	@ (80058f8 <pvPortMalloc+0x1b8>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057f0:	e004      	b.n	80057fc <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	429a      	cmp	r2, r3
 8005804:	d903      	bls.n	800580e <pvPortMalloc+0xce>
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f1      	bne.n	80057f2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800580e:	4b37      	ldr	r3, [pc, #220]	@ (80058ec <pvPortMalloc+0x1ac>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005814:	429a      	cmp	r2, r3
 8005816:	d051      	beq.n	80058bc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2208      	movs	r2, #8
 800581e:	4413      	add	r3, r2
 8005820:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	1ad2      	subs	r2, r2, r3
 8005832:	2308      	movs	r3, #8
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	429a      	cmp	r2, r3
 8005838:	d920      	bls.n	800587c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800583a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4413      	add	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00b      	beq.n	8005864 <pvPortMalloc+0x124>
        __asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	613b      	str	r3, [r7, #16]
    }
 800585e:	bf00      	nop
 8005860:	bf00      	nop
 8005862:	e7fd      	b.n	8005860 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	1ad2      	subs	r2, r2, r3
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005876:	69b8      	ldr	r0, [r7, #24]
 8005878:	f000 f90a 	bl	8005a90 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800587c:	4b1d      	ldr	r3, [pc, #116]	@ (80058f4 <pvPortMalloc+0x1b4>)
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	4a1b      	ldr	r2, [pc, #108]	@ (80058f4 <pvPortMalloc+0x1b4>)
 8005888:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800588a:	4b1a      	ldr	r3, [pc, #104]	@ (80058f4 <pvPortMalloc+0x1b4>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4b1b      	ldr	r3, [pc, #108]	@ (80058fc <pvPortMalloc+0x1bc>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d203      	bcs.n	800589e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005896:	4b17      	ldr	r3, [pc, #92]	@ (80058f4 <pvPortMalloc+0x1b4>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a18      	ldr	r2, [pc, #96]	@ (80058fc <pvPortMalloc+0x1bc>)
 800589c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800589e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	4b13      	ldr	r3, [pc, #76]	@ (80058f0 <pvPortMalloc+0x1b0>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80058ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ae:	2200      	movs	r2, #0
 80058b0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80058b2:	4b13      	ldr	r3, [pc, #76]	@ (8005900 <pvPortMalloc+0x1c0>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3301      	adds	r3, #1
 80058b8:	4a11      	ldr	r2, [pc, #68]	@ (8005900 <pvPortMalloc+0x1c0>)
 80058ba:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80058bc:	f7fe fb96 	bl	8003fec <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00b      	beq.n	80058e2 <pvPortMalloc+0x1a2>
        __asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	60fb      	str	r3, [r7, #12]
    }
 80058dc:	bf00      	nop
 80058de:	bf00      	nop
 80058e0:	e7fd      	b.n	80058de <pvPortMalloc+0x19e>
    return pvReturn;
 80058e2:	69fb      	ldr	r3, [r7, #28]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3728      	adds	r7, #40	@ 0x28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	20012fb8 	.word	0x20012fb8
 80058f0:	20012fcc 	.word	0x20012fcc
 80058f4:	20012fbc 	.word	0x20012fbc
 80058f8:	20012fb0 	.word	0x20012fb0
 80058fc:	20012fc0 	.word	0x20012fc0
 8005900:	20012fc4 	.word	0x20012fc4

08005904 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d04f      	beq.n	80059b6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005916:	2308      	movs	r3, #8
 8005918:	425b      	negs	r3, r3
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4413      	add	r3, r2
 800591e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	4b25      	ldr	r3, [pc, #148]	@ (80059c0 <vPortFree+0xbc>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4013      	ands	r3, r2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10b      	bne.n	800594a <vPortFree+0x46>
        __asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	60fb      	str	r3, [r7, #12]
    }
 8005944:	bf00      	nop
 8005946:	bf00      	nop
 8005948:	e7fd      	b.n	8005946 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00b      	beq.n	800596a <vPortFree+0x66>
        __asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	60bb      	str	r3, [r7, #8]
    }
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	e7fd      	b.n	8005966 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	4b14      	ldr	r3, [pc, #80]	@ (80059c0 <vPortFree+0xbc>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4013      	ands	r3, r2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01e      	beq.n	80059b6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d11a      	bne.n	80059b6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	4b0e      	ldr	r3, [pc, #56]	@ (80059c0 <vPortFree+0xbc>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	43db      	mvns	r3, r3
 800598a:	401a      	ands	r2, r3
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005990:	f7fe fb1e 	bl	8003fd0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	4b0a      	ldr	r3, [pc, #40]	@ (80059c4 <vPortFree+0xc0>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4413      	add	r3, r2
 800599e:	4a09      	ldr	r2, [pc, #36]	@ (80059c4 <vPortFree+0xc0>)
 80059a0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059a2:	6938      	ldr	r0, [r7, #16]
 80059a4:	f000 f874 	bl	8005a90 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80059a8:	4b07      	ldr	r3, [pc, #28]	@ (80059c8 <vPortFree+0xc4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3301      	adds	r3, #1
 80059ae:	4a06      	ldr	r2, [pc, #24]	@ (80059c8 <vPortFree+0xc4>)
 80059b0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80059b2:	f7fe fb1b 	bl	8003fec <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80059b6:	bf00      	nop
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20012fcc 	.word	0x20012fcc
 80059c4:	20012fbc 	.word	0x20012fbc
 80059c8:	20012fc8 	.word	0x20012fc8

080059cc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059d2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80059d6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80059d8:	4b27      	ldr	r3, [pc, #156]	@ (8005a78 <prvHeapInit+0xac>)
 80059da:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00c      	beq.n	8005a00 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3307      	adds	r3, #7
 80059ea:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0307 	bic.w	r3, r3, #7
 80059f2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005a78 <prvHeapInit+0xac>)
 80059fc:	4413      	add	r3, r2
 80059fe:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a04:	4a1d      	ldr	r2, [pc, #116]	@ (8005a7c <prvHeapInit+0xb0>)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8005a7c <prvHeapInit+0xb0>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	4413      	add	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005a18:	2208      	movs	r2, #8
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	1a9b      	subs	r3, r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0307 	bic.w	r3, r3, #7
 8005a26:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4a15      	ldr	r2, [pc, #84]	@ (8005a80 <prvHeapInit+0xb4>)
 8005a2c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005a2e:	4b14      	ldr	r3, [pc, #80]	@ (8005a80 <prvHeapInit+0xb4>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2200      	movs	r2, #0
 8005a34:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005a36:	4b12      	ldr	r3, [pc, #72]	@ (8005a80 <prvHeapInit+0xb4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	1ad2      	subs	r2, r2, r3
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a80 <prvHeapInit+0xb4>)
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	4a0a      	ldr	r2, [pc, #40]	@ (8005a84 <prvHeapInit+0xb8>)
 8005a5a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	4a09      	ldr	r2, [pc, #36]	@ (8005a88 <prvHeapInit+0xbc>)
 8005a62:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a64:	4b09      	ldr	r3, [pc, #36]	@ (8005a8c <prvHeapInit+0xc0>)
 8005a66:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005a6a:	601a      	str	r2, [r3, #0]
}
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	200003b0 	.word	0x200003b0
 8005a7c:	20012fb0 	.word	0x20012fb0
 8005a80:	20012fb8 	.word	0x20012fb8
 8005a84:	20012fc0 	.word	0x20012fc0
 8005a88:	20012fbc 	.word	0x20012fbc
 8005a8c:	20012fcc 	.word	0x20012fcc

08005a90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a98:	4b28      	ldr	r3, [pc, #160]	@ (8005b3c <prvInsertBlockIntoFreeList+0xac>)
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	e002      	b.n	8005aa4 <prvInsertBlockIntoFreeList+0x14>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d8f7      	bhi.n	8005a9e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	4413      	add	r3, r2
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d108      	bne.n	8005ad2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	441a      	add	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	441a      	add	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d118      	bne.n	8005b18 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4b15      	ldr	r3, [pc, #84]	@ (8005b40 <prvInsertBlockIntoFreeList+0xb0>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d00d      	beq.n	8005b0e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	441a      	add	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	e008      	b.n	8005b20 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b40 <prvInsertBlockIntoFreeList+0xb0>)
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	e003      	b.n	8005b20 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d002      	beq.n	8005b2e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b2e:	bf00      	nop
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	20012fb0 	.word	0x20012fb0
 8005b40:	20012fb8 	.word	0x20012fb8

08005b44 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005b48:	4803      	ldr	r0, [pc, #12]	@ (8005b58 <_cbSendSystemDesc+0x14>)
 8005b4a:	f001 fee3 	bl	8007914 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005b4e:	4803      	ldr	r0, [pc, #12]	@ (8005b5c <_cbSendSystemDesc+0x18>)
 8005b50:	f001 fee0 	bl	8007914 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005b54:	bf00      	nop
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	08009490 	.word	0x08009490
 8005b5c:	080094d0 	.word	0x080094d0

08005b60 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005b64:	4b06      	ldr	r3, [pc, #24]	@ (8005b80 <SEGGER_SYSVIEW_Conf+0x20>)
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	4b05      	ldr	r3, [pc, #20]	@ (8005b80 <SEGGER_SYSVIEW_Conf+0x20>)
 8005b6a:	6819      	ldr	r1, [r3, #0]
 8005b6c:	4b05      	ldr	r3, [pc, #20]	@ (8005b84 <SEGGER_SYSVIEW_Conf+0x24>)
 8005b6e:	4a06      	ldr	r2, [pc, #24]	@ (8005b88 <SEGGER_SYSVIEW_Conf+0x28>)
 8005b70:	f001 fa4c 	bl	800700c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005b74:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8005b78:	f001 fa8c 	bl	8007094 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005b7c:	bf00      	nop
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20000000 	.word	0x20000000
 8005b84:	08005b45 	.word	0x08005b45
 8005b88:	08009570 	.word	0x08009570

08005b8c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005b92:	2300      	movs	r3, #0
 8005b94:	607b      	str	r3, [r7, #4]
 8005b96:	e033      	b.n	8005c00 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005b98:	491e      	ldr	r1, [pc, #120]	@ (8005c14 <_cbSendTaskList+0x88>)
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	491a      	ldr	r1, [pc, #104]	@ (8005c14 <_cbSendTaskList+0x88>)
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	4613      	mov	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	6819      	ldr	r1, [r3, #0]
 8005bba:	4c16      	ldr	r4, [pc, #88]	@ (8005c14 <_cbSendTaskList+0x88>)
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4423      	add	r3, r4
 8005bc8:	3308      	adds	r3, #8
 8005bca:	681c      	ldr	r4, [r3, #0]
 8005bcc:	4d11      	ldr	r5, [pc, #68]	@ (8005c14 <_cbSendTaskList+0x88>)
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	442b      	add	r3, r5
 8005bda:	330c      	adds	r3, #12
 8005bdc:	681d      	ldr	r5, [r3, #0]
 8005bde:	4e0d      	ldr	r6, [pc, #52]	@ (8005c14 <_cbSendTaskList+0x88>)
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4433      	add	r3, r6
 8005bec:	3310      	adds	r3, #16
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	462b      	mov	r3, r5
 8005bf4:	4622      	mov	r2, r4
 8005bf6:	f000 f8bd 	bl	8005d74 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	607b      	str	r3, [r7, #4]
 8005c00:	4b05      	ldr	r3, [pc, #20]	@ (8005c18 <_cbSendTaskList+0x8c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d3c6      	bcc.n	8005b98 <_cbSendTaskList+0xc>
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c14:	20012fd0 	.word	0x20012fd0
 8005c18:	20013070 	.word	0x20013070

08005c1c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005c24:	f7fe fa94 	bl	8004150 <xTaskGetTickCountFromISR>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	469a      	mov	sl, r3
 8005c2e:	4693      	mov	fp, r2
 8005c30:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	f04f 0a00 	mov.w	sl, #0
 8005c40:	f04f 0b00 	mov.w	fp, #0
 8005c44:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005c48:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005c4c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005c50:	4652      	mov	r2, sl
 8005c52:	465b      	mov	r3, fp
 8005c54:	1a14      	subs	r4, r2, r0
 8005c56:	eb63 0501 	sbc.w	r5, r3, r1
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	f04f 0300 	mov.w	r3, #0
 8005c62:	00ab      	lsls	r3, r5, #2
 8005c64:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005c68:	00a2      	lsls	r2, r4, #2
 8005c6a:	4614      	mov	r4, r2
 8005c6c:	461d      	mov	r5, r3
 8005c6e:	eb14 0800 	adds.w	r8, r4, r0
 8005c72:	eb45 0901 	adc.w	r9, r5, r1
 8005c76:	f04f 0200 	mov.w	r2, #0
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c8a:	4690      	mov	r8, r2
 8005c8c:	4699      	mov	r9, r3
 8005c8e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005c92:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005c96:	4610      	mov	r0, r2
 8005c98:	4619      	mov	r1, r3
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005ca4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005cb2:	2205      	movs	r2, #5
 8005cb4:	492b      	ldr	r1, [pc, #172]	@ (8005d64 <SYSVIEW_AddTask+0xc0>)
 8005cb6:	68b8      	ldr	r0, [r7, #8]
 8005cb8:	f002 fb0f 	bl	80082da <memcmp>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d04b      	beq.n	8005d5a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005cc2:	4b29      	ldr	r3, [pc, #164]	@ (8005d68 <SYSVIEW_AddTask+0xc4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b07      	cmp	r3, #7
 8005cc8:	d903      	bls.n	8005cd2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005cca:	4828      	ldr	r0, [pc, #160]	@ (8005d6c <SYSVIEW_AddTask+0xc8>)
 8005ccc:	f002 f934 	bl	8007f38 <SEGGER_SYSVIEW_Warn>
    return;
 8005cd0:	e044      	b.n	8005d5c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005cd2:	4b25      	ldr	r3, [pc, #148]	@ (8005d68 <SYSVIEW_AddTask+0xc4>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4926      	ldr	r1, [pc, #152]	@ (8005d70 <SYSVIEW_AddTask+0xcc>)
 8005cd8:	4613      	mov	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005ce6:	4b20      	ldr	r3, [pc, #128]	@ (8005d68 <SYSVIEW_AddTask+0xc4>)
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	4921      	ldr	r1, [pc, #132]	@ (8005d70 <SYSVIEW_AddTask+0xcc>)
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8005d68 <SYSVIEW_AddTask+0xc4>)
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	491b      	ldr	r1, [pc, #108]	@ (8005d70 <SYSVIEW_AddTask+0xcc>)
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	440b      	add	r3, r1
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005d12:	4b15      	ldr	r3, [pc, #84]	@ (8005d68 <SYSVIEW_AddTask+0xc4>)
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	4916      	ldr	r1, [pc, #88]	@ (8005d70 <SYSVIEW_AddTask+0xcc>)
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	330c      	adds	r3, #12
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005d28:	4b0f      	ldr	r3, [pc, #60]	@ (8005d68 <SYSVIEW_AddTask+0xc4>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	4910      	ldr	r1, [pc, #64]	@ (8005d70 <SYSVIEW_AddTask+0xcc>)
 8005d2e:	4613      	mov	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	440b      	add	r3, r1
 8005d38:	3310      	adds	r3, #16
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d68 <SYSVIEW_AddTask+0xc4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3301      	adds	r3, #1
 8005d44:	4a08      	ldr	r2, [pc, #32]	@ (8005d68 <SYSVIEW_AddTask+0xc4>)
 8005d46:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	68b9      	ldr	r1, [r7, #8]
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 f80e 	bl	8005d74 <SYSVIEW_SendTaskInfo>
 8005d58:	e000      	b.n	8005d5c <SYSVIEW_AddTask+0xb8>
    return;
 8005d5a:	bf00      	nop

}
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	080094e0 	.word	0x080094e0
 8005d68:	20013070 	.word	0x20013070
 8005d6c:	080094e8 	.word	0x080094e8
 8005d70:	20012fd0 	.word	0x20012fd0

08005d74 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08a      	sub	sp, #40	@ 0x28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005d82:	f107 0314 	add.w	r3, r7, #20
 8005d86:	2214      	movs	r2, #20
 8005d88:	2100      	movs	r1, #0
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f002 fab5 	bl	80082fa <memset>
  TaskInfo.TaskID     = TaskID;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da2:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005da4:	f107 0314 	add.w	r3, r7, #20
 8005da8:	4618      	mov	r0, r3
 8005daa:	f001 fcbb 	bl	8007724 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005dae:	bf00      	nop
 8005db0:	3728      	adds	r7, #40	@ 0x28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8005e38 <USART2_IRQHandler+0x80>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d011      	beq.n	8005df2 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005dce:	4b1b      	ldr	r3, [pc, #108]	@ (8005e3c <USART2_IRQHandler+0x84>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f003 030b 	and.w	r3, r3, #11
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d108      	bne.n	8005df2 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005de0:	4b17      	ldr	r3, [pc, #92]	@ (8005e40 <USART2_IRQHandler+0x88>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005de8:	4b15      	ldr	r3, [pc, #84]	@ (8005e40 <USART2_IRQHandler+0x88>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	79fa      	ldrb	r2, [r7, #7]
 8005dee:	4610      	mov	r0, r2
 8005df0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d01a      	beq.n	8005e32 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005dfc:	4b11      	ldr	r3, [pc, #68]	@ (8005e44 <USART2_IRQHandler+0x8c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d015      	beq.n	8005e30 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005e04:	4b0f      	ldr	r3, [pc, #60]	@ (8005e44 <USART2_IRQHandler+0x8c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	1dfa      	adds	r2, r7, #7
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	4798      	blx	r3
 8005e0e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005e16:	4b0c      	ldr	r3, [pc, #48]	@ (8005e48 <USART2_IRQHandler+0x90>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a0b      	ldr	r2, [pc, #44]	@ (8005e48 <USART2_IRQHandler+0x90>)
 8005e1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	e006      	b.n	8005e32 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005e24:	4b04      	ldr	r3, [pc, #16]	@ (8005e38 <USART2_IRQHandler+0x80>)
 8005e26:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005e28:	79fa      	ldrb	r2, [r7, #7]
 8005e2a:	4b04      	ldr	r3, [pc, #16]	@ (8005e3c <USART2_IRQHandler+0x84>)
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	e000      	b.n	8005e32 <USART2_IRQHandler+0x7a>
      return;
 8005e30:	bf00      	nop
    }
  }
}
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	40004400 	.word	0x40004400
 8005e3c:	40004404 	.word	0x40004404
 8005e40:	20013074 	.word	0x20013074
 8005e44:	20013078 	.word	0x20013078
 8005e48:	4000440c 	.word	0x4000440c

08005e4c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005e50:	4b05      	ldr	r3, [pc, #20]	@ (8005e68 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a04      	ldr	r2, [pc, #16]	@ (8005e68 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e5a:	6013      	str	r3, [r2, #0]
}
 8005e5c:	bf00      	nop
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	4000440c 	.word	0x4000440c

08005e6c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005e72:	4b24      	ldr	r3, [pc, #144]	@ (8005f04 <_DoInit+0x98>)
 8005e74:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2203      	movs	r2, #3
 8005e7a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2203      	movs	r2, #3
 8005e80:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a20      	ldr	r2, [pc, #128]	@ (8005f08 <_DoInit+0x9c>)
 8005e86:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a20      	ldr	r2, [pc, #128]	@ (8005f0c <_DoInit+0xa0>)
 8005e8c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e94:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a17      	ldr	r2, [pc, #92]	@ (8005f08 <_DoInit+0x9c>)
 8005eac:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a17      	ldr	r2, [pc, #92]	@ (8005f10 <_DoInit+0xa4>)
 8005eb2:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2210      	movs	r2, #16
 8005eb8:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3307      	adds	r3, #7
 8005ed0:	4a10      	ldr	r2, [pc, #64]	@ (8005f14 <_DoInit+0xa8>)
 8005ed2:	6810      	ldr	r0, [r2, #0]
 8005ed4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005ed6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a0e      	ldr	r2, [pc, #56]	@ (8005f18 <_DoInit+0xac>)
 8005ede:	6810      	ldr	r0, [r2, #0]
 8005ee0:	6018      	str	r0, [r3, #0]
 8005ee2:	8891      	ldrh	r1, [r2, #4]
 8005ee4:	7992      	ldrb	r2, [r2, #6]
 8005ee6:	8099      	strh	r1, [r3, #4]
 8005ee8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005eea:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005ef4:	f3bf 8f5f 	dmb	sy
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	2001307c 	.word	0x2001307c
 8005f08:	08009538 	.word	0x08009538
 8005f0c:	20013124 	.word	0x20013124
 8005f10:	20013524 	.word	0x20013524
 8005f14:	08009544 	.word	0x08009544
 8005f18:	08009548 	.word	0x08009548

08005f1c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08a      	sub	sp, #40	@ 0x28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d905      	bls.n	8005f4c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f4a:	e007      	b.n	8005f5c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	69b9      	ldr	r1, [r7, #24]
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	1acb      	subs	r3, r1, r3
 8005f56:	4413      	add	r3, r2
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f66:	4293      	cmp	r3, r2
 8005f68:	bf28      	it	cs
 8005f6a:	4613      	movcs	r3, r2
 8005f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4293      	cmp	r3, r2
 8005f74:	bf28      	it	cs
 8005f76:	4613      	movcs	r3, r2
 8005f78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	4413      	add	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f86:	68b9      	ldr	r1, [r7, #8]
 8005f88:	6978      	ldr	r0, [r7, #20]
 8005f8a:	f002 fa20 	bl	80083ce <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005f8e:	6a3a      	ldr	r2, [r7, #32]
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	4413      	add	r3, r2
 8005f94:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9a:	4413      	add	r3, r2
 8005f9c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005fa6:	69fa      	ldr	r2, [r7, #28]
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005faa:	4413      	add	r3, r2
 8005fac:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d101      	bne.n	8005fbc <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005fbc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	69fa      	ldr	r2, [r7, #28]
 8005fc4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1b2      	bne.n	8005f32 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3728      	adds	r7, #40	@ 0x28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b088      	sub	sp, #32
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d911      	bls.n	800601e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	4413      	add	r3, r2
 8006002:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	68b9      	ldr	r1, [r7, #8]
 8006008:	6938      	ldr	r0, [r7, #16]
 800600a:	f002 f9e0 	bl	80083ce <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800600e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	441a      	add	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800601c:	e01f      	b.n	800605e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	4413      	add	r3, r2
 800602a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	68b9      	ldr	r1, [r7, #8]
 8006030:	6938      	ldr	r0, [r7, #16]
 8006032:	f002 f9cc 	bl	80083ce <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	4413      	add	r3, r2
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4619      	mov	r1, r3
 800604e:	6938      	ldr	r0, [r7, #16]
 8006050:	f002 f9bd 	bl	80083ce <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006054:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	60da      	str	r2, [r3, #12]
}
 800605e:	bf00      	nop
 8006060:	3720      	adds	r7, #32
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8006066:	b480      	push	{r7}
 8006068:	b087      	sub	sp, #28
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	429a      	cmp	r2, r3
 8006080:	d808      	bhi.n	8006094 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	1ad2      	subs	r2, r2, r3
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	4413      	add	r3, r2
 800608e:	3b01      	subs	r3, #1
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	e004      	b.n	800609e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	3b01      	subs	r3, #1
 800609c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800609e:	697b      	ldr	r3, [r7, #20]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08c      	sub	sp, #48	@ 0x30
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80060b8:	4b3e      	ldr	r3, [pc, #248]	@ (80061b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80060ba:	623b      	str	r3, [r7, #32]
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <SEGGER_RTT_ReadNoLock+0x1e>
 80060c6:	f7ff fed1 	bl	8005e6c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4613      	mov	r3, r2
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	4413      	add	r3, r2
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	3360      	adds	r3, #96	@ 0x60
 80060d6:	4a37      	ldr	r2, [pc, #220]	@ (80061b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80060d8:	4413      	add	r3, r2
 80060da:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80060ec:	2300      	movs	r3, #0
 80060ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80060f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d92b      	bls.n	8006150 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4293      	cmp	r3, r2
 8006108:	bf28      	it	cs
 800610a:	4613      	movcs	r3, r2
 800610c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006114:	4413      	add	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	6939      	ldr	r1, [r7, #16]
 800611c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800611e:	f002 f956 	bl	80083ce <memcpy>
    NumBytesRead += NumBytesRem;
 8006122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	4413      	add	r3, r2
 8006128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800612a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	4413      	add	r3, r2
 8006130:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800613a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	4413      	add	r3, r2
 8006140:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006148:	429a      	cmp	r2, r3
 800614a:	d101      	bne.n	8006150 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800614c:	2300      	movs	r3, #0
 800614e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4293      	cmp	r3, r2
 800615e:	bf28      	it	cs
 8006160:	4613      	movcs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d019      	beq.n	800619e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006170:	4413      	add	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	6939      	ldr	r1, [r7, #16]
 8006178:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800617a:	f002 f928 	bl	80083ce <memcpy>
    NumBytesRead += NumBytesRem;
 800617e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	4413      	add	r3, r2
 8006184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8006186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	4413      	add	r3, r2
 800618c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006196:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	4413      	add	r3, r2
 800619c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800619e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061a8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80061aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3730      	adds	r7, #48	@ 0x30
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	2001307c 	.word	0x2001307c

080061b8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	4613      	mov	r3, r2
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	4413      	add	r3, r2
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006254 <SEGGER_RTT_WriteNoLock+0x9c>)
 80061d6:	4413      	add	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d029      	beq.n	8006236 <SEGGER_RTT_WriteNoLock+0x7e>
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d82e      	bhi.n	8006244 <SEGGER_RTT_WriteNoLock+0x8c>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <SEGGER_RTT_WriteNoLock+0x38>
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d013      	beq.n	8006216 <SEGGER_RTT_WriteNoLock+0x5e>
 80061ee:	e029      	b.n	8006244 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80061f0:	6978      	ldr	r0, [r7, #20]
 80061f2:	f7ff ff38 	bl	8006066 <_GetAvailWriteSpace>
 80061f6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d202      	bcs.n	8006206 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8006200:	2300      	movs	r3, #0
 8006202:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8006204:	e021      	b.n	800624a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	69b9      	ldr	r1, [r7, #24]
 800620e:	6978      	ldr	r0, [r7, #20]
 8006210:	f7ff fee1 	bl	8005fd6 <_WriteNoCheck>
    break;
 8006214:	e019      	b.n	800624a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006216:	6978      	ldr	r0, [r7, #20]
 8006218:	f7ff ff25 	bl	8006066 <_GetAvailWriteSpace>
 800621c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4293      	cmp	r3, r2
 8006224:	bf28      	it	cs
 8006226:	4613      	movcs	r3, r2
 8006228:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	69b9      	ldr	r1, [r7, #24]
 800622e:	6978      	ldr	r0, [r7, #20]
 8006230:	f7ff fed1 	bl	8005fd6 <_WriteNoCheck>
    break;
 8006234:	e009      	b.n	800624a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	69b9      	ldr	r1, [r7, #24]
 800623a:	6978      	ldr	r0, [r7, #20]
 800623c:	f7ff fe6e 	bl	8005f1c <_WriteBlocking>
 8006240:	61f8      	str	r0, [r7, #28]
    break;
 8006242:	e002      	b.n	800624a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8006244:	2300      	movs	r3, #0
 8006246:	61fb      	str	r3, [r7, #28]
    break;
 8006248:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800624a:	69fb      	ldr	r3, [r7, #28]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3720      	adds	r7, #32
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	2001307c 	.word	0x2001307c

08006258 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8006264:	4b0e      	ldr	r3, [pc, #56]	@ (80062a0 <SEGGER_RTT_Write+0x48>)
 8006266:	61fb      	str	r3, [r7, #28]
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <SEGGER_RTT_Write+0x1e>
 8006272:	f7ff fdfb 	bl	8005e6c <_DoInit>
  SEGGER_RTT_LOCK();
 8006276:	f3ef 8311 	mrs	r3, BASEPRI
 800627a:	f04f 0120 	mov.w	r1, #32
 800627e:	f381 8811 	msr	BASEPRI, r1
 8006282:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f7ff ff95 	bl	80061b8 <SEGGER_RTT_WriteNoLock>
 800628e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8006296:	697b      	ldr	r3, [r7, #20]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3720      	adds	r7, #32
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	2001307c 	.word	0x2001307c

080062a4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80062b2:	4b3d      	ldr	r3, [pc, #244]	@ (80063a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80062b4:	61bb      	str	r3, [r7, #24]
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80062c0:	f7ff fdd4 	bl	8005e6c <_DoInit>
  SEGGER_RTT_LOCK();
 80062c4:	f3ef 8311 	mrs	r3, BASEPRI
 80062c8:	f04f 0120 	mov.w	r1, #32
 80062cc:	f381 8811 	msr	BASEPRI, r1
 80062d0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80062d2:	4b35      	ldr	r3, [pc, #212]	@ (80063a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80062d4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80062da:	6939      	ldr	r1, [r7, #16]
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	4613      	mov	r3, r2
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	4413      	add	r3, r2
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	440b      	add	r3, r1
 80062ea:	3304      	adds	r3, #4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d008      	beq.n	8006304 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	3301      	adds	r3, #1
 80062f6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	69fa      	ldr	r2, [r7, #28]
 80062fe:	429a      	cmp	r2, r3
 8006300:	dbeb      	blt.n	80062da <SEGGER_RTT_AllocUpBuffer+0x36>
 8006302:	e000      	b.n	8006306 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8006304:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	69fa      	ldr	r2, [r7, #28]
 800630c:	429a      	cmp	r2, r3
 800630e:	da3f      	bge.n	8006390 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006310:	6939      	ldr	r1, [r7, #16]
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	4613      	mov	r3, r2
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	4413      	add	r3, r2
 800631c:	00db      	lsls	r3, r3, #3
 800631e:	440b      	add	r3, r1
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006324:	6939      	ldr	r1, [r7, #16]
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	4613      	mov	r3, r2
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	4413      	add	r3, r2
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	440b      	add	r3, r1
 8006334:	3304      	adds	r3, #4
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800633a:	6939      	ldr	r1, [r7, #16]
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	4613      	mov	r3, r2
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	4413      	add	r3, r2
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	440b      	add	r3, r1
 8006348:	3320      	adds	r3, #32
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800634e:	6939      	ldr	r1, [r7, #16]
 8006350:	69fa      	ldr	r2, [r7, #28]
 8006352:	4613      	mov	r3, r2
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	4413      	add	r3, r2
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	440b      	add	r3, r1
 800635c:	3328      	adds	r3, #40	@ 0x28
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006362:	6939      	ldr	r1, [r7, #16]
 8006364:	69fa      	ldr	r2, [r7, #28]
 8006366:	4613      	mov	r3, r2
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	4413      	add	r3, r2
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	440b      	add	r3, r1
 8006370:	3324      	adds	r3, #36	@ 0x24
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006376:	6939      	ldr	r1, [r7, #16]
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	4613      	mov	r3, r2
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	4413      	add	r3, r2
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	440b      	add	r3, r1
 8006384:	332c      	adds	r3, #44	@ 0x2c
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800638a:	f3bf 8f5f 	dmb	sy
 800638e:	e002      	b.n	8006396 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006390:	f04f 33ff 	mov.w	r3, #4294967295
 8006394:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800639c:	69fb      	ldr	r3, [r7, #28]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3720      	adds	r7, #32
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	2001307c 	.word	0x2001307c

080063ac <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80063ba:	4b33      	ldr	r3, [pc, #204]	@ (8006488 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80063c8:	f7ff fd50 	bl	8005e6c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80063cc:	4b2e      	ldr	r3, [pc, #184]	@ (8006488 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80063ce:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	461a      	mov	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4293      	cmp	r3, r2
 80063da:	d24d      	bcs.n	8006478 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80063dc:	f3ef 8311 	mrs	r3, BASEPRI
 80063e0:	f04f 0120 	mov.w	r1, #32
 80063e4:	f381 8811 	msr	BASEPRI, r1
 80063e8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d031      	beq.n	8006454 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80063f0:	6979      	ldr	r1, [r7, #20]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4613      	mov	r3, r2
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	4413      	add	r3, r2
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	440b      	add	r3, r1
 80063fe:	3360      	adds	r3, #96	@ 0x60
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8006404:	6979      	ldr	r1, [r7, #20]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4613      	mov	r3, r2
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	4413      	add	r3, r2
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	440b      	add	r3, r1
 8006412:	3364      	adds	r3, #100	@ 0x64
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8006418:	6979      	ldr	r1, [r7, #20]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	4613      	mov	r3, r2
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	4413      	add	r3, r2
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	440b      	add	r3, r1
 8006426:	3368      	adds	r3, #104	@ 0x68
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800642c:	6979      	ldr	r1, [r7, #20]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4613      	mov	r3, r2
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	4413      	add	r3, r2
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	440b      	add	r3, r1
 800643a:	3370      	adds	r3, #112	@ 0x70
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8006440:	6979      	ldr	r1, [r7, #20]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4613      	mov	r3, r2
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	4413      	add	r3, r2
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	440b      	add	r3, r1
 800644e:	336c      	adds	r3, #108	@ 0x6c
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8006454:	6979      	ldr	r1, [r7, #20]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4613      	mov	r3, r2
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	4413      	add	r3, r2
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	440b      	add	r3, r1
 8006462:	3374      	adds	r3, #116	@ 0x74
 8006464:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006466:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006468:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006472:	2300      	movs	r3, #0
 8006474:	61fb      	str	r3, [r7, #28]
 8006476:	e002      	b.n	800647e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8006478:	f04f 33ff 	mov.w	r3, #4294967295
 800647c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800647e:	69fb      	ldr	r3, [r7, #28]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3720      	adds	r7, #32
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	2001307c 	.word	0x2001307c

0800648c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006498:	2300      	movs	r3, #0
 800649a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800649c:	e002      	b.n	80064a4 <_EncodeStr+0x18>
    Len++;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	3301      	adds	r3, #1
 80064a2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	4413      	add	r3, r2
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1f6      	bne.n	800649e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d901      	bls.n	80064bc <_EncodeStr+0x30>
    Len = Limit;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	2bfe      	cmp	r3, #254	@ 0xfe
 80064c0:	d806      	bhi.n	80064d0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	60fa      	str	r2, [r7, #12]
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	e011      	b.n	80064f4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	60fa      	str	r2, [r7, #12]
 80064d6:	22ff      	movs	r2, #255	@ 0xff
 80064d8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	60fa      	str	r2, [r7, #12]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	0a19      	lsrs	r1, r3, #8
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	60fa      	str	r2, [r7, #12]
 80064f0:	b2ca      	uxtb	r2, r1
 80064f2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80064f8:	e00a      	b.n	8006510 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	1c53      	adds	r3, r2, #1
 80064fe:	60bb      	str	r3, [r7, #8]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	1c59      	adds	r1, r3, #1
 8006504:	60f9      	str	r1, [r7, #12]
 8006506:	7812      	ldrb	r2, [r2, #0]
 8006508:	701a      	strb	r2, [r3, #0]
    n++;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	3301      	adds	r3, #1
 800650e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	429a      	cmp	r2, r3
 8006516:	d3f0      	bcc.n	80064fa <_EncodeStr+0x6e>
  }
  return pPayload;
 8006518:	68fb      	ldr	r3, [r7, #12]
}
 800651a:	4618      	mov	r0, r3
 800651c:	371c      	adds	r7, #28
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3304      	adds	r3, #4
}
 8006532:	4618      	mov	r0, r3
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
	...

08006540 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006546:	4b35      	ldr	r3, [pc, #212]	@ (800661c <_HandleIncomingPacket+0xdc>)
 8006548:	7e1b      	ldrb	r3, [r3, #24]
 800654a:	4618      	mov	r0, r3
 800654c:	1cfb      	adds	r3, r7, #3
 800654e:	2201      	movs	r2, #1
 8006550:	4619      	mov	r1, r3
 8006552:	f7ff fdab 	bl	80060ac <SEGGER_RTT_ReadNoLock>
 8006556:	4603      	mov	r3, r0
 8006558:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	dd59      	ble.n	8006614 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	2b80      	cmp	r3, #128	@ 0x80
 8006564:	d032      	beq.n	80065cc <_HandleIncomingPacket+0x8c>
 8006566:	2b80      	cmp	r3, #128	@ 0x80
 8006568:	dc42      	bgt.n	80065f0 <_HandleIncomingPacket+0xb0>
 800656a:	2b07      	cmp	r3, #7
 800656c:	dc16      	bgt.n	800659c <_HandleIncomingPacket+0x5c>
 800656e:	2b00      	cmp	r3, #0
 8006570:	dd3e      	ble.n	80065f0 <_HandleIncomingPacket+0xb0>
 8006572:	3b01      	subs	r3, #1
 8006574:	2b06      	cmp	r3, #6
 8006576:	d83b      	bhi.n	80065f0 <_HandleIncomingPacket+0xb0>
 8006578:	a201      	add	r2, pc, #4	@ (adr r2, 8006580 <_HandleIncomingPacket+0x40>)
 800657a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657e:	bf00      	nop
 8006580:	080065a3 	.word	0x080065a3
 8006584:	080065a9 	.word	0x080065a9
 8006588:	080065af 	.word	0x080065af
 800658c:	080065b5 	.word	0x080065b5
 8006590:	080065bb 	.word	0x080065bb
 8006594:	080065c1 	.word	0x080065c1
 8006598:	080065c7 	.word	0x080065c7
 800659c:	2b7f      	cmp	r3, #127	@ 0x7f
 800659e:	d034      	beq.n	800660a <_HandleIncomingPacket+0xca>
 80065a0:	e026      	b.n	80065f0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80065a2:	f000 ff43 	bl	800742c <SEGGER_SYSVIEW_Start>
      break;
 80065a6:	e035      	b.n	8006614 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80065a8:	f000 fffc 	bl	80075a4 <SEGGER_SYSVIEW_Stop>
      break;
 80065ac:	e032      	b.n	8006614 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80065ae:	f001 f9d5 	bl	800795c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80065b2:	e02f      	b.n	8006614 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80065b4:	f001 f99a 	bl	80078ec <SEGGER_SYSVIEW_SendTaskList>
      break;
 80065b8:	e02c      	b.n	8006614 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80065ba:	f001 f819 	bl	80075f0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80065be:	e029      	b.n	8006614 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80065c0:	f001 fc68 	bl	8007e94 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80065c4:	e026      	b.n	8006614 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80065c6:	f001 fc47 	bl	8007e58 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80065ca:	e023      	b.n	8006614 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80065cc:	4b13      	ldr	r3, [pc, #76]	@ (800661c <_HandleIncomingPacket+0xdc>)
 80065ce:	7e1b      	ldrb	r3, [r3, #24]
 80065d0:	4618      	mov	r0, r3
 80065d2:	1cfb      	adds	r3, r7, #3
 80065d4:	2201      	movs	r2, #1
 80065d6:	4619      	mov	r1, r3
 80065d8:	f7ff fd68 	bl	80060ac <SEGGER_RTT_ReadNoLock>
 80065dc:	4603      	mov	r3, r0
 80065de:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	dd13      	ble.n	800660e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f001 fbb5 	bl	8007d58 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80065ee:	e00e      	b.n	800660e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	b25b      	sxtb	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	da0c      	bge.n	8006612 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80065f8:	4b08      	ldr	r3, [pc, #32]	@ (800661c <_HandleIncomingPacket+0xdc>)
 80065fa:	7e1b      	ldrb	r3, [r3, #24]
 80065fc:	4618      	mov	r0, r3
 80065fe:	1cfb      	adds	r3, r7, #3
 8006600:	2201      	movs	r2, #1
 8006602:	4619      	mov	r1, r3
 8006604:	f7ff fd52 	bl	80060ac <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006608:	e003      	b.n	8006612 <_HandleIncomingPacket+0xd2>
      break;
 800660a:	bf00      	nop
 800660c:	e002      	b.n	8006614 <_HandleIncomingPacket+0xd4>
      break;
 800660e:	bf00      	nop
 8006610:	e000      	b.n	8006614 <_HandleIncomingPacket+0xd4>
      break;
 8006612:	bf00      	nop
    }
  }
}
 8006614:	bf00      	nop
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	2001453c 	.word	0x2001453c

08006620 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006620:	b580      	push	{r7, lr}
 8006622:	b08c      	sub	sp, #48	@ 0x30
 8006624:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006626:	2301      	movs	r3, #1
 8006628:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800662a:	1d3b      	adds	r3, r7, #4
 800662c:	3301      	adds	r3, #1
 800662e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006634:	4b32      	ldr	r3, [pc, #200]	@ (8006700 <_TrySendOverflowPacket+0xe0>)
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	62bb      	str	r3, [r7, #40]	@ 0x28
 800663a:	e00b      	b.n	8006654 <_TrySendOverflowPacket+0x34>
 800663c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663e:	b2da      	uxtb	r2, r3
 8006640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006642:	1c59      	adds	r1, r3, #1
 8006644:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006646:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006650:	09db      	lsrs	r3, r3, #7
 8006652:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006656:	2b7f      	cmp	r3, #127	@ 0x7f
 8006658:	d8f0      	bhi.n	800663c <_TrySendOverflowPacket+0x1c>
 800665a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006660:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006668:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800666a:	4b26      	ldr	r3, [pc, #152]	@ (8006704 <_TrySendOverflowPacket+0xe4>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006670:	4b23      	ldr	r3, [pc, #140]	@ (8006700 <_TrySendOverflowPacket+0xe0>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	627b      	str	r3, [r7, #36]	@ 0x24
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	623b      	str	r3, [r7, #32]
 8006682:	e00b      	b.n	800669c <_TrySendOverflowPacket+0x7c>
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	b2da      	uxtb	r2, r3
 8006688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668a:	1c59      	adds	r1, r3, #1
 800668c:	6279      	str	r1, [r7, #36]	@ 0x24
 800668e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	09db      	lsrs	r3, r3, #7
 800669a:	623b      	str	r3, [r7, #32]
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	2b7f      	cmp	r3, #127	@ 0x7f
 80066a0:	d8f0      	bhi.n	8006684 <_TrySendOverflowPacket+0x64>
 80066a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a4:	1c5a      	adds	r2, r3, #1
 80066a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80066a8:	6a3a      	ldr	r2, [r7, #32]
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80066b2:	4b13      	ldr	r3, [pc, #76]	@ (8006700 <_TrySendOverflowPacket+0xe0>)
 80066b4:	785b      	ldrb	r3, [r3, #1]
 80066b6:	4618      	mov	r0, r3
 80066b8:	1d3b      	adds	r3, r7, #4
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	1d3b      	adds	r3, r7, #4
 80066c2:	4619      	mov	r1, r3
 80066c4:	f7f9 fd84 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80066c8:	4603      	mov	r3, r0
 80066ca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80066cc:	f7ff fbbe 	bl	8005e4c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d009      	beq.n	80066ea <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80066d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006700 <_TrySendOverflowPacket+0xe0>)
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80066dc:	4b08      	ldr	r3, [pc, #32]	@ (8006700 <_TrySendOverflowPacket+0xe0>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	4b06      	ldr	r3, [pc, #24]	@ (8006700 <_TrySendOverflowPacket+0xe0>)
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	e004      	b.n	80066f4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80066ea:	4b05      	ldr	r3, [pc, #20]	@ (8006700 <_TrySendOverflowPacket+0xe0>)
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	3301      	adds	r3, #1
 80066f0:	4a03      	ldr	r2, [pc, #12]	@ (8006700 <_TrySendOverflowPacket+0xe0>)
 80066f2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80066f4:	693b      	ldr	r3, [r7, #16]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3730      	adds	r7, #48	@ 0x30
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	2001453c 	.word	0x2001453c
 8006704:	e0001004 	.word	0xe0001004

08006708 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006708:	b580      	push	{r7, lr}
 800670a:	b08a      	sub	sp, #40	@ 0x28
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006714:	4b6d      	ldr	r3, [pc, #436]	@ (80068cc <_SendPacket+0x1c4>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d010      	beq.n	800673e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800671c:	4b6b      	ldr	r3, [pc, #428]	@ (80068cc <_SendPacket+0x1c4>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 80a5 	beq.w	8006870 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006726:	4b69      	ldr	r3, [pc, #420]	@ (80068cc <_SendPacket+0x1c4>)
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	2b02      	cmp	r3, #2
 800672c:	d109      	bne.n	8006742 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800672e:	f7ff ff77 	bl	8006620 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006732:	4b66      	ldr	r3, [pc, #408]	@ (80068cc <_SendPacket+0x1c4>)
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	2b01      	cmp	r3, #1
 8006738:	f040 809c 	bne.w	8006874 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800673c:	e001      	b.n	8006742 <_SendPacket+0x3a>
    goto Send;
 800673e:	bf00      	nop
 8006740:	e000      	b.n	8006744 <_SendPacket+0x3c>
Send:
 8006742:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b1f      	cmp	r3, #31
 8006748:	d809      	bhi.n	800675e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800674a:	4b60      	ldr	r3, [pc, #384]	@ (80068cc <_SendPacket+0x1c4>)
 800674c:	69da      	ldr	r2, [r3, #28]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	f040 808d 	bne.w	8006878 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b17      	cmp	r3, #23
 8006762:	d807      	bhi.n	8006774 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3b01      	subs	r3, #1
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	b2da      	uxtb	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	701a      	strb	r2, [r3, #0]
 8006772:	e03d      	b.n	80067f0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006780:	d912      	bls.n	80067a8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	09da      	lsrs	r2, r3, #7
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3b01      	subs	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	b2db      	uxtb	r3, r3
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	3a01      	subs	r2, #1
 800679a:	60fa      	str	r2, [r7, #12]
 800679c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	e006      	b.n	80067b6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80067ba:	d912      	bls.n	80067e2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	09da      	lsrs	r2, r3, #7
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	60fb      	str	r3, [r7, #12]
 80067c6:	b2d2      	uxtb	r2, r2
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	3a01      	subs	r2, #1
 80067d4:	60fa      	str	r2, [r7, #12]
 80067d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	701a      	strb	r2, [r3, #0]
 80067e0:	e006      	b.n	80067f0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80067f0:	4b37      	ldr	r3, [pc, #220]	@ (80068d0 <_SendPacket+0x1c8>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80067f6:	4b35      	ldr	r3, [pc, #212]	@ (80068cc <_SendPacket+0x1c4>)
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	627b      	str	r3, [r7, #36]	@ 0x24
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	623b      	str	r3, [r7, #32]
 8006808:	e00b      	b.n	8006822 <_SendPacket+0x11a>
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	b2da      	uxtb	r2, r3
 800680e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006810:	1c59      	adds	r1, r3, #1
 8006812:	6279      	str	r1, [r7, #36]	@ 0x24
 8006814:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	09db      	lsrs	r3, r3, #7
 8006820:	623b      	str	r3, [r7, #32]
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	2b7f      	cmp	r3, #127	@ 0x7f
 8006826:	d8f0      	bhi.n	800680a <_SendPacket+0x102>
 8006828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	627a      	str	r2, [r7, #36]	@ 0x24
 800682e:	6a3a      	ldr	r2, [r7, #32]
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006838:	4b24      	ldr	r3, [pc, #144]	@ (80068cc <_SendPacket+0x1c4>)
 800683a:	785b      	ldrb	r3, [r3, #1]
 800683c:	4618      	mov	r0, r3
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	461a      	mov	r2, r3
 8006846:	68f9      	ldr	r1, [r7, #12]
 8006848:	f7f9 fcc2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800684c:	4603      	mov	r3, r0
 800684e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006850:	f7ff fafc 	bl	8005e4c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800685a:	4a1c      	ldr	r2, [pc, #112]	@ (80068cc <_SendPacket+0x1c4>)
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	60d3      	str	r3, [r2, #12]
 8006860:	e00b      	b.n	800687a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006862:	4b1a      	ldr	r3, [pc, #104]	@ (80068cc <_SendPacket+0x1c4>)
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	3301      	adds	r3, #1
 8006868:	b2da      	uxtb	r2, r3
 800686a:	4b18      	ldr	r3, [pc, #96]	@ (80068cc <_SendPacket+0x1c4>)
 800686c:	701a      	strb	r2, [r3, #0]
 800686e:	e004      	b.n	800687a <_SendPacket+0x172>
    goto SendDone;
 8006870:	bf00      	nop
 8006872:	e002      	b.n	800687a <_SendPacket+0x172>
      goto SendDone;
 8006874:	bf00      	nop
 8006876:	e000      	b.n	800687a <_SendPacket+0x172>
      goto SendDone;
 8006878:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800687a:	4b14      	ldr	r3, [pc, #80]	@ (80068cc <_SendPacket+0x1c4>)
 800687c:	7e1b      	ldrb	r3, [r3, #24]
 800687e:	4619      	mov	r1, r3
 8006880:	4a14      	ldr	r2, [pc, #80]	@ (80068d4 <_SendPacket+0x1cc>)
 8006882:	460b      	mov	r3, r1
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	440b      	add	r3, r1
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	4413      	add	r3, r2
 800688c:	336c      	adds	r3, #108	@ 0x6c
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	4b0e      	ldr	r3, [pc, #56]	@ (80068cc <_SendPacket+0x1c4>)
 8006892:	7e1b      	ldrb	r3, [r3, #24]
 8006894:	4618      	mov	r0, r3
 8006896:	490f      	ldr	r1, [pc, #60]	@ (80068d4 <_SendPacket+0x1cc>)
 8006898:	4603      	mov	r3, r0
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	4403      	add	r3, r0
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	440b      	add	r3, r1
 80068a2:	3370      	adds	r3, #112	@ 0x70
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d00b      	beq.n	80068c2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80068aa:	4b08      	ldr	r3, [pc, #32]	@ (80068cc <_SendPacket+0x1c4>)
 80068ac:	789b      	ldrb	r3, [r3, #2]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d107      	bne.n	80068c2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80068b2:	4b06      	ldr	r3, [pc, #24]	@ (80068cc <_SendPacket+0x1c4>)
 80068b4:	2201      	movs	r2, #1
 80068b6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80068b8:	f7ff fe42 	bl	8006540 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80068bc:	4b03      	ldr	r3, [pc, #12]	@ (80068cc <_SendPacket+0x1c4>)
 80068be:	2200      	movs	r2, #0
 80068c0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80068c2:	bf00      	nop
 80068c4:	3728      	adds	r7, #40	@ 0x28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	2001453c 	.word	0x2001453c
 80068d0:	e0001004 	.word	0xe0001004
 80068d4:	2001307c 	.word	0x2001307c

080068d8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08a      	sub	sp, #40	@ 0x28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	3301      	adds	r3, #1
 80068ee:	2b80      	cmp	r3, #128	@ 0x80
 80068f0:	d80a      	bhi.n	8006908 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	1c59      	adds	r1, r3, #1
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6051      	str	r1, [r2, #4]
 80068fc:	78fa      	ldrb	r2, [r7, #3]
 80068fe:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	2b80      	cmp	r3, #128	@ 0x80
 800690e:	d15a      	bne.n	80069c6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691a      	ldr	r2, [r3, #16]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	627b      	str	r3, [r7, #36]	@ 0x24
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	623b      	str	r3, [r7, #32]
 8006930:	e00b      	b.n	800694a <_StoreChar+0x72>
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	b2da      	uxtb	r2, r3
 8006936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006938:	1c59      	adds	r1, r3, #1
 800693a:	6279      	str	r1, [r7, #36]	@ 0x24
 800693c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	09db      	lsrs	r3, r3, #7
 8006948:	623b      	str	r3, [r7, #32]
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	2b7f      	cmp	r3, #127	@ 0x7f
 800694e:	d8f0      	bhi.n	8006932 <_StoreChar+0x5a>
 8006950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	627a      	str	r2, [r7, #36]	@ 0x24
 8006956:	6a3a      	ldr	r2, [r7, #32]
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	61fb      	str	r3, [r7, #28]
 8006964:	2300      	movs	r3, #0
 8006966:	61bb      	str	r3, [r7, #24]
 8006968:	e00b      	b.n	8006982 <_StoreChar+0xaa>
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	b2da      	uxtb	r2, r3
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	1c59      	adds	r1, r3, #1
 8006972:	61f9      	str	r1, [r7, #28]
 8006974:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	09db      	lsrs	r3, r3, #7
 8006980:	61bb      	str	r3, [r7, #24]
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	2b7f      	cmp	r3, #127	@ 0x7f
 8006986:	d8f0      	bhi.n	800696a <_StoreChar+0x92>
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	61fa      	str	r2, [r7, #28]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	221a      	movs	r2, #26
 800699e:	6939      	ldr	r1, [r7, #16]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff feb1 	bl	8006708 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff fdbb 	bl	8006526 <_PreparePacket>
 80069b0:	4602      	mov	r2, r0
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	611a      	str	r2, [r3, #16]
  }
}
 80069c6:	bf00      	nop
 80069c8:	3728      	adds	r7, #40	@ 0x28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08a      	sub	sp, #40	@ 0x28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80069e2:	2301      	movs	r3, #1
 80069e4:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80069e6:	2301      	movs	r3, #1
 80069e8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80069ea:	e007      	b.n	80069fc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80069ec:	6a3a      	ldr	r2, [r7, #32]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f4:	623b      	str	r3, [r7, #32]
    Width++;
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	3301      	adds	r3, #1
 80069fa:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80069fc:	6a3a      	ldr	r2, [r7, #32]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d2f3      	bcs.n	80069ec <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d901      	bls.n	8006a10 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d000      	beq.n	8006a1c <_PrintUnsigned+0x4c>
 8006a1a:	e01f      	b.n	8006a5c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d01c      	beq.n	8006a5c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d005      	beq.n	8006a38 <_PrintUnsigned+0x68>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d102      	bne.n	8006a38 <_PrintUnsigned+0x68>
        c = '0';
 8006a32:	2330      	movs	r3, #48	@ 0x30
 8006a34:	76fb      	strb	r3, [r7, #27]
 8006a36:	e001      	b.n	8006a3c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8006a38:	2320      	movs	r3, #32
 8006a3a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006a3c:	e007      	b.n	8006a4e <_PrintUnsigned+0x7e>
        FieldWidth--;
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a40:	3b01      	subs	r3, #1
 8006a42:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8006a44:	7efb      	ldrb	r3, [r7, #27]
 8006a46:	4619      	mov	r1, r3
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f7ff ff45 	bl	80068d8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <_PrintUnsigned+0x8c>
 8006a54:	69fa      	ldr	r2, [r7, #28]
 8006a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d3f0      	bcc.n	8006a3e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d903      	bls.n	8006a6a <_PrintUnsigned+0x9a>
      NumDigits--;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	603b      	str	r3, [r7, #0]
 8006a68:	e009      	b.n	8006a7e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a72:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d200      	bcs.n	8006a7e <_PrintUnsigned+0xae>
        break;
 8006a7c:	e005      	b.n	8006a8a <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	fb02 f303 	mul.w	r3, r2, r3
 8006a86:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006a88:	e7e8      	b.n	8006a5c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a92:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a98:	fb02 f303 	mul.w	r3, r2, r3
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006aa2:	4a15      	ldr	r2, [pc, #84]	@ (8006af8 <_PrintUnsigned+0x128>)
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f7ff ff13 	bl	80068d8 <_StoreChar>
    Digit /= Base;
 8006ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aba:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8006abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e3      	bne.n	8006a8a <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d011      	beq.n	8006af0 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8006acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00e      	beq.n	8006af0 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006ad2:	e006      	b.n	8006ae2 <_PrintUnsigned+0x112>
        FieldWidth--;
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8006ada:	2120      	movs	r1, #32
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f7ff fefb 	bl	80068d8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d003      	beq.n	8006af0 <_PrintUnsigned+0x120>
 8006ae8:	69fa      	ldr	r2, [r7, #28]
 8006aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d3f1      	bcc.n	8006ad4 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8006af0:	bf00      	nop
 8006af2:	3728      	adds	r7, #40	@ 0x28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	08009584 	.word	0x08009584

08006afc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	bfb8      	it	lt
 8006b10:	425b      	neglt	r3, r3
 8006b12:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006b14:	2301      	movs	r3, #1
 8006b16:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006b18:	e007      	b.n	8006b2a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006b22:	613b      	str	r3, [r7, #16]
    Width++;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	3301      	adds	r3, #1
 8006b28:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	daf3      	bge.n	8006b1a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d901      	bls.n	8006b3e <_PrintInt+0x42>
    Width = NumDigits;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00a      	beq.n	8006b5a <_PrintInt+0x5e>
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	db04      	blt.n	8006b54 <_PrintInt+0x58>
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4c:	f003 0304 	and.w	r3, r3, #4
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <_PrintInt+0x5e>
    FieldWidth--;
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <_PrintInt+0x6e>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d016      	beq.n	8006b98 <_PrintInt+0x9c>
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d111      	bne.n	8006b98 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00e      	beq.n	8006b98 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006b7a:	e006      	b.n	8006b8a <_PrintInt+0x8e>
        FieldWidth--;
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006b82:	2120      	movs	r1, #32
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f7ff fea7 	bl	80068d8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <_PrintInt+0x9c>
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d3f1      	bcc.n	8006b7c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	da07      	bge.n	8006bae <_PrintInt+0xb2>
    v = -v;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	425b      	negs	r3, r3
 8006ba2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006ba4:	212d      	movs	r1, #45	@ 0x2d
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f7ff fe96 	bl	80068d8 <_StoreChar>
 8006bac:	e008      	b.n	8006bc0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006bb8:	212b      	movs	r1, #43	@ 0x2b
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f7ff fe8c 	bl	80068d8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d019      	beq.n	8006bfe <_PrintInt+0x102>
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d114      	bne.n	8006bfe <_PrintInt+0x102>
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d111      	bne.n	8006bfe <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00e      	beq.n	8006bfe <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006be0:	e006      	b.n	8006bf0 <_PrintInt+0xf4>
        FieldWidth--;
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	3b01      	subs	r3, #1
 8006be6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006be8:	2130      	movs	r1, #48	@ 0x30
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f7ff fe74 	bl	80068d8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <_PrintInt+0x102>
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d3f1      	bcc.n	8006be2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006bfe:	68b9      	ldr	r1, [r7, #8]
 8006c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c02:	9301      	str	r3, [sp, #4]
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f7ff fedf 	bl	80069d0 <_PrintUnsigned>
}
 8006c12:	bf00      	nop
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b098      	sub	sp, #96	@ 0x60
 8006c20:	af02      	add	r7, sp, #8
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c28:	f3ef 8311 	mrs	r3, BASEPRI
 8006c2c:	f04f 0120 	mov.w	r1, #32
 8006c30:	f381 8811 	msr	BASEPRI, r1
 8006c34:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c36:	48b7      	ldr	r0, [pc, #732]	@ (8006f14 <_VPrintTarget+0x2f8>)
 8006c38:	f7ff fc75 	bl	8006526 <_PreparePacket>
 8006c3c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006c3e:	4bb5      	ldr	r3, [pc, #724]	@ (8006f14 <_VPrintTarget+0x2f8>)
 8006c40:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8006c42:	2300      	movs	r3, #0
 8006c44:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c48:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006c62:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 8183 	beq.w	8006f72 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006c6c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c70:	2b25      	cmp	r3, #37	@ 0x25
 8006c72:	f040 8170 	bne.w	8006f56 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006c76:	2300      	movs	r3, #0
 8006c78:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8006c86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c8a:	3b23      	subs	r3, #35	@ 0x23
 8006c8c:	2b0d      	cmp	r3, #13
 8006c8e:	d83f      	bhi.n	8006d10 <_VPrintTarget+0xf4>
 8006c90:	a201      	add	r2, pc, #4	@ (adr r2, 8006c98 <_VPrintTarget+0x7c>)
 8006c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c96:	bf00      	nop
 8006c98:	08006d01 	.word	0x08006d01
 8006c9c:	08006d11 	.word	0x08006d11
 8006ca0:	08006d11 	.word	0x08006d11
 8006ca4:	08006d11 	.word	0x08006d11
 8006ca8:	08006d11 	.word	0x08006d11
 8006cac:	08006d11 	.word	0x08006d11
 8006cb0:	08006d11 	.word	0x08006d11
 8006cb4:	08006d11 	.word	0x08006d11
 8006cb8:	08006cf1 	.word	0x08006cf1
 8006cbc:	08006d11 	.word	0x08006d11
 8006cc0:	08006cd1 	.word	0x08006cd1
 8006cc4:	08006d11 	.word	0x08006d11
 8006cc8:	08006d11 	.word	0x08006d11
 8006ccc:	08006ce1 	.word	0x08006ce1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006cd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cd2:	f043 0301 	orr.w	r3, r3, #1
 8006cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	60fb      	str	r3, [r7, #12]
 8006cde:	e01a      	b.n	8006d16 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006ce0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ce2:	f043 0302 	orr.w	r3, r3, #2
 8006ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	3301      	adds	r3, #1
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	e012      	b.n	8006d16 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006cf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cf2:	f043 0304 	orr.w	r3, r3, #4
 8006cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	e00a      	b.n	8006d16 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006d00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d02:	f043 0308 	orr.w	r3, r3, #8
 8006d06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	e002      	b.n	8006d16 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006d10:	2300      	movs	r3, #0
 8006d12:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d14:	bf00      	nop
        }
      } while (v);
 8006d16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1b0      	bne.n	8006c7e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006d28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d2c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006d2e:	d912      	bls.n	8006d56 <_VPrintTarget+0x13a>
 8006d30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d34:	2b39      	cmp	r3, #57	@ 0x39
 8006d36:	d80e      	bhi.n	8006d56 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006d3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d40:	4613      	mov	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d4e:	4413      	add	r3, r2
 8006d50:	3b30      	subs	r3, #48	@ 0x30
 8006d52:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006d54:	e7e4      	b.n	8006d20 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006d56:	2300      	movs	r3, #0
 8006d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8006d62:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d66:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d68:	d11d      	bne.n	8006da6 <_VPrintTarget+0x18a>
        sFormat++;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006d78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d7c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006d7e:	d912      	bls.n	8006da6 <_VPrintTarget+0x18a>
 8006d80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d84:	2b39      	cmp	r3, #57	@ 0x39
 8006d86:	d80e      	bhi.n	8006da6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006d8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	461a      	mov	r2, r3
 8006d9a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d9e:	4413      	add	r3, r2
 8006da0:	3b30      	subs	r3, #48	@ 0x30
 8006da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8006da4:	e7e4      	b.n	8006d70 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006dae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006db2:	2b6c      	cmp	r3, #108	@ 0x6c
 8006db4:	d003      	beq.n	8006dbe <_VPrintTarget+0x1a2>
 8006db6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006dba:	2b68      	cmp	r3, #104	@ 0x68
 8006dbc:	d107      	bne.n	8006dce <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006dcc:	e7ef      	b.n	8006dae <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006dce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006dd2:	2b25      	cmp	r3, #37	@ 0x25
 8006dd4:	f000 80b3 	beq.w	8006f3e <_VPrintTarget+0x322>
 8006dd8:	2b25      	cmp	r3, #37	@ 0x25
 8006dda:	f2c0 80b7 	blt.w	8006f4c <_VPrintTarget+0x330>
 8006dde:	2b78      	cmp	r3, #120	@ 0x78
 8006de0:	f300 80b4 	bgt.w	8006f4c <_VPrintTarget+0x330>
 8006de4:	2b58      	cmp	r3, #88	@ 0x58
 8006de6:	f2c0 80b1 	blt.w	8006f4c <_VPrintTarget+0x330>
 8006dea:	3b58      	subs	r3, #88	@ 0x58
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	f200 80ad 	bhi.w	8006f4c <_VPrintTarget+0x330>
 8006df2:	a201      	add	r2, pc, #4	@ (adr r2, 8006df8 <_VPrintTarget+0x1dc>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006eef 	.word	0x08006eef
 8006dfc:	08006f4d 	.word	0x08006f4d
 8006e00:	08006f4d 	.word	0x08006f4d
 8006e04:	08006f4d 	.word	0x08006f4d
 8006e08:	08006f4d 	.word	0x08006f4d
 8006e0c:	08006f4d 	.word	0x08006f4d
 8006e10:	08006f4d 	.word	0x08006f4d
 8006e14:	08006f4d 	.word	0x08006f4d
 8006e18:	08006f4d 	.word	0x08006f4d
 8006e1c:	08006f4d 	.word	0x08006f4d
 8006e20:	08006f4d 	.word	0x08006f4d
 8006e24:	08006e7d 	.word	0x08006e7d
 8006e28:	08006ea3 	.word	0x08006ea3
 8006e2c:	08006f4d 	.word	0x08006f4d
 8006e30:	08006f4d 	.word	0x08006f4d
 8006e34:	08006f4d 	.word	0x08006f4d
 8006e38:	08006f4d 	.word	0x08006f4d
 8006e3c:	08006f4d 	.word	0x08006f4d
 8006e40:	08006f4d 	.word	0x08006f4d
 8006e44:	08006f4d 	.word	0x08006f4d
 8006e48:	08006f4d 	.word	0x08006f4d
 8006e4c:	08006f4d 	.word	0x08006f4d
 8006e50:	08006f4d 	.word	0x08006f4d
 8006e54:	08006f4d 	.word	0x08006f4d
 8006e58:	08006f19 	.word	0x08006f19
 8006e5c:	08006f4d 	.word	0x08006f4d
 8006e60:	08006f4d 	.word	0x08006f4d
 8006e64:	08006f4d 	.word	0x08006f4d
 8006e68:	08006f4d 	.word	0x08006f4d
 8006e6c:	08006ec9 	.word	0x08006ec9
 8006e70:	08006f4d 	.word	0x08006f4d
 8006e74:	08006f4d 	.word	0x08006f4d
 8006e78:	08006eef 	.word	0x08006eef
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	1d19      	adds	r1, r3, #4
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	6011      	str	r1, [r2, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8006e90:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8006e94:	f107 0314 	add.w	r3, r7, #20
 8006e98:	4611      	mov	r1, r2
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff fd1c 	bl	80068d8 <_StoreChar>
        break;
 8006ea0:	e055      	b.n	8006f4e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	1d19      	adds	r1, r3, #4
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	6011      	str	r1, [r2, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006eb0:	f107 0014 	add.w	r0, r7, #20
 8006eb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eb6:	9301      	str	r3, [sp, #4]
 8006eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ebe:	220a      	movs	r2, #10
 8006ec0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ec2:	f7ff fe1b 	bl	8006afc <_PrintInt>
        break;
 8006ec6:	e042      	b.n	8006f4e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	1d19      	adds	r1, r3, #4
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6011      	str	r1, [r2, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006ed6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ed8:	f107 0014 	add.w	r0, r7, #20
 8006edc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ede:	9301      	str	r3, [sp, #4]
 8006ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ee6:	220a      	movs	r2, #10
 8006ee8:	f7ff fd72 	bl	80069d0 <_PrintUnsigned>
        break;
 8006eec:	e02f      	b.n	8006f4e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	1d19      	adds	r1, r3, #4
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6011      	str	r1, [r2, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006efc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006efe:	f107 0014 	add.w	r0, r7, #20
 8006f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f04:	9301      	str	r3, [sp, #4]
 8006f06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f0c:	2210      	movs	r2, #16
 8006f0e:	f7ff fd5f 	bl	80069d0 <_PrintUnsigned>
        break;
 8006f12:	e01c      	b.n	8006f4e <_VPrintTarget+0x332>
 8006f14:	2001456c 	.word	0x2001456c
      case 'p':
        v = va_arg(*pParamList, int);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	1d19      	adds	r1, r3, #4
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	6011      	str	r1, [r2, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006f26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f28:	f107 0014 	add.w	r0, r7, #20
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	2308      	movs	r3, #8
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	2308      	movs	r3, #8
 8006f36:	2210      	movs	r2, #16
 8006f38:	f7ff fd4a 	bl	80069d0 <_PrintUnsigned>
        break;
 8006f3c:	e007      	b.n	8006f4e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006f3e:	f107 0314 	add.w	r3, r7, #20
 8006f42:	2125      	movs	r1, #37	@ 0x25
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7ff fcc7 	bl	80068d8 <_StoreChar>
        break;
 8006f4a:	e000      	b.n	8006f4e <_VPrintTarget+0x332>
      default:
        break;
 8006f4c:	bf00      	nop
      }
      sFormat++;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	3301      	adds	r3, #1
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	e007      	b.n	8006f66 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006f56:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006f5a:	f107 0314 	add.w	r3, r7, #20
 8006f5e:	4611      	mov	r1, r2
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7ff fcb9 	bl	80068d8 <_StoreChar>
    }
  } while (*sFormat);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f47f ae72 	bne.w	8006c54 <_VPrintTarget+0x38>
 8006f70:	e000      	b.n	8006f74 <_VPrintTarget+0x358>
      break;
 8006f72:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d041      	beq.n	8006ffe <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f8a:	e00b      	b.n	8006fa4 <_VPrintTarget+0x388>
 8006f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f92:	1c59      	adds	r1, r3, #1
 8006f94:	6439      	str	r1, [r7, #64]	@ 0x40
 8006f96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa0:	09db      	lsrs	r3, r3, #7
 8006fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fa8:	d8f0      	bhi.n	8006f8c <_VPrintTarget+0x370>
 8006faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	643a      	str	r2, [r7, #64]	@ 0x40
 8006fb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006fb2:	b2d2      	uxtb	r2, r2
 8006fb4:	701a      	strb	r2, [r3, #0]
 8006fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fb8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fc2:	e00b      	b.n	8006fdc <_VPrintTarget+0x3c0>
 8006fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fca:	1c59      	adds	r1, r3, #1
 8006fcc:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006fce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fd2:	b2d2      	uxtb	r2, r2
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd8:	09db      	lsrs	r3, r3, #7
 8006fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fde:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fe0:	d8f0      	bhi.n	8006fc4 <_VPrintTarget+0x3a8>
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006fe8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	69b9      	ldr	r1, [r7, #24]
 8006ff6:	221a      	movs	r2, #26
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7ff fb85 	bl	8006708 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007000:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8007004:	bf00      	nop
 8007006:	3758      	adds	r7, #88	@ 0x58
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af02      	add	r7, sp, #8
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800701a:	2300      	movs	r3, #0
 800701c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007020:	4917      	ldr	r1, [pc, #92]	@ (8007080 <SEGGER_SYSVIEW_Init+0x74>)
 8007022:	4818      	ldr	r0, [pc, #96]	@ (8007084 <SEGGER_SYSVIEW_Init+0x78>)
 8007024:	f7ff f93e 	bl	80062a4 <SEGGER_RTT_AllocUpBuffer>
 8007028:	4603      	mov	r3, r0
 800702a:	b2da      	uxtb	r2, r3
 800702c:	4b16      	ldr	r3, [pc, #88]	@ (8007088 <SEGGER_SYSVIEW_Init+0x7c>)
 800702e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007030:	4b15      	ldr	r3, [pc, #84]	@ (8007088 <SEGGER_SYSVIEW_Init+0x7c>)
 8007032:	785a      	ldrb	r2, [r3, #1]
 8007034:	4b14      	ldr	r3, [pc, #80]	@ (8007088 <SEGGER_SYSVIEW_Init+0x7c>)
 8007036:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007038:	4b13      	ldr	r3, [pc, #76]	@ (8007088 <SEGGER_SYSVIEW_Init+0x7c>)
 800703a:	7e1b      	ldrb	r3, [r3, #24]
 800703c:	4618      	mov	r0, r3
 800703e:	2300      	movs	r3, #0
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	2308      	movs	r3, #8
 8007044:	4a11      	ldr	r2, [pc, #68]	@ (800708c <SEGGER_SYSVIEW_Init+0x80>)
 8007046:	490f      	ldr	r1, [pc, #60]	@ (8007084 <SEGGER_SYSVIEW_Init+0x78>)
 8007048:	f7ff f9b0 	bl	80063ac <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800704c:	4b0e      	ldr	r3, [pc, #56]	@ (8007088 <SEGGER_SYSVIEW_Init+0x7c>)
 800704e:	2200      	movs	r2, #0
 8007050:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007052:	4b0f      	ldr	r3, [pc, #60]	@ (8007090 <SEGGER_SYSVIEW_Init+0x84>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a0c      	ldr	r2, [pc, #48]	@ (8007088 <SEGGER_SYSVIEW_Init+0x7c>)
 8007058:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800705a:	4a0b      	ldr	r2, [pc, #44]	@ (8007088 <SEGGER_SYSVIEW_Init+0x7c>)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007060:	4a09      	ldr	r2, [pc, #36]	@ (8007088 <SEGGER_SYSVIEW_Init+0x7c>)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8007066:	4a08      	ldr	r2, [pc, #32]	@ (8007088 <SEGGER_SYSVIEW_Init+0x7c>)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800706c:	4a06      	ldr	r2, [pc, #24]	@ (8007088 <SEGGER_SYSVIEW_Init+0x7c>)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007072:	4b05      	ldr	r3, [pc, #20]	@ (8007088 <SEGGER_SYSVIEW_Init+0x7c>)
 8007074:	2200      	movs	r2, #0
 8007076:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8007078:	bf00      	nop
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20013534 	.word	0x20013534
 8007084:	08009550 	.word	0x08009550
 8007088:	2001453c 	.word	0x2001453c
 800708c:	20014534 	.word	0x20014534
 8007090:	e0001004 	.word	0xe0001004

08007094 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800709c:	4a04      	ldr	r2, [pc, #16]	@ (80070b0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6113      	str	r3, [r2, #16]
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	2001453c 	.word	0x2001453c

080070b4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80070bc:	f3ef 8311 	mrs	r3, BASEPRI
 80070c0:	f04f 0120 	mov.w	r1, #32
 80070c4:	f381 8811 	msr	BASEPRI, r1
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	4808      	ldr	r0, [pc, #32]	@ (80070ec <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80070cc:	f7ff fa2b 	bl	8006526 <_PreparePacket>
 80070d0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	68b9      	ldr	r1, [r7, #8]
 80070d6:	68b8      	ldr	r0, [r7, #8]
 80070d8:	f7ff fb16 	bl	8006708 <_SendPacket>
  RECORD_END();
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f383 8811 	msr	BASEPRI, r3
}
 80070e2:	bf00      	nop
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	2001456c 	.word	0x2001456c

080070f0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80070fa:	f3ef 8311 	mrs	r3, BASEPRI
 80070fe:	f04f 0120 	mov.w	r1, #32
 8007102:	f381 8811 	msr	BASEPRI, r1
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	4816      	ldr	r0, [pc, #88]	@ (8007164 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800710a:	f7ff fa0c 	bl	8006526 <_PreparePacket>
 800710e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	61fb      	str	r3, [r7, #28]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	61bb      	str	r3, [r7, #24]
 800711c:	e00b      	b.n	8007136 <SEGGER_SYSVIEW_RecordU32+0x46>
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	b2da      	uxtb	r2, r3
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	1c59      	adds	r1, r3, #1
 8007126:	61f9      	str	r1, [r7, #28]
 8007128:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800712c:	b2d2      	uxtb	r2, r2
 800712e:	701a      	strb	r2, [r3, #0]
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	09db      	lsrs	r3, r3, #7
 8007134:	61bb      	str	r3, [r7, #24]
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2b7f      	cmp	r3, #127	@ 0x7f
 800713a:	d8f0      	bhi.n	800711e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	61fa      	str	r2, [r7, #28]
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	b2d2      	uxtb	r2, r2
 8007146:	701a      	strb	r2, [r3, #0]
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	68f9      	ldr	r1, [r7, #12]
 8007150:	6938      	ldr	r0, [r7, #16]
 8007152:	f7ff fad9 	bl	8006708 <_SendPacket>
  RECORD_END();
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f383 8811 	msr	BASEPRI, r3
}
 800715c:	bf00      	nop
 800715e:	3720      	adds	r7, #32
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	2001456c 	.word	0x2001456c

08007168 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007168:	b580      	push	{r7, lr}
 800716a:	b08c      	sub	sp, #48	@ 0x30
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007174:	f3ef 8311 	mrs	r3, BASEPRI
 8007178:	f04f 0120 	mov.w	r1, #32
 800717c:	f381 8811 	msr	BASEPRI, r1
 8007180:	61fb      	str	r3, [r7, #28]
 8007182:	4825      	ldr	r0, [pc, #148]	@ (8007218 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007184:	f7ff f9cf 	bl	8006526 <_PreparePacket>
 8007188:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007196:	e00b      	b.n	80071b0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719a:	b2da      	uxtb	r2, r3
 800719c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719e:	1c59      	adds	r1, r3, #1
 80071a0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80071a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ac:	09db      	lsrs	r3, r3, #7
 80071ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80071b4:	d8f0      	bhi.n	8007198 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80071b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071be:	b2d2      	uxtb	r2, r2
 80071c0:	701a      	strb	r2, [r3, #0]
 80071c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	623b      	str	r3, [r7, #32]
 80071ce:	e00b      	b.n	80071e8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	1c59      	adds	r1, r3, #1
 80071d8:	6279      	str	r1, [r7, #36]	@ 0x24
 80071da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	701a      	strb	r2, [r3, #0]
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	09db      	lsrs	r3, r3, #7
 80071e6:	623b      	str	r3, [r7, #32]
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80071ec:	d8f0      	bhi.n	80071d0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80071f4:	6a3a      	ldr	r2, [r7, #32]
 80071f6:	b2d2      	uxtb	r2, r2
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	6979      	ldr	r1, [r7, #20]
 8007202:	69b8      	ldr	r0, [r7, #24]
 8007204:	f7ff fa80 	bl	8006708 <_SendPacket>
  RECORD_END();
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	f383 8811 	msr	BASEPRI, r3
}
 800720e:	bf00      	nop
 8007210:	3730      	adds	r7, #48	@ 0x30
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	2001456c 	.word	0x2001456c

0800721c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800721c:	b580      	push	{r7, lr}
 800721e:	b08e      	sub	sp, #56	@ 0x38
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800722a:	f3ef 8311 	mrs	r3, BASEPRI
 800722e:	f04f 0120 	mov.w	r1, #32
 8007232:	f381 8811 	msr	BASEPRI, r1
 8007236:	61fb      	str	r3, [r7, #28]
 8007238:	4832      	ldr	r0, [pc, #200]	@ (8007304 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800723a:	f7ff f974 	bl	8006526 <_PreparePacket>
 800723e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	637b      	str	r3, [r7, #52]	@ 0x34
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	633b      	str	r3, [r7, #48]	@ 0x30
 800724c:	e00b      	b.n	8007266 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007250:	b2da      	uxtb	r2, r3
 8007252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007254:	1c59      	adds	r1, r3, #1
 8007256:	6379      	str	r1, [r7, #52]	@ 0x34
 8007258:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800725c:	b2d2      	uxtb	r2, r2
 800725e:	701a      	strb	r2, [r3, #0]
 8007260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007262:	09db      	lsrs	r3, r3, #7
 8007264:	633b      	str	r3, [r7, #48]	@ 0x30
 8007266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007268:	2b7f      	cmp	r3, #127	@ 0x7f
 800726a:	d8f0      	bhi.n	800724e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800726c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800726e:	1c5a      	adds	r2, r3, #1
 8007270:	637a      	str	r2, [r7, #52]	@ 0x34
 8007272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007274:	b2d2      	uxtb	r2, r2
 8007276:	701a      	strb	r2, [r3, #0]
 8007278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800727a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007284:	e00b      	b.n	800729e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8007286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007288:	b2da      	uxtb	r2, r3
 800728a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728c:	1c59      	adds	r1, r3, #1
 800728e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007290:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007294:	b2d2      	uxtb	r2, r2
 8007296:	701a      	strb	r2, [r3, #0]
 8007298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729a:	09db      	lsrs	r3, r3, #7
 800729c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800729e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80072a2:	d8f0      	bhi.n	8007286 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80072a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072ac:	b2d2      	uxtb	r2, r2
 80072ae:	701a      	strb	r2, [r3, #0]
 80072b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	623b      	str	r3, [r7, #32]
 80072bc:	e00b      	b.n	80072d6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c4:	1c59      	adds	r1, r3, #1
 80072c6:	6279      	str	r1, [r7, #36]	@ 0x24
 80072c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072cc:	b2d2      	uxtb	r2, r2
 80072ce:	701a      	strb	r2, [r3, #0]
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	09db      	lsrs	r3, r3, #7
 80072d4:	623b      	str	r3, [r7, #32]
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80072da:	d8f0      	bhi.n	80072be <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80072dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80072e2:	6a3a      	ldr	r2, [r7, #32]
 80072e4:	b2d2      	uxtb	r2, r2
 80072e6:	701a      	strb	r2, [r3, #0]
 80072e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	6979      	ldr	r1, [r7, #20]
 80072f0:	69b8      	ldr	r0, [r7, #24]
 80072f2:	f7ff fa09 	bl	8006708 <_SendPacket>
  RECORD_END();
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	f383 8811 	msr	BASEPRI, r3
}
 80072fc:	bf00      	nop
 80072fe:	3738      	adds	r7, #56	@ 0x38
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	2001456c 	.word	0x2001456c

08007308 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007308:	b580      	push	{r7, lr}
 800730a:	b090      	sub	sp, #64	@ 0x40
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
 8007314:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007316:	f3ef 8311 	mrs	r3, BASEPRI
 800731a:	f04f 0120 	mov.w	r1, #32
 800731e:	f381 8811 	msr	BASEPRI, r1
 8007322:	61fb      	str	r3, [r7, #28]
 8007324:	4840      	ldr	r0, [pc, #256]	@ (8007428 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007326:	f7ff f8fe 	bl	8006526 <_PreparePacket>
 800732a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007338:	e00b      	b.n	8007352 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800733a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733c:	b2da      	uxtb	r2, r3
 800733e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007340:	1c59      	adds	r1, r3, #1
 8007342:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8007344:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007348:	b2d2      	uxtb	r2, r2
 800734a:	701a      	strb	r2, [r3, #0]
 800734c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734e:	09db      	lsrs	r3, r3, #7
 8007350:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007354:	2b7f      	cmp	r3, #127	@ 0x7f
 8007356:	d8f0      	bhi.n	800733a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800735e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007360:	b2d2      	uxtb	r2, r2
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007366:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	637b      	str	r3, [r7, #52]	@ 0x34
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007370:	e00b      	b.n	800738a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007374:	b2da      	uxtb	r2, r3
 8007376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007378:	1c59      	adds	r1, r3, #1
 800737a:	6379      	str	r1, [r7, #52]	@ 0x34
 800737c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007380:	b2d2      	uxtb	r2, r2
 8007382:	701a      	strb	r2, [r3, #0]
 8007384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007386:	09db      	lsrs	r3, r3, #7
 8007388:	633b      	str	r3, [r7, #48]	@ 0x30
 800738a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738c:	2b7f      	cmp	r3, #127	@ 0x7f
 800738e:	d8f0      	bhi.n	8007372 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	637a      	str	r2, [r7, #52]	@ 0x34
 8007396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007398:	b2d2      	uxtb	r2, r2
 800739a:	701a      	strb	r2, [r3, #0]
 800739c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800739e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073a8:	e00b      	b.n	80073c2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80073aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b0:	1c59      	adds	r1, r3, #1
 80073b2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80073b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073b8:	b2d2      	uxtb	r2, r2
 80073ba:	701a      	strb	r2, [r3, #0]
 80073bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073be:	09db      	lsrs	r3, r3, #7
 80073c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80073c6:	d8f0      	bhi.n	80073aa <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80073c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	701a      	strb	r2, [r3, #0]
 80073d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	627b      	str	r3, [r7, #36]	@ 0x24
 80073dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073de:	623b      	str	r3, [r7, #32]
 80073e0:	e00b      	b.n	80073fa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	1c59      	adds	r1, r3, #1
 80073ea:	6279      	str	r1, [r7, #36]	@ 0x24
 80073ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073f0:	b2d2      	uxtb	r2, r2
 80073f2:	701a      	strb	r2, [r3, #0]
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	09db      	lsrs	r3, r3, #7
 80073f8:	623b      	str	r3, [r7, #32]
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80073fe:	d8f0      	bhi.n	80073e2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	627a      	str	r2, [r7, #36]	@ 0x24
 8007406:	6a3a      	ldr	r2, [r7, #32]
 8007408:	b2d2      	uxtb	r2, r2
 800740a:	701a      	strb	r2, [r3, #0]
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	6979      	ldr	r1, [r7, #20]
 8007414:	69b8      	ldr	r0, [r7, #24]
 8007416:	f7ff f977 	bl	8006708 <_SendPacket>
  RECORD_END();
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	f383 8811 	msr	BASEPRI, r3
}
 8007420:	bf00      	nop
 8007422:	3740      	adds	r7, #64	@ 0x40
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	2001456c 	.word	0x2001456c

0800742c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800742c:	b580      	push	{r7, lr}
 800742e:	b08c      	sub	sp, #48	@ 0x30
 8007430:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007432:	4b59      	ldr	r3, [pc, #356]	@ (8007598 <SEGGER_SYSVIEW_Start+0x16c>)
 8007434:	2201      	movs	r2, #1
 8007436:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007438:	f3ef 8311 	mrs	r3, BASEPRI
 800743c:	f04f 0120 	mov.w	r1, #32
 8007440:	f381 8811 	msr	BASEPRI, r1
 8007444:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007446:	4b54      	ldr	r3, [pc, #336]	@ (8007598 <SEGGER_SYSVIEW_Start+0x16c>)
 8007448:	785b      	ldrb	r3, [r3, #1]
 800744a:	220a      	movs	r2, #10
 800744c:	4953      	ldr	r1, [pc, #332]	@ (800759c <SEGGER_SYSVIEW_Start+0x170>)
 800744e:	4618      	mov	r0, r3
 8007450:	f7f8 febe 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800745a:	f7fe fcf7 	bl	8005e4c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800745e:	200a      	movs	r0, #10
 8007460:	f7ff fe28 	bl	80070b4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007464:	f3ef 8311 	mrs	r3, BASEPRI
 8007468:	f04f 0120 	mov.w	r1, #32
 800746c:	f381 8811 	msr	BASEPRI, r1
 8007470:	60bb      	str	r3, [r7, #8]
 8007472:	484b      	ldr	r0, [pc, #300]	@ (80075a0 <SEGGER_SYSVIEW_Start+0x174>)
 8007474:	f7ff f857 	bl	8006526 <_PreparePacket>
 8007478:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007482:	4b45      	ldr	r3, [pc, #276]	@ (8007598 <SEGGER_SYSVIEW_Start+0x16c>)
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007488:	e00b      	b.n	80074a2 <SEGGER_SYSVIEW_Start+0x76>
 800748a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748c:	b2da      	uxtb	r2, r3
 800748e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007490:	1c59      	adds	r1, r3, #1
 8007492:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007494:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007498:	b2d2      	uxtb	r2, r2
 800749a:	701a      	strb	r2, [r3, #0]
 800749c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749e:	09db      	lsrs	r3, r3, #7
 80074a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80074a6:	d8f0      	bhi.n	800748a <SEGGER_SYSVIEW_Start+0x5e>
 80074a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074b0:	b2d2      	uxtb	r2, r2
 80074b2:	701a      	strb	r2, [r3, #0]
 80074b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80074bc:	4b36      	ldr	r3, [pc, #216]	@ (8007598 <SEGGER_SYSVIEW_Start+0x16c>)
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	623b      	str	r3, [r7, #32]
 80074c2:	e00b      	b.n	80074dc <SEGGER_SYSVIEW_Start+0xb0>
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ca:	1c59      	adds	r1, r3, #1
 80074cc:	6279      	str	r1, [r7, #36]	@ 0x24
 80074ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074d2:	b2d2      	uxtb	r2, r2
 80074d4:	701a      	strb	r2, [r3, #0]
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	09db      	lsrs	r3, r3, #7
 80074da:	623b      	str	r3, [r7, #32]
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	2b7f      	cmp	r3, #127	@ 0x7f
 80074e0:	d8f0      	bhi.n	80074c4 <SEGGER_SYSVIEW_Start+0x98>
 80074e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e4:	1c5a      	adds	r2, r3, #1
 80074e6:	627a      	str	r2, [r7, #36]	@ 0x24
 80074e8:	6a3a      	ldr	r2, [r7, #32]
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	701a      	strb	r2, [r3, #0]
 80074ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	61fb      	str	r3, [r7, #28]
 80074f6:	4b28      	ldr	r3, [pc, #160]	@ (8007598 <SEGGER_SYSVIEW_Start+0x16c>)
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	61bb      	str	r3, [r7, #24]
 80074fc:	e00b      	b.n	8007516 <SEGGER_SYSVIEW_Start+0xea>
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	b2da      	uxtb	r2, r3
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	1c59      	adds	r1, r3, #1
 8007506:	61f9      	str	r1, [r7, #28]
 8007508:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800750c:	b2d2      	uxtb	r2, r2
 800750e:	701a      	strb	r2, [r3, #0]
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	09db      	lsrs	r3, r3, #7
 8007514:	61bb      	str	r3, [r7, #24]
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	2b7f      	cmp	r3, #127	@ 0x7f
 800751a:	d8f0      	bhi.n	80074fe <SEGGER_SYSVIEW_Start+0xd2>
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	61fa      	str	r2, [r7, #28]
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	b2d2      	uxtb	r2, r2
 8007526:	701a      	strb	r2, [r3, #0]
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	2300      	movs	r3, #0
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	e00b      	b.n	800754e <SEGGER_SYSVIEW_Start+0x122>
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	b2da      	uxtb	r2, r3
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	1c59      	adds	r1, r3, #1
 800753e:	6179      	str	r1, [r7, #20]
 8007540:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007544:	b2d2      	uxtb	r2, r2
 8007546:	701a      	strb	r2, [r3, #0]
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	09db      	lsrs	r3, r3, #7
 800754c:	613b      	str	r3, [r7, #16]
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	2b7f      	cmp	r3, #127	@ 0x7f
 8007552:	d8f0      	bhi.n	8007536 <SEGGER_SYSVIEW_Start+0x10a>
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	617a      	str	r2, [r7, #20]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	701a      	strb	r2, [r3, #0]
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007564:	2218      	movs	r2, #24
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff f8cd 	bl	8006708 <_SendPacket>
      RECORD_END();
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007574:	4b08      	ldr	r3, [pc, #32]	@ (8007598 <SEGGER_SYSVIEW_Start+0x16c>)
 8007576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800757c:	4b06      	ldr	r3, [pc, #24]	@ (8007598 <SEGGER_SYSVIEW_Start+0x16c>)
 800757e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007580:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007582:	f000 f9eb 	bl	800795c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007586:	f000 f9b1 	bl	80078ec <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800758a:	f000 fc83 	bl	8007e94 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800758e:	bf00      	nop
 8007590:	3730      	adds	r7, #48	@ 0x30
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	2001453c 	.word	0x2001453c
 800759c:	08009578 	.word	0x08009578
 80075a0:	2001456c 	.word	0x2001456c

080075a4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80075aa:	f3ef 8311 	mrs	r3, BASEPRI
 80075ae:	f04f 0120 	mov.w	r1, #32
 80075b2:	f381 8811 	msr	BASEPRI, r1
 80075b6:	607b      	str	r3, [r7, #4]
 80075b8:	480b      	ldr	r0, [pc, #44]	@ (80075e8 <SEGGER_SYSVIEW_Stop+0x44>)
 80075ba:	f7fe ffb4 	bl	8006526 <_PreparePacket>
 80075be:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80075c0:	4b0a      	ldr	r3, [pc, #40]	@ (80075ec <SEGGER_SYSVIEW_Stop+0x48>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d007      	beq.n	80075d8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80075c8:	220b      	movs	r2, #11
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6838      	ldr	r0, [r7, #0]
 80075ce:	f7ff f89b 	bl	8006708 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80075d2:	4b06      	ldr	r3, [pc, #24]	@ (80075ec <SEGGER_SYSVIEW_Stop+0x48>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f383 8811 	msr	BASEPRI, r3
}
 80075de:	bf00      	nop
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	2001456c 	.word	0x2001456c
 80075ec:	2001453c 	.word	0x2001453c

080075f0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08c      	sub	sp, #48	@ 0x30
 80075f4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80075f6:	f3ef 8311 	mrs	r3, BASEPRI
 80075fa:	f04f 0120 	mov.w	r1, #32
 80075fe:	f381 8811 	msr	BASEPRI, r1
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	4845      	ldr	r0, [pc, #276]	@ (800771c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007606:	f7fe ff8e 	bl	8006526 <_PreparePacket>
 800760a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007614:	4b42      	ldr	r3, [pc, #264]	@ (8007720 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	62bb      	str	r3, [r7, #40]	@ 0x28
 800761a:	e00b      	b.n	8007634 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800761c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761e:	b2da      	uxtb	r2, r3
 8007620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007622:	1c59      	adds	r1, r3, #1
 8007624:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007626:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800762a:	b2d2      	uxtb	r2, r2
 800762c:	701a      	strb	r2, [r3, #0]
 800762e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007630:	09db      	lsrs	r3, r3, #7
 8007632:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007636:	2b7f      	cmp	r3, #127	@ 0x7f
 8007638:	d8f0      	bhi.n	800761c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800763a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800763c:	1c5a      	adds	r2, r3, #1
 800763e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007640:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007642:	b2d2      	uxtb	r2, r2
 8007644:	701a      	strb	r2, [r3, #0]
 8007646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007648:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	627b      	str	r3, [r7, #36]	@ 0x24
 800764e:	4b34      	ldr	r3, [pc, #208]	@ (8007720 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	623b      	str	r3, [r7, #32]
 8007654:	e00b      	b.n	800766e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	b2da      	uxtb	r2, r3
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	1c59      	adds	r1, r3, #1
 800765e:	6279      	str	r1, [r7, #36]	@ 0x24
 8007660:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007664:	b2d2      	uxtb	r2, r2
 8007666:	701a      	strb	r2, [r3, #0]
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	09db      	lsrs	r3, r3, #7
 800766c:	623b      	str	r3, [r7, #32]
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	2b7f      	cmp	r3, #127	@ 0x7f
 8007672:	d8f0      	bhi.n	8007656 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	627a      	str	r2, [r7, #36]	@ 0x24
 800767a:	6a3a      	ldr	r2, [r7, #32]
 800767c:	b2d2      	uxtb	r2, r2
 800767e:	701a      	strb	r2, [r3, #0]
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007682:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	61fb      	str	r3, [r7, #28]
 8007688:	4b25      	ldr	r3, [pc, #148]	@ (8007720 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	61bb      	str	r3, [r7, #24]
 800768e:	e00b      	b.n	80076a8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	b2da      	uxtb	r2, r3
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	1c59      	adds	r1, r3, #1
 8007698:	61f9      	str	r1, [r7, #28]
 800769a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800769e:	b2d2      	uxtb	r2, r2
 80076a0:	701a      	strb	r2, [r3, #0]
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	09db      	lsrs	r3, r3, #7
 80076a6:	61bb      	str	r3, [r7, #24]
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80076ac:	d8f0      	bhi.n	8007690 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	61fa      	str	r2, [r7, #28]
 80076b4:	69ba      	ldr	r2, [r7, #24]
 80076b6:	b2d2      	uxtb	r2, r2
 80076b8:	701a      	strb	r2, [r3, #0]
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	617b      	str	r3, [r7, #20]
 80076c2:	2300      	movs	r3, #0
 80076c4:	613b      	str	r3, [r7, #16]
 80076c6:	e00b      	b.n	80076e0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	1c59      	adds	r1, r3, #1
 80076d0:	6179      	str	r1, [r7, #20]
 80076d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80076d6:	b2d2      	uxtb	r2, r2
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	09db      	lsrs	r3, r3, #7
 80076de:	613b      	str	r3, [r7, #16]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80076e4:	d8f0      	bhi.n	80076c8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	617a      	str	r2, [r7, #20]
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80076f6:	2218      	movs	r2, #24
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	68b8      	ldr	r0, [r7, #8]
 80076fc:	f7ff f804 	bl	8006708 <_SendPacket>
  RECORD_END();
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007706:	4b06      	ldr	r3, [pc, #24]	@ (8007720 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800770e:	4b04      	ldr	r3, [pc, #16]	@ (8007720 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007712:	4798      	blx	r3
  }
}
 8007714:	bf00      	nop
 8007716:	3730      	adds	r7, #48	@ 0x30
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	2001456c 	.word	0x2001456c
 8007720:	2001453c 	.word	0x2001453c

08007724 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007724:	b580      	push	{r7, lr}
 8007726:	b092      	sub	sp, #72	@ 0x48
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800772c:	f3ef 8311 	mrs	r3, BASEPRI
 8007730:	f04f 0120 	mov.w	r1, #32
 8007734:	f381 8811 	msr	BASEPRI, r1
 8007738:	617b      	str	r3, [r7, #20]
 800773a:	486a      	ldr	r0, [pc, #424]	@ (80078e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800773c:	f7fe fef3 	bl	8006526 <_PreparePacket>
 8007740:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	647b      	str	r3, [r7, #68]	@ 0x44
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	4b66      	ldr	r3, [pc, #408]	@ (80078e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	643b      	str	r3, [r7, #64]	@ 0x40
 8007756:	e00b      	b.n	8007770 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800775a:	b2da      	uxtb	r2, r3
 800775c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800775e:	1c59      	adds	r1, r3, #1
 8007760:	6479      	str	r1, [r7, #68]	@ 0x44
 8007762:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007766:	b2d2      	uxtb	r2, r2
 8007768:	701a      	strb	r2, [r3, #0]
 800776a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800776c:	09db      	lsrs	r3, r3, #7
 800776e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007770:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007772:	2b7f      	cmp	r3, #127	@ 0x7f
 8007774:	d8f0      	bhi.n	8007758 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007776:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	647a      	str	r2, [r7, #68]	@ 0x44
 800777c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]
 8007782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007784:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007790:	e00b      	b.n	80077aa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007794:	b2da      	uxtb	r2, r3
 8007796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007798:	1c59      	adds	r1, r3, #1
 800779a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800779c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80077a0:	b2d2      	uxtb	r2, r2
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a6:	09db      	lsrs	r3, r3, #7
 80077a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80077ae:	d8f0      	bhi.n	8007792 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80077b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077b2:	1c5a      	adds	r2, r3, #1
 80077b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80077b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077b8:	b2d2      	uxtb	r2, r2
 80077ba:	701a      	strb	r2, [r3, #0]
 80077bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077be:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	4619      	mov	r1, r3
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f7fe fe5f 	bl	800648c <_EncodeStr>
 80077ce:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80077d0:	2209      	movs	r2, #9
 80077d2:	68f9      	ldr	r1, [r7, #12]
 80077d4:	6938      	ldr	r0, [r7, #16]
 80077d6:	f7fe ff97 	bl	8006708 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	4b40      	ldr	r3, [pc, #256]	@ (80078e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80077ee:	e00b      	b.n	8007808 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80077f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f6:	1c59      	adds	r1, r3, #1
 80077f8:	6379      	str	r1, [r7, #52]	@ 0x34
 80077fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	701a      	strb	r2, [r3, #0]
 8007802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007804:	09db      	lsrs	r3, r3, #7
 8007806:	633b      	str	r3, [r7, #48]	@ 0x30
 8007808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780a:	2b7f      	cmp	r3, #127	@ 0x7f
 800780c:	d8f0      	bhi.n	80077f0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800780e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	637a      	str	r2, [r7, #52]	@ 0x34
 8007814:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007816:	b2d2      	uxtb	r2, r2
 8007818:	701a      	strb	r2, [r3, #0]
 800781a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800781c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007828:	e00b      	b.n	8007842 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800782a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782c:	b2da      	uxtb	r2, r3
 800782e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007830:	1c59      	adds	r1, r3, #1
 8007832:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007834:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007838:	b2d2      	uxtb	r2, r2
 800783a:	701a      	strb	r2, [r3, #0]
 800783c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783e:	09db      	lsrs	r3, r3, #7
 8007840:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007844:	2b7f      	cmp	r3, #127	@ 0x7f
 8007846:	d8f0      	bhi.n	800782a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800784e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007850:	b2d2      	uxtb	r2, r2
 8007852:	701a      	strb	r2, [r3, #0]
 8007854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007856:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	627b      	str	r3, [r7, #36]	@ 0x24
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	623b      	str	r3, [r7, #32]
 8007862:	e00b      	b.n	800787c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	b2da      	uxtb	r2, r3
 8007868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786a:	1c59      	adds	r1, r3, #1
 800786c:	6279      	str	r1, [r7, #36]	@ 0x24
 800786e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007872:	b2d2      	uxtb	r2, r2
 8007874:	701a      	strb	r2, [r3, #0]
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	09db      	lsrs	r3, r3, #7
 800787a:	623b      	str	r3, [r7, #32]
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007880:	d8f0      	bhi.n	8007864 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007884:	1c5a      	adds	r2, r3, #1
 8007886:	627a      	str	r2, [r7, #36]	@ 0x24
 8007888:	6a3a      	ldr	r2, [r7, #32]
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	701a      	strb	r2, [r3, #0]
 800788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007890:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	61fb      	str	r3, [r7, #28]
 8007896:	2300      	movs	r3, #0
 8007898:	61bb      	str	r3, [r7, #24]
 800789a:	e00b      	b.n	80078b4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	1c59      	adds	r1, r3, #1
 80078a4:	61f9      	str	r1, [r7, #28]
 80078a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80078aa:	b2d2      	uxtb	r2, r2
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	09db      	lsrs	r3, r3, #7
 80078b2:	61bb      	str	r3, [r7, #24]
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80078b8:	d8f0      	bhi.n	800789c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	1c5a      	adds	r2, r3, #1
 80078be:	61fa      	str	r2, [r7, #28]
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	b2d2      	uxtb	r2, r2
 80078c4:	701a      	strb	r2, [r3, #0]
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80078ca:	2215      	movs	r2, #21
 80078cc:	68f9      	ldr	r1, [r7, #12]
 80078ce:	6938      	ldr	r0, [r7, #16]
 80078d0:	f7fe ff1a 	bl	8006708 <_SendPacket>
  RECORD_END();
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f383 8811 	msr	BASEPRI, r3
}
 80078da:	bf00      	nop
 80078dc:	3748      	adds	r7, #72	@ 0x48
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	2001456c 	.word	0x2001456c
 80078e8:	2001453c 	.word	0x2001453c

080078ec <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80078ec:	b580      	push	{r7, lr}
 80078ee:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80078f0:	4b07      	ldr	r3, [pc, #28]	@ (8007910 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d008      	beq.n	800790a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80078f8:	4b05      	ldr	r3, [pc, #20]	@ (8007910 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007902:	4b03      	ldr	r3, [pc, #12]	@ (8007910 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	4798      	blx	r3
  }
}
 800790a:	bf00      	nop
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	2001453c 	.word	0x2001453c

08007914 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800791c:	f3ef 8311 	mrs	r3, BASEPRI
 8007920:	f04f 0120 	mov.w	r1, #32
 8007924:	f381 8811 	msr	BASEPRI, r1
 8007928:	617b      	str	r3, [r7, #20]
 800792a:	480b      	ldr	r0, [pc, #44]	@ (8007958 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800792c:	f7fe fdfb 	bl	8006526 <_PreparePacket>
 8007930:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007932:	2280      	movs	r2, #128	@ 0x80
 8007934:	6879      	ldr	r1, [r7, #4]
 8007936:	6938      	ldr	r0, [r7, #16]
 8007938:	f7fe fda8 	bl	800648c <_EncodeStr>
 800793c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800793e:	220e      	movs	r2, #14
 8007940:	68f9      	ldr	r1, [r7, #12]
 8007942:	6938      	ldr	r0, [r7, #16]
 8007944:	f7fe fee0 	bl	8006708 <_SendPacket>
  RECORD_END();
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f383 8811 	msr	BASEPRI, r3
}
 800794e:	bf00      	nop
 8007950:	3718      	adds	r7, #24
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	2001456c 	.word	0x2001456c

0800795c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800795c:	b590      	push	{r4, r7, lr}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007962:	4b15      	ldr	r3, [pc, #84]	@ (80079b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d01a      	beq.n	80079a0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800796a:	4b13      	ldr	r3, [pc, #76]	@ (80079b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d015      	beq.n	80079a0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007974:	4b10      	ldr	r3, [pc, #64]	@ (80079b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4798      	blx	r3
 800797c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007980:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007982:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007986:	f04f 0200 	mov.w	r2, #0
 800798a:	f04f 0300 	mov.w	r3, #0
 800798e:	000a      	movs	r2, r1
 8007990:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007992:	4613      	mov	r3, r2
 8007994:	461a      	mov	r2, r3
 8007996:	4621      	mov	r1, r4
 8007998:	200d      	movs	r0, #13
 800799a:	f7ff fbe5 	bl	8007168 <SEGGER_SYSVIEW_RecordU32x2>
 800799e:	e006      	b.n	80079ae <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80079a0:	4b06      	ldr	r3, [pc, #24]	@ (80079bc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4619      	mov	r1, r3
 80079a6:	200c      	movs	r0, #12
 80079a8:	f7ff fba2 	bl	80070f0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd90      	pop	{r4, r7, pc}
 80079b6:	bf00      	nop
 80079b8:	2001453c 	.word	0x2001453c
 80079bc:	e0001004 	.word	0xe0001004

080079c0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80079c6:	f3ef 8311 	mrs	r3, BASEPRI
 80079ca:	f04f 0120 	mov.w	r1, #32
 80079ce:	f381 8811 	msr	BASEPRI, r1
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	4819      	ldr	r0, [pc, #100]	@ (8007a3c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80079d6:	f7fe fda6 	bl	8006526 <_PreparePacket>
 80079da:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80079e0:	4b17      	ldr	r3, [pc, #92]	@ (8007a40 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	617b      	str	r3, [r7, #20]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	613b      	str	r3, [r7, #16]
 80079f2:	e00b      	b.n	8007a0c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	1c59      	adds	r1, r3, #1
 80079fc:	6179      	str	r1, [r7, #20]
 80079fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007a02:	b2d2      	uxtb	r2, r2
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	09db      	lsrs	r3, r3, #7
 8007a0a:	613b      	str	r3, [r7, #16]
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a10:	d8f0      	bhi.n	80079f4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	617a      	str	r2, [r7, #20]
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	b2d2      	uxtb	r2, r2
 8007a1c:	701a      	strb	r2, [r3, #0]
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007a22:	2202      	movs	r2, #2
 8007a24:	6879      	ldr	r1, [r7, #4]
 8007a26:	68b8      	ldr	r0, [r7, #8]
 8007a28:	f7fe fe6e 	bl	8006708 <_SendPacket>
  RECORD_END();
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f383 8811 	msr	BASEPRI, r3
}
 8007a32:	bf00      	nop
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	2001456c 	.word	0x2001456c
 8007a40:	e000ed04 	.word	0xe000ed04

08007a44 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007a4a:	f3ef 8311 	mrs	r3, BASEPRI
 8007a4e:	f04f 0120 	mov.w	r1, #32
 8007a52:	f381 8811 	msr	BASEPRI, r1
 8007a56:	607b      	str	r3, [r7, #4]
 8007a58:	4807      	ldr	r0, [pc, #28]	@ (8007a78 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007a5a:	f7fe fd64 	bl	8006526 <_PreparePacket>
 8007a5e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007a60:	2203      	movs	r2, #3
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6838      	ldr	r0, [r7, #0]
 8007a66:	f7fe fe4f 	bl	8006708 <_SendPacket>
  RECORD_END();
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f383 8811 	msr	BASEPRI, r3
}
 8007a70:	bf00      	nop
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	2001456c 	.word	0x2001456c

08007a7c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007a82:	f3ef 8311 	mrs	r3, BASEPRI
 8007a86:	f04f 0120 	mov.w	r1, #32
 8007a8a:	f381 8811 	msr	BASEPRI, r1
 8007a8e:	607b      	str	r3, [r7, #4]
 8007a90:	4807      	ldr	r0, [pc, #28]	@ (8007ab0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007a92:	f7fe fd48 	bl	8006526 <_PreparePacket>
 8007a96:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007a98:	2212      	movs	r2, #18
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6838      	ldr	r0, [r7, #0]
 8007a9e:	f7fe fe33 	bl	8006708 <_SendPacket>
  RECORD_END();
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f383 8811 	msr	BASEPRI, r3
}
 8007aa8:	bf00      	nop
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	2001456c 	.word	0x2001456c

08007ab4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007aba:	f3ef 8311 	mrs	r3, BASEPRI
 8007abe:	f04f 0120 	mov.w	r1, #32
 8007ac2:	f381 8811 	msr	BASEPRI, r1
 8007ac6:	607b      	str	r3, [r7, #4]
 8007ac8:	4807      	ldr	r0, [pc, #28]	@ (8007ae8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007aca:	f7fe fd2c 	bl	8006526 <_PreparePacket>
 8007ace:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007ad0:	2211      	movs	r2, #17
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6838      	ldr	r0, [r7, #0]
 8007ad6:	f7fe fe17 	bl	8006708 <_SendPacket>
  RECORD_END();
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f383 8811 	msr	BASEPRI, r3
}
 8007ae0:	bf00      	nop
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	2001456c 	.word	0x2001456c

08007aec <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b088      	sub	sp, #32
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007af4:	f3ef 8311 	mrs	r3, BASEPRI
 8007af8:	f04f 0120 	mov.w	r1, #32
 8007afc:	f381 8811 	msr	BASEPRI, r1
 8007b00:	617b      	str	r3, [r7, #20]
 8007b02:	4819      	ldr	r0, [pc, #100]	@ (8007b68 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007b04:	f7fe fd0f 	bl	8006526 <_PreparePacket>
 8007b08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007b0e:	4b17      	ldr	r3, [pc, #92]	@ (8007b6c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	61fb      	str	r3, [r7, #28]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	61bb      	str	r3, [r7, #24]
 8007b20:	e00b      	b.n	8007b3a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	1c59      	adds	r1, r3, #1
 8007b2a:	61f9      	str	r1, [r7, #28]
 8007b2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007b30:	b2d2      	uxtb	r2, r2
 8007b32:	701a      	strb	r2, [r3, #0]
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	09db      	lsrs	r3, r3, #7
 8007b38:	61bb      	str	r3, [r7, #24]
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b3e:	d8f0      	bhi.n	8007b22 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	1c5a      	adds	r2, r3, #1
 8007b44:	61fa      	str	r2, [r7, #28]
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	b2d2      	uxtb	r2, r2
 8007b4a:	701a      	strb	r2, [r3, #0]
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007b50:	2208      	movs	r2, #8
 8007b52:	68f9      	ldr	r1, [r7, #12]
 8007b54:	6938      	ldr	r0, [r7, #16]
 8007b56:	f7fe fdd7 	bl	8006708 <_SendPacket>
  RECORD_END();
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f383 8811 	msr	BASEPRI, r3
}
 8007b60:	bf00      	nop
 8007b62:	3720      	adds	r7, #32
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	2001456c 	.word	0x2001456c
 8007b6c:	2001453c 	.word	0x2001453c

08007b70 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007b78:	f3ef 8311 	mrs	r3, BASEPRI
 8007b7c:	f04f 0120 	mov.w	r1, #32
 8007b80:	f381 8811 	msr	BASEPRI, r1
 8007b84:	617b      	str	r3, [r7, #20]
 8007b86:	4819      	ldr	r0, [pc, #100]	@ (8007bec <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007b88:	f7fe fccd 	bl	8006526 <_PreparePacket>
 8007b8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007b92:	4b17      	ldr	r3, [pc, #92]	@ (8007bf0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	61fb      	str	r3, [r7, #28]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	61bb      	str	r3, [r7, #24]
 8007ba4:	e00b      	b.n	8007bbe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	1c59      	adds	r1, r3, #1
 8007bae:	61f9      	str	r1, [r7, #28]
 8007bb0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007bb4:	b2d2      	uxtb	r2, r2
 8007bb6:	701a      	strb	r2, [r3, #0]
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	09db      	lsrs	r3, r3, #7
 8007bbc:	61bb      	str	r3, [r7, #24]
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8007bc2:	d8f0      	bhi.n	8007ba6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	1c5a      	adds	r2, r3, #1
 8007bc8:	61fa      	str	r2, [r7, #28]
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	b2d2      	uxtb	r2, r2
 8007bce:	701a      	strb	r2, [r3, #0]
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007bd4:	2204      	movs	r2, #4
 8007bd6:	68f9      	ldr	r1, [r7, #12]
 8007bd8:	6938      	ldr	r0, [r7, #16]
 8007bda:	f7fe fd95 	bl	8006708 <_SendPacket>
  RECORD_END();
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f383 8811 	msr	BASEPRI, r3
}
 8007be4:	bf00      	nop
 8007be6:	3720      	adds	r7, #32
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	2001456c 	.word	0x2001456c
 8007bf0:	2001453c 	.word	0x2001453c

08007bf4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b088      	sub	sp, #32
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007bfc:	f3ef 8311 	mrs	r3, BASEPRI
 8007c00:	f04f 0120 	mov.w	r1, #32
 8007c04:	f381 8811 	msr	BASEPRI, r1
 8007c08:	617b      	str	r3, [r7, #20]
 8007c0a:	4819      	ldr	r0, [pc, #100]	@ (8007c70 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007c0c:	f7fe fc8b 	bl	8006526 <_PreparePacket>
 8007c10:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007c16:	4b17      	ldr	r3, [pc, #92]	@ (8007c74 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	61fb      	str	r3, [r7, #28]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	61bb      	str	r3, [r7, #24]
 8007c28:	e00b      	b.n	8007c42 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	1c59      	adds	r1, r3, #1
 8007c32:	61f9      	str	r1, [r7, #28]
 8007c34:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007c38:	b2d2      	uxtb	r2, r2
 8007c3a:	701a      	strb	r2, [r3, #0]
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	09db      	lsrs	r3, r3, #7
 8007c40:	61bb      	str	r3, [r7, #24]
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c46:	d8f0      	bhi.n	8007c2a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	61fa      	str	r2, [r7, #28]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	b2d2      	uxtb	r2, r2
 8007c52:	701a      	strb	r2, [r3, #0]
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007c58:	2206      	movs	r2, #6
 8007c5a:	68f9      	ldr	r1, [r7, #12]
 8007c5c:	6938      	ldr	r0, [r7, #16]
 8007c5e:	f7fe fd53 	bl	8006708 <_SendPacket>
  RECORD_END();
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f383 8811 	msr	BASEPRI, r3
}
 8007c68:	bf00      	nop
 8007c6a:	3720      	adds	r7, #32
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	2001456c 	.word	0x2001456c
 8007c74:	2001453c 	.word	0x2001453c

08007c78 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	@ 0x28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007c82:	f3ef 8311 	mrs	r3, BASEPRI
 8007c86:	f04f 0120 	mov.w	r1, #32
 8007c8a:	f381 8811 	msr	BASEPRI, r1
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	4827      	ldr	r0, [pc, #156]	@ (8007d30 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007c92:	f7fe fc48 	bl	8006526 <_PreparePacket>
 8007c96:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007c9c:	4b25      	ldr	r3, [pc, #148]	@ (8007d34 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	623b      	str	r3, [r7, #32]
 8007cae:	e00b      	b.n	8007cc8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb6:	1c59      	adds	r1, r3, #1
 8007cb8:	6279      	str	r1, [r7, #36]	@ 0x24
 8007cba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007cbe:	b2d2      	uxtb	r2, r2
 8007cc0:	701a      	strb	r2, [r3, #0]
 8007cc2:	6a3b      	ldr	r3, [r7, #32]
 8007cc4:	09db      	lsrs	r3, r3, #7
 8007cc6:	623b      	str	r3, [r7, #32]
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ccc:	d8f0      	bhi.n	8007cb0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	627a      	str	r2, [r7, #36]	@ 0x24
 8007cd4:	6a3a      	ldr	r2, [r7, #32]
 8007cd6:	b2d2      	uxtb	r2, r2
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	61fb      	str	r3, [r7, #28]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	61bb      	str	r3, [r7, #24]
 8007ce6:	e00b      	b.n	8007d00 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	1c59      	adds	r1, r3, #1
 8007cf0:	61f9      	str	r1, [r7, #28]
 8007cf2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	09db      	lsrs	r3, r3, #7
 8007cfe:	61bb      	str	r3, [r7, #24]
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d04:	d8f0      	bhi.n	8007ce8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	1c5a      	adds	r2, r3, #1
 8007d0a:	61fa      	str	r2, [r7, #28]
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	b2d2      	uxtb	r2, r2
 8007d10:	701a      	strb	r2, [r3, #0]
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007d16:	2207      	movs	r2, #7
 8007d18:	68f9      	ldr	r1, [r7, #12]
 8007d1a:	6938      	ldr	r0, [r7, #16]
 8007d1c:	f7fe fcf4 	bl	8006708 <_SendPacket>
  RECORD_END();
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f383 8811 	msr	BASEPRI, r3
}
 8007d26:	bf00      	nop
 8007d28:	3728      	adds	r7, #40	@ 0x28
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	2001456c 	.word	0x2001456c
 8007d34:	2001453c 	.word	0x2001453c

08007d38 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007d40:	4b04      	ldr	r3, [pc, #16]	@ (8007d54 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	1ad3      	subs	r3, r2, r3
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	2001453c 	.word	0x2001453c

08007d58 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08c      	sub	sp, #48	@ 0x30
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007d62:	4b3b      	ldr	r3, [pc, #236]	@ (8007e50 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d06d      	beq.n	8007e46 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007d6a:	4b39      	ldr	r3, [pc, #228]	@ (8007e50 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007d70:	2300      	movs	r3, #0
 8007d72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d74:	e008      	b.n	8007d88 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d007      	beq.n	8007d92 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d84:	3301      	adds	r3, #1
 8007d86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d88:	79fb      	ldrb	r3, [r7, #7]
 8007d8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d3f2      	bcc.n	8007d76 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007d90:	e000      	b.n	8007d94 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007d92:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d055      	beq.n	8007e46 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007d9a:	f3ef 8311 	mrs	r3, BASEPRI
 8007d9e:	f04f 0120 	mov.w	r1, #32
 8007da2:	f381 8811 	msr	BASEPRI, r1
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	482a      	ldr	r0, [pc, #168]	@ (8007e54 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007daa:	f7fe fbbc 	bl	8006526 <_PreparePacket>
 8007dae:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007db8:	79fb      	ldrb	r3, [r7, #7]
 8007dba:	623b      	str	r3, [r7, #32]
 8007dbc:	e00b      	b.n	8007dd6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	1c59      	adds	r1, r3, #1
 8007dc6:	6279      	str	r1, [r7, #36]	@ 0x24
 8007dc8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007dcc:	b2d2      	uxtb	r2, r2
 8007dce:	701a      	strb	r2, [r3, #0]
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	09db      	lsrs	r3, r3, #7
 8007dd4:	623b      	str	r3, [r7, #32]
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8007dda:	d8f0      	bhi.n	8007dbe <SEGGER_SYSVIEW_SendModule+0x66>
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	627a      	str	r2, [r7, #36]	@ 0x24
 8007de2:	6a3a      	ldr	r2, [r7, #32]
 8007de4:	b2d2      	uxtb	r2, r2
 8007de6:	701a      	strb	r2, [r3, #0]
 8007de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dea:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	61fb      	str	r3, [r7, #28]
 8007df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	61bb      	str	r3, [r7, #24]
 8007df6:	e00b      	b.n	8007e10 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	1c59      	adds	r1, r3, #1
 8007e00:	61f9      	str	r1, [r7, #28]
 8007e02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007e06:	b2d2      	uxtb	r2, r2
 8007e08:	701a      	strb	r2, [r3, #0]
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	09db      	lsrs	r3, r3, #7
 8007e0e:	61bb      	str	r3, [r7, #24]
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e14:	d8f0      	bhi.n	8007df8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	1c5a      	adds	r2, r3, #1
 8007e1a:	61fa      	str	r2, [r7, #28]
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	b2d2      	uxtb	r2, r2
 8007e20:	701a      	strb	r2, [r3, #0]
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2280      	movs	r2, #128	@ 0x80
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f7fe fb2c 	bl	800648c <_EncodeStr>
 8007e34:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007e36:	2216      	movs	r2, #22
 8007e38:	68f9      	ldr	r1, [r7, #12]
 8007e3a:	6938      	ldr	r0, [r7, #16]
 8007e3c:	f7fe fc64 	bl	8006708 <_SendPacket>
      RECORD_END();
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007e46:	bf00      	nop
 8007e48:	3730      	adds	r7, #48	@ 0x30
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20014564 	.word	0x20014564
 8007e54:	2001456c 	.word	0x2001456c

08007e58 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8007e90 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00f      	beq.n	8007e86 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007e66:	4b0a      	ldr	r3, [pc, #40]	@ (8007e90 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1f2      	bne.n	8007e6c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20014564 	.word	0x20014564

08007e94 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8007e9e:	f04f 0120 	mov.w	r1, #32
 8007ea2:	f381 8811 	msr	BASEPRI, r1
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	4817      	ldr	r0, [pc, #92]	@ (8007f08 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007eaa:	f7fe fb3c 	bl	8006526 <_PreparePacket>
 8007eae:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	617b      	str	r3, [r7, #20]
 8007eb8:	4b14      	ldr	r3, [pc, #80]	@ (8007f0c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	613b      	str	r3, [r7, #16]
 8007ebe:	e00b      	b.n	8007ed8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	1c59      	adds	r1, r3, #1
 8007ec8:	6179      	str	r1, [r7, #20]
 8007eca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007ece:	b2d2      	uxtb	r2, r2
 8007ed0:	701a      	strb	r2, [r3, #0]
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	09db      	lsrs	r3, r3, #7
 8007ed6:	613b      	str	r3, [r7, #16]
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	2b7f      	cmp	r3, #127	@ 0x7f
 8007edc:	d8f0      	bhi.n	8007ec0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	617a      	str	r2, [r7, #20]
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	b2d2      	uxtb	r2, r2
 8007ee8:	701a      	strb	r2, [r3, #0]
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007eee:	221b      	movs	r2, #27
 8007ef0:	6879      	ldr	r1, [r7, #4]
 8007ef2:	68b8      	ldr	r0, [r7, #8]
 8007ef4:	f7fe fc08 	bl	8006708 <_SendPacket>
  RECORD_END();
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f383 8811 	msr	BASEPRI, r3
}
 8007efe:	bf00      	nop
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	2001456c 	.word	0x2001456c
 8007f0c:	20014568 	.word	0x20014568

08007f10 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007f10:	b40f      	push	{r0, r1, r2, r3}
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b082      	sub	sp, #8
 8007f16:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007f18:	f107 0314 	add.w	r3, r7, #20
 8007f1c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007f1e:	1d3b      	adds	r3, r7, #4
 8007f20:	461a      	mov	r2, r3
 8007f22:	2100      	movs	r1, #0
 8007f24:	6938      	ldr	r0, [r7, #16]
 8007f26:	f7fe fe79 	bl	8006c1c <_VPrintTarget>
  va_end(ParamList);
}
 8007f2a:	bf00      	nop
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f34:	b004      	add	sp, #16
 8007f36:	4770      	bx	lr

08007f38 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08a      	sub	sp, #40	@ 0x28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007f40:	f3ef 8311 	mrs	r3, BASEPRI
 8007f44:	f04f 0120 	mov.w	r1, #32
 8007f48:	f381 8811 	msr	BASEPRI, r1
 8007f4c:	617b      	str	r3, [r7, #20]
 8007f4e:	4827      	ldr	r0, [pc, #156]	@ (8007fec <SEGGER_SYSVIEW_Warn+0xb4>)
 8007f50:	f7fe fae9 	bl	8006526 <_PreparePacket>
 8007f54:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007f56:	2280      	movs	r2, #128	@ 0x80
 8007f58:	6879      	ldr	r1, [r7, #4]
 8007f5a:	6938      	ldr	r0, [r7, #16]
 8007f5c:	f7fe fa96 	bl	800648c <_EncodeStr>
 8007f60:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f66:	2301      	movs	r3, #1
 8007f68:	623b      	str	r3, [r7, #32]
 8007f6a:	e00b      	b.n	8007f84 <SEGGER_SYSVIEW_Warn+0x4c>
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f72:	1c59      	adds	r1, r3, #1
 8007f74:	6279      	str	r1, [r7, #36]	@ 0x24
 8007f76:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007f7a:	b2d2      	uxtb	r2, r2
 8007f7c:	701a      	strb	r2, [r3, #0]
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	09db      	lsrs	r3, r3, #7
 8007f82:	623b      	str	r3, [r7, #32]
 8007f84:	6a3b      	ldr	r3, [r7, #32]
 8007f86:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f88:	d8f0      	bhi.n	8007f6c <SEGGER_SYSVIEW_Warn+0x34>
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8c:	1c5a      	adds	r2, r3, #1
 8007f8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007f90:	6a3a      	ldr	r2, [r7, #32]
 8007f92:	b2d2      	uxtb	r2, r2
 8007f94:	701a      	strb	r2, [r3, #0]
 8007f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	61fb      	str	r3, [r7, #28]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	61bb      	str	r3, [r7, #24]
 8007fa2:	e00b      	b.n	8007fbc <SEGGER_SYSVIEW_Warn+0x84>
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	1c59      	adds	r1, r3, #1
 8007fac:	61f9      	str	r1, [r7, #28]
 8007fae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007fb2:	b2d2      	uxtb	r2, r2
 8007fb4:	701a      	strb	r2, [r3, #0]
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	09db      	lsrs	r3, r3, #7
 8007fba:	61bb      	str	r3, [r7, #24]
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8007fc0:	d8f0      	bhi.n	8007fa4 <SEGGER_SYSVIEW_Warn+0x6c>
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	1c5a      	adds	r2, r3, #1
 8007fc6:	61fa      	str	r2, [r7, #28]
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	b2d2      	uxtb	r2, r2
 8007fcc:	701a      	strb	r2, [r3, #0]
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007fd2:	221a      	movs	r2, #26
 8007fd4:	68f9      	ldr	r1, [r7, #12]
 8007fd6:	6938      	ldr	r0, [r7, #16]
 8007fd8:	f7fe fb96 	bl	8006708 <_SendPacket>
  RECORD_END();
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f383 8811 	msr	BASEPRI, r3
}
 8007fe2:	bf00      	nop
 8007fe4:	3728      	adds	r7, #40	@ 0x28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	2001456c 	.word	0x2001456c

08007ff0 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
 8007ffc:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	2000      	movs	r0, #0
 8008004:	f7fe f928 	bl	8006258 <SEGGER_RTT_Write>
  return len;
 8008008:	683b      	ldr	r3, [r7, #0]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <rand>:
 8008014:	4b16      	ldr	r3, [pc, #88]	@ (8008070 <rand+0x5c>)
 8008016:	b510      	push	{r4, lr}
 8008018:	681c      	ldr	r4, [r3, #0]
 800801a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800801c:	b9b3      	cbnz	r3, 800804c <rand+0x38>
 800801e:	2018      	movs	r0, #24
 8008020:	f000 fa4c 	bl	80084bc <malloc>
 8008024:	4602      	mov	r2, r0
 8008026:	6320      	str	r0, [r4, #48]	@ 0x30
 8008028:	b920      	cbnz	r0, 8008034 <rand+0x20>
 800802a:	4b12      	ldr	r3, [pc, #72]	@ (8008074 <rand+0x60>)
 800802c:	4812      	ldr	r0, [pc, #72]	@ (8008078 <rand+0x64>)
 800802e:	2152      	movs	r1, #82	@ 0x52
 8008030:	f000 f9dc 	bl	80083ec <__assert_func>
 8008034:	4911      	ldr	r1, [pc, #68]	@ (800807c <rand+0x68>)
 8008036:	4b12      	ldr	r3, [pc, #72]	@ (8008080 <rand+0x6c>)
 8008038:	e9c0 1300 	strd	r1, r3, [r0]
 800803c:	4b11      	ldr	r3, [pc, #68]	@ (8008084 <rand+0x70>)
 800803e:	6083      	str	r3, [r0, #8]
 8008040:	230b      	movs	r3, #11
 8008042:	8183      	strh	r3, [r0, #12]
 8008044:	2100      	movs	r1, #0
 8008046:	2001      	movs	r0, #1
 8008048:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800804c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800804e:	480e      	ldr	r0, [pc, #56]	@ (8008088 <rand+0x74>)
 8008050:	690b      	ldr	r3, [r1, #16]
 8008052:	694c      	ldr	r4, [r1, #20]
 8008054:	4a0d      	ldr	r2, [pc, #52]	@ (800808c <rand+0x78>)
 8008056:	4358      	muls	r0, r3
 8008058:	fb02 0004 	mla	r0, r2, r4, r0
 800805c:	fba3 3202 	umull	r3, r2, r3, r2
 8008060:	3301      	adds	r3, #1
 8008062:	eb40 0002 	adc.w	r0, r0, r2
 8008066:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800806a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800806e:	bd10      	pop	{r4, pc}
 8008070:	20000020 	.word	0x20000020
 8008074:	08009594 	.word	0x08009594
 8008078:	080095ab 	.word	0x080095ab
 800807c:	abcd330e 	.word	0xabcd330e
 8008080:	e66d1234 	.word	0xe66d1234
 8008084:	0005deec 	.word	0x0005deec
 8008088:	5851f42d 	.word	0x5851f42d
 800808c:	4c957f2d 	.word	0x4c957f2d

08008090 <std>:
 8008090:	2300      	movs	r3, #0
 8008092:	b510      	push	{r4, lr}
 8008094:	4604      	mov	r4, r0
 8008096:	e9c0 3300 	strd	r3, r3, [r0]
 800809a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800809e:	6083      	str	r3, [r0, #8]
 80080a0:	8181      	strh	r1, [r0, #12]
 80080a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80080a4:	81c2      	strh	r2, [r0, #14]
 80080a6:	6183      	str	r3, [r0, #24]
 80080a8:	4619      	mov	r1, r3
 80080aa:	2208      	movs	r2, #8
 80080ac:	305c      	adds	r0, #92	@ 0x5c
 80080ae:	f000 f924 	bl	80082fa <memset>
 80080b2:	4b0d      	ldr	r3, [pc, #52]	@ (80080e8 <std+0x58>)
 80080b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80080b6:	4b0d      	ldr	r3, [pc, #52]	@ (80080ec <std+0x5c>)
 80080b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080ba:	4b0d      	ldr	r3, [pc, #52]	@ (80080f0 <std+0x60>)
 80080bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080be:	4b0d      	ldr	r3, [pc, #52]	@ (80080f4 <std+0x64>)
 80080c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80080c2:	4b0d      	ldr	r3, [pc, #52]	@ (80080f8 <std+0x68>)
 80080c4:	6224      	str	r4, [r4, #32]
 80080c6:	429c      	cmp	r4, r3
 80080c8:	d006      	beq.n	80080d8 <std+0x48>
 80080ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080ce:	4294      	cmp	r4, r2
 80080d0:	d002      	beq.n	80080d8 <std+0x48>
 80080d2:	33d0      	adds	r3, #208	@ 0xd0
 80080d4:	429c      	cmp	r4, r3
 80080d6:	d105      	bne.n	80080e4 <std+0x54>
 80080d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e0:	f000 b972 	b.w	80083c8 <__retarget_lock_init_recursive>
 80080e4:	bd10      	pop	{r4, pc}
 80080e6:	bf00      	nop
 80080e8:	08008255 	.word	0x08008255
 80080ec:	08008277 	.word	0x08008277
 80080f0:	080082af 	.word	0x080082af
 80080f4:	080082d3 	.word	0x080082d3
 80080f8:	20014650 	.word	0x20014650

080080fc <stdio_exit_handler>:
 80080fc:	4a02      	ldr	r2, [pc, #8]	@ (8008108 <stdio_exit_handler+0xc>)
 80080fe:	4903      	ldr	r1, [pc, #12]	@ (800810c <stdio_exit_handler+0x10>)
 8008100:	4803      	ldr	r0, [pc, #12]	@ (8008110 <stdio_exit_handler+0x14>)
 8008102:	f000 b869 	b.w	80081d8 <_fwalk_sglue>
 8008106:	bf00      	nop
 8008108:	20000014 	.word	0x20000014
 800810c:	08008cfd 	.word	0x08008cfd
 8008110:	20000024 	.word	0x20000024

08008114 <cleanup_stdio>:
 8008114:	6841      	ldr	r1, [r0, #4]
 8008116:	4b0c      	ldr	r3, [pc, #48]	@ (8008148 <cleanup_stdio+0x34>)
 8008118:	4299      	cmp	r1, r3
 800811a:	b510      	push	{r4, lr}
 800811c:	4604      	mov	r4, r0
 800811e:	d001      	beq.n	8008124 <cleanup_stdio+0x10>
 8008120:	f000 fdec 	bl	8008cfc <_fflush_r>
 8008124:	68a1      	ldr	r1, [r4, #8]
 8008126:	4b09      	ldr	r3, [pc, #36]	@ (800814c <cleanup_stdio+0x38>)
 8008128:	4299      	cmp	r1, r3
 800812a:	d002      	beq.n	8008132 <cleanup_stdio+0x1e>
 800812c:	4620      	mov	r0, r4
 800812e:	f000 fde5 	bl	8008cfc <_fflush_r>
 8008132:	68e1      	ldr	r1, [r4, #12]
 8008134:	4b06      	ldr	r3, [pc, #24]	@ (8008150 <cleanup_stdio+0x3c>)
 8008136:	4299      	cmp	r1, r3
 8008138:	d004      	beq.n	8008144 <cleanup_stdio+0x30>
 800813a:	4620      	mov	r0, r4
 800813c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008140:	f000 bddc 	b.w	8008cfc <_fflush_r>
 8008144:	bd10      	pop	{r4, pc}
 8008146:	bf00      	nop
 8008148:	20014650 	.word	0x20014650
 800814c:	200146b8 	.word	0x200146b8
 8008150:	20014720 	.word	0x20014720

08008154 <global_stdio_init.part.0>:
 8008154:	b510      	push	{r4, lr}
 8008156:	4b0b      	ldr	r3, [pc, #44]	@ (8008184 <global_stdio_init.part.0+0x30>)
 8008158:	4c0b      	ldr	r4, [pc, #44]	@ (8008188 <global_stdio_init.part.0+0x34>)
 800815a:	4a0c      	ldr	r2, [pc, #48]	@ (800818c <global_stdio_init.part.0+0x38>)
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	4620      	mov	r0, r4
 8008160:	2200      	movs	r2, #0
 8008162:	2104      	movs	r1, #4
 8008164:	f7ff ff94 	bl	8008090 <std>
 8008168:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800816c:	2201      	movs	r2, #1
 800816e:	2109      	movs	r1, #9
 8008170:	f7ff ff8e 	bl	8008090 <std>
 8008174:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008178:	2202      	movs	r2, #2
 800817a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800817e:	2112      	movs	r1, #18
 8008180:	f7ff bf86 	b.w	8008090 <std>
 8008184:	20014788 	.word	0x20014788
 8008188:	20014650 	.word	0x20014650
 800818c:	080080fd 	.word	0x080080fd

08008190 <__sfp_lock_acquire>:
 8008190:	4801      	ldr	r0, [pc, #4]	@ (8008198 <__sfp_lock_acquire+0x8>)
 8008192:	f000 b91a 	b.w	80083ca <__retarget_lock_acquire_recursive>
 8008196:	bf00      	nop
 8008198:	20014791 	.word	0x20014791

0800819c <__sfp_lock_release>:
 800819c:	4801      	ldr	r0, [pc, #4]	@ (80081a4 <__sfp_lock_release+0x8>)
 800819e:	f000 b915 	b.w	80083cc <__retarget_lock_release_recursive>
 80081a2:	bf00      	nop
 80081a4:	20014791 	.word	0x20014791

080081a8 <__sinit>:
 80081a8:	b510      	push	{r4, lr}
 80081aa:	4604      	mov	r4, r0
 80081ac:	f7ff fff0 	bl	8008190 <__sfp_lock_acquire>
 80081b0:	6a23      	ldr	r3, [r4, #32]
 80081b2:	b11b      	cbz	r3, 80081bc <__sinit+0x14>
 80081b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b8:	f7ff bff0 	b.w	800819c <__sfp_lock_release>
 80081bc:	4b04      	ldr	r3, [pc, #16]	@ (80081d0 <__sinit+0x28>)
 80081be:	6223      	str	r3, [r4, #32]
 80081c0:	4b04      	ldr	r3, [pc, #16]	@ (80081d4 <__sinit+0x2c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1f5      	bne.n	80081b4 <__sinit+0xc>
 80081c8:	f7ff ffc4 	bl	8008154 <global_stdio_init.part.0>
 80081cc:	e7f2      	b.n	80081b4 <__sinit+0xc>
 80081ce:	bf00      	nop
 80081d0:	08008115 	.word	0x08008115
 80081d4:	20014788 	.word	0x20014788

080081d8 <_fwalk_sglue>:
 80081d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081dc:	4607      	mov	r7, r0
 80081de:	4688      	mov	r8, r1
 80081e0:	4614      	mov	r4, r2
 80081e2:	2600      	movs	r6, #0
 80081e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081e8:	f1b9 0901 	subs.w	r9, r9, #1
 80081ec:	d505      	bpl.n	80081fa <_fwalk_sglue+0x22>
 80081ee:	6824      	ldr	r4, [r4, #0]
 80081f0:	2c00      	cmp	r4, #0
 80081f2:	d1f7      	bne.n	80081e4 <_fwalk_sglue+0xc>
 80081f4:	4630      	mov	r0, r6
 80081f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081fa:	89ab      	ldrh	r3, [r5, #12]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d907      	bls.n	8008210 <_fwalk_sglue+0x38>
 8008200:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008204:	3301      	adds	r3, #1
 8008206:	d003      	beq.n	8008210 <_fwalk_sglue+0x38>
 8008208:	4629      	mov	r1, r5
 800820a:	4638      	mov	r0, r7
 800820c:	47c0      	blx	r8
 800820e:	4306      	orrs	r6, r0
 8008210:	3568      	adds	r5, #104	@ 0x68
 8008212:	e7e9      	b.n	80081e8 <_fwalk_sglue+0x10>

08008214 <siprintf>:
 8008214:	b40e      	push	{r1, r2, r3}
 8008216:	b500      	push	{lr}
 8008218:	b09c      	sub	sp, #112	@ 0x70
 800821a:	ab1d      	add	r3, sp, #116	@ 0x74
 800821c:	9002      	str	r0, [sp, #8]
 800821e:	9006      	str	r0, [sp, #24]
 8008220:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008224:	4809      	ldr	r0, [pc, #36]	@ (800824c <siprintf+0x38>)
 8008226:	9107      	str	r1, [sp, #28]
 8008228:	9104      	str	r1, [sp, #16]
 800822a:	4909      	ldr	r1, [pc, #36]	@ (8008250 <siprintf+0x3c>)
 800822c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008230:	9105      	str	r1, [sp, #20]
 8008232:	6800      	ldr	r0, [r0, #0]
 8008234:	9301      	str	r3, [sp, #4]
 8008236:	a902      	add	r1, sp, #8
 8008238:	f000 fa52 	bl	80086e0 <_svfiprintf_r>
 800823c:	9b02      	ldr	r3, [sp, #8]
 800823e:	2200      	movs	r2, #0
 8008240:	701a      	strb	r2, [r3, #0]
 8008242:	b01c      	add	sp, #112	@ 0x70
 8008244:	f85d eb04 	ldr.w	lr, [sp], #4
 8008248:	b003      	add	sp, #12
 800824a:	4770      	bx	lr
 800824c:	20000020 	.word	0x20000020
 8008250:	ffff0208 	.word	0xffff0208

08008254 <__sread>:
 8008254:	b510      	push	{r4, lr}
 8008256:	460c      	mov	r4, r1
 8008258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800825c:	f000 f878 	bl	8008350 <_read_r>
 8008260:	2800      	cmp	r0, #0
 8008262:	bfab      	itete	ge
 8008264:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008266:	89a3      	ldrhlt	r3, [r4, #12]
 8008268:	181b      	addge	r3, r3, r0
 800826a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800826e:	bfac      	ite	ge
 8008270:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008272:	81a3      	strhlt	r3, [r4, #12]
 8008274:	bd10      	pop	{r4, pc}

08008276 <__swrite>:
 8008276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800827a:	461f      	mov	r7, r3
 800827c:	898b      	ldrh	r3, [r1, #12]
 800827e:	05db      	lsls	r3, r3, #23
 8008280:	4605      	mov	r5, r0
 8008282:	460c      	mov	r4, r1
 8008284:	4616      	mov	r6, r2
 8008286:	d505      	bpl.n	8008294 <__swrite+0x1e>
 8008288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800828c:	2302      	movs	r3, #2
 800828e:	2200      	movs	r2, #0
 8008290:	f000 f84c 	bl	800832c <_lseek_r>
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800829a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800829e:	81a3      	strh	r3, [r4, #12]
 80082a0:	4632      	mov	r2, r6
 80082a2:	463b      	mov	r3, r7
 80082a4:	4628      	mov	r0, r5
 80082a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082aa:	f7ff bea1 	b.w	8007ff0 <_write_r>

080082ae <__sseek>:
 80082ae:	b510      	push	{r4, lr}
 80082b0:	460c      	mov	r4, r1
 80082b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b6:	f000 f839 	bl	800832c <_lseek_r>
 80082ba:	1c43      	adds	r3, r0, #1
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	bf15      	itete	ne
 80082c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082ca:	81a3      	strheq	r3, [r4, #12]
 80082cc:	bf18      	it	ne
 80082ce:	81a3      	strhne	r3, [r4, #12]
 80082d0:	bd10      	pop	{r4, pc}

080082d2 <__sclose>:
 80082d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d6:	f000 b819 	b.w	800830c <_close_r>

080082da <memcmp>:
 80082da:	b510      	push	{r4, lr}
 80082dc:	3901      	subs	r1, #1
 80082de:	4402      	add	r2, r0
 80082e0:	4290      	cmp	r0, r2
 80082e2:	d101      	bne.n	80082e8 <memcmp+0xe>
 80082e4:	2000      	movs	r0, #0
 80082e6:	e005      	b.n	80082f4 <memcmp+0x1a>
 80082e8:	7803      	ldrb	r3, [r0, #0]
 80082ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80082ee:	42a3      	cmp	r3, r4
 80082f0:	d001      	beq.n	80082f6 <memcmp+0x1c>
 80082f2:	1b18      	subs	r0, r3, r4
 80082f4:	bd10      	pop	{r4, pc}
 80082f6:	3001      	adds	r0, #1
 80082f8:	e7f2      	b.n	80082e0 <memcmp+0x6>

080082fa <memset>:
 80082fa:	4402      	add	r2, r0
 80082fc:	4603      	mov	r3, r0
 80082fe:	4293      	cmp	r3, r2
 8008300:	d100      	bne.n	8008304 <memset+0xa>
 8008302:	4770      	bx	lr
 8008304:	f803 1b01 	strb.w	r1, [r3], #1
 8008308:	e7f9      	b.n	80082fe <memset+0x4>
	...

0800830c <_close_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4d06      	ldr	r5, [pc, #24]	@ (8008328 <_close_r+0x1c>)
 8008310:	2300      	movs	r3, #0
 8008312:	4604      	mov	r4, r0
 8008314:	4608      	mov	r0, r1
 8008316:	602b      	str	r3, [r5, #0]
 8008318:	f7f8 fdea 	bl	8000ef0 <_close>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_close_r+0x1a>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_close_r+0x1a>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	2001478c 	.word	0x2001478c

0800832c <_lseek_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4d07      	ldr	r5, [pc, #28]	@ (800834c <_lseek_r+0x20>)
 8008330:	4604      	mov	r4, r0
 8008332:	4608      	mov	r0, r1
 8008334:	4611      	mov	r1, r2
 8008336:	2200      	movs	r2, #0
 8008338:	602a      	str	r2, [r5, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	f7f8 fdff 	bl	8000f3e <_lseek>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_lseek_r+0x1e>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	b103      	cbz	r3, 800834a <_lseek_r+0x1e>
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	2001478c 	.word	0x2001478c

08008350 <_read_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	4d07      	ldr	r5, [pc, #28]	@ (8008370 <_read_r+0x20>)
 8008354:	4604      	mov	r4, r0
 8008356:	4608      	mov	r0, r1
 8008358:	4611      	mov	r1, r2
 800835a:	2200      	movs	r2, #0
 800835c:	602a      	str	r2, [r5, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	f7f8 fda9 	bl	8000eb6 <_read>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	d102      	bne.n	800836e <_read_r+0x1e>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	b103      	cbz	r3, 800836e <_read_r+0x1e>
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	bd38      	pop	{r3, r4, r5, pc}
 8008370:	2001478c 	.word	0x2001478c

08008374 <__errno>:
 8008374:	4b01      	ldr	r3, [pc, #4]	@ (800837c <__errno+0x8>)
 8008376:	6818      	ldr	r0, [r3, #0]
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	20000020 	.word	0x20000020

08008380 <__libc_init_array>:
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	4d0d      	ldr	r5, [pc, #52]	@ (80083b8 <__libc_init_array+0x38>)
 8008384:	4c0d      	ldr	r4, [pc, #52]	@ (80083bc <__libc_init_array+0x3c>)
 8008386:	1b64      	subs	r4, r4, r5
 8008388:	10a4      	asrs	r4, r4, #2
 800838a:	2600      	movs	r6, #0
 800838c:	42a6      	cmp	r6, r4
 800838e:	d109      	bne.n	80083a4 <__libc_init_array+0x24>
 8008390:	4d0b      	ldr	r5, [pc, #44]	@ (80083c0 <__libc_init_array+0x40>)
 8008392:	4c0c      	ldr	r4, [pc, #48]	@ (80083c4 <__libc_init_array+0x44>)
 8008394:	f000 fff0 	bl	8009378 <_init>
 8008398:	1b64      	subs	r4, r4, r5
 800839a:	10a4      	asrs	r4, r4, #2
 800839c:	2600      	movs	r6, #0
 800839e:	42a6      	cmp	r6, r4
 80083a0:	d105      	bne.n	80083ae <__libc_init_array+0x2e>
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
 80083a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a8:	4798      	blx	r3
 80083aa:	3601      	adds	r6, #1
 80083ac:	e7ee      	b.n	800838c <__libc_init_array+0xc>
 80083ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b2:	4798      	blx	r3
 80083b4:	3601      	adds	r6, #1
 80083b6:	e7f2      	b.n	800839e <__libc_init_array+0x1e>
 80083b8:	0800967c 	.word	0x0800967c
 80083bc:	0800967c 	.word	0x0800967c
 80083c0:	0800967c 	.word	0x0800967c
 80083c4:	08009680 	.word	0x08009680

080083c8 <__retarget_lock_init_recursive>:
 80083c8:	4770      	bx	lr

080083ca <__retarget_lock_acquire_recursive>:
 80083ca:	4770      	bx	lr

080083cc <__retarget_lock_release_recursive>:
 80083cc:	4770      	bx	lr

080083ce <memcpy>:
 80083ce:	440a      	add	r2, r1
 80083d0:	4291      	cmp	r1, r2
 80083d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80083d6:	d100      	bne.n	80083da <memcpy+0xc>
 80083d8:	4770      	bx	lr
 80083da:	b510      	push	{r4, lr}
 80083dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083e4:	4291      	cmp	r1, r2
 80083e6:	d1f9      	bne.n	80083dc <memcpy+0xe>
 80083e8:	bd10      	pop	{r4, pc}
	...

080083ec <__assert_func>:
 80083ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083ee:	4614      	mov	r4, r2
 80083f0:	461a      	mov	r2, r3
 80083f2:	4b09      	ldr	r3, [pc, #36]	@ (8008418 <__assert_func+0x2c>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4605      	mov	r5, r0
 80083f8:	68d8      	ldr	r0, [r3, #12]
 80083fa:	b954      	cbnz	r4, 8008412 <__assert_func+0x26>
 80083fc:	4b07      	ldr	r3, [pc, #28]	@ (800841c <__assert_func+0x30>)
 80083fe:	461c      	mov	r4, r3
 8008400:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008404:	9100      	str	r1, [sp, #0]
 8008406:	462b      	mov	r3, r5
 8008408:	4905      	ldr	r1, [pc, #20]	@ (8008420 <__assert_func+0x34>)
 800840a:	f000 fc9f 	bl	8008d4c <fiprintf>
 800840e:	f000 fcd9 	bl	8008dc4 <abort>
 8008412:	4b04      	ldr	r3, [pc, #16]	@ (8008424 <__assert_func+0x38>)
 8008414:	e7f4      	b.n	8008400 <__assert_func+0x14>
 8008416:	bf00      	nop
 8008418:	20000020 	.word	0x20000020
 800841c:	0800963e 	.word	0x0800963e
 8008420:	08009610 	.word	0x08009610
 8008424:	08009603 	.word	0x08009603

08008428 <_free_r>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	4605      	mov	r5, r0
 800842c:	2900      	cmp	r1, #0
 800842e:	d041      	beq.n	80084b4 <_free_r+0x8c>
 8008430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008434:	1f0c      	subs	r4, r1, #4
 8008436:	2b00      	cmp	r3, #0
 8008438:	bfb8      	it	lt
 800843a:	18e4      	addlt	r4, r4, r3
 800843c:	f000 f8e8 	bl	8008610 <__malloc_lock>
 8008440:	4a1d      	ldr	r2, [pc, #116]	@ (80084b8 <_free_r+0x90>)
 8008442:	6813      	ldr	r3, [r2, #0]
 8008444:	b933      	cbnz	r3, 8008454 <_free_r+0x2c>
 8008446:	6063      	str	r3, [r4, #4]
 8008448:	6014      	str	r4, [r2, #0]
 800844a:	4628      	mov	r0, r5
 800844c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008450:	f000 b8e4 	b.w	800861c <__malloc_unlock>
 8008454:	42a3      	cmp	r3, r4
 8008456:	d908      	bls.n	800846a <_free_r+0x42>
 8008458:	6820      	ldr	r0, [r4, #0]
 800845a:	1821      	adds	r1, r4, r0
 800845c:	428b      	cmp	r3, r1
 800845e:	bf01      	itttt	eq
 8008460:	6819      	ldreq	r1, [r3, #0]
 8008462:	685b      	ldreq	r3, [r3, #4]
 8008464:	1809      	addeq	r1, r1, r0
 8008466:	6021      	streq	r1, [r4, #0]
 8008468:	e7ed      	b.n	8008446 <_free_r+0x1e>
 800846a:	461a      	mov	r2, r3
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	b10b      	cbz	r3, 8008474 <_free_r+0x4c>
 8008470:	42a3      	cmp	r3, r4
 8008472:	d9fa      	bls.n	800846a <_free_r+0x42>
 8008474:	6811      	ldr	r1, [r2, #0]
 8008476:	1850      	adds	r0, r2, r1
 8008478:	42a0      	cmp	r0, r4
 800847a:	d10b      	bne.n	8008494 <_free_r+0x6c>
 800847c:	6820      	ldr	r0, [r4, #0]
 800847e:	4401      	add	r1, r0
 8008480:	1850      	adds	r0, r2, r1
 8008482:	4283      	cmp	r3, r0
 8008484:	6011      	str	r1, [r2, #0]
 8008486:	d1e0      	bne.n	800844a <_free_r+0x22>
 8008488:	6818      	ldr	r0, [r3, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	6053      	str	r3, [r2, #4]
 800848e:	4408      	add	r0, r1
 8008490:	6010      	str	r0, [r2, #0]
 8008492:	e7da      	b.n	800844a <_free_r+0x22>
 8008494:	d902      	bls.n	800849c <_free_r+0x74>
 8008496:	230c      	movs	r3, #12
 8008498:	602b      	str	r3, [r5, #0]
 800849a:	e7d6      	b.n	800844a <_free_r+0x22>
 800849c:	6820      	ldr	r0, [r4, #0]
 800849e:	1821      	adds	r1, r4, r0
 80084a0:	428b      	cmp	r3, r1
 80084a2:	bf04      	itt	eq
 80084a4:	6819      	ldreq	r1, [r3, #0]
 80084a6:	685b      	ldreq	r3, [r3, #4]
 80084a8:	6063      	str	r3, [r4, #4]
 80084aa:	bf04      	itt	eq
 80084ac:	1809      	addeq	r1, r1, r0
 80084ae:	6021      	streq	r1, [r4, #0]
 80084b0:	6054      	str	r4, [r2, #4]
 80084b2:	e7ca      	b.n	800844a <_free_r+0x22>
 80084b4:	bd38      	pop	{r3, r4, r5, pc}
 80084b6:	bf00      	nop
 80084b8:	20014798 	.word	0x20014798

080084bc <malloc>:
 80084bc:	4b02      	ldr	r3, [pc, #8]	@ (80084c8 <malloc+0xc>)
 80084be:	4601      	mov	r1, r0
 80084c0:	6818      	ldr	r0, [r3, #0]
 80084c2:	f000 b825 	b.w	8008510 <_malloc_r>
 80084c6:	bf00      	nop
 80084c8:	20000020 	.word	0x20000020

080084cc <sbrk_aligned>:
 80084cc:	b570      	push	{r4, r5, r6, lr}
 80084ce:	4e0f      	ldr	r6, [pc, #60]	@ (800850c <sbrk_aligned+0x40>)
 80084d0:	460c      	mov	r4, r1
 80084d2:	6831      	ldr	r1, [r6, #0]
 80084d4:	4605      	mov	r5, r0
 80084d6:	b911      	cbnz	r1, 80084de <sbrk_aligned+0x12>
 80084d8:	f000 fc64 	bl	8008da4 <_sbrk_r>
 80084dc:	6030      	str	r0, [r6, #0]
 80084de:	4621      	mov	r1, r4
 80084e0:	4628      	mov	r0, r5
 80084e2:	f000 fc5f 	bl	8008da4 <_sbrk_r>
 80084e6:	1c43      	adds	r3, r0, #1
 80084e8:	d103      	bne.n	80084f2 <sbrk_aligned+0x26>
 80084ea:	f04f 34ff 	mov.w	r4, #4294967295
 80084ee:	4620      	mov	r0, r4
 80084f0:	bd70      	pop	{r4, r5, r6, pc}
 80084f2:	1cc4      	adds	r4, r0, #3
 80084f4:	f024 0403 	bic.w	r4, r4, #3
 80084f8:	42a0      	cmp	r0, r4
 80084fa:	d0f8      	beq.n	80084ee <sbrk_aligned+0x22>
 80084fc:	1a21      	subs	r1, r4, r0
 80084fe:	4628      	mov	r0, r5
 8008500:	f000 fc50 	bl	8008da4 <_sbrk_r>
 8008504:	3001      	adds	r0, #1
 8008506:	d1f2      	bne.n	80084ee <sbrk_aligned+0x22>
 8008508:	e7ef      	b.n	80084ea <sbrk_aligned+0x1e>
 800850a:	bf00      	nop
 800850c:	20014794 	.word	0x20014794

08008510 <_malloc_r>:
 8008510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008514:	1ccd      	adds	r5, r1, #3
 8008516:	f025 0503 	bic.w	r5, r5, #3
 800851a:	3508      	adds	r5, #8
 800851c:	2d0c      	cmp	r5, #12
 800851e:	bf38      	it	cc
 8008520:	250c      	movcc	r5, #12
 8008522:	2d00      	cmp	r5, #0
 8008524:	4606      	mov	r6, r0
 8008526:	db01      	blt.n	800852c <_malloc_r+0x1c>
 8008528:	42a9      	cmp	r1, r5
 800852a:	d904      	bls.n	8008536 <_malloc_r+0x26>
 800852c:	230c      	movs	r3, #12
 800852e:	6033      	str	r3, [r6, #0]
 8008530:	2000      	movs	r0, #0
 8008532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008536:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800860c <_malloc_r+0xfc>
 800853a:	f000 f869 	bl	8008610 <__malloc_lock>
 800853e:	f8d8 3000 	ldr.w	r3, [r8]
 8008542:	461c      	mov	r4, r3
 8008544:	bb44      	cbnz	r4, 8008598 <_malloc_r+0x88>
 8008546:	4629      	mov	r1, r5
 8008548:	4630      	mov	r0, r6
 800854a:	f7ff ffbf 	bl	80084cc <sbrk_aligned>
 800854e:	1c43      	adds	r3, r0, #1
 8008550:	4604      	mov	r4, r0
 8008552:	d158      	bne.n	8008606 <_malloc_r+0xf6>
 8008554:	f8d8 4000 	ldr.w	r4, [r8]
 8008558:	4627      	mov	r7, r4
 800855a:	2f00      	cmp	r7, #0
 800855c:	d143      	bne.n	80085e6 <_malloc_r+0xd6>
 800855e:	2c00      	cmp	r4, #0
 8008560:	d04b      	beq.n	80085fa <_malloc_r+0xea>
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	4639      	mov	r1, r7
 8008566:	4630      	mov	r0, r6
 8008568:	eb04 0903 	add.w	r9, r4, r3
 800856c:	f000 fc1a 	bl	8008da4 <_sbrk_r>
 8008570:	4581      	cmp	r9, r0
 8008572:	d142      	bne.n	80085fa <_malloc_r+0xea>
 8008574:	6821      	ldr	r1, [r4, #0]
 8008576:	1a6d      	subs	r5, r5, r1
 8008578:	4629      	mov	r1, r5
 800857a:	4630      	mov	r0, r6
 800857c:	f7ff ffa6 	bl	80084cc <sbrk_aligned>
 8008580:	3001      	adds	r0, #1
 8008582:	d03a      	beq.n	80085fa <_malloc_r+0xea>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	442b      	add	r3, r5
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	f8d8 3000 	ldr.w	r3, [r8]
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	bb62      	cbnz	r2, 80085ec <_malloc_r+0xdc>
 8008592:	f8c8 7000 	str.w	r7, [r8]
 8008596:	e00f      	b.n	80085b8 <_malloc_r+0xa8>
 8008598:	6822      	ldr	r2, [r4, #0]
 800859a:	1b52      	subs	r2, r2, r5
 800859c:	d420      	bmi.n	80085e0 <_malloc_r+0xd0>
 800859e:	2a0b      	cmp	r2, #11
 80085a0:	d917      	bls.n	80085d2 <_malloc_r+0xc2>
 80085a2:	1961      	adds	r1, r4, r5
 80085a4:	42a3      	cmp	r3, r4
 80085a6:	6025      	str	r5, [r4, #0]
 80085a8:	bf18      	it	ne
 80085aa:	6059      	strne	r1, [r3, #4]
 80085ac:	6863      	ldr	r3, [r4, #4]
 80085ae:	bf08      	it	eq
 80085b0:	f8c8 1000 	streq.w	r1, [r8]
 80085b4:	5162      	str	r2, [r4, r5]
 80085b6:	604b      	str	r3, [r1, #4]
 80085b8:	4630      	mov	r0, r6
 80085ba:	f000 f82f 	bl	800861c <__malloc_unlock>
 80085be:	f104 000b 	add.w	r0, r4, #11
 80085c2:	1d23      	adds	r3, r4, #4
 80085c4:	f020 0007 	bic.w	r0, r0, #7
 80085c8:	1ac2      	subs	r2, r0, r3
 80085ca:	bf1c      	itt	ne
 80085cc:	1a1b      	subne	r3, r3, r0
 80085ce:	50a3      	strne	r3, [r4, r2]
 80085d0:	e7af      	b.n	8008532 <_malloc_r+0x22>
 80085d2:	6862      	ldr	r2, [r4, #4]
 80085d4:	42a3      	cmp	r3, r4
 80085d6:	bf0c      	ite	eq
 80085d8:	f8c8 2000 	streq.w	r2, [r8]
 80085dc:	605a      	strne	r2, [r3, #4]
 80085de:	e7eb      	b.n	80085b8 <_malloc_r+0xa8>
 80085e0:	4623      	mov	r3, r4
 80085e2:	6864      	ldr	r4, [r4, #4]
 80085e4:	e7ae      	b.n	8008544 <_malloc_r+0x34>
 80085e6:	463c      	mov	r4, r7
 80085e8:	687f      	ldr	r7, [r7, #4]
 80085ea:	e7b6      	b.n	800855a <_malloc_r+0x4a>
 80085ec:	461a      	mov	r2, r3
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	42a3      	cmp	r3, r4
 80085f2:	d1fb      	bne.n	80085ec <_malloc_r+0xdc>
 80085f4:	2300      	movs	r3, #0
 80085f6:	6053      	str	r3, [r2, #4]
 80085f8:	e7de      	b.n	80085b8 <_malloc_r+0xa8>
 80085fa:	230c      	movs	r3, #12
 80085fc:	6033      	str	r3, [r6, #0]
 80085fe:	4630      	mov	r0, r6
 8008600:	f000 f80c 	bl	800861c <__malloc_unlock>
 8008604:	e794      	b.n	8008530 <_malloc_r+0x20>
 8008606:	6005      	str	r5, [r0, #0]
 8008608:	e7d6      	b.n	80085b8 <_malloc_r+0xa8>
 800860a:	bf00      	nop
 800860c:	20014798 	.word	0x20014798

08008610 <__malloc_lock>:
 8008610:	4801      	ldr	r0, [pc, #4]	@ (8008618 <__malloc_lock+0x8>)
 8008612:	f7ff beda 	b.w	80083ca <__retarget_lock_acquire_recursive>
 8008616:	bf00      	nop
 8008618:	20014790 	.word	0x20014790

0800861c <__malloc_unlock>:
 800861c:	4801      	ldr	r0, [pc, #4]	@ (8008624 <__malloc_unlock+0x8>)
 800861e:	f7ff bed5 	b.w	80083cc <__retarget_lock_release_recursive>
 8008622:	bf00      	nop
 8008624:	20014790 	.word	0x20014790

08008628 <__ssputs_r>:
 8008628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800862c:	688e      	ldr	r6, [r1, #8]
 800862e:	461f      	mov	r7, r3
 8008630:	42be      	cmp	r6, r7
 8008632:	680b      	ldr	r3, [r1, #0]
 8008634:	4682      	mov	sl, r0
 8008636:	460c      	mov	r4, r1
 8008638:	4690      	mov	r8, r2
 800863a:	d82d      	bhi.n	8008698 <__ssputs_r+0x70>
 800863c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008640:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008644:	d026      	beq.n	8008694 <__ssputs_r+0x6c>
 8008646:	6965      	ldr	r5, [r4, #20]
 8008648:	6909      	ldr	r1, [r1, #16]
 800864a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800864e:	eba3 0901 	sub.w	r9, r3, r1
 8008652:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008656:	1c7b      	adds	r3, r7, #1
 8008658:	444b      	add	r3, r9
 800865a:	106d      	asrs	r5, r5, #1
 800865c:	429d      	cmp	r5, r3
 800865e:	bf38      	it	cc
 8008660:	461d      	movcc	r5, r3
 8008662:	0553      	lsls	r3, r2, #21
 8008664:	d527      	bpl.n	80086b6 <__ssputs_r+0x8e>
 8008666:	4629      	mov	r1, r5
 8008668:	f7ff ff52 	bl	8008510 <_malloc_r>
 800866c:	4606      	mov	r6, r0
 800866e:	b360      	cbz	r0, 80086ca <__ssputs_r+0xa2>
 8008670:	6921      	ldr	r1, [r4, #16]
 8008672:	464a      	mov	r2, r9
 8008674:	f7ff feab 	bl	80083ce <memcpy>
 8008678:	89a3      	ldrh	r3, [r4, #12]
 800867a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800867e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008682:	81a3      	strh	r3, [r4, #12]
 8008684:	6126      	str	r6, [r4, #16]
 8008686:	6165      	str	r5, [r4, #20]
 8008688:	444e      	add	r6, r9
 800868a:	eba5 0509 	sub.w	r5, r5, r9
 800868e:	6026      	str	r6, [r4, #0]
 8008690:	60a5      	str	r5, [r4, #8]
 8008692:	463e      	mov	r6, r7
 8008694:	42be      	cmp	r6, r7
 8008696:	d900      	bls.n	800869a <__ssputs_r+0x72>
 8008698:	463e      	mov	r6, r7
 800869a:	6820      	ldr	r0, [r4, #0]
 800869c:	4632      	mov	r2, r6
 800869e:	4641      	mov	r1, r8
 80086a0:	f000 fb66 	bl	8008d70 <memmove>
 80086a4:	68a3      	ldr	r3, [r4, #8]
 80086a6:	1b9b      	subs	r3, r3, r6
 80086a8:	60a3      	str	r3, [r4, #8]
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	4433      	add	r3, r6
 80086ae:	6023      	str	r3, [r4, #0]
 80086b0:	2000      	movs	r0, #0
 80086b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b6:	462a      	mov	r2, r5
 80086b8:	f000 fb8b 	bl	8008dd2 <_realloc_r>
 80086bc:	4606      	mov	r6, r0
 80086be:	2800      	cmp	r0, #0
 80086c0:	d1e0      	bne.n	8008684 <__ssputs_r+0x5c>
 80086c2:	6921      	ldr	r1, [r4, #16]
 80086c4:	4650      	mov	r0, sl
 80086c6:	f7ff feaf 	bl	8008428 <_free_r>
 80086ca:	230c      	movs	r3, #12
 80086cc:	f8ca 3000 	str.w	r3, [sl]
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086d6:	81a3      	strh	r3, [r4, #12]
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295
 80086dc:	e7e9      	b.n	80086b2 <__ssputs_r+0x8a>
	...

080086e0 <_svfiprintf_r>:
 80086e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e4:	4698      	mov	r8, r3
 80086e6:	898b      	ldrh	r3, [r1, #12]
 80086e8:	061b      	lsls	r3, r3, #24
 80086ea:	b09d      	sub	sp, #116	@ 0x74
 80086ec:	4607      	mov	r7, r0
 80086ee:	460d      	mov	r5, r1
 80086f0:	4614      	mov	r4, r2
 80086f2:	d510      	bpl.n	8008716 <_svfiprintf_r+0x36>
 80086f4:	690b      	ldr	r3, [r1, #16]
 80086f6:	b973      	cbnz	r3, 8008716 <_svfiprintf_r+0x36>
 80086f8:	2140      	movs	r1, #64	@ 0x40
 80086fa:	f7ff ff09 	bl	8008510 <_malloc_r>
 80086fe:	6028      	str	r0, [r5, #0]
 8008700:	6128      	str	r0, [r5, #16]
 8008702:	b930      	cbnz	r0, 8008712 <_svfiprintf_r+0x32>
 8008704:	230c      	movs	r3, #12
 8008706:	603b      	str	r3, [r7, #0]
 8008708:	f04f 30ff 	mov.w	r0, #4294967295
 800870c:	b01d      	add	sp, #116	@ 0x74
 800870e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008712:	2340      	movs	r3, #64	@ 0x40
 8008714:	616b      	str	r3, [r5, #20]
 8008716:	2300      	movs	r3, #0
 8008718:	9309      	str	r3, [sp, #36]	@ 0x24
 800871a:	2320      	movs	r3, #32
 800871c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008720:	f8cd 800c 	str.w	r8, [sp, #12]
 8008724:	2330      	movs	r3, #48	@ 0x30
 8008726:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80088c4 <_svfiprintf_r+0x1e4>
 800872a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800872e:	f04f 0901 	mov.w	r9, #1
 8008732:	4623      	mov	r3, r4
 8008734:	469a      	mov	sl, r3
 8008736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800873a:	b10a      	cbz	r2, 8008740 <_svfiprintf_r+0x60>
 800873c:	2a25      	cmp	r2, #37	@ 0x25
 800873e:	d1f9      	bne.n	8008734 <_svfiprintf_r+0x54>
 8008740:	ebba 0b04 	subs.w	fp, sl, r4
 8008744:	d00b      	beq.n	800875e <_svfiprintf_r+0x7e>
 8008746:	465b      	mov	r3, fp
 8008748:	4622      	mov	r2, r4
 800874a:	4629      	mov	r1, r5
 800874c:	4638      	mov	r0, r7
 800874e:	f7ff ff6b 	bl	8008628 <__ssputs_r>
 8008752:	3001      	adds	r0, #1
 8008754:	f000 80a7 	beq.w	80088a6 <_svfiprintf_r+0x1c6>
 8008758:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800875a:	445a      	add	r2, fp
 800875c:	9209      	str	r2, [sp, #36]	@ 0x24
 800875e:	f89a 3000 	ldrb.w	r3, [sl]
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 809f 	beq.w	80088a6 <_svfiprintf_r+0x1c6>
 8008768:	2300      	movs	r3, #0
 800876a:	f04f 32ff 	mov.w	r2, #4294967295
 800876e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008772:	f10a 0a01 	add.w	sl, sl, #1
 8008776:	9304      	str	r3, [sp, #16]
 8008778:	9307      	str	r3, [sp, #28]
 800877a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800877e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008780:	4654      	mov	r4, sl
 8008782:	2205      	movs	r2, #5
 8008784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008788:	484e      	ldr	r0, [pc, #312]	@ (80088c4 <_svfiprintf_r+0x1e4>)
 800878a:	f7f7 fd79 	bl	8000280 <memchr>
 800878e:	9a04      	ldr	r2, [sp, #16]
 8008790:	b9d8      	cbnz	r0, 80087ca <_svfiprintf_r+0xea>
 8008792:	06d0      	lsls	r0, r2, #27
 8008794:	bf44      	itt	mi
 8008796:	2320      	movmi	r3, #32
 8008798:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800879c:	0711      	lsls	r1, r2, #28
 800879e:	bf44      	itt	mi
 80087a0:	232b      	movmi	r3, #43	@ 0x2b
 80087a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087a6:	f89a 3000 	ldrb.w	r3, [sl]
 80087aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80087ac:	d015      	beq.n	80087da <_svfiprintf_r+0xfa>
 80087ae:	9a07      	ldr	r2, [sp, #28]
 80087b0:	4654      	mov	r4, sl
 80087b2:	2000      	movs	r0, #0
 80087b4:	f04f 0c0a 	mov.w	ip, #10
 80087b8:	4621      	mov	r1, r4
 80087ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087be:	3b30      	subs	r3, #48	@ 0x30
 80087c0:	2b09      	cmp	r3, #9
 80087c2:	d94b      	bls.n	800885c <_svfiprintf_r+0x17c>
 80087c4:	b1b0      	cbz	r0, 80087f4 <_svfiprintf_r+0x114>
 80087c6:	9207      	str	r2, [sp, #28]
 80087c8:	e014      	b.n	80087f4 <_svfiprintf_r+0x114>
 80087ca:	eba0 0308 	sub.w	r3, r0, r8
 80087ce:	fa09 f303 	lsl.w	r3, r9, r3
 80087d2:	4313      	orrs	r3, r2
 80087d4:	9304      	str	r3, [sp, #16]
 80087d6:	46a2      	mov	sl, r4
 80087d8:	e7d2      	b.n	8008780 <_svfiprintf_r+0xa0>
 80087da:	9b03      	ldr	r3, [sp, #12]
 80087dc:	1d19      	adds	r1, r3, #4
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	9103      	str	r1, [sp, #12]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	bfbb      	ittet	lt
 80087e6:	425b      	neglt	r3, r3
 80087e8:	f042 0202 	orrlt.w	r2, r2, #2
 80087ec:	9307      	strge	r3, [sp, #28]
 80087ee:	9307      	strlt	r3, [sp, #28]
 80087f0:	bfb8      	it	lt
 80087f2:	9204      	strlt	r2, [sp, #16]
 80087f4:	7823      	ldrb	r3, [r4, #0]
 80087f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80087f8:	d10a      	bne.n	8008810 <_svfiprintf_r+0x130>
 80087fa:	7863      	ldrb	r3, [r4, #1]
 80087fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80087fe:	d132      	bne.n	8008866 <_svfiprintf_r+0x186>
 8008800:	9b03      	ldr	r3, [sp, #12]
 8008802:	1d1a      	adds	r2, r3, #4
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	9203      	str	r2, [sp, #12]
 8008808:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800880c:	3402      	adds	r4, #2
 800880e:	9305      	str	r3, [sp, #20]
 8008810:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80088d4 <_svfiprintf_r+0x1f4>
 8008814:	7821      	ldrb	r1, [r4, #0]
 8008816:	2203      	movs	r2, #3
 8008818:	4650      	mov	r0, sl
 800881a:	f7f7 fd31 	bl	8000280 <memchr>
 800881e:	b138      	cbz	r0, 8008830 <_svfiprintf_r+0x150>
 8008820:	9b04      	ldr	r3, [sp, #16]
 8008822:	eba0 000a 	sub.w	r0, r0, sl
 8008826:	2240      	movs	r2, #64	@ 0x40
 8008828:	4082      	lsls	r2, r0
 800882a:	4313      	orrs	r3, r2
 800882c:	3401      	adds	r4, #1
 800882e:	9304      	str	r3, [sp, #16]
 8008830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008834:	4824      	ldr	r0, [pc, #144]	@ (80088c8 <_svfiprintf_r+0x1e8>)
 8008836:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800883a:	2206      	movs	r2, #6
 800883c:	f7f7 fd20 	bl	8000280 <memchr>
 8008840:	2800      	cmp	r0, #0
 8008842:	d036      	beq.n	80088b2 <_svfiprintf_r+0x1d2>
 8008844:	4b21      	ldr	r3, [pc, #132]	@ (80088cc <_svfiprintf_r+0x1ec>)
 8008846:	bb1b      	cbnz	r3, 8008890 <_svfiprintf_r+0x1b0>
 8008848:	9b03      	ldr	r3, [sp, #12]
 800884a:	3307      	adds	r3, #7
 800884c:	f023 0307 	bic.w	r3, r3, #7
 8008850:	3308      	adds	r3, #8
 8008852:	9303      	str	r3, [sp, #12]
 8008854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008856:	4433      	add	r3, r6
 8008858:	9309      	str	r3, [sp, #36]	@ 0x24
 800885a:	e76a      	b.n	8008732 <_svfiprintf_r+0x52>
 800885c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008860:	460c      	mov	r4, r1
 8008862:	2001      	movs	r0, #1
 8008864:	e7a8      	b.n	80087b8 <_svfiprintf_r+0xd8>
 8008866:	2300      	movs	r3, #0
 8008868:	3401      	adds	r4, #1
 800886a:	9305      	str	r3, [sp, #20]
 800886c:	4619      	mov	r1, r3
 800886e:	f04f 0c0a 	mov.w	ip, #10
 8008872:	4620      	mov	r0, r4
 8008874:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008878:	3a30      	subs	r2, #48	@ 0x30
 800887a:	2a09      	cmp	r2, #9
 800887c:	d903      	bls.n	8008886 <_svfiprintf_r+0x1a6>
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0c6      	beq.n	8008810 <_svfiprintf_r+0x130>
 8008882:	9105      	str	r1, [sp, #20]
 8008884:	e7c4      	b.n	8008810 <_svfiprintf_r+0x130>
 8008886:	fb0c 2101 	mla	r1, ip, r1, r2
 800888a:	4604      	mov	r4, r0
 800888c:	2301      	movs	r3, #1
 800888e:	e7f0      	b.n	8008872 <_svfiprintf_r+0x192>
 8008890:	ab03      	add	r3, sp, #12
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	462a      	mov	r2, r5
 8008896:	4b0e      	ldr	r3, [pc, #56]	@ (80088d0 <_svfiprintf_r+0x1f0>)
 8008898:	a904      	add	r1, sp, #16
 800889a:	4638      	mov	r0, r7
 800889c:	f3af 8000 	nop.w
 80088a0:	1c42      	adds	r2, r0, #1
 80088a2:	4606      	mov	r6, r0
 80088a4:	d1d6      	bne.n	8008854 <_svfiprintf_r+0x174>
 80088a6:	89ab      	ldrh	r3, [r5, #12]
 80088a8:	065b      	lsls	r3, r3, #25
 80088aa:	f53f af2d 	bmi.w	8008708 <_svfiprintf_r+0x28>
 80088ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088b0:	e72c      	b.n	800870c <_svfiprintf_r+0x2c>
 80088b2:	ab03      	add	r3, sp, #12
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	462a      	mov	r2, r5
 80088b8:	4b05      	ldr	r3, [pc, #20]	@ (80088d0 <_svfiprintf_r+0x1f0>)
 80088ba:	a904      	add	r1, sp, #16
 80088bc:	4638      	mov	r0, r7
 80088be:	f000 f879 	bl	80089b4 <_printf_i>
 80088c2:	e7ed      	b.n	80088a0 <_svfiprintf_r+0x1c0>
 80088c4:	0800963f 	.word	0x0800963f
 80088c8:	08009649 	.word	0x08009649
 80088cc:	00000000 	.word	0x00000000
 80088d0:	08008629 	.word	0x08008629
 80088d4:	08009645 	.word	0x08009645

080088d8 <_printf_common>:
 80088d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088dc:	4616      	mov	r6, r2
 80088de:	4698      	mov	r8, r3
 80088e0:	688a      	ldr	r2, [r1, #8]
 80088e2:	690b      	ldr	r3, [r1, #16]
 80088e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088e8:	4293      	cmp	r3, r2
 80088ea:	bfb8      	it	lt
 80088ec:	4613      	movlt	r3, r2
 80088ee:	6033      	str	r3, [r6, #0]
 80088f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088f4:	4607      	mov	r7, r0
 80088f6:	460c      	mov	r4, r1
 80088f8:	b10a      	cbz	r2, 80088fe <_printf_common+0x26>
 80088fa:	3301      	adds	r3, #1
 80088fc:	6033      	str	r3, [r6, #0]
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	0699      	lsls	r1, r3, #26
 8008902:	bf42      	ittt	mi
 8008904:	6833      	ldrmi	r3, [r6, #0]
 8008906:	3302      	addmi	r3, #2
 8008908:	6033      	strmi	r3, [r6, #0]
 800890a:	6825      	ldr	r5, [r4, #0]
 800890c:	f015 0506 	ands.w	r5, r5, #6
 8008910:	d106      	bne.n	8008920 <_printf_common+0x48>
 8008912:	f104 0a19 	add.w	sl, r4, #25
 8008916:	68e3      	ldr	r3, [r4, #12]
 8008918:	6832      	ldr	r2, [r6, #0]
 800891a:	1a9b      	subs	r3, r3, r2
 800891c:	42ab      	cmp	r3, r5
 800891e:	dc26      	bgt.n	800896e <_printf_common+0x96>
 8008920:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008924:	6822      	ldr	r2, [r4, #0]
 8008926:	3b00      	subs	r3, #0
 8008928:	bf18      	it	ne
 800892a:	2301      	movne	r3, #1
 800892c:	0692      	lsls	r2, r2, #26
 800892e:	d42b      	bmi.n	8008988 <_printf_common+0xb0>
 8008930:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008934:	4641      	mov	r1, r8
 8008936:	4638      	mov	r0, r7
 8008938:	47c8      	blx	r9
 800893a:	3001      	adds	r0, #1
 800893c:	d01e      	beq.n	800897c <_printf_common+0xa4>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	6922      	ldr	r2, [r4, #16]
 8008942:	f003 0306 	and.w	r3, r3, #6
 8008946:	2b04      	cmp	r3, #4
 8008948:	bf02      	ittt	eq
 800894a:	68e5      	ldreq	r5, [r4, #12]
 800894c:	6833      	ldreq	r3, [r6, #0]
 800894e:	1aed      	subeq	r5, r5, r3
 8008950:	68a3      	ldr	r3, [r4, #8]
 8008952:	bf0c      	ite	eq
 8008954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008958:	2500      	movne	r5, #0
 800895a:	4293      	cmp	r3, r2
 800895c:	bfc4      	itt	gt
 800895e:	1a9b      	subgt	r3, r3, r2
 8008960:	18ed      	addgt	r5, r5, r3
 8008962:	2600      	movs	r6, #0
 8008964:	341a      	adds	r4, #26
 8008966:	42b5      	cmp	r5, r6
 8008968:	d11a      	bne.n	80089a0 <_printf_common+0xc8>
 800896a:	2000      	movs	r0, #0
 800896c:	e008      	b.n	8008980 <_printf_common+0xa8>
 800896e:	2301      	movs	r3, #1
 8008970:	4652      	mov	r2, sl
 8008972:	4641      	mov	r1, r8
 8008974:	4638      	mov	r0, r7
 8008976:	47c8      	blx	r9
 8008978:	3001      	adds	r0, #1
 800897a:	d103      	bne.n	8008984 <_printf_common+0xac>
 800897c:	f04f 30ff 	mov.w	r0, #4294967295
 8008980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008984:	3501      	adds	r5, #1
 8008986:	e7c6      	b.n	8008916 <_printf_common+0x3e>
 8008988:	18e1      	adds	r1, r4, r3
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	2030      	movs	r0, #48	@ 0x30
 800898e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008992:	4422      	add	r2, r4
 8008994:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008998:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800899c:	3302      	adds	r3, #2
 800899e:	e7c7      	b.n	8008930 <_printf_common+0x58>
 80089a0:	2301      	movs	r3, #1
 80089a2:	4622      	mov	r2, r4
 80089a4:	4641      	mov	r1, r8
 80089a6:	4638      	mov	r0, r7
 80089a8:	47c8      	blx	r9
 80089aa:	3001      	adds	r0, #1
 80089ac:	d0e6      	beq.n	800897c <_printf_common+0xa4>
 80089ae:	3601      	adds	r6, #1
 80089b0:	e7d9      	b.n	8008966 <_printf_common+0x8e>
	...

080089b4 <_printf_i>:
 80089b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089b8:	7e0f      	ldrb	r7, [r1, #24]
 80089ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089bc:	2f78      	cmp	r7, #120	@ 0x78
 80089be:	4691      	mov	r9, r2
 80089c0:	4680      	mov	r8, r0
 80089c2:	460c      	mov	r4, r1
 80089c4:	469a      	mov	sl, r3
 80089c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80089ca:	d807      	bhi.n	80089dc <_printf_i+0x28>
 80089cc:	2f62      	cmp	r7, #98	@ 0x62
 80089ce:	d80a      	bhi.n	80089e6 <_printf_i+0x32>
 80089d0:	2f00      	cmp	r7, #0
 80089d2:	f000 80d2 	beq.w	8008b7a <_printf_i+0x1c6>
 80089d6:	2f58      	cmp	r7, #88	@ 0x58
 80089d8:	f000 80b9 	beq.w	8008b4e <_printf_i+0x19a>
 80089dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089e4:	e03a      	b.n	8008a5c <_printf_i+0xa8>
 80089e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089ea:	2b15      	cmp	r3, #21
 80089ec:	d8f6      	bhi.n	80089dc <_printf_i+0x28>
 80089ee:	a101      	add	r1, pc, #4	@ (adr r1, 80089f4 <_printf_i+0x40>)
 80089f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089f4:	08008a4d 	.word	0x08008a4d
 80089f8:	08008a61 	.word	0x08008a61
 80089fc:	080089dd 	.word	0x080089dd
 8008a00:	080089dd 	.word	0x080089dd
 8008a04:	080089dd 	.word	0x080089dd
 8008a08:	080089dd 	.word	0x080089dd
 8008a0c:	08008a61 	.word	0x08008a61
 8008a10:	080089dd 	.word	0x080089dd
 8008a14:	080089dd 	.word	0x080089dd
 8008a18:	080089dd 	.word	0x080089dd
 8008a1c:	080089dd 	.word	0x080089dd
 8008a20:	08008b61 	.word	0x08008b61
 8008a24:	08008a8b 	.word	0x08008a8b
 8008a28:	08008b1b 	.word	0x08008b1b
 8008a2c:	080089dd 	.word	0x080089dd
 8008a30:	080089dd 	.word	0x080089dd
 8008a34:	08008b83 	.word	0x08008b83
 8008a38:	080089dd 	.word	0x080089dd
 8008a3c:	08008a8b 	.word	0x08008a8b
 8008a40:	080089dd 	.word	0x080089dd
 8008a44:	080089dd 	.word	0x080089dd
 8008a48:	08008b23 	.word	0x08008b23
 8008a4c:	6833      	ldr	r3, [r6, #0]
 8008a4e:	1d1a      	adds	r2, r3, #4
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6032      	str	r2, [r6, #0]
 8008a54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e09d      	b.n	8008b9c <_printf_i+0x1e8>
 8008a60:	6833      	ldr	r3, [r6, #0]
 8008a62:	6820      	ldr	r0, [r4, #0]
 8008a64:	1d19      	adds	r1, r3, #4
 8008a66:	6031      	str	r1, [r6, #0]
 8008a68:	0606      	lsls	r6, r0, #24
 8008a6a:	d501      	bpl.n	8008a70 <_printf_i+0xbc>
 8008a6c:	681d      	ldr	r5, [r3, #0]
 8008a6e:	e003      	b.n	8008a78 <_printf_i+0xc4>
 8008a70:	0645      	lsls	r5, r0, #25
 8008a72:	d5fb      	bpl.n	8008a6c <_printf_i+0xb8>
 8008a74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a78:	2d00      	cmp	r5, #0
 8008a7a:	da03      	bge.n	8008a84 <_printf_i+0xd0>
 8008a7c:	232d      	movs	r3, #45	@ 0x2d
 8008a7e:	426d      	negs	r5, r5
 8008a80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a84:	4859      	ldr	r0, [pc, #356]	@ (8008bec <_printf_i+0x238>)
 8008a86:	230a      	movs	r3, #10
 8008a88:	e011      	b.n	8008aae <_printf_i+0xfa>
 8008a8a:	6821      	ldr	r1, [r4, #0]
 8008a8c:	6833      	ldr	r3, [r6, #0]
 8008a8e:	0608      	lsls	r0, r1, #24
 8008a90:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a94:	d402      	bmi.n	8008a9c <_printf_i+0xe8>
 8008a96:	0649      	lsls	r1, r1, #25
 8008a98:	bf48      	it	mi
 8008a9a:	b2ad      	uxthmi	r5, r5
 8008a9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a9e:	4853      	ldr	r0, [pc, #332]	@ (8008bec <_printf_i+0x238>)
 8008aa0:	6033      	str	r3, [r6, #0]
 8008aa2:	bf14      	ite	ne
 8008aa4:	230a      	movne	r3, #10
 8008aa6:	2308      	moveq	r3, #8
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008aae:	6866      	ldr	r6, [r4, #4]
 8008ab0:	60a6      	str	r6, [r4, #8]
 8008ab2:	2e00      	cmp	r6, #0
 8008ab4:	bfa2      	ittt	ge
 8008ab6:	6821      	ldrge	r1, [r4, #0]
 8008ab8:	f021 0104 	bicge.w	r1, r1, #4
 8008abc:	6021      	strge	r1, [r4, #0]
 8008abe:	b90d      	cbnz	r5, 8008ac4 <_printf_i+0x110>
 8008ac0:	2e00      	cmp	r6, #0
 8008ac2:	d04b      	beq.n	8008b5c <_printf_i+0x1a8>
 8008ac4:	4616      	mov	r6, r2
 8008ac6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008aca:	fb03 5711 	mls	r7, r3, r1, r5
 8008ace:	5dc7      	ldrb	r7, [r0, r7]
 8008ad0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ad4:	462f      	mov	r7, r5
 8008ad6:	42bb      	cmp	r3, r7
 8008ad8:	460d      	mov	r5, r1
 8008ada:	d9f4      	bls.n	8008ac6 <_printf_i+0x112>
 8008adc:	2b08      	cmp	r3, #8
 8008ade:	d10b      	bne.n	8008af8 <_printf_i+0x144>
 8008ae0:	6823      	ldr	r3, [r4, #0]
 8008ae2:	07df      	lsls	r7, r3, #31
 8008ae4:	d508      	bpl.n	8008af8 <_printf_i+0x144>
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	6861      	ldr	r1, [r4, #4]
 8008aea:	4299      	cmp	r1, r3
 8008aec:	bfde      	ittt	le
 8008aee:	2330      	movle	r3, #48	@ 0x30
 8008af0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008af4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008af8:	1b92      	subs	r2, r2, r6
 8008afa:	6122      	str	r2, [r4, #16]
 8008afc:	f8cd a000 	str.w	sl, [sp]
 8008b00:	464b      	mov	r3, r9
 8008b02:	aa03      	add	r2, sp, #12
 8008b04:	4621      	mov	r1, r4
 8008b06:	4640      	mov	r0, r8
 8008b08:	f7ff fee6 	bl	80088d8 <_printf_common>
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d14a      	bne.n	8008ba6 <_printf_i+0x1f2>
 8008b10:	f04f 30ff 	mov.w	r0, #4294967295
 8008b14:	b004      	add	sp, #16
 8008b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	f043 0320 	orr.w	r3, r3, #32
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	4833      	ldr	r0, [pc, #204]	@ (8008bf0 <_printf_i+0x23c>)
 8008b24:	2778      	movs	r7, #120	@ 0x78
 8008b26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	6831      	ldr	r1, [r6, #0]
 8008b2e:	061f      	lsls	r7, r3, #24
 8008b30:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b34:	d402      	bmi.n	8008b3c <_printf_i+0x188>
 8008b36:	065f      	lsls	r7, r3, #25
 8008b38:	bf48      	it	mi
 8008b3a:	b2ad      	uxthmi	r5, r5
 8008b3c:	6031      	str	r1, [r6, #0]
 8008b3e:	07d9      	lsls	r1, r3, #31
 8008b40:	bf44      	itt	mi
 8008b42:	f043 0320 	orrmi.w	r3, r3, #32
 8008b46:	6023      	strmi	r3, [r4, #0]
 8008b48:	b11d      	cbz	r5, 8008b52 <_printf_i+0x19e>
 8008b4a:	2310      	movs	r3, #16
 8008b4c:	e7ac      	b.n	8008aa8 <_printf_i+0xf4>
 8008b4e:	4827      	ldr	r0, [pc, #156]	@ (8008bec <_printf_i+0x238>)
 8008b50:	e7e9      	b.n	8008b26 <_printf_i+0x172>
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	f023 0320 	bic.w	r3, r3, #32
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	e7f6      	b.n	8008b4a <_printf_i+0x196>
 8008b5c:	4616      	mov	r6, r2
 8008b5e:	e7bd      	b.n	8008adc <_printf_i+0x128>
 8008b60:	6833      	ldr	r3, [r6, #0]
 8008b62:	6825      	ldr	r5, [r4, #0]
 8008b64:	6961      	ldr	r1, [r4, #20]
 8008b66:	1d18      	adds	r0, r3, #4
 8008b68:	6030      	str	r0, [r6, #0]
 8008b6a:	062e      	lsls	r6, r5, #24
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	d501      	bpl.n	8008b74 <_printf_i+0x1c0>
 8008b70:	6019      	str	r1, [r3, #0]
 8008b72:	e002      	b.n	8008b7a <_printf_i+0x1c6>
 8008b74:	0668      	lsls	r0, r5, #25
 8008b76:	d5fb      	bpl.n	8008b70 <_printf_i+0x1bc>
 8008b78:	8019      	strh	r1, [r3, #0]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	6123      	str	r3, [r4, #16]
 8008b7e:	4616      	mov	r6, r2
 8008b80:	e7bc      	b.n	8008afc <_printf_i+0x148>
 8008b82:	6833      	ldr	r3, [r6, #0]
 8008b84:	1d1a      	adds	r2, r3, #4
 8008b86:	6032      	str	r2, [r6, #0]
 8008b88:	681e      	ldr	r6, [r3, #0]
 8008b8a:	6862      	ldr	r2, [r4, #4]
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f7f7 fb76 	bl	8000280 <memchr>
 8008b94:	b108      	cbz	r0, 8008b9a <_printf_i+0x1e6>
 8008b96:	1b80      	subs	r0, r0, r6
 8008b98:	6060      	str	r0, [r4, #4]
 8008b9a:	6863      	ldr	r3, [r4, #4]
 8008b9c:	6123      	str	r3, [r4, #16]
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ba4:	e7aa      	b.n	8008afc <_printf_i+0x148>
 8008ba6:	6923      	ldr	r3, [r4, #16]
 8008ba8:	4632      	mov	r2, r6
 8008baa:	4649      	mov	r1, r9
 8008bac:	4640      	mov	r0, r8
 8008bae:	47d0      	blx	sl
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d0ad      	beq.n	8008b10 <_printf_i+0x15c>
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	079b      	lsls	r3, r3, #30
 8008bb8:	d413      	bmi.n	8008be2 <_printf_i+0x22e>
 8008bba:	68e0      	ldr	r0, [r4, #12]
 8008bbc:	9b03      	ldr	r3, [sp, #12]
 8008bbe:	4298      	cmp	r0, r3
 8008bc0:	bfb8      	it	lt
 8008bc2:	4618      	movlt	r0, r3
 8008bc4:	e7a6      	b.n	8008b14 <_printf_i+0x160>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	4632      	mov	r2, r6
 8008bca:	4649      	mov	r1, r9
 8008bcc:	4640      	mov	r0, r8
 8008bce:	47d0      	blx	sl
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d09d      	beq.n	8008b10 <_printf_i+0x15c>
 8008bd4:	3501      	adds	r5, #1
 8008bd6:	68e3      	ldr	r3, [r4, #12]
 8008bd8:	9903      	ldr	r1, [sp, #12]
 8008bda:	1a5b      	subs	r3, r3, r1
 8008bdc:	42ab      	cmp	r3, r5
 8008bde:	dcf2      	bgt.n	8008bc6 <_printf_i+0x212>
 8008be0:	e7eb      	b.n	8008bba <_printf_i+0x206>
 8008be2:	2500      	movs	r5, #0
 8008be4:	f104 0619 	add.w	r6, r4, #25
 8008be8:	e7f5      	b.n	8008bd6 <_printf_i+0x222>
 8008bea:	bf00      	nop
 8008bec:	08009650 	.word	0x08009650
 8008bf0:	08009661 	.word	0x08009661

08008bf4 <__sflush_r>:
 8008bf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bfc:	0716      	lsls	r6, r2, #28
 8008bfe:	4605      	mov	r5, r0
 8008c00:	460c      	mov	r4, r1
 8008c02:	d454      	bmi.n	8008cae <__sflush_r+0xba>
 8008c04:	684b      	ldr	r3, [r1, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	dc02      	bgt.n	8008c10 <__sflush_r+0x1c>
 8008c0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	dd48      	ble.n	8008ca2 <__sflush_r+0xae>
 8008c10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c12:	2e00      	cmp	r6, #0
 8008c14:	d045      	beq.n	8008ca2 <__sflush_r+0xae>
 8008c16:	2300      	movs	r3, #0
 8008c18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c1c:	682f      	ldr	r7, [r5, #0]
 8008c1e:	6a21      	ldr	r1, [r4, #32]
 8008c20:	602b      	str	r3, [r5, #0]
 8008c22:	d030      	beq.n	8008c86 <__sflush_r+0x92>
 8008c24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	0759      	lsls	r1, r3, #29
 8008c2a:	d505      	bpl.n	8008c38 <__sflush_r+0x44>
 8008c2c:	6863      	ldr	r3, [r4, #4]
 8008c2e:	1ad2      	subs	r2, r2, r3
 8008c30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c32:	b10b      	cbz	r3, 8008c38 <__sflush_r+0x44>
 8008c34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c36:	1ad2      	subs	r2, r2, r3
 8008c38:	2300      	movs	r3, #0
 8008c3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c3c:	6a21      	ldr	r1, [r4, #32]
 8008c3e:	4628      	mov	r0, r5
 8008c40:	47b0      	blx	r6
 8008c42:	1c43      	adds	r3, r0, #1
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	d106      	bne.n	8008c56 <__sflush_r+0x62>
 8008c48:	6829      	ldr	r1, [r5, #0]
 8008c4a:	291d      	cmp	r1, #29
 8008c4c:	d82b      	bhi.n	8008ca6 <__sflush_r+0xb2>
 8008c4e:	4a2a      	ldr	r2, [pc, #168]	@ (8008cf8 <__sflush_r+0x104>)
 8008c50:	410a      	asrs	r2, r1
 8008c52:	07d6      	lsls	r6, r2, #31
 8008c54:	d427      	bmi.n	8008ca6 <__sflush_r+0xb2>
 8008c56:	2200      	movs	r2, #0
 8008c58:	6062      	str	r2, [r4, #4]
 8008c5a:	04d9      	lsls	r1, r3, #19
 8008c5c:	6922      	ldr	r2, [r4, #16]
 8008c5e:	6022      	str	r2, [r4, #0]
 8008c60:	d504      	bpl.n	8008c6c <__sflush_r+0x78>
 8008c62:	1c42      	adds	r2, r0, #1
 8008c64:	d101      	bne.n	8008c6a <__sflush_r+0x76>
 8008c66:	682b      	ldr	r3, [r5, #0]
 8008c68:	b903      	cbnz	r3, 8008c6c <__sflush_r+0x78>
 8008c6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c6e:	602f      	str	r7, [r5, #0]
 8008c70:	b1b9      	cbz	r1, 8008ca2 <__sflush_r+0xae>
 8008c72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c76:	4299      	cmp	r1, r3
 8008c78:	d002      	beq.n	8008c80 <__sflush_r+0x8c>
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	f7ff fbd4 	bl	8008428 <_free_r>
 8008c80:	2300      	movs	r3, #0
 8008c82:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c84:	e00d      	b.n	8008ca2 <__sflush_r+0xae>
 8008c86:	2301      	movs	r3, #1
 8008c88:	4628      	mov	r0, r5
 8008c8a:	47b0      	blx	r6
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	1c50      	adds	r0, r2, #1
 8008c90:	d1c9      	bne.n	8008c26 <__sflush_r+0x32>
 8008c92:	682b      	ldr	r3, [r5, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d0c6      	beq.n	8008c26 <__sflush_r+0x32>
 8008c98:	2b1d      	cmp	r3, #29
 8008c9a:	d001      	beq.n	8008ca0 <__sflush_r+0xac>
 8008c9c:	2b16      	cmp	r3, #22
 8008c9e:	d11e      	bne.n	8008cde <__sflush_r+0xea>
 8008ca0:	602f      	str	r7, [r5, #0]
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	e022      	b.n	8008cec <__sflush_r+0xf8>
 8008ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008caa:	b21b      	sxth	r3, r3
 8008cac:	e01b      	b.n	8008ce6 <__sflush_r+0xf2>
 8008cae:	690f      	ldr	r7, [r1, #16]
 8008cb0:	2f00      	cmp	r7, #0
 8008cb2:	d0f6      	beq.n	8008ca2 <__sflush_r+0xae>
 8008cb4:	0793      	lsls	r3, r2, #30
 8008cb6:	680e      	ldr	r6, [r1, #0]
 8008cb8:	bf08      	it	eq
 8008cba:	694b      	ldreq	r3, [r1, #20]
 8008cbc:	600f      	str	r7, [r1, #0]
 8008cbe:	bf18      	it	ne
 8008cc0:	2300      	movne	r3, #0
 8008cc2:	eba6 0807 	sub.w	r8, r6, r7
 8008cc6:	608b      	str	r3, [r1, #8]
 8008cc8:	f1b8 0f00 	cmp.w	r8, #0
 8008ccc:	dde9      	ble.n	8008ca2 <__sflush_r+0xae>
 8008cce:	6a21      	ldr	r1, [r4, #32]
 8008cd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008cd2:	4643      	mov	r3, r8
 8008cd4:	463a      	mov	r2, r7
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	47b0      	blx	r6
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	dc08      	bgt.n	8008cf0 <__sflush_r+0xfc>
 8008cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ce6:	81a3      	strh	r3, [r4, #12]
 8008ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf0:	4407      	add	r7, r0
 8008cf2:	eba8 0800 	sub.w	r8, r8, r0
 8008cf6:	e7e7      	b.n	8008cc8 <__sflush_r+0xd4>
 8008cf8:	dfbffffe 	.word	0xdfbffffe

08008cfc <_fflush_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	690b      	ldr	r3, [r1, #16]
 8008d00:	4605      	mov	r5, r0
 8008d02:	460c      	mov	r4, r1
 8008d04:	b913      	cbnz	r3, 8008d0c <_fflush_r+0x10>
 8008d06:	2500      	movs	r5, #0
 8008d08:	4628      	mov	r0, r5
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}
 8008d0c:	b118      	cbz	r0, 8008d16 <_fflush_r+0x1a>
 8008d0e:	6a03      	ldr	r3, [r0, #32]
 8008d10:	b90b      	cbnz	r3, 8008d16 <_fflush_r+0x1a>
 8008d12:	f7ff fa49 	bl	80081a8 <__sinit>
 8008d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d0f3      	beq.n	8008d06 <_fflush_r+0xa>
 8008d1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d20:	07d0      	lsls	r0, r2, #31
 8008d22:	d404      	bmi.n	8008d2e <_fflush_r+0x32>
 8008d24:	0599      	lsls	r1, r3, #22
 8008d26:	d402      	bmi.n	8008d2e <_fflush_r+0x32>
 8008d28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d2a:	f7ff fb4e 	bl	80083ca <__retarget_lock_acquire_recursive>
 8008d2e:	4628      	mov	r0, r5
 8008d30:	4621      	mov	r1, r4
 8008d32:	f7ff ff5f 	bl	8008bf4 <__sflush_r>
 8008d36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d38:	07da      	lsls	r2, r3, #31
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	d4e4      	bmi.n	8008d08 <_fflush_r+0xc>
 8008d3e:	89a3      	ldrh	r3, [r4, #12]
 8008d40:	059b      	lsls	r3, r3, #22
 8008d42:	d4e1      	bmi.n	8008d08 <_fflush_r+0xc>
 8008d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d46:	f7ff fb41 	bl	80083cc <__retarget_lock_release_recursive>
 8008d4a:	e7dd      	b.n	8008d08 <_fflush_r+0xc>

08008d4c <fiprintf>:
 8008d4c:	b40e      	push	{r1, r2, r3}
 8008d4e:	b503      	push	{r0, r1, lr}
 8008d50:	4601      	mov	r1, r0
 8008d52:	ab03      	add	r3, sp, #12
 8008d54:	4805      	ldr	r0, [pc, #20]	@ (8008d6c <fiprintf+0x20>)
 8008d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d5a:	6800      	ldr	r0, [r0, #0]
 8008d5c:	9301      	str	r3, [sp, #4]
 8008d5e:	f000 f88f 	bl	8008e80 <_vfiprintf_r>
 8008d62:	b002      	add	sp, #8
 8008d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d68:	b003      	add	sp, #12
 8008d6a:	4770      	bx	lr
 8008d6c:	20000020 	.word	0x20000020

08008d70 <memmove>:
 8008d70:	4288      	cmp	r0, r1
 8008d72:	b510      	push	{r4, lr}
 8008d74:	eb01 0402 	add.w	r4, r1, r2
 8008d78:	d902      	bls.n	8008d80 <memmove+0x10>
 8008d7a:	4284      	cmp	r4, r0
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	d807      	bhi.n	8008d90 <memmove+0x20>
 8008d80:	1e43      	subs	r3, r0, #1
 8008d82:	42a1      	cmp	r1, r4
 8008d84:	d008      	beq.n	8008d98 <memmove+0x28>
 8008d86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d8e:	e7f8      	b.n	8008d82 <memmove+0x12>
 8008d90:	4402      	add	r2, r0
 8008d92:	4601      	mov	r1, r0
 8008d94:	428a      	cmp	r2, r1
 8008d96:	d100      	bne.n	8008d9a <memmove+0x2a>
 8008d98:	bd10      	pop	{r4, pc}
 8008d9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008da2:	e7f7      	b.n	8008d94 <memmove+0x24>

08008da4 <_sbrk_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	4d06      	ldr	r5, [pc, #24]	@ (8008dc0 <_sbrk_r+0x1c>)
 8008da8:	2300      	movs	r3, #0
 8008daa:	4604      	mov	r4, r0
 8008dac:	4608      	mov	r0, r1
 8008dae:	602b      	str	r3, [r5, #0]
 8008db0:	f7f8 f8d2 	bl	8000f58 <_sbrk>
 8008db4:	1c43      	adds	r3, r0, #1
 8008db6:	d102      	bne.n	8008dbe <_sbrk_r+0x1a>
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	b103      	cbz	r3, 8008dbe <_sbrk_r+0x1a>
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
 8008dc0:	2001478c 	.word	0x2001478c

08008dc4 <abort>:
 8008dc4:	b508      	push	{r3, lr}
 8008dc6:	2006      	movs	r0, #6
 8008dc8:	f000 fa2e 	bl	8009228 <raise>
 8008dcc:	2001      	movs	r0, #1
 8008dce:	f7f8 f867 	bl	8000ea0 <_exit>

08008dd2 <_realloc_r>:
 8008dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd6:	4680      	mov	r8, r0
 8008dd8:	4615      	mov	r5, r2
 8008dda:	460c      	mov	r4, r1
 8008ddc:	b921      	cbnz	r1, 8008de8 <_realloc_r+0x16>
 8008dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008de2:	4611      	mov	r1, r2
 8008de4:	f7ff bb94 	b.w	8008510 <_malloc_r>
 8008de8:	b92a      	cbnz	r2, 8008df6 <_realloc_r+0x24>
 8008dea:	f7ff fb1d 	bl	8008428 <_free_r>
 8008dee:	2400      	movs	r4, #0
 8008df0:	4620      	mov	r0, r4
 8008df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008df6:	f000 fa33 	bl	8009260 <_malloc_usable_size_r>
 8008dfa:	4285      	cmp	r5, r0
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	d802      	bhi.n	8008e06 <_realloc_r+0x34>
 8008e00:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008e04:	d8f4      	bhi.n	8008df0 <_realloc_r+0x1e>
 8008e06:	4629      	mov	r1, r5
 8008e08:	4640      	mov	r0, r8
 8008e0a:	f7ff fb81 	bl	8008510 <_malloc_r>
 8008e0e:	4607      	mov	r7, r0
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d0ec      	beq.n	8008dee <_realloc_r+0x1c>
 8008e14:	42b5      	cmp	r5, r6
 8008e16:	462a      	mov	r2, r5
 8008e18:	4621      	mov	r1, r4
 8008e1a:	bf28      	it	cs
 8008e1c:	4632      	movcs	r2, r6
 8008e1e:	f7ff fad6 	bl	80083ce <memcpy>
 8008e22:	4621      	mov	r1, r4
 8008e24:	4640      	mov	r0, r8
 8008e26:	f7ff faff 	bl	8008428 <_free_r>
 8008e2a:	463c      	mov	r4, r7
 8008e2c:	e7e0      	b.n	8008df0 <_realloc_r+0x1e>

08008e2e <__sfputc_r>:
 8008e2e:	6893      	ldr	r3, [r2, #8]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	b410      	push	{r4}
 8008e36:	6093      	str	r3, [r2, #8]
 8008e38:	da08      	bge.n	8008e4c <__sfputc_r+0x1e>
 8008e3a:	6994      	ldr	r4, [r2, #24]
 8008e3c:	42a3      	cmp	r3, r4
 8008e3e:	db01      	blt.n	8008e44 <__sfputc_r+0x16>
 8008e40:	290a      	cmp	r1, #10
 8008e42:	d103      	bne.n	8008e4c <__sfputc_r+0x1e>
 8008e44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e48:	f000 b932 	b.w	80090b0 <__swbuf_r>
 8008e4c:	6813      	ldr	r3, [r2, #0]
 8008e4e:	1c58      	adds	r0, r3, #1
 8008e50:	6010      	str	r0, [r2, #0]
 8008e52:	7019      	strb	r1, [r3, #0]
 8008e54:	4608      	mov	r0, r1
 8008e56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <__sfputs_r>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	4606      	mov	r6, r0
 8008e60:	460f      	mov	r7, r1
 8008e62:	4614      	mov	r4, r2
 8008e64:	18d5      	adds	r5, r2, r3
 8008e66:	42ac      	cmp	r4, r5
 8008e68:	d101      	bne.n	8008e6e <__sfputs_r+0x12>
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	e007      	b.n	8008e7e <__sfputs_r+0x22>
 8008e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e72:	463a      	mov	r2, r7
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7ff ffda 	bl	8008e2e <__sfputc_r>
 8008e7a:	1c43      	adds	r3, r0, #1
 8008e7c:	d1f3      	bne.n	8008e66 <__sfputs_r+0xa>
 8008e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e80 <_vfiprintf_r>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	460d      	mov	r5, r1
 8008e86:	b09d      	sub	sp, #116	@ 0x74
 8008e88:	4614      	mov	r4, r2
 8008e8a:	4698      	mov	r8, r3
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	b118      	cbz	r0, 8008e98 <_vfiprintf_r+0x18>
 8008e90:	6a03      	ldr	r3, [r0, #32]
 8008e92:	b90b      	cbnz	r3, 8008e98 <_vfiprintf_r+0x18>
 8008e94:	f7ff f988 	bl	80081a8 <__sinit>
 8008e98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e9a:	07d9      	lsls	r1, r3, #31
 8008e9c:	d405      	bmi.n	8008eaa <_vfiprintf_r+0x2a>
 8008e9e:	89ab      	ldrh	r3, [r5, #12]
 8008ea0:	059a      	lsls	r2, r3, #22
 8008ea2:	d402      	bmi.n	8008eaa <_vfiprintf_r+0x2a>
 8008ea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ea6:	f7ff fa90 	bl	80083ca <__retarget_lock_acquire_recursive>
 8008eaa:	89ab      	ldrh	r3, [r5, #12]
 8008eac:	071b      	lsls	r3, r3, #28
 8008eae:	d501      	bpl.n	8008eb4 <_vfiprintf_r+0x34>
 8008eb0:	692b      	ldr	r3, [r5, #16]
 8008eb2:	b99b      	cbnz	r3, 8008edc <_vfiprintf_r+0x5c>
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f000 f938 	bl	800912c <__swsetup_r>
 8008ebc:	b170      	cbz	r0, 8008edc <_vfiprintf_r+0x5c>
 8008ebe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ec0:	07dc      	lsls	r4, r3, #31
 8008ec2:	d504      	bpl.n	8008ece <_vfiprintf_r+0x4e>
 8008ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec8:	b01d      	add	sp, #116	@ 0x74
 8008eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ece:	89ab      	ldrh	r3, [r5, #12]
 8008ed0:	0598      	lsls	r0, r3, #22
 8008ed2:	d4f7      	bmi.n	8008ec4 <_vfiprintf_r+0x44>
 8008ed4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ed6:	f7ff fa79 	bl	80083cc <__retarget_lock_release_recursive>
 8008eda:	e7f3      	b.n	8008ec4 <_vfiprintf_r+0x44>
 8008edc:	2300      	movs	r3, #0
 8008ede:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ee0:	2320      	movs	r3, #32
 8008ee2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ee6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eea:	2330      	movs	r3, #48	@ 0x30
 8008eec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800909c <_vfiprintf_r+0x21c>
 8008ef0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ef4:	f04f 0901 	mov.w	r9, #1
 8008ef8:	4623      	mov	r3, r4
 8008efa:	469a      	mov	sl, r3
 8008efc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f00:	b10a      	cbz	r2, 8008f06 <_vfiprintf_r+0x86>
 8008f02:	2a25      	cmp	r2, #37	@ 0x25
 8008f04:	d1f9      	bne.n	8008efa <_vfiprintf_r+0x7a>
 8008f06:	ebba 0b04 	subs.w	fp, sl, r4
 8008f0a:	d00b      	beq.n	8008f24 <_vfiprintf_r+0xa4>
 8008f0c:	465b      	mov	r3, fp
 8008f0e:	4622      	mov	r2, r4
 8008f10:	4629      	mov	r1, r5
 8008f12:	4630      	mov	r0, r6
 8008f14:	f7ff ffa2 	bl	8008e5c <__sfputs_r>
 8008f18:	3001      	adds	r0, #1
 8008f1a:	f000 80a7 	beq.w	800906c <_vfiprintf_r+0x1ec>
 8008f1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f20:	445a      	add	r2, fp
 8008f22:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f24:	f89a 3000 	ldrb.w	r3, [sl]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 809f 	beq.w	800906c <_vfiprintf_r+0x1ec>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f04f 32ff 	mov.w	r2, #4294967295
 8008f34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f38:	f10a 0a01 	add.w	sl, sl, #1
 8008f3c:	9304      	str	r3, [sp, #16]
 8008f3e:	9307      	str	r3, [sp, #28]
 8008f40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f44:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f46:	4654      	mov	r4, sl
 8008f48:	2205      	movs	r2, #5
 8008f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f4e:	4853      	ldr	r0, [pc, #332]	@ (800909c <_vfiprintf_r+0x21c>)
 8008f50:	f7f7 f996 	bl	8000280 <memchr>
 8008f54:	9a04      	ldr	r2, [sp, #16]
 8008f56:	b9d8      	cbnz	r0, 8008f90 <_vfiprintf_r+0x110>
 8008f58:	06d1      	lsls	r1, r2, #27
 8008f5a:	bf44      	itt	mi
 8008f5c:	2320      	movmi	r3, #32
 8008f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f62:	0713      	lsls	r3, r2, #28
 8008f64:	bf44      	itt	mi
 8008f66:	232b      	movmi	r3, #43	@ 0x2b
 8008f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f70:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f72:	d015      	beq.n	8008fa0 <_vfiprintf_r+0x120>
 8008f74:	9a07      	ldr	r2, [sp, #28]
 8008f76:	4654      	mov	r4, sl
 8008f78:	2000      	movs	r0, #0
 8008f7a:	f04f 0c0a 	mov.w	ip, #10
 8008f7e:	4621      	mov	r1, r4
 8008f80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f84:	3b30      	subs	r3, #48	@ 0x30
 8008f86:	2b09      	cmp	r3, #9
 8008f88:	d94b      	bls.n	8009022 <_vfiprintf_r+0x1a2>
 8008f8a:	b1b0      	cbz	r0, 8008fba <_vfiprintf_r+0x13a>
 8008f8c:	9207      	str	r2, [sp, #28]
 8008f8e:	e014      	b.n	8008fba <_vfiprintf_r+0x13a>
 8008f90:	eba0 0308 	sub.w	r3, r0, r8
 8008f94:	fa09 f303 	lsl.w	r3, r9, r3
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	9304      	str	r3, [sp, #16]
 8008f9c:	46a2      	mov	sl, r4
 8008f9e:	e7d2      	b.n	8008f46 <_vfiprintf_r+0xc6>
 8008fa0:	9b03      	ldr	r3, [sp, #12]
 8008fa2:	1d19      	adds	r1, r3, #4
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	9103      	str	r1, [sp, #12]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	bfbb      	ittet	lt
 8008fac:	425b      	neglt	r3, r3
 8008fae:	f042 0202 	orrlt.w	r2, r2, #2
 8008fb2:	9307      	strge	r3, [sp, #28]
 8008fb4:	9307      	strlt	r3, [sp, #28]
 8008fb6:	bfb8      	it	lt
 8008fb8:	9204      	strlt	r2, [sp, #16]
 8008fba:	7823      	ldrb	r3, [r4, #0]
 8008fbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fbe:	d10a      	bne.n	8008fd6 <_vfiprintf_r+0x156>
 8008fc0:	7863      	ldrb	r3, [r4, #1]
 8008fc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fc4:	d132      	bne.n	800902c <_vfiprintf_r+0x1ac>
 8008fc6:	9b03      	ldr	r3, [sp, #12]
 8008fc8:	1d1a      	adds	r2, r3, #4
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	9203      	str	r2, [sp, #12]
 8008fce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fd2:	3402      	adds	r4, #2
 8008fd4:	9305      	str	r3, [sp, #20]
 8008fd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80090ac <_vfiprintf_r+0x22c>
 8008fda:	7821      	ldrb	r1, [r4, #0]
 8008fdc:	2203      	movs	r2, #3
 8008fde:	4650      	mov	r0, sl
 8008fe0:	f7f7 f94e 	bl	8000280 <memchr>
 8008fe4:	b138      	cbz	r0, 8008ff6 <_vfiprintf_r+0x176>
 8008fe6:	9b04      	ldr	r3, [sp, #16]
 8008fe8:	eba0 000a 	sub.w	r0, r0, sl
 8008fec:	2240      	movs	r2, #64	@ 0x40
 8008fee:	4082      	lsls	r2, r0
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	3401      	adds	r4, #1
 8008ff4:	9304      	str	r3, [sp, #16]
 8008ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ffa:	4829      	ldr	r0, [pc, #164]	@ (80090a0 <_vfiprintf_r+0x220>)
 8008ffc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009000:	2206      	movs	r2, #6
 8009002:	f7f7 f93d 	bl	8000280 <memchr>
 8009006:	2800      	cmp	r0, #0
 8009008:	d03f      	beq.n	800908a <_vfiprintf_r+0x20a>
 800900a:	4b26      	ldr	r3, [pc, #152]	@ (80090a4 <_vfiprintf_r+0x224>)
 800900c:	bb1b      	cbnz	r3, 8009056 <_vfiprintf_r+0x1d6>
 800900e:	9b03      	ldr	r3, [sp, #12]
 8009010:	3307      	adds	r3, #7
 8009012:	f023 0307 	bic.w	r3, r3, #7
 8009016:	3308      	adds	r3, #8
 8009018:	9303      	str	r3, [sp, #12]
 800901a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800901c:	443b      	add	r3, r7
 800901e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009020:	e76a      	b.n	8008ef8 <_vfiprintf_r+0x78>
 8009022:	fb0c 3202 	mla	r2, ip, r2, r3
 8009026:	460c      	mov	r4, r1
 8009028:	2001      	movs	r0, #1
 800902a:	e7a8      	b.n	8008f7e <_vfiprintf_r+0xfe>
 800902c:	2300      	movs	r3, #0
 800902e:	3401      	adds	r4, #1
 8009030:	9305      	str	r3, [sp, #20]
 8009032:	4619      	mov	r1, r3
 8009034:	f04f 0c0a 	mov.w	ip, #10
 8009038:	4620      	mov	r0, r4
 800903a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800903e:	3a30      	subs	r2, #48	@ 0x30
 8009040:	2a09      	cmp	r2, #9
 8009042:	d903      	bls.n	800904c <_vfiprintf_r+0x1cc>
 8009044:	2b00      	cmp	r3, #0
 8009046:	d0c6      	beq.n	8008fd6 <_vfiprintf_r+0x156>
 8009048:	9105      	str	r1, [sp, #20]
 800904a:	e7c4      	b.n	8008fd6 <_vfiprintf_r+0x156>
 800904c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009050:	4604      	mov	r4, r0
 8009052:	2301      	movs	r3, #1
 8009054:	e7f0      	b.n	8009038 <_vfiprintf_r+0x1b8>
 8009056:	ab03      	add	r3, sp, #12
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	462a      	mov	r2, r5
 800905c:	4b12      	ldr	r3, [pc, #72]	@ (80090a8 <_vfiprintf_r+0x228>)
 800905e:	a904      	add	r1, sp, #16
 8009060:	4630      	mov	r0, r6
 8009062:	f3af 8000 	nop.w
 8009066:	4607      	mov	r7, r0
 8009068:	1c78      	adds	r0, r7, #1
 800906a:	d1d6      	bne.n	800901a <_vfiprintf_r+0x19a>
 800906c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800906e:	07d9      	lsls	r1, r3, #31
 8009070:	d405      	bmi.n	800907e <_vfiprintf_r+0x1fe>
 8009072:	89ab      	ldrh	r3, [r5, #12]
 8009074:	059a      	lsls	r2, r3, #22
 8009076:	d402      	bmi.n	800907e <_vfiprintf_r+0x1fe>
 8009078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800907a:	f7ff f9a7 	bl	80083cc <__retarget_lock_release_recursive>
 800907e:	89ab      	ldrh	r3, [r5, #12]
 8009080:	065b      	lsls	r3, r3, #25
 8009082:	f53f af1f 	bmi.w	8008ec4 <_vfiprintf_r+0x44>
 8009086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009088:	e71e      	b.n	8008ec8 <_vfiprintf_r+0x48>
 800908a:	ab03      	add	r3, sp, #12
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	462a      	mov	r2, r5
 8009090:	4b05      	ldr	r3, [pc, #20]	@ (80090a8 <_vfiprintf_r+0x228>)
 8009092:	a904      	add	r1, sp, #16
 8009094:	4630      	mov	r0, r6
 8009096:	f7ff fc8d 	bl	80089b4 <_printf_i>
 800909a:	e7e4      	b.n	8009066 <_vfiprintf_r+0x1e6>
 800909c:	0800963f 	.word	0x0800963f
 80090a0:	08009649 	.word	0x08009649
 80090a4:	00000000 	.word	0x00000000
 80090a8:	08008e5d 	.word	0x08008e5d
 80090ac:	08009645 	.word	0x08009645

080090b0 <__swbuf_r>:
 80090b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b2:	460e      	mov	r6, r1
 80090b4:	4614      	mov	r4, r2
 80090b6:	4605      	mov	r5, r0
 80090b8:	b118      	cbz	r0, 80090c2 <__swbuf_r+0x12>
 80090ba:	6a03      	ldr	r3, [r0, #32]
 80090bc:	b90b      	cbnz	r3, 80090c2 <__swbuf_r+0x12>
 80090be:	f7ff f873 	bl	80081a8 <__sinit>
 80090c2:	69a3      	ldr	r3, [r4, #24]
 80090c4:	60a3      	str	r3, [r4, #8]
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	071a      	lsls	r2, r3, #28
 80090ca:	d501      	bpl.n	80090d0 <__swbuf_r+0x20>
 80090cc:	6923      	ldr	r3, [r4, #16]
 80090ce:	b943      	cbnz	r3, 80090e2 <__swbuf_r+0x32>
 80090d0:	4621      	mov	r1, r4
 80090d2:	4628      	mov	r0, r5
 80090d4:	f000 f82a 	bl	800912c <__swsetup_r>
 80090d8:	b118      	cbz	r0, 80090e2 <__swbuf_r+0x32>
 80090da:	f04f 37ff 	mov.w	r7, #4294967295
 80090de:	4638      	mov	r0, r7
 80090e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	6922      	ldr	r2, [r4, #16]
 80090e6:	1a98      	subs	r0, r3, r2
 80090e8:	6963      	ldr	r3, [r4, #20]
 80090ea:	b2f6      	uxtb	r6, r6
 80090ec:	4283      	cmp	r3, r0
 80090ee:	4637      	mov	r7, r6
 80090f0:	dc05      	bgt.n	80090fe <__swbuf_r+0x4e>
 80090f2:	4621      	mov	r1, r4
 80090f4:	4628      	mov	r0, r5
 80090f6:	f7ff fe01 	bl	8008cfc <_fflush_r>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	d1ed      	bne.n	80090da <__swbuf_r+0x2a>
 80090fe:	68a3      	ldr	r3, [r4, #8]
 8009100:	3b01      	subs	r3, #1
 8009102:	60a3      	str	r3, [r4, #8]
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	1c5a      	adds	r2, r3, #1
 8009108:	6022      	str	r2, [r4, #0]
 800910a:	701e      	strb	r6, [r3, #0]
 800910c:	6962      	ldr	r2, [r4, #20]
 800910e:	1c43      	adds	r3, r0, #1
 8009110:	429a      	cmp	r2, r3
 8009112:	d004      	beq.n	800911e <__swbuf_r+0x6e>
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	07db      	lsls	r3, r3, #31
 8009118:	d5e1      	bpl.n	80090de <__swbuf_r+0x2e>
 800911a:	2e0a      	cmp	r6, #10
 800911c:	d1df      	bne.n	80090de <__swbuf_r+0x2e>
 800911e:	4621      	mov	r1, r4
 8009120:	4628      	mov	r0, r5
 8009122:	f7ff fdeb 	bl	8008cfc <_fflush_r>
 8009126:	2800      	cmp	r0, #0
 8009128:	d0d9      	beq.n	80090de <__swbuf_r+0x2e>
 800912a:	e7d6      	b.n	80090da <__swbuf_r+0x2a>

0800912c <__swsetup_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4b29      	ldr	r3, [pc, #164]	@ (80091d4 <__swsetup_r+0xa8>)
 8009130:	4605      	mov	r5, r0
 8009132:	6818      	ldr	r0, [r3, #0]
 8009134:	460c      	mov	r4, r1
 8009136:	b118      	cbz	r0, 8009140 <__swsetup_r+0x14>
 8009138:	6a03      	ldr	r3, [r0, #32]
 800913a:	b90b      	cbnz	r3, 8009140 <__swsetup_r+0x14>
 800913c:	f7ff f834 	bl	80081a8 <__sinit>
 8009140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009144:	0719      	lsls	r1, r3, #28
 8009146:	d422      	bmi.n	800918e <__swsetup_r+0x62>
 8009148:	06da      	lsls	r2, r3, #27
 800914a:	d407      	bmi.n	800915c <__swsetup_r+0x30>
 800914c:	2209      	movs	r2, #9
 800914e:	602a      	str	r2, [r5, #0]
 8009150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	f04f 30ff 	mov.w	r0, #4294967295
 800915a:	e033      	b.n	80091c4 <__swsetup_r+0x98>
 800915c:	0758      	lsls	r0, r3, #29
 800915e:	d512      	bpl.n	8009186 <__swsetup_r+0x5a>
 8009160:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009162:	b141      	cbz	r1, 8009176 <__swsetup_r+0x4a>
 8009164:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009168:	4299      	cmp	r1, r3
 800916a:	d002      	beq.n	8009172 <__swsetup_r+0x46>
 800916c:	4628      	mov	r0, r5
 800916e:	f7ff f95b 	bl	8008428 <_free_r>
 8009172:	2300      	movs	r3, #0
 8009174:	6363      	str	r3, [r4, #52]	@ 0x34
 8009176:	89a3      	ldrh	r3, [r4, #12]
 8009178:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800917c:	81a3      	strh	r3, [r4, #12]
 800917e:	2300      	movs	r3, #0
 8009180:	6063      	str	r3, [r4, #4]
 8009182:	6923      	ldr	r3, [r4, #16]
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	89a3      	ldrh	r3, [r4, #12]
 8009188:	f043 0308 	orr.w	r3, r3, #8
 800918c:	81a3      	strh	r3, [r4, #12]
 800918e:	6923      	ldr	r3, [r4, #16]
 8009190:	b94b      	cbnz	r3, 80091a6 <__swsetup_r+0x7a>
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800919c:	d003      	beq.n	80091a6 <__swsetup_r+0x7a>
 800919e:	4621      	mov	r1, r4
 80091a0:	4628      	mov	r0, r5
 80091a2:	f000 f88b 	bl	80092bc <__smakebuf_r>
 80091a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091aa:	f013 0201 	ands.w	r2, r3, #1
 80091ae:	d00a      	beq.n	80091c6 <__swsetup_r+0x9a>
 80091b0:	2200      	movs	r2, #0
 80091b2:	60a2      	str	r2, [r4, #8]
 80091b4:	6962      	ldr	r2, [r4, #20]
 80091b6:	4252      	negs	r2, r2
 80091b8:	61a2      	str	r2, [r4, #24]
 80091ba:	6922      	ldr	r2, [r4, #16]
 80091bc:	b942      	cbnz	r2, 80091d0 <__swsetup_r+0xa4>
 80091be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091c2:	d1c5      	bne.n	8009150 <__swsetup_r+0x24>
 80091c4:	bd38      	pop	{r3, r4, r5, pc}
 80091c6:	0799      	lsls	r1, r3, #30
 80091c8:	bf58      	it	pl
 80091ca:	6962      	ldrpl	r2, [r4, #20]
 80091cc:	60a2      	str	r2, [r4, #8]
 80091ce:	e7f4      	b.n	80091ba <__swsetup_r+0x8e>
 80091d0:	2000      	movs	r0, #0
 80091d2:	e7f7      	b.n	80091c4 <__swsetup_r+0x98>
 80091d4:	20000020 	.word	0x20000020

080091d8 <_raise_r>:
 80091d8:	291f      	cmp	r1, #31
 80091da:	b538      	push	{r3, r4, r5, lr}
 80091dc:	4605      	mov	r5, r0
 80091de:	460c      	mov	r4, r1
 80091e0:	d904      	bls.n	80091ec <_raise_r+0x14>
 80091e2:	2316      	movs	r3, #22
 80091e4:	6003      	str	r3, [r0, #0]
 80091e6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ea:	bd38      	pop	{r3, r4, r5, pc}
 80091ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80091ee:	b112      	cbz	r2, 80091f6 <_raise_r+0x1e>
 80091f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091f4:	b94b      	cbnz	r3, 800920a <_raise_r+0x32>
 80091f6:	4628      	mov	r0, r5
 80091f8:	f000 f830 	bl	800925c <_getpid_r>
 80091fc:	4622      	mov	r2, r4
 80091fe:	4601      	mov	r1, r0
 8009200:	4628      	mov	r0, r5
 8009202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009206:	f000 b817 	b.w	8009238 <_kill_r>
 800920a:	2b01      	cmp	r3, #1
 800920c:	d00a      	beq.n	8009224 <_raise_r+0x4c>
 800920e:	1c59      	adds	r1, r3, #1
 8009210:	d103      	bne.n	800921a <_raise_r+0x42>
 8009212:	2316      	movs	r3, #22
 8009214:	6003      	str	r3, [r0, #0]
 8009216:	2001      	movs	r0, #1
 8009218:	e7e7      	b.n	80091ea <_raise_r+0x12>
 800921a:	2100      	movs	r1, #0
 800921c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009220:	4620      	mov	r0, r4
 8009222:	4798      	blx	r3
 8009224:	2000      	movs	r0, #0
 8009226:	e7e0      	b.n	80091ea <_raise_r+0x12>

08009228 <raise>:
 8009228:	4b02      	ldr	r3, [pc, #8]	@ (8009234 <raise+0xc>)
 800922a:	4601      	mov	r1, r0
 800922c:	6818      	ldr	r0, [r3, #0]
 800922e:	f7ff bfd3 	b.w	80091d8 <_raise_r>
 8009232:	bf00      	nop
 8009234:	20000020 	.word	0x20000020

08009238 <_kill_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	4d07      	ldr	r5, [pc, #28]	@ (8009258 <_kill_r+0x20>)
 800923c:	2300      	movs	r3, #0
 800923e:	4604      	mov	r4, r0
 8009240:	4608      	mov	r0, r1
 8009242:	4611      	mov	r1, r2
 8009244:	602b      	str	r3, [r5, #0]
 8009246:	f7f7 fe1b 	bl	8000e80 <_kill>
 800924a:	1c43      	adds	r3, r0, #1
 800924c:	d102      	bne.n	8009254 <_kill_r+0x1c>
 800924e:	682b      	ldr	r3, [r5, #0]
 8009250:	b103      	cbz	r3, 8009254 <_kill_r+0x1c>
 8009252:	6023      	str	r3, [r4, #0]
 8009254:	bd38      	pop	{r3, r4, r5, pc}
 8009256:	bf00      	nop
 8009258:	2001478c 	.word	0x2001478c

0800925c <_getpid_r>:
 800925c:	f7f7 be08 	b.w	8000e70 <_getpid>

08009260 <_malloc_usable_size_r>:
 8009260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009264:	1f18      	subs	r0, r3, #4
 8009266:	2b00      	cmp	r3, #0
 8009268:	bfbc      	itt	lt
 800926a:	580b      	ldrlt	r3, [r1, r0]
 800926c:	18c0      	addlt	r0, r0, r3
 800926e:	4770      	bx	lr

08009270 <__swhatbuf_r>:
 8009270:	b570      	push	{r4, r5, r6, lr}
 8009272:	460c      	mov	r4, r1
 8009274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009278:	2900      	cmp	r1, #0
 800927a:	b096      	sub	sp, #88	@ 0x58
 800927c:	4615      	mov	r5, r2
 800927e:	461e      	mov	r6, r3
 8009280:	da0d      	bge.n	800929e <__swhatbuf_r+0x2e>
 8009282:	89a3      	ldrh	r3, [r4, #12]
 8009284:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009288:	f04f 0100 	mov.w	r1, #0
 800928c:	bf14      	ite	ne
 800928e:	2340      	movne	r3, #64	@ 0x40
 8009290:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009294:	2000      	movs	r0, #0
 8009296:	6031      	str	r1, [r6, #0]
 8009298:	602b      	str	r3, [r5, #0]
 800929a:	b016      	add	sp, #88	@ 0x58
 800929c:	bd70      	pop	{r4, r5, r6, pc}
 800929e:	466a      	mov	r2, sp
 80092a0:	f000 f848 	bl	8009334 <_fstat_r>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	dbec      	blt.n	8009282 <__swhatbuf_r+0x12>
 80092a8:	9901      	ldr	r1, [sp, #4]
 80092aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80092ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80092b2:	4259      	negs	r1, r3
 80092b4:	4159      	adcs	r1, r3
 80092b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092ba:	e7eb      	b.n	8009294 <__swhatbuf_r+0x24>

080092bc <__smakebuf_r>:
 80092bc:	898b      	ldrh	r3, [r1, #12]
 80092be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092c0:	079d      	lsls	r5, r3, #30
 80092c2:	4606      	mov	r6, r0
 80092c4:	460c      	mov	r4, r1
 80092c6:	d507      	bpl.n	80092d8 <__smakebuf_r+0x1c>
 80092c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	6123      	str	r3, [r4, #16]
 80092d0:	2301      	movs	r3, #1
 80092d2:	6163      	str	r3, [r4, #20]
 80092d4:	b003      	add	sp, #12
 80092d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092d8:	ab01      	add	r3, sp, #4
 80092da:	466a      	mov	r2, sp
 80092dc:	f7ff ffc8 	bl	8009270 <__swhatbuf_r>
 80092e0:	9f00      	ldr	r7, [sp, #0]
 80092e2:	4605      	mov	r5, r0
 80092e4:	4639      	mov	r1, r7
 80092e6:	4630      	mov	r0, r6
 80092e8:	f7ff f912 	bl	8008510 <_malloc_r>
 80092ec:	b948      	cbnz	r0, 8009302 <__smakebuf_r+0x46>
 80092ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f2:	059a      	lsls	r2, r3, #22
 80092f4:	d4ee      	bmi.n	80092d4 <__smakebuf_r+0x18>
 80092f6:	f023 0303 	bic.w	r3, r3, #3
 80092fa:	f043 0302 	orr.w	r3, r3, #2
 80092fe:	81a3      	strh	r3, [r4, #12]
 8009300:	e7e2      	b.n	80092c8 <__smakebuf_r+0xc>
 8009302:	89a3      	ldrh	r3, [r4, #12]
 8009304:	6020      	str	r0, [r4, #0]
 8009306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800930a:	81a3      	strh	r3, [r4, #12]
 800930c:	9b01      	ldr	r3, [sp, #4]
 800930e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009312:	b15b      	cbz	r3, 800932c <__smakebuf_r+0x70>
 8009314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009318:	4630      	mov	r0, r6
 800931a:	f000 f81d 	bl	8009358 <_isatty_r>
 800931e:	b128      	cbz	r0, 800932c <__smakebuf_r+0x70>
 8009320:	89a3      	ldrh	r3, [r4, #12]
 8009322:	f023 0303 	bic.w	r3, r3, #3
 8009326:	f043 0301 	orr.w	r3, r3, #1
 800932a:	81a3      	strh	r3, [r4, #12]
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	431d      	orrs	r5, r3
 8009330:	81a5      	strh	r5, [r4, #12]
 8009332:	e7cf      	b.n	80092d4 <__smakebuf_r+0x18>

08009334 <_fstat_r>:
 8009334:	b538      	push	{r3, r4, r5, lr}
 8009336:	4d07      	ldr	r5, [pc, #28]	@ (8009354 <_fstat_r+0x20>)
 8009338:	2300      	movs	r3, #0
 800933a:	4604      	mov	r4, r0
 800933c:	4608      	mov	r0, r1
 800933e:	4611      	mov	r1, r2
 8009340:	602b      	str	r3, [r5, #0]
 8009342:	f7f7 fde1 	bl	8000f08 <_fstat>
 8009346:	1c43      	adds	r3, r0, #1
 8009348:	d102      	bne.n	8009350 <_fstat_r+0x1c>
 800934a:	682b      	ldr	r3, [r5, #0]
 800934c:	b103      	cbz	r3, 8009350 <_fstat_r+0x1c>
 800934e:	6023      	str	r3, [r4, #0]
 8009350:	bd38      	pop	{r3, r4, r5, pc}
 8009352:	bf00      	nop
 8009354:	2001478c 	.word	0x2001478c

08009358 <_isatty_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	4d06      	ldr	r5, [pc, #24]	@ (8009374 <_isatty_r+0x1c>)
 800935c:	2300      	movs	r3, #0
 800935e:	4604      	mov	r4, r0
 8009360:	4608      	mov	r0, r1
 8009362:	602b      	str	r3, [r5, #0]
 8009364:	f7f7 fde0 	bl	8000f28 <_isatty>
 8009368:	1c43      	adds	r3, r0, #1
 800936a:	d102      	bne.n	8009372 <_isatty_r+0x1a>
 800936c:	682b      	ldr	r3, [r5, #0]
 800936e:	b103      	cbz	r3, 8009372 <_isatty_r+0x1a>
 8009370:	6023      	str	r3, [r4, #0]
 8009372:	bd38      	pop	{r3, r4, r5, pc}
 8009374:	2001478c 	.word	0x2001478c

08009378 <_init>:
 8009378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937a:	bf00      	nop
 800937c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937e:	bc08      	pop	{r3}
 8009380:	469e      	mov	lr, r3
 8009382:	4770      	bx	lr

08009384 <_fini>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	bf00      	nop
 8009388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938a:	bc08      	pop	{r3}
 800938c:	469e      	mov	lr, r3
 800938e:	4770      	bx	lr
