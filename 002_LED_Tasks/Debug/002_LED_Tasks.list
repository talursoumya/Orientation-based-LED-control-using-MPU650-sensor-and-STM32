
002_LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007310  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080074a0  080074a0  000084a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800765c  0800765c  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  0800765c  0800765c  0000865c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007664  08007664  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007664  08007664  00008664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007668  08007668  00008668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  0800766c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000901c  2**0
                  CONTENTS
 10 .bss          00014490  2000001c  2000001c  0000901c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144ac  200144ac  0000901c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b83  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003142  00000000  00000000  0001cbcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  0001fd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000edf  00000000  00000000  00021078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023bd5  00000000  00000000  00021f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001654c  00000000  00000000  00045b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d816a  00000000  00000000  0005c078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001341e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050e4  00000000  00000000  00134228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ca  00000000  00000000  0013930c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007488 	.word	0x08007488

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08007488 	.word	0x08007488

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ed8 	.word	0x20012ed8

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	@ 0x28
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fba1 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f877 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8df 	bl	8000724 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8000566:	482f      	ldr	r0, [pc, #188]	@ (8000624 <main+0xd0>)
 8000568:	f004 fce8 	bl	8004f3c <SEGGER_UART_init>

  //Enable the CYCCNT counter
     DWT_CTRL |= (1<<0);
 800056c:	4b2e      	ldr	r3, [pc, #184]	@ (8000628 <main+0xd4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a2d      	ldr	r2, [pc, #180]	@ (8000628 <main+0xd4>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6013      	str	r3, [r2, #0]

    SEGGER_SYSVIEW_Conf();
 8000578:	f004 fb0a 	bl	8004b90 <SEGGER_SYSVIEW_Conf>

   // SEGGER_SYSVIEW_Start();

  	status=xTaskCreate(task1_handler,"Task-1",200,"Hello world from Task-1",2,&task1_handle);
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2302      	movs	r3, #2
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	4b29      	ldr	r3, [pc, #164]	@ (800062c <main+0xd8>)
 8000588:	22c8      	movs	r2, #200	@ 0xc8
 800058a:	4929      	ldr	r1, [pc, #164]	@ (8000630 <main+0xdc>)
 800058c:	4829      	ldr	r0, [pc, #164]	@ (8000634 <main+0xe0>)
 800058e:	f002 fc17 	bl	8002dc0 <xTaskCreate>
 8000592:	61f8      	str	r0, [r7, #28]
  	configASSERT(status == pdPASS);
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d00b      	beq.n	80005b2 <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800059a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800059e:	f383 8811 	msr	BASEPRI, r3
 80005a2:	f3bf 8f6f 	isb	sy
 80005a6:	f3bf 8f4f 	dsb	sy
 80005aa:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	e7fd      	b.n	80005ae <main+0x5a>

  	status=xTaskCreate(task2_handler,"Task-2",200,"Hello world from Task-2",2,&task2_handle);
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2302      	movs	r3, #2
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000638 <main+0xe4>)
 80005be:	22c8      	movs	r2, #200	@ 0xc8
 80005c0:	491e      	ldr	r1, [pc, #120]	@ (800063c <main+0xe8>)
 80005c2:	481f      	ldr	r0, [pc, #124]	@ (8000640 <main+0xec>)
 80005c4:	f002 fbfc 	bl	8002dc0 <xTaskCreate>
 80005c8:	61f8      	str	r0, [r7, #28]
  	configASSERT(status == pdPASS);
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d00b      	beq.n	80005e8 <main+0x94>
        __asm volatile
 80005d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d4:	f383 8811 	msr	BASEPRI, r3
 80005d8:	f3bf 8f6f 	isb	sy
 80005dc:	f3bf 8f4f 	dsb	sy
 80005e0:	617b      	str	r3, [r7, #20]
    }
 80005e2:	bf00      	nop
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <main+0x90>

  	status=xTaskCreate(task3_handler,"Task-3",200,"Hello world from Task-3",2,&task3_handle);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	2302      	movs	r3, #2
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <main+0xf0>)
 80005f2:	22c8      	movs	r2, #200	@ 0xc8
 80005f4:	4914      	ldr	r1, [pc, #80]	@ (8000648 <main+0xf4>)
 80005f6:	4815      	ldr	r0, [pc, #84]	@ (800064c <main+0xf8>)
 80005f8:	f002 fbe2 	bl	8002dc0 <xTaskCreate>
 80005fc:	61f8      	str	r0, [r7, #28]
  	configASSERT(status == pdPASS);
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d00b      	beq.n	800061c <main+0xc8>
        __asm volatile
 8000604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000608:	f383 8811 	msr	BASEPRI, r3
 800060c:	f3bf 8f6f 	isb	sy
 8000610:	f3bf 8f4f 	dsb	sy
 8000614:	613b      	str	r3, [r7, #16]
    }
 8000616:	bf00      	nop
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <main+0xc4>

  	//start the freeRTOS scheduler
  	vTaskStartScheduler();
 800061c:	f002 fd34 	bl	8003088 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <main+0xcc>
 8000624:	0007a120 	.word	0x0007a120
 8000628:	e0001000 	.word	0xe0001000
 800062c:	080074a0 	.word	0x080074a0
 8000630:	080074b8 	.word	0x080074b8
 8000634:	080009e1 	.word	0x080009e1
 8000638:	080074c0 	.word	0x080074c0
 800063c:	080074d8 	.word	0x080074d8
 8000640:	08000a0d 	.word	0x08000a0d
 8000644:	080074e0 	.word	0x080074e0
 8000648:	080074f8 	.word	0x080074f8
 800064c:	08000a39 	.word	0x08000a39

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	@ 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f006 fed8 	bl	8007414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	@ (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	@ (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	@ (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c4:	23a8      	movs	r3, #168	@ 0xa8
 80006c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fdfb 	bl	80012d0 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 f9d2 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2105      	movs	r1, #5
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f85c 	bl	80017c0 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f9bb 	bl	8000a88 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	@ 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	@ 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4ba2      	ldr	r3, [pc, #648]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4aa1      	ldr	r2, [pc, #644]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b9f      	ldr	r3, [pc, #636]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b9b      	ldr	r3, [pc, #620]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a9a      	ldr	r2, [pc, #616]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b98      	ldr	r3, [pc, #608]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b94      	ldr	r3, [pc, #592]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a93      	ldr	r2, [pc, #588]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b91      	ldr	r3, [pc, #580]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b8d      	ldr	r3, [pc, #564]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a8c      	ldr	r2, [pc, #560]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b8a      	ldr	r3, [pc, #552]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b86      	ldr	r3, [pc, #536]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a85      	ldr	r2, [pc, #532]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b83      	ldr	r3, [pc, #524]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b7f      	ldr	r3, [pc, #508]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a7e      	ldr	r2, [pc, #504]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b7c      	ldr	r3, [pc, #496]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	4879      	ldr	r0, [pc, #484]	@ (80009cc <MX_GPIO_Init+0x2a8>)
 80007e8:	f000 fd3e 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	4877      	ldr	r0, [pc, #476]	@ (80009d0 <MX_GPIO_Init+0x2ac>)
 80007f2:	f000 fd39 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f6:	2200      	movs	r2, #0
 80007f8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007fc:	4875      	ldr	r0, [pc, #468]	@ (80009d4 <MX_GPIO_Init+0x2b0>)
 80007fe:	f000 fd33 	bl	8001268 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000802:	2308      	movs	r3, #8
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	486c      	ldr	r0, [pc, #432]	@ (80009cc <MX_GPIO_Init+0x2a8>)
 800081a:	f000 fb89 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081e:	2301      	movs	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4866      	ldr	r0, [pc, #408]	@ (80009d0 <MX_GPIO_Init+0x2ac>)
 8000836:	f000 fb7b 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084a:	2305      	movs	r3, #5
 800084c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	485e      	ldr	r0, [pc, #376]	@ (80009d0 <MX_GPIO_Init+0x2ac>)
 8000856:	f000 fb6b 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085a:	2301      	movs	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	485a      	ldr	r0, [pc, #360]	@ (80009d8 <MX_GPIO_Init+0x2b4>)
 8000870:	f000 fb5e 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000874:	2310      	movs	r3, #16
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000884:	2306      	movs	r3, #6
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4852      	ldr	r0, [pc, #328]	@ (80009d8 <MX_GPIO_Init+0x2b4>)
 8000890:	f000 fb4e 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000894:	23e0      	movs	r3, #224	@ 0xe0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008a4:	2305      	movs	r3, #5
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	484a      	ldr	r0, [pc, #296]	@ (80009d8 <MX_GPIO_Init+0x2b4>)
 80008b0:	f000 fb3e 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008b4:	2304      	movs	r3, #4
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4845      	ldr	r0, [pc, #276]	@ (80009dc <MX_GPIO_Init+0x2b8>)
 80008c8:	f000 fb32 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008de:	2305      	movs	r3, #5
 80008e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	483c      	ldr	r0, [pc, #240]	@ (80009dc <MX_GPIO_Init+0x2b8>)
 80008ea:	f000 fb21 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ee:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008f2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4833      	ldr	r0, [pc, #204]	@ (80009d4 <MX_GPIO_Init+0x2b0>)
 8000908:	f000 fb12 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800090c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800091e:	2306      	movs	r3, #6
 8000920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4829      	ldr	r0, [pc, #164]	@ (80009d0 <MX_GPIO_Init+0x2ac>)
 800092a:	f000 fb01 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800092e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4825      	ldr	r0, [pc, #148]	@ (80009d8 <MX_GPIO_Init+0x2b4>)
 8000944:	f000 faf4 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000948:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800095a:	230a      	movs	r3, #10
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	481c      	ldr	r0, [pc, #112]	@ (80009d8 <MX_GPIO_Init+0x2b4>)
 8000966:	f000 fae3 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800096a:	2320      	movs	r3, #32
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4815      	ldr	r0, [pc, #84]	@ (80009d4 <MX_GPIO_Init+0x2b0>)
 800097e:	f000 fad7 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000982:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000988:	2312      	movs	r3, #18
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000994:	2304      	movs	r3, #4
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	480f      	ldr	r0, [pc, #60]	@ (80009dc <MX_GPIO_Init+0x2b8>)
 80009a0:	f000 fac6 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4804      	ldr	r0, [pc, #16]	@ (80009cc <MX_GPIO_Init+0x2a8>)
 80009ba:	f000 fab9 	bl	8000f30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	@ 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400

080009e0 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 80009e8:	4806      	ldr	r0, [pc, #24]	@ (8000a04 <task1_handler+0x24>)
 80009ea:	f006 fc65 	bl	80072b8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <task1_handler+0x28>)
 80009f4:	f000 fc51 	bl	800129a <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80009f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009fc:	f000 f992 	bl	8000d24 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 8000a00:	bf00      	nop
 8000a02:	e7f1      	b.n	80009e8 <task1_handler+0x8>
 8000a04:	08007500 	.word	0x08007500
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <task2_handler>:
	}

}

static void task2_handler(void* parameters)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led");
 8000a14:	4806      	ldr	r0, [pc, #24]	@ (8000a30 <task2_handler+0x24>)
 8000a16:	f006 fc4f 	bl	80072b8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <task2_handler+0x28>)
 8000a20:	f000 fc3b 	bl	800129a <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8000a24:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000a28:	f000 f97c 	bl	8000d24 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led");
 8000a2c:	bf00      	nop
 8000a2e:	e7f1      	b.n	8000a14 <task2_handler+0x8>
 8000a30:	08007514 	.word	0x08007514
 8000a34:	40020c00 	.word	0x40020c00

08000a38 <task3_handler>:

}


static void task3_handler(void* parameters)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
 8000a40:	4806      	ldr	r0, [pc, #24]	@ (8000a5c <task3_handler+0x24>)
 8000a42:	f006 fc39 	bl	80072b8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a4a:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <task3_handler+0x28>)
 8000a4c:	f000 fc25 	bl	800129a <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8000a50:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000a54:	f000 f966 	bl	8000d24 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
 8000a58:	bf00      	nop
 8000a5a:	e7f1      	b.n	8000a40 <task3_handler+0x8>
 8000a5c:	08007528 	.word	0x08007528
 8000a60:	40020c00 	.word	0x40020c00

08000a64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d101      	bne.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a76:	f000 f935 	bl	8000ce4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40001000 	.word	0x40001000

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <Error_Handler+0x8>

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	4a08      	ldr	r2, [pc, #32]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000ad2:	f003 fc9b 	bl	800440c <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	@ 0x38
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4b33      	ldr	r3, [pc, #204]	@ (8000bc8 <HAL_InitTick+0xe4>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afc:	4a32      	ldr	r2, [pc, #200]	@ (8000bc8 <HAL_InitTick+0xe4>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b04:	4b30      	ldr	r3, [pc, #192]	@ (8000bc8 <HAL_InitTick+0xe4>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b08:	f003 0310 	and.w	r3, r3, #16
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b10:	f107 0210 	add.w	r2, r7, #16
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 f85c 	bl	8001bd8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b20:	6a3b      	ldr	r3, [r7, #32]
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d103      	bne.n	8000b32 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b2a:	f001 f841 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 8000b2e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b30:	e004      	b.n	8000b3c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b32:	f001 f83d 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 8000b36:	4603      	mov	r3, r0
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b3e:	4a23      	ldr	r2, [pc, #140]	@ (8000bcc <HAL_InitTick+0xe8>)
 8000b40:	fba2 2303 	umull	r2, r3, r2, r3
 8000b44:	0c9b      	lsrs	r3, r3, #18
 8000b46:	3b01      	subs	r3, #1
 8000b48:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	@ (8000bd0 <HAL_InitTick+0xec>)
 8000b4c:	4a21      	ldr	r2, [pc, #132]	@ (8000bd4 <HAL_InitTick+0xf0>)
 8000b4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <HAL_InitTick+0xec>)
 8000b52:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b56:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b58:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd0 <HAL_InitTick+0xec>)
 8000b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b5c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <HAL_InitTick+0xec>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <HAL_InitTick+0xec>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <HAL_InitTick+0xec>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b70:	4817      	ldr	r0, [pc, #92]	@ (8000bd0 <HAL_InitTick+0xec>)
 8000b72:	f001 f863 	bl	8001c3c <HAL_TIM_Base_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d11b      	bne.n	8000bbc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b84:	4812      	ldr	r0, [pc, #72]	@ (8000bd0 <HAL_InitTick+0xec>)
 8000b86:	f001 f8b3 	bl	8001cf0 <HAL_TIM_Base_Start_IT>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d111      	bne.n	8000bbc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b98:	2036      	movs	r0, #54	@ 0x36
 8000b9a:	f000 f9bb 	bl	8000f14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d808      	bhi.n	8000bb6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	2036      	movs	r0, #54	@ 0x36
 8000baa:	f000 f997 	bl	8000edc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bae:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <HAL_InitTick+0xf4>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	e002      	b.n	8000bbc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3738      	adds	r7, #56	@ 0x38
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	431bde83 	.word	0x431bde83
 8000bd0:	20000038 	.word	0x20000038
 8000bd4:	40001000 	.word	0x40001000
 8000bd8:	20000004 	.word	0x20000004

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <NMI_Handler+0x4>

08000be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c18:	4802      	ldr	r0, [pc, #8]	@ (8000c24 <TIM6_DAC_IRQHandler+0x10>)
 8000c1a:	f001 f8d9 	bl	8001dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000038 	.word	0x20000038

08000c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c50:	f7ff ffea 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	@ (8000c8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	@ (8000c90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f006 fbd3 	bl	8007424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fc69 	bl	8000554 <main>
  bx  lr    
 8000c82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c90:	0800766c 	.word	0x0800766c
  ldr r2, =_sbss
 8000c94:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c98:	200144ac 	.word	0x200144ac

08000c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <HAL_Init+0x40>)
 8000caa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <HAL_Init+0x40>)
 8000cb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	@ (8000ce0 <HAL_Init+0x40>)
 8000cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 f8fc 	bl	8000ec6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff ff08 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fede 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023c00 	.word	0x40023c00

08000ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_IncTick+0x20>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x24>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <HAL_IncTick+0x24>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000080 	.word	0x20000080

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b03      	ldr	r3, [pc, #12]	@ (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000080 	.word	0x20000080

08000d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d2c:	f7ff ffee 	bl	8000d0c <HAL_GetTick>
 8000d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3c:	d005      	beq.n	8000d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <HAL_Delay+0x44>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4a:	bf00      	nop
 8000d4c:	f7ff ffde 	bl	8000d0c <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d8f7      	bhi.n	8000d4c <HAL_Delay+0x28>
  {
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db0b      	blt.n	8000dfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 021f 	and.w	r2, r3, #31
 8000de8:	4907      	ldr	r1, [pc, #28]	@ (8000e08 <__NVIC_EnableIRQ+0x38>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	2001      	movs	r0, #1
 8000df2:	fa00 f202 	lsl.w	r2, r0, r2
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	@ (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	@ (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	@ 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	@ 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ff4c 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eee:	f7ff ff61 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000ef2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	68b9      	ldr	r1, [r7, #8]
 8000ef8:	6978      	ldr	r0, [r7, #20]
 8000efa:	f7ff ffb1 	bl	8000e60 <NVIC_EncodePriority>
 8000efe:	4602      	mov	r2, r0
 8000f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff80 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f0c:	bf00      	nop
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff54 	bl	8000dd0 <__NVIC_EnableIRQ>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	e16b      	b.n	8001224 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	f040 815a 	bne.w	800121e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d005      	beq.n	8000f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d130      	bne.n	8000fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	f003 0201 	and.w	r2, r3, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d017      	beq.n	8001020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d123      	bne.n	8001074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	220f      	movs	r2, #15
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	69b9      	ldr	r1, [r7, #24]
 8001070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0203 	and.w	r2, r3, #3
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80b4 	beq.w	800121e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b60      	ldr	r3, [pc, #384]	@ (800123c <HAL_GPIO_Init+0x30c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	4a5f      	ldr	r2, [pc, #380]	@ (800123c <HAL_GPIO_Init+0x30c>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c6:	4b5d      	ldr	r3, [pc, #372]	@ (800123c <HAL_GPIO_Init+0x30c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001240 <HAL_GPIO_Init+0x310>)
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a52      	ldr	r2, [pc, #328]	@ (8001244 <HAL_GPIO_Init+0x314>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d02b      	beq.n	8001156 <HAL_GPIO_Init+0x226>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a51      	ldr	r2, [pc, #324]	@ (8001248 <HAL_GPIO_Init+0x318>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d025      	beq.n	8001152 <HAL_GPIO_Init+0x222>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a50      	ldr	r2, [pc, #320]	@ (800124c <HAL_GPIO_Init+0x31c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d01f      	beq.n	800114e <HAL_GPIO_Init+0x21e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4f      	ldr	r2, [pc, #316]	@ (8001250 <HAL_GPIO_Init+0x320>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d019      	beq.n	800114a <HAL_GPIO_Init+0x21a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4e      	ldr	r2, [pc, #312]	@ (8001254 <HAL_GPIO_Init+0x324>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d013      	beq.n	8001146 <HAL_GPIO_Init+0x216>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4d      	ldr	r2, [pc, #308]	@ (8001258 <HAL_GPIO_Init+0x328>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00d      	beq.n	8001142 <HAL_GPIO_Init+0x212>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4c      	ldr	r2, [pc, #304]	@ (800125c <HAL_GPIO_Init+0x32c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d007      	beq.n	800113e <HAL_GPIO_Init+0x20e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4b      	ldr	r2, [pc, #300]	@ (8001260 <HAL_GPIO_Init+0x330>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d101      	bne.n	800113a <HAL_GPIO_Init+0x20a>
 8001136:	2307      	movs	r3, #7
 8001138:	e00e      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800113a:	2308      	movs	r3, #8
 800113c:	e00c      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800113e:	2306      	movs	r3, #6
 8001140:	e00a      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001142:	2305      	movs	r3, #5
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001146:	2304      	movs	r3, #4
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4935      	ldr	r1, [pc, #212]	@ (8001240 <HAL_GPIO_Init+0x310>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001176:	4b3b      	ldr	r3, [pc, #236]	@ (8001264 <HAL_GPIO_Init+0x334>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119a:	4a32      	ldr	r2, [pc, #200]	@ (8001264 <HAL_GPIO_Init+0x334>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a0:	4b30      	ldr	r3, [pc, #192]	@ (8001264 <HAL_GPIO_Init+0x334>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c4:	4a27      	ldr	r2, [pc, #156]	@ (8001264 <HAL_GPIO_Init+0x334>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ca:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <HAL_GPIO_Init+0x334>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001264 <HAL_GPIO_Init+0x334>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001264 <HAL_GPIO_Init+0x334>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001218:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <HAL_GPIO_Init+0x334>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f ae90 	bls.w	8000f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3724      	adds	r7, #36	@ 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40013800 	.word	0x40013800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40021400 	.word	0x40021400
 800125c:	40021800 	.word	0x40021800
 8001260:	40021c00 	.word	0x40021c00
 8001264:	40013c00 	.word	0x40013c00

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001284:	e003      	b.n	800128e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	041a      	lsls	r2, r3, #16
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	619a      	str	r2, [r3, #24]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129a:	b480      	push	{r7}
 800129c:	b085      	sub	sp, #20
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	460b      	mov	r3, r1
 80012a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ac:	887a      	ldrh	r2, [r7, #2]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4013      	ands	r3, r2
 80012b2:	041a      	lsls	r2, r3, #16
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	400b      	ands	r3, r1
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e267      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d075      	beq.n	80013da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ee:	4b88      	ldr	r3, [pc, #544]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d00c      	beq.n	8001314 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fa:	4b85      	ldr	r3, [pc, #532]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001302:	2b08      	cmp	r3, #8
 8001304:	d112      	bne.n	800132c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001306:	4b82      	ldr	r3, [pc, #520]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800130e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001312:	d10b      	bne.n	800132c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	4b7e      	ldr	r3, [pc, #504]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d05b      	beq.n	80013d8 <HAL_RCC_OscConfig+0x108>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d157      	bne.n	80013d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e242      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001334:	d106      	bne.n	8001344 <HAL_RCC_OscConfig+0x74>
 8001336:	4b76      	ldr	r3, [pc, #472]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a75      	ldr	r2, [pc, #468]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e01d      	b.n	8001380 <HAL_RCC_OscConfig+0xb0>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x98>
 800134e:	4b70      	ldr	r3, [pc, #448]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6f      	ldr	r2, [pc, #444]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b6d      	ldr	r3, [pc, #436]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a6c      	ldr	r2, [pc, #432]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0xb0>
 8001368:	4b69      	ldr	r3, [pc, #420]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a68      	ldr	r2, [pc, #416]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800136e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b66      	ldr	r3, [pc, #408]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a65      	ldr	r2, [pc, #404]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800137a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800137e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d013      	beq.n	80013b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fcc0 	bl	8000d0c <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fcbc 	bl	8000d0c <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	@ 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e207      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0xc0>
 80013ae:	e014      	b.n	80013da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fcac 	bl	8000d0c <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fca8 	bl	8000d0c <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	@ 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e1f3      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ca:	4b51      	ldr	r3, [pc, #324]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0xe8>
 80013d6:	e000      	b.n	80013da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d063      	beq.n	80014ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00b      	beq.n	800140a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f2:	4b47      	ldr	r3, [pc, #284]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d11c      	bne.n	8001438 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fe:	4b44      	ldr	r3, [pc, #272]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d116      	bne.n	8001438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	4b41      	ldr	r3, [pc, #260]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <HAL_RCC_OscConfig+0x152>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d001      	beq.n	8001422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e1c7      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001422:	4b3b      	ldr	r3, [pc, #236]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4937      	ldr	r1, [pc, #220]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001432:	4313      	orrs	r3, r2
 8001434:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	e03a      	b.n	80014ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d020      	beq.n	8001482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001440:	4b34      	ldr	r3, [pc, #208]	@ (8001514 <HAL_RCC_OscConfig+0x244>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff fc61 	bl	8000d0c <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800144e:	f7ff fc5d 	bl	8000d0c <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e1a8      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001460:	4b2b      	ldr	r3, [pc, #172]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146c:	4b28      	ldr	r3, [pc, #160]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4925      	ldr	r1, [pc, #148]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 800147c:	4313      	orrs	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
 8001480:	e015      	b.n	80014ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001482:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <HAL_RCC_OscConfig+0x244>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fc40 	bl	8000d0c <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001490:	f7ff fc3c 	bl	8000d0c <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e187      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d036      	beq.n	8001528 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d016      	beq.n	80014f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <HAL_RCC_OscConfig+0x248>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c8:	f7ff fc20 	bl	8000d0c <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d0:	f7ff fc1c 	bl	8000d0c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e167      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <HAL_RCC_OscConfig+0x240>)
 80014e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x200>
 80014ee:	e01b      	b.n	8001528 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f0:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_RCC_OscConfig+0x248>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f6:	f7ff fc09 	bl	8000d0c <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	e00e      	b.n	800151c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fe:	f7ff fc05 	bl	8000d0c <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d907      	bls.n	800151c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e150      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
 8001510:	40023800 	.word	0x40023800
 8001514:	42470000 	.word	0x42470000
 8001518:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	4b88      	ldr	r3, [pc, #544]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800151e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1ea      	bne.n	80014fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 8097 	beq.w	8001664 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153a:	4b81      	ldr	r3, [pc, #516]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10f      	bne.n	8001566 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b7d      	ldr	r3, [pc, #500]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	4a7c      	ldr	r2, [pc, #496]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	@ 0x40
 8001556:	4b7a      	ldr	r3, [pc, #488]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001562:	2301      	movs	r3, #1
 8001564:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001566:	4b77      	ldr	r3, [pc, #476]	@ (8001744 <HAL_RCC_OscConfig+0x474>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d118      	bne.n	80015a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001572:	4b74      	ldr	r3, [pc, #464]	@ (8001744 <HAL_RCC_OscConfig+0x474>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a73      	ldr	r2, [pc, #460]	@ (8001744 <HAL_RCC_OscConfig+0x474>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157e:	f7ff fbc5 	bl	8000d0c <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001586:	f7ff fbc1 	bl	8000d0c <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e10c      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	4b6a      	ldr	r3, [pc, #424]	@ (8001744 <HAL_RCC_OscConfig+0x474>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d106      	bne.n	80015ba <HAL_RCC_OscConfig+0x2ea>
 80015ac:	4b64      	ldr	r3, [pc, #400]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b0:	4a63      	ldr	r2, [pc, #396]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b8:	e01c      	b.n	80015f4 <HAL_RCC_OscConfig+0x324>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b05      	cmp	r3, #5
 80015c0:	d10c      	bne.n	80015dc <HAL_RCC_OscConfig+0x30c>
 80015c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015da:	e00b      	b.n	80015f4 <HAL_RCC_OscConfig+0x324>
 80015dc:	4b58      	ldr	r3, [pc, #352]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e0:	4a57      	ldr	r2, [pc, #348]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80015e8:	4b55      	ldr	r3, [pc, #340]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ec:	4a54      	ldr	r2, [pc, #336]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ee:	f023 0304 	bic.w	r3, r3, #4
 80015f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d015      	beq.n	8001628 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7ff fb86 	bl	8000d0c <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001602:	e00a      	b.n	800161a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f7ff fb82 	bl	8000d0c <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e0cb      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161a:	4b49      	ldr	r3, [pc, #292]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0ee      	beq.n	8001604 <HAL_RCC_OscConfig+0x334>
 8001626:	e014      	b.n	8001652 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001628:	f7ff fb70 	bl	8000d0c <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162e:	e00a      	b.n	8001646 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001630:	f7ff fb6c 	bl	8000d0c <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e0b5      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001646:	4b3e      	ldr	r3, [pc, #248]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1ee      	bne.n	8001630 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001652:	7dfb      	ldrb	r3, [r7, #23]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d105      	bne.n	8001664 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001658:	4b39      	ldr	r3, [pc, #228]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	4a38      	ldr	r2, [pc, #224]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 800165e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001662:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80a1 	beq.w	80017b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800166e:	4b34      	ldr	r3, [pc, #208]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b08      	cmp	r3, #8
 8001678:	d05c      	beq.n	8001734 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d141      	bne.n	8001706 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b31      	ldr	r3, [pc, #196]	@ (8001748 <HAL_RCC_OscConfig+0x478>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb40 	bl	8000d0c <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb3c 	bl	8000d0c <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e087      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	4b27      	ldr	r3, [pc, #156]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69da      	ldr	r2, [r3, #28]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016bc:	019b      	lsls	r3, r3, #6
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	3b01      	subs	r3, #1
 80016c8:	041b      	lsls	r3, r3, #16
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d0:	061b      	lsls	r3, r3, #24
 80016d2:	491b      	ldr	r1, [pc, #108]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <HAL_RCC_OscConfig+0x478>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7ff fb15 	bl	8000d0c <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e6:	f7ff fb11 	bl	8000d0c <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e05c      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x416>
 8001704:	e054      	b.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <HAL_RCC_OscConfig+0x478>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fafe 	bl	8000d0c <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff fafa 	bl	8000d0c <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e045      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_RCC_OscConfig+0x470>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x444>
 8001732:	e03d      	b.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d107      	bne.n	800174c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e038      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
 8001740:	40023800 	.word	0x40023800
 8001744:	40007000 	.word	0x40007000
 8001748:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800174c:	4b1b      	ldr	r3, [pc, #108]	@ (80017bc <HAL_RCC_OscConfig+0x4ec>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d028      	beq.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d121      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d11a      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800177c:	4013      	ands	r3, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001782:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001784:	4293      	cmp	r3, r2
 8001786:	d111      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001792:	085b      	lsrs	r3, r3, #1
 8001794:	3b01      	subs	r3, #1
 8001796:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d107      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800

080017c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0cc      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017d4:	4b68      	ldr	r3, [pc, #416]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d90c      	bls.n	80017fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b65      	ldr	r3, [pc, #404]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ea:	4b63      	ldr	r3, [pc, #396]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0b8      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001814:	4b59      	ldr	r3, [pc, #356]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4a58      	ldr	r2, [pc, #352]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800181e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800182c:	4b53      	ldr	r3, [pc, #332]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a52      	ldr	r2, [pc, #328]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001838:	4b50      	ldr	r3, [pc, #320]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	494d      	ldr	r1, [pc, #308]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d044      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4b47      	ldr	r3, [pc, #284]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d119      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e07f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d003      	beq.n	800187e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800187a:	2b03      	cmp	r3, #3
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187e:	4b3f      	ldr	r3, [pc, #252]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d109      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e06f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	4b3b      	ldr	r3, [pc, #236]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e067      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189e:	4b37      	ldr	r3, [pc, #220]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f023 0203 	bic.w	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4934      	ldr	r1, [pc, #208]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b0:	f7ff fa2c 	bl	8000d0c <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b8:	f7ff fa28 	bl	8000d0c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e04f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	4b2b      	ldr	r3, [pc, #172]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 020c 	and.w	r2, r3, #12
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	429a      	cmp	r2, r3
 80018de:	d1eb      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018e0:	4b25      	ldr	r3, [pc, #148]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d20c      	bcs.n	8001908 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b22      	ldr	r3, [pc, #136]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b20      	ldr	r3, [pc, #128]	@ (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e032      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001914:	4b19      	ldr	r3, [pc, #100]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4916      	ldr	r1, [pc, #88]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d009      	beq.n	8001946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001932:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	490e      	ldr	r1, [pc, #56]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001946:	f000 f821 	bl	800198c <HAL_RCC_GetSysClockFreq>
 800194a:	4602      	mov	r2, r0
 800194c:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	490a      	ldr	r1, [pc, #40]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	5ccb      	ldrb	r3, [r1, r3]
 800195a:	fa22 f303 	lsr.w	r3, r2, r3
 800195e:	4a09      	ldr	r2, [pc, #36]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <HAL_RCC_ClockConfig+0x1c8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff f8bc 	bl	8000ae4 <HAL_InitTick>

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023c00 	.word	0x40023c00
 800197c:	40023800 	.word	0x40023800
 8001980:	0800761c 	.word	0x0800761c
 8001984:	20000000 	.word	0x20000000
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800198c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001990:	b094      	sub	sp, #80	@ 0x50
 8001992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a4:	4b79      	ldr	r3, [pc, #484]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d00d      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x40>
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	f200 80e1 	bhi.w	8001b78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x34>
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d003      	beq.n	80019c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019be:	e0db      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c0:	4b73      	ldr	r3, [pc, #460]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x204>)
 80019c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019c4:	e0db      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019c6:	4b73      	ldr	r3, [pc, #460]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x208>)
 80019c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019ca:	e0d8      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019cc:	4b6f      	ldr	r3, [pc, #444]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d6:	4b6d      	ldr	r3, [pc, #436]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d063      	beq.n	8001aaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	099b      	lsrs	r3, r3, #6
 80019e8:	2200      	movs	r2, #0
 80019ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80019f6:	2300      	movs	r3, #0
 80019f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80019fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019fe:	4622      	mov	r2, r4
 8001a00:	462b      	mov	r3, r5
 8001a02:	f04f 0000 	mov.w	r0, #0
 8001a06:	f04f 0100 	mov.w	r1, #0
 8001a0a:	0159      	lsls	r1, r3, #5
 8001a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a10:	0150      	lsls	r0, r2, #5
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4621      	mov	r1, r4
 8001a18:	1a51      	subs	r1, r2, r1
 8001a1a:	6139      	str	r1, [r7, #16]
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a30:	4659      	mov	r1, fp
 8001a32:	018b      	lsls	r3, r1, #6
 8001a34:	4651      	mov	r1, sl
 8001a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a3a:	4651      	mov	r1, sl
 8001a3c:	018a      	lsls	r2, r1, #6
 8001a3e:	4651      	mov	r1, sl
 8001a40:	ebb2 0801 	subs.w	r8, r2, r1
 8001a44:	4659      	mov	r1, fp
 8001a46:	eb63 0901 	sbc.w	r9, r3, r1
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a5e:	4690      	mov	r8, r2
 8001a60:	4699      	mov	r9, r3
 8001a62:	4623      	mov	r3, r4
 8001a64:	eb18 0303 	adds.w	r3, r8, r3
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	462b      	mov	r3, r5
 8001a6c:	eb49 0303 	adc.w	r3, r9, r3
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a7e:	4629      	mov	r1, r5
 8001a80:	024b      	lsls	r3, r1, #9
 8001a82:	4621      	mov	r1, r4
 8001a84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a88:	4621      	mov	r1, r4
 8001a8a:	024a      	lsls	r2, r1, #9
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a92:	2200      	movs	r2, #0
 8001a94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a9c:	f7fe fbe2 	bl	8000264 <__aeabi_uldivmod>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001aa8:	e058      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aaa:	4b38      	ldr	r3, [pc, #224]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ac4:	4642      	mov	r2, r8
 8001ac6:	464b      	mov	r3, r9
 8001ac8:	f04f 0000 	mov.w	r0, #0
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	0159      	lsls	r1, r3, #5
 8001ad2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ad6:	0150      	lsls	r0, r2, #5
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4641      	mov	r1, r8
 8001ade:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ae2:	4649      	mov	r1, r9
 8001ae4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001af4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001af8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001afc:	ebb2 040a 	subs.w	r4, r2, sl
 8001b00:	eb63 050b 	sbc.w	r5, r3, fp
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	00eb      	lsls	r3, r5, #3
 8001b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b12:	00e2      	lsls	r2, r4, #3
 8001b14:	4614      	mov	r4, r2
 8001b16:	461d      	mov	r5, r3
 8001b18:	4643      	mov	r3, r8
 8001b1a:	18e3      	adds	r3, r4, r3
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	464b      	mov	r3, r9
 8001b20:	eb45 0303 	adc.w	r3, r5, r3
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b32:	4629      	mov	r1, r5
 8001b34:	028b      	lsls	r3, r1, #10
 8001b36:	4621      	mov	r1, r4
 8001b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	028a      	lsls	r2, r1, #10
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b46:	2200      	movs	r2, #0
 8001b48:	61bb      	str	r3, [r7, #24]
 8001b4a:	61fa      	str	r2, [r7, #28]
 8001b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b50:	f7fe fb88 	bl	8000264 <__aeabi_uldivmod>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4613      	mov	r3, r2
 8001b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	0c1b      	lsrs	r3, r3, #16
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	3301      	adds	r3, #1
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b76:	e002      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b78:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3750      	adds	r7, #80	@ 0x50
 8001b84:	46bd      	mov	sp, r7
 8001b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	00f42400 	.word	0x00f42400
 8001b94:	007a1200 	.word	0x007a1200

08001b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	@ (8001bac <HAL_RCC_GetHCLKFreq+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000000 	.word	0x20000000

08001bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bb4:	f7ff fff0 	bl	8001b98 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	0a9b      	lsrs	r3, r3, #10
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4903      	ldr	r1, [pc, #12]	@ (8001bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	0800762c 	.word	0x0800762c

08001bd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	220f      	movs	r2, #15
 8001be6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c00:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c0c:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	08db      	lsrs	r3, r3, #3
 8001c12:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c1a:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <HAL_RCC_GetClockConfig+0x60>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0207 	and.w	r2, r3, #7
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40023c00 	.word	0x40023c00

08001c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e041      	b.n	8001cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f839 	bl	8001cda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3304      	adds	r3, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f000 f9c0 	bl	8002000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d001      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e04e      	b.n	8001da6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a23      	ldr	r2, [pc, #140]	@ (8001db4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d022      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d32:	d01d      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1f      	ldr	r2, [pc, #124]	@ (8001db8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d018      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1e      	ldr	r2, [pc, #120]	@ (8001dbc <HAL_TIM_Base_Start_IT+0xcc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00e      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d009      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a19      	ldr	r2, [pc, #100]	@ (8001dc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d004      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a18      	ldr	r2, [pc, #96]	@ (8001dcc <HAL_TIM_Base_Start_IT+0xdc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d111      	bne.n	8001d94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d010      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d92:	e007      	b.n	8001da4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40000400 	.word	0x40000400
 8001dbc:	40000800 	.word	0x40000800
 8001dc0:	40000c00 	.word	0x40000c00
 8001dc4:	40010400 	.word	0x40010400
 8001dc8:	40014000 	.word	0x40014000
 8001dcc:	40001800 	.word	0x40001800

08001dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d020      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01b      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0202 	mvn.w	r2, #2
 8001e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8d2 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f8c4 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f8d5 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d020      	beq.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01b      	beq.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0204 	mvn.w	r2, #4
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2202      	movs	r2, #2
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8ac 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f89e 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f8af 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d020      	beq.n	8001ecc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01b      	beq.n	8001ecc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0208 	mvn.w	r2, #8
 8001e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f886 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e005      	b.n	8001ec6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f878 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f889 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d020      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d01b      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0210 	mvn.w	r2, #16
 8001ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2208      	movs	r2, #8
 8001eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f860 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001f04:	e005      	b.n	8001f12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f852 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f863 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0201 	mvn.w	r2, #1
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fd94 	bl	8000a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f906 	bl	800216c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f834 	bl	8001fec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0220 	mvn.w	r2, #32
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8d8 	bl	8002158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a46      	ldr	r2, [pc, #280]	@ (800212c <TIM_Base_SetConfig+0x12c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d013      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800201e:	d00f      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a43      	ldr	r2, [pc, #268]	@ (8002130 <TIM_Base_SetConfig+0x130>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00b      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a42      	ldr	r2, [pc, #264]	@ (8002134 <TIM_Base_SetConfig+0x134>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d007      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a41      	ldr	r2, [pc, #260]	@ (8002138 <TIM_Base_SetConfig+0x138>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d003      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a40      	ldr	r2, [pc, #256]	@ (800213c <TIM_Base_SetConfig+0x13c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d108      	bne.n	8002052 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a35      	ldr	r2, [pc, #212]	@ (800212c <TIM_Base_SetConfig+0x12c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d02b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002060:	d027      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a32      	ldr	r2, [pc, #200]	@ (8002130 <TIM_Base_SetConfig+0x130>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d023      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a31      	ldr	r2, [pc, #196]	@ (8002134 <TIM_Base_SetConfig+0x134>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01f      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a30      	ldr	r2, [pc, #192]	@ (8002138 <TIM_Base_SetConfig+0x138>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d01b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a2f      	ldr	r2, [pc, #188]	@ (800213c <TIM_Base_SetConfig+0x13c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d017      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a2e      	ldr	r2, [pc, #184]	@ (8002140 <TIM_Base_SetConfig+0x140>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a2d      	ldr	r2, [pc, #180]	@ (8002144 <TIM_Base_SetConfig+0x144>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00f      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a2c      	ldr	r2, [pc, #176]	@ (8002148 <TIM_Base_SetConfig+0x148>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a2b      	ldr	r2, [pc, #172]	@ (800214c <TIM_Base_SetConfig+0x14c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002150 <TIM_Base_SetConfig+0x150>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d003      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a29      	ldr	r2, [pc, #164]	@ (8002154 <TIM_Base_SetConfig+0x154>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d108      	bne.n	80020c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a10      	ldr	r2, [pc, #64]	@ (800212c <TIM_Base_SetConfig+0x12c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d003      	beq.n	80020f8 <TIM_Base_SetConfig+0xf8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a12      	ldr	r2, [pc, #72]	@ (800213c <TIM_Base_SetConfig+0x13c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d103      	bne.n	8002100 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b01      	cmp	r3, #1
 8002110:	d105      	bne.n	800211e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f023 0201 	bic.w	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	611a      	str	r2, [r3, #16]
  }
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40010000 	.word	0x40010000
 8002130:	40000400 	.word	0x40000400
 8002134:	40000800 	.word	0x40000800
 8002138:	40000c00 	.word	0x40000c00
 800213c:	40010400 	.word	0x40010400
 8002140:	40014000 	.word	0x40014000
 8002144:	40014400 	.word	0x40014400
 8002148:	40014800 	.word	0x40014800
 800214c:	40001800 	.word	0x40001800
 8002150:	40001c00 	.word	0x40001c00
 8002154:	40002000 	.word	0x40002000

08002158 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f103 0208 	add.w	r2, r3, #8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f04f 32ff 	mov.w	r2, #4294967295
 8002198:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f103 0208 	add.w	r2, r3, #8
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f103 0208 	add.w	r2, r3, #8
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021da:	b480      	push	{r7}
 80021dc:	b085      	sub	sp, #20
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	601a      	str	r2, [r3, #0]
}
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002222:	b480      	push	{r7}
 8002224:	b085      	sub	sp, #20
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d103      	bne.n	8002242 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e00c      	b.n	800225c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3308      	adds	r3, #8
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	e002      	b.n	8002250 <vListInsert+0x2e>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	429a      	cmp	r2, r3
 800225a:	d2f6      	bcs.n	800224a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	601a      	str	r2, [r3, #0]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6892      	ldr	r2, [r2, #8]
 80022aa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6852      	ldr	r2, [r2, #4]
 80022b4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d103      	bne.n	80022c8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	1e5a      	subs	r2, r3, #1
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10b      	bne.n	8002314 <xQueueGenericReset+0x2c>
        __asm volatile
 80022fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002300:	f383 8811 	msr	BASEPRI, r3
 8002304:	f3bf 8f6f 	isb	sy
 8002308:	f3bf 8f4f 	dsb	sy
 800230c:	60bb      	str	r3, [r7, #8]
    }
 800230e:	bf00      	nop
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002314:	f002 f8fa 	bl	800450c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002320:	68f9      	ldr	r1, [r7, #12]
 8002322:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	441a      	add	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002344:	3b01      	subs	r3, #1
 8002346:	68f9      	ldr	r1, [r7, #12]
 8002348:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	441a      	add	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	22ff      	movs	r2, #255	@ 0xff
 8002358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	22ff      	movs	r2, #255	@ 0xff
 8002360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d114      	bne.n	8002394 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d01a      	beq.n	80023a8 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3310      	adds	r3, #16
 8002376:	4618      	mov	r0, r3
 8002378:	f001 f938 	bl	80035ec <xTaskRemoveFromEventList>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d012      	beq.n	80023a8 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002382:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <xQueueGenericReset+0xd0>)
 8002384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	e009      	b.n	80023a8 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3310      	adds	r3, #16
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fef1 	bl	8002180 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3324      	adds	r3, #36	@ 0x24
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff feec 	bl	8002180 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80023a8:	f002 f8e2 	bl	8004570 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80023ac:	2301      	movs	r3, #1
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	e000ed04 	.word	0xe000ed04

080023bc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08c      	sub	sp, #48	@ 0x30
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	4613      	mov	r3, r2
 80023c8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10b      	bne.n	80023e8 <xQueueGenericCreate+0x2c>
        __asm volatile
 80023d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	61bb      	str	r3, [r7, #24]
    }
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d006      	beq.n	8002406 <xQueueGenericCreate+0x4a>
 80023f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	429a      	cmp	r2, r3
 8002404:	d101      	bne.n	800240a <xQueueGenericCreate+0x4e>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <xQueueGenericCreate+0x50>
 800240a:	2300      	movs	r3, #0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10b      	bne.n	8002428 <xQueueGenericCreate+0x6c>
        __asm volatile
 8002410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002414:	f383 8811 	msr	BASEPRI, r3
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	617b      	str	r3, [r7, #20]
    }
 8002422:	bf00      	nop
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800242e:	d90b      	bls.n	8002448 <xQueueGenericCreate+0x8c>
        __asm volatile
 8002430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	613b      	str	r3, [r7, #16]
    }
 8002442:	bf00      	nop
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	3350      	adds	r3, #80	@ 0x50
 800244c:	4618      	mov	r0, r3
 800244e:	f002 f98f 	bl	8004770 <pvPortMalloc>
 8002452:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00d      	beq.n	8002476 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3350      	adds	r3, #80	@ 0x50
 8002462:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002464:	79fa      	ldrb	r2, [r7, #7]
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	4613      	mov	r3, r2
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 f805 	bl	8002480 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002476:	6a3b      	ldr	r3, [r7, #32]
    }
 8002478:	4618      	mov	r0, r3
 800247a:	3728      	adds	r7, #40	@ 0x28
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d103      	bne.n	800249c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e002      	b.n	80024a2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024ae:	2101      	movs	r1, #1
 80024b0:	69b8      	ldr	r0, [r7, #24]
 80024b2:	f7ff ff19 	bl	80022e8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	68f9      	ldr	r1, [r7, #12]
 80024c4:	2073      	movs	r0, #115	@ 0x73
 80024c6:	f004 f87d 	bl	80065c4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b090      	sub	sp, #64	@ 0x40
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024e2:	2300      	movs	r3, #0
 80024e4:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80024ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10b      	bne.n	8002508 <xQueueGenericSend+0x34>
        __asm volatile
 80024f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024f4:	f383 8811 	msr	BASEPRI, r3
 80024f8:	f3bf 8f6f 	isb	sy
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002502:	bf00      	nop
 8002504:	bf00      	nop
 8002506:	e7fd      	b.n	8002504 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d103      	bne.n	8002516 <xQueueGenericSend+0x42>
 800250e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <xQueueGenericSend+0x46>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <xQueueGenericSend+0x48>
 800251a:	2300      	movs	r3, #0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10b      	bne.n	8002538 <xQueueGenericSend+0x64>
        __asm volatile
 8002520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002524:	f383 8811 	msr	BASEPRI, r3
 8002528:	f3bf 8f6f 	isb	sy
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002532:	bf00      	nop
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d103      	bne.n	8002546 <xQueueGenericSend+0x72>
 800253e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <xQueueGenericSend+0x76>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <xQueueGenericSend+0x78>
 800254a:	2300      	movs	r3, #0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10b      	bne.n	8002568 <xQueueGenericSend+0x94>
        __asm volatile
 8002550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002554:	f383 8811 	msr	BASEPRI, r3
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	623b      	str	r3, [r7, #32]
    }
 8002562:	bf00      	nop
 8002564:	bf00      	nop
 8002566:	e7fd      	b.n	8002564 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002568:	f001 f9e4 	bl	8003934 <xTaskGetSchedulerState>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <xQueueGenericSend+0xa4>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <xQueueGenericSend+0xa8>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <xQueueGenericSend+0xaa>
 800257c:	2300      	movs	r3, #0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10b      	bne.n	800259a <xQueueGenericSend+0xc6>
        __asm volatile
 8002582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002586:	f383 8811 	msr	BASEPRI, r3
 800258a:	f3bf 8f6f 	isb	sy
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	61fb      	str	r3, [r7, #28]
    }
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	e7fd      	b.n	8002596 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800259a:	f001 ffb7 	bl	800450c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800259e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d302      	bcc.n	80025b0 <xQueueGenericSend+0xdc>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d136      	bne.n	800261e <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 80025b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b2:	4618      	mov	r0, r3
 80025b4:	f004 fd94 	bl	80070e0 <SEGGER_SYSVIEW_ShrinkId>
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	460b      	mov	r3, r1
 80025c2:	4601      	mov	r1, r0
 80025c4:	205a      	movs	r0, #90	@ 0x5a
 80025c6:	f004 f873 	bl	80066b0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025d0:	f000 fa80 	bl	8002ad4 <prvCopyDataToQueue>
 80025d4:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d010      	beq.n	8002600 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e0:	3324      	adds	r3, #36	@ 0x24
 80025e2:	4618      	mov	r0, r3
 80025e4:	f001 f802 	bl	80035ec <xTaskRemoveFromEventList>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d013      	beq.n	8002616 <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80025ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002724 <xQueueGenericSend+0x250>)
 80025f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	f3bf 8f4f 	dsb	sy
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	e00a      	b.n	8002616 <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002606:	4b47      	ldr	r3, [pc, #284]	@ (8002724 <xQueueGenericSend+0x250>)
 8002608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	f3bf 8f4f 	dsb	sy
 8002612:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002616:	f001 ffab 	bl	8004570 <vPortExitCritical>
                return pdPASS;
 800261a:	2301      	movs	r3, #1
 800261c:	e07d      	b.n	800271a <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d110      	bne.n	8002646 <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002624:	f001 ffa4 	bl	8004570 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262a:	4618      	mov	r0, r3
 800262c:	f004 fd58 	bl	80070e0 <SEGGER_SYSVIEW_ShrinkId>
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	460b      	mov	r3, r1
 800263a:	4601      	mov	r1, r0
 800263c:	205a      	movs	r0, #90	@ 0x5a
 800263e:	f004 f837 	bl	80066b0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002642:	2300      	movs	r3, #0
 8002644:	e069      	b.n	800271a <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002648:	2b00      	cmp	r3, #0
 800264a:	d106      	bne.n	800265a <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	4618      	mov	r0, r3
 8002652:	f001 f833 	bl	80036bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002656:	2301      	movs	r3, #1
 8002658:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800265a:	f001 ff89 	bl	8004570 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800265e:	f000 fd75 	bl	800314c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002662:	f001 ff53 	bl	800450c <vPortEnterCritical>
 8002666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002668:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800266c:	b25b      	sxtb	r3, r3
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d103      	bne.n	800267c <xQueueGenericSend+0x1a8>
 8002674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800267c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002682:	b25b      	sxtb	r3, r3
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d103      	bne.n	8002692 <xQueueGenericSend+0x1be>
 800268a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002692:	f001 ff6d 	bl	8004570 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002696:	1d3a      	adds	r2, r7, #4
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f001 f822 	bl	80036e8 <xTaskCheckForTimeOut>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d124      	bne.n	80026f4 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026ac:	f000 fb0a 	bl	8002cc4 <prvIsQueueFull>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d018      	beq.n	80026e8 <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b8:	3310      	adds	r3, #16
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 ff3e 	bl	8003540 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80026c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026c6:	f000 fa95 	bl	8002bf4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80026ca:	f000 fd4d 	bl	8003168 <xTaskResumeAll>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f47f af62 	bne.w	800259a <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80026d6:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <xQueueGenericSend+0x250>)
 80026d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	f3bf 8f4f 	dsb	sy
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	e758      	b.n	800259a <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80026e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026ea:	f000 fa83 	bl	8002bf4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80026ee:	f000 fd3b 	bl	8003168 <xTaskResumeAll>
 80026f2:	e752      	b.n	800259a <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80026f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026f6:	f000 fa7d 	bl	8002bf4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026fa:	f000 fd35 	bl	8003168 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80026fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002700:	4618      	mov	r0, r3
 8002702:	f004 fced 	bl	80070e0 <SEGGER_SYSVIEW_ShrinkId>
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	460b      	mov	r3, r1
 8002710:	4601      	mov	r1, r0
 8002712:	205a      	movs	r0, #90	@ 0x5a
 8002714:	f003 ffcc 	bl	80066b0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002718:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800271a:	4618      	mov	r0, r3
 800271c:	3738      	adds	r7, #56	@ 0x38
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	e000ed04 	.word	0xe000ed04

08002728 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b090      	sub	sp, #64	@ 0x40
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800273a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10b      	bne.n	8002758 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8002740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002744:	f383 8811 	msr	BASEPRI, r3
 8002748:	f3bf 8f6f 	isb	sy
 800274c:	f3bf 8f4f 	dsb	sy
 8002750:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002752:	bf00      	nop
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <xQueueGenericSendFromISR+0x3e>
 800275e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <xQueueGenericSendFromISR+0x42>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <xQueueGenericSendFromISR+0x44>
 800276a:	2300      	movs	r3, #0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10b      	bne.n	8002788 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8002770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002774:	f383 8811 	msr	BASEPRI, r3
 8002778:	f3bf 8f6f 	isb	sy
 800277c:	f3bf 8f4f 	dsb	sy
 8002780:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002782:	bf00      	nop
 8002784:	bf00      	nop
 8002786:	e7fd      	b.n	8002784 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d103      	bne.n	8002796 <xQueueGenericSendFromISR+0x6e>
 800278e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <xQueueGenericSendFromISR+0x72>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <xQueueGenericSendFromISR+0x74>
 800279a:	2300      	movs	r3, #0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10b      	bne.n	80027b8 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80027a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a4:	f383 8811 	msr	BASEPRI, r3
 80027a8:	f3bf 8f6f 	isb	sy
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	623b      	str	r3, [r7, #32]
    }
 80027b2:	bf00      	nop
 80027b4:	bf00      	nop
 80027b6:	e7fd      	b.n	80027b4 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027b8:	f001 ff98 	bl	80046ec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80027bc:	f3ef 8211 	mrs	r2, BASEPRI
 80027c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	61fa      	str	r2, [r7, #28]
 80027d2:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80027d4:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027d6:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d302      	bcc.n	80027ea <xQueueGenericSendFromISR+0xc2>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d149      	bne.n	800287e <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80027ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80027fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027fc:	4618      	mov	r0, r3
 80027fe:	f004 fc6f 	bl	80070e0 <SEGGER_SYSVIEW_ShrinkId>
 8002802:	4601      	mov	r1, r0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	461a      	mov	r2, r3
 8002808:	2060      	movs	r0, #96	@ 0x60
 800280a:	f003 fe81 	bl	8006510 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002814:	f000 f95e 	bl	8002ad4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002818:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d112      	bne.n	8002848 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002826:	2b00      	cmp	r3, #0
 8002828:	d026      	beq.n	8002878 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800282a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800282c:	3324      	adds	r3, #36	@ 0x24
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fedc 	bl	80035ec <xTaskRemoveFromEventList>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01e      	beq.n	8002878 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01b      	beq.n	8002878 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	e017      	b.n	8002878 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002848:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800284c:	2b7f      	cmp	r3, #127	@ 0x7f
 800284e:	d10b      	bne.n	8002868 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8002850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	617b      	str	r3, [r7, #20]
    }
 8002862:	bf00      	nop
 8002864:	bf00      	nop
 8002866:	e7fd      	b.n	8002864 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002868:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800286c:	3301      	adds	r3, #1
 800286e:	b2db      	uxtb	r3, r3
 8002870:	b25a      	sxtb	r2, r3
 8002872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8002878:	2301      	movs	r3, #1
 800287a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 800287c:	e00b      	b.n	8002896 <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800287e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002880:	4618      	mov	r0, r3
 8002882:	f004 fc2d 	bl	80070e0 <SEGGER_SYSVIEW_ShrinkId>
 8002886:	4601      	mov	r1, r0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	461a      	mov	r2, r3
 800288c:	2060      	movs	r0, #96	@ 0x60
 800288e:	f003 fe3f 	bl	8006510 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002892:	2300      	movs	r3, #0
 8002894:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002898:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80028a0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80028a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3740      	adds	r7, #64	@ 0x40
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b08f      	sub	sp, #60	@ 0x3c
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80028c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10b      	bne.n	80028de <xQueueReceive+0x32>
        __asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	623b      	str	r3, [r7, #32]
    }
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	e7fd      	b.n	80028da <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d103      	bne.n	80028ec <xQueueReceive+0x40>
 80028e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <xQueueReceive+0x44>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <xQueueReceive+0x46>
 80028f0:	2300      	movs	r3, #0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10b      	bne.n	800290e <xQueueReceive+0x62>
        __asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	61fb      	str	r3, [r7, #28]
    }
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	e7fd      	b.n	800290a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800290e:	f001 f811 	bl	8003934 <xTaskGetSchedulerState>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d102      	bne.n	800291e <xQueueReceive+0x72>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <xQueueReceive+0x76>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <xQueueReceive+0x78>
 8002922:	2300      	movs	r3, #0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10b      	bne.n	8002940 <xQueueReceive+0x94>
        __asm volatile
 8002928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	61bb      	str	r3, [r7, #24]
    }
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	e7fd      	b.n	800293c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002940:	f001 fde4 	bl	800450c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	2b00      	cmp	r3, #0
 800294e:	d02f      	beq.n	80029b0 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002954:	f000 f928 	bl	8002ba8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295a:	4618      	mov	r0, r3
 800295c:	f004 fbc0 	bl	80070e0 <SEGGER_SYSVIEW_ShrinkId>
 8002960:	4604      	mov	r4, r0
 8002962:	2000      	movs	r0, #0
 8002964:	f004 fbbc 	bl	80070e0 <SEGGER_SYSVIEW_ShrinkId>
 8002968:	4602      	mov	r2, r0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2101      	movs	r1, #1
 800296e:	9100      	str	r1, [sp, #0]
 8002970:	4621      	mov	r1, r4
 8002972:	205c      	movs	r0, #92	@ 0x5c
 8002974:	f003 fe9c 	bl	80066b0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	1e5a      	subs	r2, r3, #1
 800297c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00f      	beq.n	80029a8 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298a:	3310      	adds	r3, #16
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fe2d 	bl	80035ec <xTaskRemoveFromEventList>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002998:	4b4d      	ldr	r3, [pc, #308]	@ (8002ad0 <xQueueReceive+0x224>)
 800299a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80029a8:	f001 fde2 	bl	8004570 <vPortExitCritical>
                return pdPASS;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e08a      	b.n	8002ac6 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d113      	bne.n	80029de <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80029b6:	f001 fddb 	bl	8004570 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80029ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029bc:	4618      	mov	r0, r3
 80029be:	f004 fb8f 	bl	80070e0 <SEGGER_SYSVIEW_ShrinkId>
 80029c2:	4604      	mov	r4, r0
 80029c4:	2000      	movs	r0, #0
 80029c6:	f004 fb8b 	bl	80070e0 <SEGGER_SYSVIEW_ShrinkId>
 80029ca:	4602      	mov	r2, r0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2101      	movs	r1, #1
 80029d0:	9100      	str	r1, [sp, #0]
 80029d2:	4621      	mov	r1, r4
 80029d4:	205c      	movs	r0, #92	@ 0x5c
 80029d6:	f003 fe6b 	bl	80066b0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80029da:	2300      	movs	r3, #0
 80029dc:	e073      	b.n	8002ac6 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80029de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d106      	bne.n	80029f2 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80029e4:	f107 0310 	add.w	r3, r7, #16
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fe67 	bl	80036bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80029ee:	2301      	movs	r3, #1
 80029f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80029f2:	f001 fdbd 	bl	8004570 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80029f6:	f000 fba9 	bl	800314c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80029fa:	f001 fd87 	bl	800450c <vPortEnterCritical>
 80029fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a04:	b25b      	sxtb	r3, r3
 8002a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0a:	d103      	bne.n	8002a14 <xQueueReceive+0x168>
 8002a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a1a:	b25b      	sxtb	r3, r3
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d103      	bne.n	8002a2a <xQueueReceive+0x17e>
 8002a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a2a:	f001 fda1 	bl	8004570 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a2e:	1d3a      	adds	r2, r7, #4
 8002a30:	f107 0310 	add.w	r3, r7, #16
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fe56 	bl	80036e8 <xTaskCheckForTimeOut>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d124      	bne.n	8002a8c <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a44:	f000 f928 	bl	8002c98 <prvIsQueueEmpty>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d018      	beq.n	8002a80 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a50:	3324      	adds	r3, #36	@ 0x24
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	4611      	mov	r1, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fd72 	bl	8003540 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a5e:	f000 f8c9 	bl	8002bf4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a62:	f000 fb81 	bl	8003168 <xTaskResumeAll>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f47f af69 	bne.w	8002940 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002a6e:	4b18      	ldr	r3, [pc, #96]	@ (8002ad0 <xQueueReceive+0x224>)
 8002a70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	e75f      	b.n	8002940 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a82:	f000 f8b7 	bl	8002bf4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a86:	f000 fb6f 	bl	8003168 <xTaskResumeAll>
 8002a8a:	e759      	b.n	8002940 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a8e:	f000 f8b1 	bl	8002bf4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a92:	f000 fb69 	bl	8003168 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a98:	f000 f8fe 	bl	8002c98 <prvIsQueueEmpty>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f43f af4e 	beq.w	8002940 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f004 fb1a 	bl	80070e0 <SEGGER_SYSVIEW_ShrinkId>
 8002aac:	4604      	mov	r4, r0
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f004 fb16 	bl	80070e0 <SEGGER_SYSVIEW_ShrinkId>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2101      	movs	r1, #1
 8002aba:	9100      	str	r1, [sp, #0]
 8002abc:	4621      	mov	r1, r4
 8002abe:	205c      	movs	r0, #92	@ 0x5c
 8002ac0:	f003 fdf6 	bl	80066b0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002ac4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3734      	adds	r7, #52	@ 0x34
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd90      	pop	{r4, r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	e000ed04 	.word	0xe000ed04

08002ad4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10d      	bne.n	8002b0e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d14d      	bne.n	8002b96 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 ff36 	bl	8003970 <xTaskPriorityDisinherit>
 8002b04:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	e043      	b.n	8002b96 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d119      	bne.n	8002b48 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6858      	ldr	r0, [r3, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	f004 fca4 	bl	800746c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	441a      	add	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d32b      	bcc.n	8002b96 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	e026      	b.n	8002b96 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	68d8      	ldr	r0, [r3, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	461a      	mov	r2, r3
 8002b52:	68b9      	ldr	r1, [r7, #8]
 8002b54:	f004 fc8a 	bl	800746c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	425b      	negs	r3, r3
 8002b62:	441a      	add	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d207      	bcs.n	8002b84 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	425b      	negs	r3, r3
 8002b7e:	441a      	add	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d105      	bne.n	8002b96 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002b9e:	697b      	ldr	r3, [r7, #20]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d018      	beq.n	8002bec <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	441a      	add	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d303      	bcc.n	8002bdc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68d9      	ldr	r1, [r3, #12]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	461a      	mov	r2, r3
 8002be6:	6838      	ldr	r0, [r7, #0]
 8002be8:	f004 fc40 	bl	800746c <memcpy>
    }
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002bfc:	f001 fc86 	bl	800450c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c06:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c08:	e011      	b.n	8002c2e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d012      	beq.n	8002c38 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3324      	adds	r3, #36	@ 0x24
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fce8 	bl	80035ec <xTaskRemoveFromEventList>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002c22:	f000 fdc9 	bl	80037b8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	dce9      	bgt.n	8002c0a <prvUnlockQueue+0x16>
 8002c36:	e000      	b.n	8002c3a <prvUnlockQueue+0x46>
                        break;
 8002c38:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	22ff      	movs	r2, #255	@ 0xff
 8002c3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002c42:	f001 fc95 	bl	8004570 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002c46:	f001 fc61 	bl	800450c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c50:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c52:	e011      	b.n	8002c78 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d012      	beq.n	8002c82 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3310      	adds	r3, #16
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 fcc3 	bl	80035ec <xTaskRemoveFromEventList>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002c6c:	f000 fda4 	bl	80037b8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002c70:	7bbb      	ldrb	r3, [r7, #14]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	dce9      	bgt.n	8002c54 <prvUnlockQueue+0x60>
 8002c80:	e000      	b.n	8002c84 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002c82:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	22ff      	movs	r2, #255	@ 0xff
 8002c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002c8c:	f001 fc70 	bl	8004570 <vPortExitCritical>
}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ca0:	f001 fc34 	bl	800450c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002cac:	2301      	movs	r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	e001      	b.n	8002cb6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002cb6:	f001 fc5b 	bl	8004570 <vPortExitCritical>

    return xReturn;
 8002cba:	68fb      	ldr	r3, [r7, #12]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ccc:	f001 fc1e 	bl	800450c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d102      	bne.n	8002ce2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e001      	b.n	8002ce6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002ce6:	f001 fc43 	bl	8004570 <vPortExitCritical>

    return xReturn;
 8002cea:	68fb      	ldr	r3, [r7, #12]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	e01e      	b.n	8002d42 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d04:	4a13      	ldr	r2, [pc, #76]	@ (8002d54 <vQueueAddToRegistry+0x60>)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d115      	bne.n	8002d3c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d10:	4910      	ldr	r1, [pc, #64]	@ (8002d54 <vQueueAddToRegistry+0x60>)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002d1a:	4a0e      	ldr	r2, [pc, #56]	@ (8002d54 <vQueueAddToRegistry+0x60>)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f004 f9d9 	bl	80070e0 <SEGGER_SYSVIEW_ShrinkId>
 8002d2e:	4601      	mov	r1, r0
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	2071      	movs	r0, #113	@ 0x71
 8002d36:	f003 fbeb 	bl	8006510 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002d3a:	e006      	b.n	8002d4a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2b07      	cmp	r3, #7
 8002d46:	d9dd      	bls.n	8002d04 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000084 	.word	0x20000084

08002d58 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002d68:	f001 fbd0 	bl	800450c <vPortEnterCritical>
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d72:	b25b      	sxtb	r3, r3
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d78:	d103      	bne.n	8002d82 <vQueueWaitForMessageRestricted+0x2a>
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d88:	b25b      	sxtb	r3, r3
 8002d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8e:	d103      	bne.n	8002d98 <vQueueWaitForMessageRestricted+0x40>
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d98:	f001 fbea 	bl	8004570 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d106      	bne.n	8002db2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	3324      	adds	r3, #36	@ 0x24
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fbed 	bl	800358c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002db2:	6978      	ldr	r0, [r7, #20]
 8002db4:	f7ff ff1e 	bl	8002bf4 <prvUnlockQueue>
    }
 8002db8:	bf00      	nop
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08c      	sub	sp, #48	@ 0x30
 8002dc4:	af04      	add	r7, sp, #16
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f001 fccb 	bl	8004770 <pvPortMalloc>
 8002dda:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00e      	beq.n	8002e00 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002de2:	2058      	movs	r0, #88	@ 0x58
 8002de4:	f001 fcc4 	bl	8004770 <pvPortMalloc>
 8002de8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002df6:	e005      	b.n	8002e04 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002df8:	6978      	ldr	r0, [r7, #20]
 8002dfa:	f001 fd9b 	bl	8004934 <vPortFree>
 8002dfe:	e001      	b.n	8002e04 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d013      	beq.n	8002e32 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e0a:	88fa      	ldrh	r2, [r7, #6]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	9303      	str	r3, [sp, #12]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	9302      	str	r3, [sp, #8]
 8002e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f80e 	bl	8002e42 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002e26:	69f8      	ldr	r0, [r7, #28]
 8002e28:	f000 f8a2 	bl	8002f70 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	e002      	b.n	8002e38 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002e38:	69bb      	ldr	r3, [r7, #24]
    }
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b088      	sub	sp, #32
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e52:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	21a5      	movs	r1, #165	@ 0xa5
 8002e5c:	f004 fada 	bl	8007414 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f023 0307 	bic.w	r3, r3, #7
 8002e78:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00b      	beq.n	8002e9c <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	617b      	str	r3, [r7, #20]
    }
 8002e96:	bf00      	nop
 8002e98:	bf00      	nop
 8002e9a:	e7fd      	b.n	8002e98 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d01f      	beq.n	8002ee2 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
 8002ea6:	e012      	b.n	8002ece <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	4413      	add	r3, r2
 8002eae:	7819      	ldrb	r1, [r3, #0]
 8002eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3334      	adds	r3, #52	@ 0x34
 8002eb8:	460a      	mov	r2, r1
 8002eba:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d006      	beq.n	8002ed6 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	2b09      	cmp	r3, #9
 8002ed2:	d9e9      	bls.n	8002ea8 <prvInitialiseNewTask+0x66>
 8002ed4:	e000      	b.n	8002ed8 <prvInitialiseNewTask+0x96>
            {
                break;
 8002ed6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002ee0:	e003      	b.n	8002eea <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d901      	bls.n	8002ef4 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ef8:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002efc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002efe:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f02:	2200      	movs	r2, #0
 8002f04:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f08:	3304      	adds	r3, #4
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff f958 	bl	80021c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f12:	3318      	adds	r3, #24
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff f953 	bl	80021c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f1e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f22:	f1c3 0205 	rsb	r2, r3, #5
 8002f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f28:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f2e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f32:	3350      	adds	r3, #80	@ 0x50
 8002f34:	2204      	movs	r2, #4
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f004 fa6b 	bl	8007414 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f40:	3354      	adds	r3, #84	@ 0x54
 8002f42:	2201      	movs	r2, #1
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f004 fa64 	bl	8007414 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	68f9      	ldr	r1, [r7, #12]
 8002f50:	69b8      	ldr	r0, [r7, #24]
 8002f52:	f001 f925 	bl	80041a0 <pxPortInitialiseStack>
 8002f56:	4602      	mov	r2, r0
 8002f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f66:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f68:	bf00      	nop
 8002f6a:	3720      	adds	r7, #32
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002f70:	b5b0      	push	{r4, r5, r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002f78:	f001 fac8 	bl	800450c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002f7c:	4b3b      	ldr	r3, [pc, #236]	@ (800306c <prvAddNewTaskToReadyList+0xfc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3301      	adds	r3, #1
 8002f82:	4a3a      	ldr	r2, [pc, #232]	@ (800306c <prvAddNewTaskToReadyList+0xfc>)
 8002f84:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002f86:	4b3a      	ldr	r3, [pc, #232]	@ (8003070 <prvAddNewTaskToReadyList+0x100>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002f8e:	4a38      	ldr	r2, [pc, #224]	@ (8003070 <prvAddNewTaskToReadyList+0x100>)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f94:	4b35      	ldr	r3, [pc, #212]	@ (800306c <prvAddNewTaskToReadyList+0xfc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d110      	bne.n	8002fbe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002f9c:	f000 fc30 	bl	8003800 <prvInitialiseTaskLists>
 8002fa0:	e00d      	b.n	8002fbe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002fa2:	4b34      	ldr	r3, [pc, #208]	@ (8003074 <prvAddNewTaskToReadyList+0x104>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002faa:	4b31      	ldr	r3, [pc, #196]	@ (8003070 <prvAddNewTaskToReadyList+0x100>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d802      	bhi.n	8002fbe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8003070 <prvAddNewTaskToReadyList+0x100>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8003078 <prvAddNewTaskToReadyList+0x108>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8003078 <prvAddNewTaskToReadyList+0x108>)
 8002fc6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003078 <prvAddNewTaskToReadyList+0x108>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d016      	beq.n	8003004 <prvAddNewTaskToReadyList+0x94>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f003 ff5b 	bl	8006e94 <SEGGER_SYSVIEW_OnTaskCreate>
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fee:	461d      	mov	r5, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	461c      	mov	r4, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	1ae3      	subs	r3, r4, r3
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	462b      	mov	r3, r5
 8003000:	f001 fe68 	bl	8004cd4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4618      	mov	r0, r3
 8003008:	f003 ffc8 	bl	8006f9c <SEGGER_SYSVIEW_OnTaskStartReady>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	2201      	movs	r2, #1
 8003012:	409a      	lsls	r2, r3
 8003014:	4b19      	ldr	r3, [pc, #100]	@ (800307c <prvAddNewTaskToReadyList+0x10c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4313      	orrs	r3, r2
 800301a:	4a18      	ldr	r2, [pc, #96]	@ (800307c <prvAddNewTaskToReadyList+0x10c>)
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4a15      	ldr	r2, [pc, #84]	@ (8003080 <prvAddNewTaskToReadyList+0x110>)
 800302c:	441a      	add	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3304      	adds	r3, #4
 8003032:	4619      	mov	r1, r3
 8003034:	4610      	mov	r0, r2
 8003036:	f7ff f8d0 	bl	80021da <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800303a:	f001 fa99 	bl	8004570 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800303e:	4b0d      	ldr	r3, [pc, #52]	@ (8003074 <prvAddNewTaskToReadyList+0x104>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00e      	beq.n	8003064 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003046:	4b0a      	ldr	r3, [pc, #40]	@ (8003070 <prvAddNewTaskToReadyList+0x100>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	429a      	cmp	r2, r3
 8003052:	d207      	bcs.n	8003064 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003054:	4b0b      	ldr	r3, [pc, #44]	@ (8003084 <prvAddNewTaskToReadyList+0x114>)
 8003056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bdb0      	pop	{r4, r5, r7, pc}
 800306c:	2000019c 	.word	0x2000019c
 8003070:	200000c4 	.word	0x200000c4
 8003074:	200001a8 	.word	0x200001a8
 8003078:	200001b8 	.word	0x200001b8
 800307c:	200001a4 	.word	0x200001a4
 8003080:	200000c8 	.word	0x200000c8
 8003084:	e000ed04 	.word	0xe000ed04

08003088 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800308e:	4b27      	ldr	r3, [pc, #156]	@ (800312c <vTaskStartScheduler+0xa4>)
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	2300      	movs	r3, #0
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	2300      	movs	r3, #0
 8003098:	2282      	movs	r2, #130	@ 0x82
 800309a:	4925      	ldr	r1, [pc, #148]	@ (8003130 <vTaskStartScheduler+0xa8>)
 800309c:	4825      	ldr	r0, [pc, #148]	@ (8003134 <vTaskStartScheduler+0xac>)
 800309e:	f7ff fe8f 	bl	8002dc0 <xTaskCreate>
 80030a2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d102      	bne.n	80030b0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80030aa:	f000 fd5b 	bl	8003b64 <xTimerCreateTimerTask>
 80030ae:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d124      	bne.n	8003100 <vTaskStartScheduler+0x78>
        __asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	60bb      	str	r3, [r7, #8]
    }
 80030c8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80030ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003138 <vTaskStartScheduler+0xb0>)
 80030cc:	f04f 32ff 	mov.w	r2, #4294967295
 80030d0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80030d2:	4b1a      	ldr	r3, [pc, #104]	@ (800313c <vTaskStartScheduler+0xb4>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030d8:	4b19      	ldr	r3, [pc, #100]	@ (8003140 <vTaskStartScheduler+0xb8>)
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80030de:	4b19      	ldr	r3, [pc, #100]	@ (8003144 <vTaskStartScheduler+0xbc>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b12      	ldr	r3, [pc, #72]	@ (800312c <vTaskStartScheduler+0xa4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d102      	bne.n	80030f0 <vTaskStartScheduler+0x68>
 80030ea:	f003 feb7 	bl	8006e5c <SEGGER_SYSVIEW_OnIdle>
 80030ee:	e004      	b.n	80030fa <vTaskStartScheduler+0x72>
 80030f0:	4b14      	ldr	r3, [pc, #80]	@ (8003144 <vTaskStartScheduler+0xbc>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 ff0f 	bl	8006f18 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80030fa:	f001 f8e3 	bl	80042c4 <xPortStartScheduler>
 80030fe:	e00f      	b.n	8003120 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003106:	d10b      	bne.n	8003120 <vTaskStartScheduler+0x98>
        __asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	607b      	str	r3, [r7, #4]
    }
 800311a:	bf00      	nop
 800311c:	bf00      	nop
 800311e:	e7fd      	b.n	800311c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003120:	4b09      	ldr	r3, [pc, #36]	@ (8003148 <vTaskStartScheduler+0xc0>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	200001c0 	.word	0x200001c0
 8003130:	0800753c 	.word	0x0800753c
 8003134:	080037d1 	.word	0x080037d1
 8003138:	200001bc 	.word	0x200001bc
 800313c:	200001a8 	.word	0x200001a8
 8003140:	200001a0 	.word	0x200001a0
 8003144:	200000c4 	.word	0x200000c4
 8003148:	2000000c 	.word	0x2000000c

0800314c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003150:	4b04      	ldr	r3, [pc, #16]	@ (8003164 <vTaskSuspendAll+0x18>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3301      	adds	r3, #1
 8003156:	4a03      	ldr	r2, [pc, #12]	@ (8003164 <vTaskSuspendAll+0x18>)
 8003158:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	200001c4 	.word	0x200001c4

08003168 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003176:	4b44      	ldr	r3, [pc, #272]	@ (8003288 <xTaskResumeAll+0x120>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10b      	bne.n	8003196 <xTaskResumeAll+0x2e>
        __asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	603b      	str	r3, [r7, #0]
    }
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	e7fd      	b.n	8003192 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003196:	f001 f9b9 	bl	800450c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800319a:	4b3b      	ldr	r3, [pc, #236]	@ (8003288 <xTaskResumeAll+0x120>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3b01      	subs	r3, #1
 80031a0:	4a39      	ldr	r2, [pc, #228]	@ (8003288 <xTaskResumeAll+0x120>)
 80031a2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031a4:	4b38      	ldr	r3, [pc, #224]	@ (8003288 <xTaskResumeAll+0x120>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d165      	bne.n	8003278 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031ac:	4b37      	ldr	r3, [pc, #220]	@ (800328c <xTaskResumeAll+0x124>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d061      	beq.n	8003278 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031b4:	e032      	b.n	800321c <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031b6:	4b36      	ldr	r3, [pc, #216]	@ (8003290 <xTaskResumeAll+0x128>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	3318      	adds	r3, #24
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff f866 	bl	8002294 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3304      	adds	r3, #4
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff f861 	bl	8002294 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 fee1 	bl	8006f9c <SEGGER_SYSVIEW_OnTaskStartReady>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031de:	2201      	movs	r2, #1
 80031e0:	409a      	lsls	r2, r3
 80031e2:	4b2c      	ldr	r3, [pc, #176]	@ (8003294 <xTaskResumeAll+0x12c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003294 <xTaskResumeAll+0x12c>)
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4a27      	ldr	r2, [pc, #156]	@ (8003298 <xTaskResumeAll+0x130>)
 80031fa:	441a      	add	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3304      	adds	r3, #4
 8003200:	4619      	mov	r1, r3
 8003202:	4610      	mov	r0, r2
 8003204:	f7fe ffe9 	bl	80021da <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800320c:	4b23      	ldr	r3, [pc, #140]	@ (800329c <xTaskResumeAll+0x134>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003212:	429a      	cmp	r2, r3
 8003214:	d302      	bcc.n	800321c <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8003216:	4b22      	ldr	r3, [pc, #136]	@ (80032a0 <xTaskResumeAll+0x138>)
 8003218:	2201      	movs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800321c:	4b1c      	ldr	r3, [pc, #112]	@ (8003290 <xTaskResumeAll+0x128>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1c8      	bne.n	80031b6 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800322a:	f000 fb67 	bl	80038fc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800322e:	4b1d      	ldr	r3, [pc, #116]	@ (80032a4 <xTaskResumeAll+0x13c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d010      	beq.n	800325c <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800323a:	f000 f859 	bl	80032f0 <xTaskIncrementTick>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8003244:	4b16      	ldr	r3, [pc, #88]	@ (80032a0 <xTaskResumeAll+0x138>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3b01      	subs	r3, #1
 800324e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f1      	bne.n	800323a <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8003256:	4b13      	ldr	r3, [pc, #76]	@ (80032a4 <xTaskResumeAll+0x13c>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800325c:	4b10      	ldr	r3, [pc, #64]	@ (80032a0 <xTaskResumeAll+0x138>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d009      	beq.n	8003278 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003264:	2301      	movs	r3, #1
 8003266:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003268:	4b0f      	ldr	r3, [pc, #60]	@ (80032a8 <xTaskResumeAll+0x140>)
 800326a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003278:	f001 f97a 	bl	8004570 <vPortExitCritical>

    return xAlreadyYielded;
 800327c:	68bb      	ldr	r3, [r7, #8]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	200001c4 	.word	0x200001c4
 800328c:	2000019c 	.word	0x2000019c
 8003290:	2000015c 	.word	0x2000015c
 8003294:	200001a4 	.word	0x200001a4
 8003298:	200000c8 	.word	0x200000c8
 800329c:	200000c4 	.word	0x200000c4
 80032a0:	200001b0 	.word	0x200001b0
 80032a4:	200001ac 	.word	0x200001ac
 80032a8:	e000ed04 	.word	0xe000ed04

080032ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80032b2:	4b05      	ldr	r3, [pc, #20]	@ (80032c8 <xTaskGetTickCount+0x1c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80032b8:	687b      	ldr	r3, [r7, #4]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	200001a0 	.word	0x200001a0

080032cc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032d2:	f001 fa0b 	bl	80046ec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80032d6:	2300      	movs	r3, #0
 80032d8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80032da:	4b04      	ldr	r3, [pc, #16]	@ (80032ec <xTaskGetTickCountFromISR+0x20>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80032e0:	683b      	ldr	r3, [r7, #0]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	200001a0 	.word	0x200001a0

080032f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032fa:	4b51      	ldr	r3, [pc, #324]	@ (8003440 <xTaskIncrementTick+0x150>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f040 8093 	bne.w	800342a <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003304:	4b4f      	ldr	r3, [pc, #316]	@ (8003444 <xTaskIncrementTick+0x154>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3301      	adds	r3, #1
 800330a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800330c:	4a4d      	ldr	r2, [pc, #308]	@ (8003444 <xTaskIncrementTick+0x154>)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d121      	bne.n	800335c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003318:	4b4b      	ldr	r3, [pc, #300]	@ (8003448 <xTaskIncrementTick+0x158>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <xTaskIncrementTick+0x4a>
        __asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	603b      	str	r3, [r7, #0]
    }
 8003334:	bf00      	nop
 8003336:	bf00      	nop
 8003338:	e7fd      	b.n	8003336 <xTaskIncrementTick+0x46>
 800333a:	4b43      	ldr	r3, [pc, #268]	@ (8003448 <xTaskIncrementTick+0x158>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	4b42      	ldr	r3, [pc, #264]	@ (800344c <xTaskIncrementTick+0x15c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a40      	ldr	r2, [pc, #256]	@ (8003448 <xTaskIncrementTick+0x158>)
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	4a40      	ldr	r2, [pc, #256]	@ (800344c <xTaskIncrementTick+0x15c>)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b40      	ldr	r3, [pc, #256]	@ (8003450 <xTaskIncrementTick+0x160>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	4a3e      	ldr	r2, [pc, #248]	@ (8003450 <xTaskIncrementTick+0x160>)
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	f000 fad0 	bl	80038fc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800335c:	4b3d      	ldr	r3, [pc, #244]	@ (8003454 <xTaskIncrementTick+0x164>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	429a      	cmp	r2, r3
 8003364:	d34c      	bcc.n	8003400 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003366:	4b38      	ldr	r3, [pc, #224]	@ (8003448 <xTaskIncrementTick+0x158>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d104      	bne.n	800337a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003370:	4b38      	ldr	r3, [pc, #224]	@ (8003454 <xTaskIncrementTick+0x164>)
 8003372:	f04f 32ff 	mov.w	r2, #4294967295
 8003376:	601a      	str	r2, [r3, #0]
                    break;
 8003378:	e042      	b.n	8003400 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800337a:	4b33      	ldr	r3, [pc, #204]	@ (8003448 <xTaskIncrementTick+0x158>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	429a      	cmp	r2, r3
 8003390:	d203      	bcs.n	800339a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003392:	4a30      	ldr	r2, [pc, #192]	@ (8003454 <xTaskIncrementTick+0x164>)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003398:	e032      	b.n	8003400 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	3304      	adds	r3, #4
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe ff78 	bl	8002294 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d004      	beq.n	80033b6 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	3318      	adds	r3, #24
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe ff6f 	bl	8002294 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f003 fdef 	bl	8006f9c <SEGGER_SYSVIEW_OnTaskStartReady>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c2:	2201      	movs	r2, #1
 80033c4:	409a      	lsls	r2, r3
 80033c6:	4b24      	ldr	r3, [pc, #144]	@ (8003458 <xTaskIncrementTick+0x168>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	4a22      	ldr	r2, [pc, #136]	@ (8003458 <xTaskIncrementTick+0x168>)
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4a1f      	ldr	r2, [pc, #124]	@ (800345c <xTaskIncrementTick+0x16c>)
 80033de:	441a      	add	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	3304      	adds	r3, #4
 80033e4:	4619      	mov	r1, r3
 80033e6:	4610      	mov	r0, r2
 80033e8:	f7fe fef7 	bl	80021da <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003460 <xTaskIncrementTick+0x170>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d3b5      	bcc.n	8003366 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80033fa:	2301      	movs	r3, #1
 80033fc:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033fe:	e7b2      	b.n	8003366 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003400:	4b17      	ldr	r3, [pc, #92]	@ (8003460 <xTaskIncrementTick+0x170>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003406:	4915      	ldr	r1, [pc, #84]	@ (800345c <xTaskIncrementTick+0x16c>)
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d901      	bls.n	800341c <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8003418:	2301      	movs	r3, #1
 800341a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800341c:	4b11      	ldr	r3, [pc, #68]	@ (8003464 <xTaskIncrementTick+0x174>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d007      	beq.n	8003434 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8003424:	2301      	movs	r3, #1
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	e004      	b.n	8003434 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800342a:	4b0f      	ldr	r3, [pc, #60]	@ (8003468 <xTaskIncrementTick+0x178>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3301      	adds	r3, #1
 8003430:	4a0d      	ldr	r2, [pc, #52]	@ (8003468 <xTaskIncrementTick+0x178>)
 8003432:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003434:	697b      	ldr	r3, [r7, #20]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	200001c4 	.word	0x200001c4
 8003444:	200001a0 	.word	0x200001a0
 8003448:	20000154 	.word	0x20000154
 800344c:	20000158 	.word	0x20000158
 8003450:	200001b4 	.word	0x200001b4
 8003454:	200001bc 	.word	0x200001bc
 8003458:	200001a4 	.word	0x200001a4
 800345c:	200000c8 	.word	0x200000c8
 8003460:	200000c4 	.word	0x200000c4
 8003464:	200001b0 	.word	0x200001b0
 8003468:	200001ac 	.word	0x200001ac

0800346c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003472:	4b2d      	ldr	r3, [pc, #180]	@ (8003528 <vTaskSwitchContext+0xbc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800347a:	4b2c      	ldr	r3, [pc, #176]	@ (800352c <vTaskSwitchContext+0xc0>)
 800347c:	2201      	movs	r2, #1
 800347e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003480:	e04e      	b.n	8003520 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8003482:	4b2a      	ldr	r3, [pc, #168]	@ (800352c <vTaskSwitchContext+0xc0>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003488:	4b29      	ldr	r3, [pc, #164]	@ (8003530 <vTaskSwitchContext+0xc4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	fab3 f383 	clz	r3, r3
 8003494:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003496:	7afb      	ldrb	r3, [r7, #11]
 8003498:	f1c3 031f 	rsb	r3, r3, #31
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	4925      	ldr	r1, [pc, #148]	@ (8003534 <vTaskSwitchContext+0xc8>)
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10b      	bne.n	80034ca <vTaskSwitchContext+0x5e>
        __asm volatile
 80034b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	607b      	str	r3, [r7, #4]
    }
 80034c4:	bf00      	nop
 80034c6:	bf00      	nop
 80034c8:	e7fd      	b.n	80034c6 <vTaskSwitchContext+0x5a>
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4a17      	ldr	r2, [pc, #92]	@ (8003534 <vTaskSwitchContext+0xc8>)
 80034d6:	4413      	add	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	605a      	str	r2, [r3, #4]
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	3308      	adds	r3, #8
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d104      	bne.n	80034fa <vTaskSwitchContext+0x8e>
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	605a      	str	r2, [r3, #4]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4a0d      	ldr	r2, [pc, #52]	@ (8003538 <vTaskSwitchContext+0xcc>)
 8003502:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003504:	4b0c      	ldr	r3, [pc, #48]	@ (8003538 <vTaskSwitchContext+0xcc>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <vTaskSwitchContext+0xd0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d102      	bne.n	8003516 <vTaskSwitchContext+0xaa>
 8003510:	f003 fca4 	bl	8006e5c <SEGGER_SYSVIEW_OnIdle>
}
 8003514:	e004      	b.n	8003520 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003516:	4b08      	ldr	r3, [pc, #32]	@ (8003538 <vTaskSwitchContext+0xcc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f003 fcfc 	bl	8006f18 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003520:	bf00      	nop
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	200001c4 	.word	0x200001c4
 800352c:	200001b0 	.word	0x200001b0
 8003530:	200001a4 	.word	0x200001a4
 8003534:	200000c8 	.word	0x200000c8
 8003538:	200000c4 	.word	0x200000c4
 800353c:	200001c0 	.word	0x200001c0

08003540 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10b      	bne.n	8003568 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	60fb      	str	r3, [r7, #12]
    }
 8003562:	bf00      	nop
 8003564:	bf00      	nop
 8003566:	e7fd      	b.n	8003564 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003568:	4b07      	ldr	r3, [pc, #28]	@ (8003588 <vTaskPlaceOnEventList+0x48>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3318      	adds	r3, #24
 800356e:	4619      	mov	r1, r3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7fe fe56 	bl	8002222 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003576:	2101      	movs	r1, #1
 8003578:	6838      	ldr	r0, [r7, #0]
 800357a:	f000 fa7b 	bl	8003a74 <prvAddCurrentTaskToDelayedList>
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	200000c4 	.word	0x200000c4

0800358c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10b      	bne.n	80035b6 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	617b      	str	r3, [r7, #20]
    }
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	e7fd      	b.n	80035b2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035b6:	4b0c      	ldr	r3, [pc, #48]	@ (80035e8 <vTaskPlaceOnEventListRestricted+0x5c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3318      	adds	r3, #24
 80035bc:	4619      	mov	r1, r3
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7fe fe0b 	bl	80021da <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80035ca:	f04f 33ff 	mov.w	r3, #4294967295
 80035ce:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80035d0:	2024      	movs	r0, #36	@ 0x24
 80035d2:	f002 ff43 	bl	800645c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	68b8      	ldr	r0, [r7, #8]
 80035da:	f000 fa4b 	bl	8003a74 <prvAddCurrentTaskToDelayedList>
    }
 80035de:	bf00      	nop
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	200000c4 	.word	0x200000c4

080035ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10b      	bne.n	800361a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	60fb      	str	r3, [r7, #12]
    }
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	e7fd      	b.n	8003616 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	3318      	adds	r3, #24
 800361e:	4618      	mov	r0, r3
 8003620:	f7fe fe38 	bl	8002294 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003624:	4b1f      	ldr	r3, [pc, #124]	@ (80036a4 <xTaskRemoveFromEventList+0xb8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d120      	bne.n	800366e <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	3304      	adds	r3, #4
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fe2f 	bl	8002294 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4618      	mov	r0, r3
 800363a:	f003 fcaf 	bl	8006f9c <SEGGER_SYSVIEW_OnTaskStartReady>
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003642:	2201      	movs	r2, #1
 8003644:	409a      	lsls	r2, r3
 8003646:	4b18      	ldr	r3, [pc, #96]	@ (80036a8 <xTaskRemoveFromEventList+0xbc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4313      	orrs	r3, r2
 800364c:	4a16      	ldr	r2, [pc, #88]	@ (80036a8 <xTaskRemoveFromEventList+0xbc>)
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4a13      	ldr	r2, [pc, #76]	@ (80036ac <xTaskRemoveFromEventList+0xc0>)
 800365e:	441a      	add	r2, r3
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	3304      	adds	r3, #4
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f7fe fdb7 	bl	80021da <vListInsertEnd>
 800366c:	e005      	b.n	800367a <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	3318      	adds	r3, #24
 8003672:	4619      	mov	r1, r3
 8003674:	480e      	ldr	r0, [pc, #56]	@ (80036b0 <xTaskRemoveFromEventList+0xc4>)
 8003676:	f7fe fdb0 	bl	80021da <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800367e:	4b0d      	ldr	r3, [pc, #52]	@ (80036b4 <xTaskRemoveFromEventList+0xc8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003684:	429a      	cmp	r2, r3
 8003686:	d905      	bls.n	8003694 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003688:	2301      	movs	r3, #1
 800368a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800368c:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <xTaskRemoveFromEventList+0xcc>)
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	e001      	b.n	8003698 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003698:	697b      	ldr	r3, [r7, #20]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	200001c4 	.word	0x200001c4
 80036a8:	200001a4 	.word	0x200001a4
 80036ac:	200000c8 	.word	0x200000c8
 80036b0:	2000015c 	.word	0x2000015c
 80036b4:	200000c4 	.word	0x200000c4
 80036b8:	200001b0 	.word	0x200001b0

080036bc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036c4:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <vTaskInternalSetTimeOutState+0x24>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80036cc:	4b05      	ldr	r3, [pc, #20]	@ (80036e4 <vTaskInternalSetTimeOutState+0x28>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	605a      	str	r2, [r3, #4]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	200001b4 	.word	0x200001b4
 80036e4:	200001a0 	.word	0x200001a0

080036e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	613b      	str	r3, [r7, #16]
    }
 800370a:	bf00      	nop
 800370c:	bf00      	nop
 800370e:	e7fd      	b.n	800370c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10b      	bne.n	800372e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	60fb      	str	r3, [r7, #12]
    }
 8003728:	bf00      	nop
 800372a:	bf00      	nop
 800372c:	e7fd      	b.n	800372a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800372e:	f000 feed 	bl	800450c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003732:	4b1f      	ldr	r3, [pc, #124]	@ (80037b0 <xTaskCheckForTimeOut+0xc8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374a:	d102      	bne.n	8003752 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	e026      	b.n	80037a0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4b17      	ldr	r3, [pc, #92]	@ (80037b4 <xTaskCheckForTimeOut+0xcc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d00a      	beq.n	8003774 <xTaskCheckForTimeOut+0x8c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	429a      	cmp	r2, r3
 8003766:	d305      	bcc.n	8003774 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003768:	2301      	movs	r3, #1
 800376a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	e015      	b.n	80037a0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	429a      	cmp	r2, r3
 800377c:	d20b      	bcs.n	8003796 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	1ad2      	subs	r2, r2, r3
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ff96 	bl	80036bc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003790:	2300      	movs	r3, #0
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	e004      	b.n	80037a0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800379c:	2301      	movs	r3, #1
 800379e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80037a0:	f000 fee6 	bl	8004570 <vPortExitCritical>

    return xReturn;
 80037a4:	69fb      	ldr	r3, [r7, #28]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3720      	adds	r7, #32
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	200001a0 	.word	0x200001a0
 80037b4:	200001b4 	.word	0x200001b4

080037b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80037bc:	4b03      	ldr	r3, [pc, #12]	@ (80037cc <vTaskMissedYield+0x14>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
}
 80037c2:	bf00      	nop
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	200001b0 	.word	0x200001b0

080037d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80037d8:	f000 f852 	bl	8003880 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037dc:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <prvIdleTask+0x28>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d9f9      	bls.n	80037d8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80037e4:	4b05      	ldr	r3, [pc, #20]	@ (80037fc <prvIdleTask+0x2c>)
 80037e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80037f4:	e7f0      	b.n	80037d8 <prvIdleTask+0x8>
 80037f6:	bf00      	nop
 80037f8:	200000c8 	.word	0x200000c8
 80037fc:	e000ed04 	.word	0xe000ed04

08003800 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003806:	2300      	movs	r3, #0
 8003808:	607b      	str	r3, [r7, #4]
 800380a:	e00c      	b.n	8003826 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4a12      	ldr	r2, [pc, #72]	@ (8003860 <prvInitialiseTaskLists+0x60>)
 8003818:	4413      	add	r3, r2
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fcb0 	bl	8002180 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3301      	adds	r3, #1
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b04      	cmp	r3, #4
 800382a:	d9ef      	bls.n	800380c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800382c:	480d      	ldr	r0, [pc, #52]	@ (8003864 <prvInitialiseTaskLists+0x64>)
 800382e:	f7fe fca7 	bl	8002180 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003832:	480d      	ldr	r0, [pc, #52]	@ (8003868 <prvInitialiseTaskLists+0x68>)
 8003834:	f7fe fca4 	bl	8002180 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003838:	480c      	ldr	r0, [pc, #48]	@ (800386c <prvInitialiseTaskLists+0x6c>)
 800383a:	f7fe fca1 	bl	8002180 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800383e:	480c      	ldr	r0, [pc, #48]	@ (8003870 <prvInitialiseTaskLists+0x70>)
 8003840:	f7fe fc9e 	bl	8002180 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003844:	480b      	ldr	r0, [pc, #44]	@ (8003874 <prvInitialiseTaskLists+0x74>)
 8003846:	f7fe fc9b 	bl	8002180 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800384a:	4b0b      	ldr	r3, [pc, #44]	@ (8003878 <prvInitialiseTaskLists+0x78>)
 800384c:	4a05      	ldr	r2, [pc, #20]	@ (8003864 <prvInitialiseTaskLists+0x64>)
 800384e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003850:	4b0a      	ldr	r3, [pc, #40]	@ (800387c <prvInitialiseTaskLists+0x7c>)
 8003852:	4a05      	ldr	r2, [pc, #20]	@ (8003868 <prvInitialiseTaskLists+0x68>)
 8003854:	601a      	str	r2, [r3, #0]
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	200000c8 	.word	0x200000c8
 8003864:	2000012c 	.word	0x2000012c
 8003868:	20000140 	.word	0x20000140
 800386c:	2000015c 	.word	0x2000015c
 8003870:	20000170 	.word	0x20000170
 8003874:	20000188 	.word	0x20000188
 8003878:	20000154 	.word	0x20000154
 800387c:	20000158 	.word	0x20000158

08003880 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003886:	e019      	b.n	80038bc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003888:	f000 fe40 	bl	800450c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800388c:	4b10      	ldr	r3, [pc, #64]	@ (80038d0 <prvCheckTasksWaitingTermination+0x50>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3304      	adds	r3, #4
 8003898:	4618      	mov	r0, r3
 800389a:	f7fe fcfb 	bl	8002294 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800389e:	4b0d      	ldr	r3, [pc, #52]	@ (80038d4 <prvCheckTasksWaitingTermination+0x54>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	4a0b      	ldr	r2, [pc, #44]	@ (80038d4 <prvCheckTasksWaitingTermination+0x54>)
 80038a6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80038a8:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <prvCheckTasksWaitingTermination+0x58>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	4a0a      	ldr	r2, [pc, #40]	@ (80038d8 <prvCheckTasksWaitingTermination+0x58>)
 80038b0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80038b2:	f000 fe5d 	bl	8004570 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f810 	bl	80038dc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038bc:	4b06      	ldr	r3, [pc, #24]	@ (80038d8 <prvCheckTasksWaitingTermination+0x58>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e1      	bne.n	8003888 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000170 	.word	0x20000170
 80038d4:	2000019c 	.word	0x2000019c
 80038d8:	20000184 	.word	0x20000184

080038dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e8:	4618      	mov	r0, r3
 80038ea:	f001 f823 	bl	8004934 <vPortFree>
                vPortFree( pxTCB );
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f001 f820 	bl	8004934 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003900:	4b0a      	ldr	r3, [pc, #40]	@ (800392c <prvResetNextTaskUnblockTime+0x30>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d104      	bne.n	8003914 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800390a:	4b09      	ldr	r3, [pc, #36]	@ (8003930 <prvResetNextTaskUnblockTime+0x34>)
 800390c:	f04f 32ff 	mov.w	r2, #4294967295
 8003910:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003912:	e005      	b.n	8003920 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003914:	4b05      	ldr	r3, [pc, #20]	@ (800392c <prvResetNextTaskUnblockTime+0x30>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a04      	ldr	r2, [pc, #16]	@ (8003930 <prvResetNextTaskUnblockTime+0x34>)
 800391e:	6013      	str	r3, [r2, #0]
}
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000154 	.word	0x20000154
 8003930:	200001bc 	.word	0x200001bc

08003934 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800393a:	4b0b      	ldr	r3, [pc, #44]	@ (8003968 <xTaskGetSchedulerState+0x34>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003942:	2301      	movs	r3, #1
 8003944:	607b      	str	r3, [r7, #4]
 8003946:	e008      	b.n	800395a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003948:	4b08      	ldr	r3, [pc, #32]	@ (800396c <xTaskGetSchedulerState+0x38>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003950:	2302      	movs	r3, #2
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	e001      	b.n	800395a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003956:	2300      	movs	r3, #0
 8003958:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800395a:	687b      	ldr	r3, [r7, #4]
    }
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	200001a8 	.word	0x200001a8
 800396c:	200001c4 	.word	0x200001c4

08003970 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d06a      	beq.n	8003a5c <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003986:	4b38      	ldr	r3, [pc, #224]	@ (8003a68 <xTaskPriorityDisinherit+0xf8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	429a      	cmp	r2, r3
 800398e:	d00b      	beq.n	80039a8 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	60fb      	str	r3, [r7, #12]
    }
 80039a2:	bf00      	nop
 80039a4:	bf00      	nop
 80039a6:	e7fd      	b.n	80039a4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10b      	bne.n	80039c8 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	60bb      	str	r3, [r7, #8]
    }
 80039c2:	bf00      	nop
 80039c4:	bf00      	nop
 80039c6:	e7fd      	b.n	80039c4 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039cc:	1e5a      	subs	r2, r3, #1
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039da:	429a      	cmp	r2, r3
 80039dc:	d03e      	beq.n	8003a5c <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d13a      	bne.n	8003a5c <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	3304      	adds	r3, #4
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe fc52 	bl	8002294 <uxListRemove>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fa:	2201      	movs	r2, #1
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43da      	mvns	r2, r3
 8003a02:	4b1a      	ldr	r3, [pc, #104]	@ (8003a6c <xTaskPriorityDisinherit+0xfc>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4013      	ands	r3, r2
 8003a08:	4a18      	ldr	r2, [pc, #96]	@ (8003a6c <xTaskPriorityDisinherit+0xfc>)
 8003a0a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	204a      	movs	r0, #74	@ 0x4a
 8003a12:	f002 fd41 	bl	8006498 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a22:	f1c3 0205 	rsb	r2, r3, #5
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2e:	2201      	movs	r2, #1
 8003a30:	409a      	lsls	r2, r3
 8003a32:	4b0e      	ldr	r3, [pc, #56]	@ (8003a6c <xTaskPriorityDisinherit+0xfc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	4a0c      	ldr	r2, [pc, #48]	@ (8003a6c <xTaskPriorityDisinherit+0xfc>)
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4a09      	ldr	r2, [pc, #36]	@ (8003a70 <xTaskPriorityDisinherit+0x100>)
 8003a4a:	441a      	add	r2, r3
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	4619      	mov	r1, r3
 8003a52:	4610      	mov	r0, r2
 8003a54:	f7fe fbc1 	bl	80021da <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003a5c:	697b      	ldr	r3, [r7, #20]
    }
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	200000c4 	.word	0x200000c4
 8003a6c:	200001a4 	.word	0x200001a4
 8003a70:	200000c8 	.word	0x200000c8

08003a74 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003a7e:	4b32      	ldr	r3, [pc, #200]	@ (8003b48 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a84:	4b31      	ldr	r3, [pc, #196]	@ (8003b4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe fc02 	bl	8002294 <uxListRemove>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10b      	bne.n	8003aae <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a96:	4b2d      	ldr	r3, [pc, #180]	@ (8003b4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	4a29      	ldr	r2, [pc, #164]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003aac:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d110      	bne.n	8003ad8 <prvAddCurrentTaskToDelayedList+0x64>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00d      	beq.n	8003ad8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003abc:	4b23      	ldr	r3, [pc, #140]	@ (8003b4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	211b      	movs	r1, #27
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f003 faac 	bl	8007020 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ac8:	4b20      	ldr	r3, [pc, #128]	@ (8003b4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3304      	adds	r3, #4
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4820      	ldr	r0, [pc, #128]	@ (8003b54 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003ad2:	f7fe fb82 	bl	80021da <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003ad6:	e032      	b.n	8003b3e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4413      	add	r3, r2
 8003ade:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d20f      	bcs.n	8003b10 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003af0:	4b16      	ldr	r3, [pc, #88]	@ (8003b4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2104      	movs	r1, #4
 8003af6:	4618      	mov	r0, r3
 8003af8:	f003 fa92 	bl	8007020 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003afc:	4b16      	ldr	r3, [pc, #88]	@ (8003b58 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b12      	ldr	r3, [pc, #72]	@ (8003b4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3304      	adds	r3, #4
 8003b06:	4619      	mov	r1, r3
 8003b08:	4610      	mov	r0, r2
 8003b0a:	f7fe fb8a 	bl	8002222 <vListInsert>
}
 8003b0e:	e016      	b.n	8003b3e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003b10:	4b0e      	ldr	r3, [pc, #56]	@ (8003b4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2104      	movs	r1, #4
 8003b16:	4618      	mov	r0, r3
 8003b18:	f003 fa82 	bl	8007020 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b5c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3304      	adds	r3, #4
 8003b26:	4619      	mov	r1, r3
 8003b28:	4610      	mov	r0, r2
 8003b2a:	f7fe fb7a 	bl	8002222 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b60 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d202      	bcs.n	8003b3e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003b38:	4a09      	ldr	r2, [pc, #36]	@ (8003b60 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	6013      	str	r3, [r2, #0]
}
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200001a0 	.word	0x200001a0
 8003b4c:	200000c4 	.word	0x200000c4
 8003b50:	200001a4 	.word	0x200001a4
 8003b54:	20000188 	.word	0x20000188
 8003b58:	20000158 	.word	0x20000158
 8003b5c:	20000154 	.word	0x20000154
 8003b60:	200001bc 	.word	0x200001bc

08003b64 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003b6e:	f000 fae1 	bl	8004134 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003b72:	4b12      	ldr	r3, [pc, #72]	@ (8003bbc <xTimerCreateTimerTask+0x58>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00b      	beq.n	8003b92 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003b7a:	4b11      	ldr	r3, [pc, #68]	@ (8003bc0 <xTimerCreateTimerTask+0x5c>)
 8003b7c:	9301      	str	r3, [sp, #4]
 8003b7e:	2302      	movs	r3, #2
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	2300      	movs	r3, #0
 8003b84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b88:	490e      	ldr	r1, [pc, #56]	@ (8003bc4 <xTimerCreateTimerTask+0x60>)
 8003b8a:	480f      	ldr	r0, [pc, #60]	@ (8003bc8 <xTimerCreateTimerTask+0x64>)
 8003b8c:	f7ff f918 	bl	8002dc0 <xTaskCreate>
 8003b90:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10b      	bne.n	8003bb0 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	603b      	str	r3, [r7, #0]
    }
 8003baa:	bf00      	nop
 8003bac:	bf00      	nop
 8003bae:	e7fd      	b.n	8003bac <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003bb0:	687b      	ldr	r3, [r7, #4]
    }
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	200001f8 	.word	0x200001f8
 8003bc0:	200001fc 	.word	0x200001fc
 8003bc4:	08007544 	.word	0x08007544
 8003bc8:	08003d05 	.word	0x08003d05

08003bcc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	@ 0x28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10b      	bne.n	8003bfc <xTimerGenericCommand+0x30>
        __asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	623b      	str	r3, [r7, #32]
    }
 8003bf6:	bf00      	nop
 8003bf8:	bf00      	nop
 8003bfa:	e7fd      	b.n	8003bf8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003bfc:	4b19      	ldr	r3, [pc, #100]	@ (8003c64 <xTimerGenericCommand+0x98>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d02a      	beq.n	8003c5a <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b05      	cmp	r3, #5
 8003c14:	dc18      	bgt.n	8003c48 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c16:	f7ff fe8d 	bl	8003934 <xTaskGetSchedulerState>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d109      	bne.n	8003c34 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c20:	4b10      	ldr	r3, [pc, #64]	@ (8003c64 <xTimerGenericCommand+0x98>)
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	f107 0114 	add.w	r1, r7, #20
 8003c28:	2300      	movs	r3, #0
 8003c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c2c:	f7fe fc52 	bl	80024d4 <xQueueGenericSend>
 8003c30:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c32:	e012      	b.n	8003c5a <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c34:	4b0b      	ldr	r3, [pc, #44]	@ (8003c64 <xTimerGenericCommand+0x98>)
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	f107 0114 	add.w	r1, r7, #20
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f7fe fc48 	bl	80024d4 <xQueueGenericSend>
 8003c44:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c46:	e008      	b.n	8003c5a <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c48:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <xTimerGenericCommand+0x98>)
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	f107 0114 	add.w	r1, r7, #20
 8003c50:	2300      	movs	r3, #0
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	f7fe fd68 	bl	8002728 <xQueueGenericSendFromISR>
 8003c58:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3728      	adds	r7, #40	@ 0x28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	200001f8 	.word	0x200001f8

08003c68 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c72:	4b23      	ldr	r3, [pc, #140]	@ (8003d00 <prvProcessExpiredTimer+0x98>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe fb07 	bl	8002294 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d023      	beq.n	8003cdc <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	699a      	ldr	r2, [r3, #24]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	18d1      	adds	r1, r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	6978      	ldr	r0, [r7, #20]
 8003ca2:	f000 f8d5 	bl	8003e50 <prvInsertTimerInActiveList>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d020      	beq.n	8003cee <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cac:	2300      	movs	r3, #0
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	6978      	ldr	r0, [r7, #20]
 8003cb8:	f7ff ff88 	bl	8003bcc <xTimerGenericCommand>
 8003cbc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d114      	bne.n	8003cee <prvProcessExpiredTimer+0x86>
        __asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	60fb      	str	r3, [r7, #12]
    }
 8003cd6:	bf00      	nop
 8003cd8:	bf00      	nop
 8003cda:	e7fd      	b.n	8003cd8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	6978      	ldr	r0, [r7, #20]
 8003cf4:	4798      	blx	r3
    }
 8003cf6:	bf00      	nop
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	200001f0 	.word	0x200001f0

08003d04 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d0c:	f107 0308 	add.w	r3, r7, #8
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 f859 	bl	8003dc8 <prvGetNextExpireTime>
 8003d16:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 f805 	bl	8003d2c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d22:	f000 f8d7 	bl	8003ed4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d26:	bf00      	nop
 8003d28:	e7f0      	b.n	8003d0c <prvTimerTask+0x8>
	...

08003d2c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003d36:	f7ff fa09 	bl	800314c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d3a:	f107 0308 	add.w	r3, r7, #8
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 f866 	bl	8003e10 <prvSampleTimeNow>
 8003d44:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d130      	bne.n	8003dae <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10a      	bne.n	8003d68 <prvProcessTimerOrBlockTask+0x3c>
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d806      	bhi.n	8003d68 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003d5a:	f7ff fa05 	bl	8003168 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d5e:	68f9      	ldr	r1, [r7, #12]
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ff81 	bl	8003c68 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003d66:	e024      	b.n	8003db2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d008      	beq.n	8003d80 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d6e:	4b13      	ldr	r3, [pc, #76]	@ (8003dbc <prvProcessTimerOrBlockTask+0x90>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <prvProcessTimerOrBlockTask+0x50>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <prvProcessTimerOrBlockTask+0x52>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d80:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc0 <prvProcessTimerOrBlockTask+0x94>)
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f7fe ffe3 	bl	8002d58 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003d92:	f7ff f9e9 	bl	8003168 <xTaskResumeAll>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003d9c:	4b09      	ldr	r3, [pc, #36]	@ (8003dc4 <prvProcessTimerOrBlockTask+0x98>)
 8003d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	f3bf 8f6f 	isb	sy
    }
 8003dac:	e001      	b.n	8003db2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003dae:	f7ff f9db 	bl	8003168 <xTaskResumeAll>
    }
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	200001f4 	.word	0x200001f4
 8003dc0:	200001f8 	.word	0x200001f8
 8003dc4:	e000ed04 	.word	0xe000ed04

08003dc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8003e0c <prvGetNextExpireTime+0x44>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <prvGetNextExpireTime+0x16>
 8003dda:	2201      	movs	r2, #1
 8003ddc:	e000      	b.n	8003de0 <prvGetNextExpireTime+0x18>
 8003dde:	2200      	movs	r2, #0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dec:	4b07      	ldr	r3, [pc, #28]	@ (8003e0c <prvGetNextExpireTime+0x44>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	e001      	b.n	8003dfc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
    }
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	200001f0 	.word	0x200001f0

08003e10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e18:	f7ff fa48 	bl	80032ac <xTaskGetTickCount>
 8003e1c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <prvSampleTimeNow+0x3c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d205      	bcs.n	8003e34 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003e28:	f000 f91e 	bl	8004068 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e002      	b.n	8003e3a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003e3a:	4a04      	ldr	r2, [pc, #16]	@ (8003e4c <prvSampleTimeNow+0x3c>)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003e40:	68fb      	ldr	r3, [r7, #12]
    }
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000200 	.word	0x20000200

08003e50 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d812      	bhi.n	8003e9c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	1ad2      	subs	r2, r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d302      	bcc.n	8003e8a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003e84:	2301      	movs	r3, #1
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	e01b      	b.n	8003ec2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e8a:	4b10      	ldr	r3, [pc, #64]	@ (8003ecc <prvInsertTimerInActiveList+0x7c>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3304      	adds	r3, #4
 8003e92:	4619      	mov	r1, r3
 8003e94:	4610      	mov	r0, r2
 8003e96:	f7fe f9c4 	bl	8002222 <vListInsert>
 8003e9a:	e012      	b.n	8003ec2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d206      	bcs.n	8003eb2 <prvInsertTimerInActiveList+0x62>
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d302      	bcc.n	8003eb2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003eac:	2301      	movs	r3, #1
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	e007      	b.n	8003ec2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003eb2:	4b07      	ldr	r3, [pc, #28]	@ (8003ed0 <prvInsertTimerInActiveList+0x80>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	f7fe f9b0 	bl	8002222 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003ec2:	697b      	ldr	r3, [r7, #20]
    }
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	200001f4 	.word	0x200001f4
 8003ed0:	200001f0 	.word	0x200001f0

08003ed4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08c      	sub	sp, #48	@ 0x30
 8003ed8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eda:	e0b2      	b.n	8004042 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f2c0 80af 	blt.w	8004042 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d004      	beq.n	8003efa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fe f9cd 	bl	8002294 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003efa:	1d3b      	adds	r3, r7, #4
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff ff87 	bl	8003e10 <prvSampleTimeNow>
 8003f02:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b09      	cmp	r3, #9
 8003f08:	f200 8098 	bhi.w	800403c <prvProcessReceivedCommands+0x168>
 8003f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f14 <prvProcessReceivedCommands+0x40>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f3d 	.word	0x08003f3d
 8003f18:	08003f3d 	.word	0x08003f3d
 8003f1c:	08003f3d 	.word	0x08003f3d
 8003f20:	08003fb3 	.word	0x08003fb3
 8003f24:	08003fc7 	.word	0x08003fc7
 8003f28:	08004013 	.word	0x08004013
 8003f2c:	08003f3d 	.word	0x08003f3d
 8003f30:	08003f3d 	.word	0x08003f3d
 8003f34:	08003fb3 	.word	0x08003fb3
 8003f38:	08003fc7 	.word	0x08003fc7
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	18d1      	adds	r1, r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a3a      	ldr	r2, [r7, #32]
 8003f5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f5c:	f7ff ff78 	bl	8003e50 <prvInsertTimerInActiveList>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d06c      	beq.n	8004040 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f6c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d061      	beq.n	8004040 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	441a      	add	r2, r3
 8003f84:	2300      	movs	r3, #0
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f8e:	f7ff fe1d 	bl	8003bcc <xTimerGenericCommand>
 8003f92:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d152      	bne.n	8004040 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	61bb      	str	r3, [r7, #24]
    }
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	e7fd      	b.n	8003fae <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003fc4:	e03d      	b.n	8004042 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10b      	bne.n	8003ffe <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8003fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	617b      	str	r3, [r7, #20]
    }
 8003ff8:	bf00      	nop
 8003ffa:	bf00      	nop
 8003ffc:	e7fd      	b.n	8003ffa <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	18d1      	adds	r1, r2, r3
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	6a3a      	ldr	r2, [r7, #32]
 800400a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800400c:	f7ff ff20 	bl	8003e50 <prvInsertTimerInActiveList>
                        break;
 8004010:	e017      	b.n	8004042 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d103      	bne.n	8004028 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8004020:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004022:	f000 fc87 	bl	8004934 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004026:	e00c      	b.n	8004042 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	b2da      	uxtb	r2, r3
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800403a:	e002      	b.n	8004042 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800403c:	bf00      	nop
 800403e:	e000      	b.n	8004042 <prvProcessReceivedCommands+0x16e>
                        break;
 8004040:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004042:	4b08      	ldr	r3, [pc, #32]	@ (8004064 <prvProcessReceivedCommands+0x190>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f107 0108 	add.w	r1, r7, #8
 800404a:	2200      	movs	r2, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f7fe fc2d 	bl	80028ac <xQueueReceive>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	f47f af41 	bne.w	8003edc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800405a:	bf00      	nop
 800405c:	bf00      	nop
 800405e:	3728      	adds	r7, #40	@ 0x28
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	200001f8 	.word	0x200001f8

08004068 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800406e:	e049      	b.n	8004104 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004070:	4b2e      	ldr	r3, [pc, #184]	@ (800412c <prvSwitchTimerLists+0xc4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800407a:	4b2c      	ldr	r3, [pc, #176]	@ (800412c <prvSwitchTimerLists+0xc4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3304      	adds	r3, #4
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe f903 	bl	8002294 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d02f      	beq.n	8004104 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d90e      	bls.n	80040d4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040c2:	4b1a      	ldr	r3, [pc, #104]	@ (800412c <prvSwitchTimerLists+0xc4>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3304      	adds	r3, #4
 80040ca:	4619      	mov	r1, r3
 80040cc:	4610      	mov	r0, r2
 80040ce:	f7fe f8a8 	bl	8002222 <vListInsert>
 80040d2:	e017      	b.n	8004104 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040d4:	2300      	movs	r3, #0
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	2300      	movs	r3, #0
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	2100      	movs	r1, #0
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f7ff fd74 	bl	8003bcc <xTimerGenericCommand>
 80040e4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10b      	bne.n	8004104 <prvSwitchTimerLists+0x9c>
        __asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	603b      	str	r3, [r7, #0]
    }
 80040fe:	bf00      	nop
 8004100:	bf00      	nop
 8004102:	e7fd      	b.n	8004100 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004104:	4b09      	ldr	r3, [pc, #36]	@ (800412c <prvSwitchTimerLists+0xc4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1b0      	bne.n	8004070 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800410e:	4b07      	ldr	r3, [pc, #28]	@ (800412c <prvSwitchTimerLists+0xc4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004114:	4b06      	ldr	r3, [pc, #24]	@ (8004130 <prvSwitchTimerLists+0xc8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a04      	ldr	r2, [pc, #16]	@ (800412c <prvSwitchTimerLists+0xc4>)
 800411a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800411c:	4a04      	ldr	r2, [pc, #16]	@ (8004130 <prvSwitchTimerLists+0xc8>)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	6013      	str	r3, [r2, #0]
    }
 8004122:	bf00      	nop
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	200001f0 	.word	0x200001f0
 8004130:	200001f4 	.word	0x200001f4

08004134 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004138:	f000 f9e8 	bl	800450c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800413c:	4b12      	ldr	r3, [pc, #72]	@ (8004188 <prvCheckForValidListAndQueue+0x54>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d11d      	bne.n	8004180 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004144:	4811      	ldr	r0, [pc, #68]	@ (800418c <prvCheckForValidListAndQueue+0x58>)
 8004146:	f7fe f81b 	bl	8002180 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800414a:	4811      	ldr	r0, [pc, #68]	@ (8004190 <prvCheckForValidListAndQueue+0x5c>)
 800414c:	f7fe f818 	bl	8002180 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004150:	4b10      	ldr	r3, [pc, #64]	@ (8004194 <prvCheckForValidListAndQueue+0x60>)
 8004152:	4a0e      	ldr	r2, [pc, #56]	@ (800418c <prvCheckForValidListAndQueue+0x58>)
 8004154:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004156:	4b10      	ldr	r3, [pc, #64]	@ (8004198 <prvCheckForValidListAndQueue+0x64>)
 8004158:	4a0d      	ldr	r2, [pc, #52]	@ (8004190 <prvCheckForValidListAndQueue+0x5c>)
 800415a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800415c:	2200      	movs	r2, #0
 800415e:	210c      	movs	r1, #12
 8004160:	200a      	movs	r0, #10
 8004162:	f7fe f92b 	bl	80023bc <xQueueGenericCreate>
 8004166:	4603      	mov	r3, r0
 8004168:	4a07      	ldr	r2, [pc, #28]	@ (8004188 <prvCheckForValidListAndQueue+0x54>)
 800416a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800416c:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <prvCheckForValidListAndQueue+0x54>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004174:	4b04      	ldr	r3, [pc, #16]	@ (8004188 <prvCheckForValidListAndQueue+0x54>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4908      	ldr	r1, [pc, #32]	@ (800419c <prvCheckForValidListAndQueue+0x68>)
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe fdba 	bl	8002cf4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004180:	f000 f9f6 	bl	8004570 <vPortExitCritical>
    }
 8004184:	bf00      	nop
 8004186:	bd80      	pop	{r7, pc}
 8004188:	200001f8 	.word	0x200001f8
 800418c:	200001c8 	.word	0x200001c8
 8004190:	200001dc 	.word	0x200001dc
 8004194:	200001f0 	.word	0x200001f0
 8004198:	200001f4 	.word	0x200001f4
 800419c:	0800754c 	.word	0x0800754c

080041a0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3b04      	subs	r3, #4
 80041b0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3b04      	subs	r3, #4
 80041be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f023 0201 	bic.w	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3b04      	subs	r3, #4
 80041ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80041d0:	4a0c      	ldr	r2, [pc, #48]	@ (8004204 <pxPortInitialiseStack+0x64>)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3b14      	subs	r3, #20
 80041da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3b04      	subs	r3, #4
 80041e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f06f 0202 	mvn.w	r2, #2
 80041ee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3b20      	subs	r3, #32
 80041f4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80041f6:	68fb      	ldr	r3, [r7, #12]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	08004209 	.word	0x08004209

08004208 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004212:	4b13      	ldr	r3, [pc, #76]	@ (8004260 <prvTaskExitError+0x58>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d00b      	beq.n	8004234 <prvTaskExitError+0x2c>
        __asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	60fb      	str	r3, [r7, #12]
    }
 800422e:	bf00      	nop
 8004230:	bf00      	nop
 8004232:	e7fd      	b.n	8004230 <prvTaskExitError+0x28>
        __asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	60bb      	str	r3, [r7, #8]
    }
 8004246:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004248:	bf00      	nop
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0fc      	beq.n	800424a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004250:	bf00      	nop
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20000010 	.word	0x20000010
	...

08004270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004270:	4b07      	ldr	r3, [pc, #28]	@ (8004290 <pxCurrentTCBConst2>)
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	6808      	ldr	r0, [r1, #0]
 8004276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427a:	f380 8809 	msr	PSP, r0
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f380 8811 	msr	BASEPRI, r0
 800428a:	4770      	bx	lr
 800428c:	f3af 8000 	nop.w

08004290 <pxCurrentTCBConst2>:
 8004290:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop

08004298 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004298:	4808      	ldr	r0, [pc, #32]	@ (80042bc <prvPortStartFirstTask+0x24>)
 800429a:	6800      	ldr	r0, [r0, #0]
 800429c:	6800      	ldr	r0, [r0, #0]
 800429e:	f380 8808 	msr	MSP, r0
 80042a2:	f04f 0000 	mov.w	r0, #0
 80042a6:	f380 8814 	msr	CONTROL, r0
 80042aa:	b662      	cpsie	i
 80042ac:	b661      	cpsie	f
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	df00      	svc	0
 80042b8:	bf00      	nop
 80042ba:	0000      	.short	0x0000
 80042bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop

080042c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042ca:	4b47      	ldr	r3, [pc, #284]	@ (80043e8 <xPortStartScheduler+0x124>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a47      	ldr	r2, [pc, #284]	@ (80043ec <xPortStartScheduler+0x128>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d10b      	bne.n	80042ec <xPortStartScheduler+0x28>
        __asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	613b      	str	r3, [r7, #16]
    }
 80042e6:	bf00      	nop
 80042e8:	bf00      	nop
 80042ea:	e7fd      	b.n	80042e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042ec:	4b3e      	ldr	r3, [pc, #248]	@ (80043e8 <xPortStartScheduler+0x124>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a3f      	ldr	r2, [pc, #252]	@ (80043f0 <xPortStartScheduler+0x12c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d10b      	bne.n	800430e <xPortStartScheduler+0x4a>
        __asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	60fb      	str	r3, [r7, #12]
    }
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	e7fd      	b.n	800430a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800430e:	4b39      	ldr	r3, [pc, #228]	@ (80043f4 <xPortStartScheduler+0x130>)
 8004310:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	22ff      	movs	r2, #255	@ 0xff
 800431e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004330:	b2da      	uxtb	r2, r3
 8004332:	4b31      	ldr	r3, [pc, #196]	@ (80043f8 <xPortStartScheduler+0x134>)
 8004334:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004336:	4b31      	ldr	r3, [pc, #196]	@ (80043fc <xPortStartScheduler+0x138>)
 8004338:	2207      	movs	r2, #7
 800433a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800433c:	e009      	b.n	8004352 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800433e:	4b2f      	ldr	r3, [pc, #188]	@ (80043fc <xPortStartScheduler+0x138>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3b01      	subs	r3, #1
 8004344:	4a2d      	ldr	r2, [pc, #180]	@ (80043fc <xPortStartScheduler+0x138>)
 8004346:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	b2db      	uxtb	r3, r3
 8004350:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800435a:	2b80      	cmp	r3, #128	@ 0x80
 800435c:	d0ef      	beq.n	800433e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800435e:	4b27      	ldr	r3, [pc, #156]	@ (80043fc <xPortStartScheduler+0x138>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f1c3 0307 	rsb	r3, r3, #7
 8004366:	2b04      	cmp	r3, #4
 8004368:	d00b      	beq.n	8004382 <xPortStartScheduler+0xbe>
        __asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	60bb      	str	r3, [r7, #8]
    }
 800437c:	bf00      	nop
 800437e:	bf00      	nop
 8004380:	e7fd      	b.n	800437e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004382:	4b1e      	ldr	r3, [pc, #120]	@ (80043fc <xPortStartScheduler+0x138>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	4a1c      	ldr	r2, [pc, #112]	@ (80043fc <xPortStartScheduler+0x138>)
 800438a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800438c:	4b1b      	ldr	r3, [pc, #108]	@ (80043fc <xPortStartScheduler+0x138>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004394:	4a19      	ldr	r2, [pc, #100]	@ (80043fc <xPortStartScheduler+0x138>)
 8004396:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80043a0:	4b17      	ldr	r3, [pc, #92]	@ (8004400 <xPortStartScheduler+0x13c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a16      	ldr	r2, [pc, #88]	@ (8004400 <xPortStartScheduler+0x13c>)
 80043a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043aa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80043ac:	4b14      	ldr	r3, [pc, #80]	@ (8004400 <xPortStartScheduler+0x13c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a13      	ldr	r2, [pc, #76]	@ (8004400 <xPortStartScheduler+0x13c>)
 80043b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80043b6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80043b8:	f000 f968 	bl	800468c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80043bc:	4b11      	ldr	r3, [pc, #68]	@ (8004404 <xPortStartScheduler+0x140>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80043c2:	f000 f987 	bl	80046d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043c6:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <xPortStartScheduler+0x144>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004408 <xPortStartScheduler+0x144>)
 80043cc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80043d0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80043d2:	f7ff ff61 	bl	8004298 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80043d6:	f7ff f849 	bl	800346c <vTaskSwitchContext>
    prvTaskExitError();
 80043da:	f7ff ff15 	bl	8004208 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	e000ed00 	.word	0xe000ed00
 80043ec:	410fc271 	.word	0x410fc271
 80043f0:	410fc270 	.word	0x410fc270
 80043f4:	e000e400 	.word	0xe000e400
 80043f8:	20000204 	.word	0x20000204
 80043fc:	20000208 	.word	0x20000208
 8004400:	e000ed20 	.word	0xe000ed20
 8004404:	20000010 	.word	0x20000010
 8004408:	e000ef34 	.word	0xe000ef34

0800440c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004412:	4b38      	ldr	r3, [pc, #224]	@ (80044f4 <vInitPrioGroupValue+0xe8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a38      	ldr	r2, [pc, #224]	@ (80044f8 <vInitPrioGroupValue+0xec>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d10b      	bne.n	8004434 <vInitPrioGroupValue+0x28>
        __asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	613b      	str	r3, [r7, #16]
    }
 800442e:	bf00      	nop
 8004430:	bf00      	nop
 8004432:	e7fd      	b.n	8004430 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004434:	4b2f      	ldr	r3, [pc, #188]	@ (80044f4 <vInitPrioGroupValue+0xe8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a30      	ldr	r2, [pc, #192]	@ (80044fc <vInitPrioGroupValue+0xf0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d10b      	bne.n	8004456 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	60fb      	str	r3, [r7, #12]
    }
 8004450:	bf00      	nop
 8004452:	bf00      	nop
 8004454:	e7fd      	b.n	8004452 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004456:	4b2a      	ldr	r3, [pc, #168]	@ (8004500 <vInitPrioGroupValue+0xf4>)
 8004458:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	22ff      	movs	r2, #255	@ 0xff
 8004466:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004478:	b2da      	uxtb	r2, r3
 800447a:	4b22      	ldr	r3, [pc, #136]	@ (8004504 <vInitPrioGroupValue+0xf8>)
 800447c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800447e:	4b22      	ldr	r3, [pc, #136]	@ (8004508 <vInitPrioGroupValue+0xfc>)
 8004480:	2207      	movs	r2, #7
 8004482:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004484:	e009      	b.n	800449a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004486:	4b20      	ldr	r3, [pc, #128]	@ (8004508 <vInitPrioGroupValue+0xfc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3b01      	subs	r3, #1
 800448c:	4a1e      	ldr	r2, [pc, #120]	@ (8004508 <vInitPrioGroupValue+0xfc>)
 800448e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	b2db      	uxtb	r3, r3
 8004498:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a2:	2b80      	cmp	r3, #128	@ 0x80
 80044a4:	d0ef      	beq.n	8004486 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044a6:	4b18      	ldr	r3, [pc, #96]	@ (8004508 <vInitPrioGroupValue+0xfc>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f1c3 0307 	rsb	r3, r3, #7
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d00b      	beq.n	80044ca <vInitPrioGroupValue+0xbe>
        __asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	60bb      	str	r3, [r7, #8]
    }
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	e7fd      	b.n	80044c6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004508 <vInitPrioGroupValue+0xfc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004508 <vInitPrioGroupValue+0xfc>)
 80044d2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004508 <vInitPrioGroupValue+0xfc>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004508 <vInitPrioGroupValue+0xfc>)
 80044de:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80044e8:	bf00      	nop
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	e000ed00 	.word	0xe000ed00
 80044f8:	410fc271 	.word	0x410fc271
 80044fc:	410fc270 	.word	0x410fc270
 8004500:	e000e400 	.word	0xe000e400
 8004504:	20000204 	.word	0x20000204
 8004508:	20000208 	.word	0x20000208

0800450c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
        __asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	607b      	str	r3, [r7, #4]
    }
 8004524:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004526:	4b10      	ldr	r3, [pc, #64]	@ (8004568 <vPortEnterCritical+0x5c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3301      	adds	r3, #1
 800452c:	4a0e      	ldr	r2, [pc, #56]	@ (8004568 <vPortEnterCritical+0x5c>)
 800452e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004530:	4b0d      	ldr	r3, [pc, #52]	@ (8004568 <vPortEnterCritical+0x5c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d110      	bne.n	800455a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004538:	4b0c      	ldr	r3, [pc, #48]	@ (800456c <vPortEnterCritical+0x60>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00b      	beq.n	800455a <vPortEnterCritical+0x4e>
        __asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	603b      	str	r3, [r7, #0]
    }
 8004554:	bf00      	nop
 8004556:	bf00      	nop
 8004558:	e7fd      	b.n	8004556 <vPortEnterCritical+0x4a>
    }
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20000010 	.word	0x20000010
 800456c:	e000ed04 	.word	0xe000ed04

08004570 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004576:	4b12      	ldr	r3, [pc, #72]	@ (80045c0 <vPortExitCritical+0x50>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10b      	bne.n	8004596 <vPortExitCritical+0x26>
        __asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	607b      	str	r3, [r7, #4]
    }
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	e7fd      	b.n	8004592 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004596:	4b0a      	ldr	r3, [pc, #40]	@ (80045c0 <vPortExitCritical+0x50>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3b01      	subs	r3, #1
 800459c:	4a08      	ldr	r2, [pc, #32]	@ (80045c0 <vPortExitCritical+0x50>)
 800459e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80045a0:	4b07      	ldr	r3, [pc, #28]	@ (80045c0 <vPortExitCritical+0x50>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d105      	bne.n	80045b4 <vPortExitCritical+0x44>
 80045a8:	2300      	movs	r3, #0
 80045aa:	603b      	str	r3, [r7, #0]
        __asm volatile
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	f383 8811 	msr	BASEPRI, r3
    }
 80045b2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	20000010 	.word	0x20000010
	...

080045d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80045d0:	f3ef 8009 	mrs	r0, PSP
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	4b15      	ldr	r3, [pc, #84]	@ (8004630 <pxCurrentTCBConst>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	f01e 0f10 	tst.w	lr, #16
 80045e0:	bf08      	it	eq
 80045e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ea:	6010      	str	r0, [r2, #0]
 80045ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80045f4:	f380 8811 	msr	BASEPRI, r0
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f7fe ff34 	bl	800346c <vTaskSwitchContext>
 8004604:	f04f 0000 	mov.w	r0, #0
 8004608:	f380 8811 	msr	BASEPRI, r0
 800460c:	bc09      	pop	{r0, r3}
 800460e:	6819      	ldr	r1, [r3, #0]
 8004610:	6808      	ldr	r0, [r1, #0]
 8004612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004616:	f01e 0f10 	tst.w	lr, #16
 800461a:	bf08      	it	eq
 800461c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004620:	f380 8809 	msr	PSP, r0
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	f3af 8000 	nop.w

08004630 <pxCurrentTCBConst>:
 8004630:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop

08004638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
        __asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	607b      	str	r3, [r7, #4]
    }
 8004650:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004652:	f002 fb89 	bl	8006d68 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004656:	f7fe fe4b 	bl	80032f0 <xTaskIncrementTick>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d006      	beq.n	800466e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004660:	f002 fbe0 	bl	8006e24 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004664:	4b08      	ldr	r3, [pc, #32]	@ (8004688 <SysTick_Handler+0x50>)
 8004666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	e001      	b.n	8004672 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800466e:	f002 fbbd 	bl	8006dec <SEGGER_SYSVIEW_RecordExitISR>
 8004672:	2300      	movs	r3, #0
 8004674:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f383 8811 	msr	BASEPRI, r3
    }
 800467c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	e000ed04 	.word	0xe000ed04

0800468c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004690:	4b0b      	ldr	r3, [pc, #44]	@ (80046c0 <vPortSetupTimerInterrupt+0x34>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004696:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <vPortSetupTimerInterrupt+0x38>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800469c:	4b0a      	ldr	r3, [pc, #40]	@ (80046c8 <vPortSetupTimerInterrupt+0x3c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a0a      	ldr	r2, [pc, #40]	@ (80046cc <vPortSetupTimerInterrupt+0x40>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	099b      	lsrs	r3, r3, #6
 80046a8:	4a09      	ldr	r2, [pc, #36]	@ (80046d0 <vPortSetupTimerInterrupt+0x44>)
 80046aa:	3b01      	subs	r3, #1
 80046ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046ae:	4b04      	ldr	r3, [pc, #16]	@ (80046c0 <vPortSetupTimerInterrupt+0x34>)
 80046b0:	2207      	movs	r2, #7
 80046b2:	601a      	str	r2, [r3, #0]
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	e000e010 	.word	0xe000e010
 80046c4:	e000e018 	.word	0xe000e018
 80046c8:	20000000 	.word	0x20000000
 80046cc:	10624dd3 	.word	0x10624dd3
 80046d0:	e000e014 	.word	0xe000e014

080046d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80046d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80046e4 <vPortEnableVFP+0x10>
 80046d8:	6801      	ldr	r1, [r0, #0]
 80046da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80046de:	6001      	str	r1, [r0, #0]
 80046e0:	4770      	bx	lr
 80046e2:	0000      	.short	0x0000
 80046e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop

080046ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80046f2:	f3ef 8305 	mrs	r3, IPSR
 80046f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b0f      	cmp	r3, #15
 80046fc:	d915      	bls.n	800472a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046fe:	4a18      	ldr	r2, [pc, #96]	@ (8004760 <vPortValidateInterruptPriority+0x74>)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004708:	4b16      	ldr	r3, [pc, #88]	@ (8004764 <vPortValidateInterruptPriority+0x78>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	7afa      	ldrb	r2, [r7, #11]
 800470e:	429a      	cmp	r2, r3
 8004710:	d20b      	bcs.n	800472a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	607b      	str	r3, [r7, #4]
    }
 8004724:	bf00      	nop
 8004726:	bf00      	nop
 8004728:	e7fd      	b.n	8004726 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800472a:	4b0f      	ldr	r3, [pc, #60]	@ (8004768 <vPortValidateInterruptPriority+0x7c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004732:	4b0e      	ldr	r3, [pc, #56]	@ (800476c <vPortValidateInterruptPriority+0x80>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d90b      	bls.n	8004752 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800473a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	603b      	str	r3, [r7, #0]
    }
 800474c:	bf00      	nop
 800474e:	bf00      	nop
 8004750:	e7fd      	b.n	800474e <vPortValidateInterruptPriority+0x62>
    }
 8004752:	bf00      	nop
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	e000e3f0 	.word	0xe000e3f0
 8004764:	20000204 	.word	0x20000204
 8004768:	e000ed0c 	.word	0xe000ed0c
 800476c:	20000208 	.word	0x20000208

08004770 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08a      	sub	sp, #40	@ 0x28
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800477c:	f7fe fce6 	bl	800314c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004780:	4b66      	ldr	r3, [pc, #408]	@ (800491c <pvPortMalloc+0x1ac>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004788:	f000 f938 	bl	80049fc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800478c:	4b64      	ldr	r3, [pc, #400]	@ (8004920 <pvPortMalloc+0x1b0>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4013      	ands	r3, r2
 8004794:	2b00      	cmp	r3, #0
 8004796:	f040 80a9 	bne.w	80048ec <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d02e      	beq.n	80047fe <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80047a0:	2208      	movs	r2, #8
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d228      	bcs.n	80047fe <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 80047ac:	2208      	movs	r2, #8
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4413      	add	r3, r2
 80047b2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d022      	beq.n	8004804 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f023 0307 	bic.w	r3, r3, #7
 80047c4:	3308      	adds	r3, #8
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d215      	bcs.n	80047f8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f023 0307 	bic.w	r3, r3, #7
 80047d2:	3308      	adds	r3, #8
 80047d4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d011      	beq.n	8004804 <pvPortMalloc+0x94>
        __asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	617b      	str	r3, [r7, #20]
    }
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	e7fd      	b.n	80047f4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047fc:	e002      	b.n	8004804 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80047fe:	2300      	movs	r3, #0
 8004800:	607b      	str	r3, [r7, #4]
 8004802:	e000      	b.n	8004806 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004804:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d06f      	beq.n	80048ec <pvPortMalloc+0x17c>
 800480c:	4b45      	ldr	r3, [pc, #276]	@ (8004924 <pvPortMalloc+0x1b4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	d86a      	bhi.n	80048ec <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004816:	4b44      	ldr	r3, [pc, #272]	@ (8004928 <pvPortMalloc+0x1b8>)
 8004818:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800481a:	4b43      	ldr	r3, [pc, #268]	@ (8004928 <pvPortMalloc+0x1b8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004820:	e004      	b.n	800482c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800482c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	429a      	cmp	r2, r3
 8004834:	d903      	bls.n	800483e <pvPortMalloc+0xce>
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f1      	bne.n	8004822 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800483e:	4b37      	ldr	r3, [pc, #220]	@ (800491c <pvPortMalloc+0x1ac>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004844:	429a      	cmp	r2, r3
 8004846:	d051      	beq.n	80048ec <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2208      	movs	r2, #8
 800484e:	4413      	add	r3, r2
 8004850:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	1ad2      	subs	r2, r2, r3
 8004862:	2308      	movs	r3, #8
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	429a      	cmp	r2, r3
 8004868:	d920      	bls.n	80048ac <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800486a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4413      	add	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00b      	beq.n	8004894 <pvPortMalloc+0x124>
        __asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	613b      	str	r3, [r7, #16]
    }
 800488e:	bf00      	nop
 8004890:	bf00      	nop
 8004892:	e7fd      	b.n	8004890 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	1ad2      	subs	r2, r2, r3
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80048a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048a6:	69b8      	ldr	r0, [r7, #24]
 80048a8:	f000 f90a 	bl	8004ac0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004924 <pvPortMalloc+0x1b4>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004924 <pvPortMalloc+0x1b4>)
 80048b8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004924 <pvPortMalloc+0x1b4>)
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	4b1b      	ldr	r3, [pc, #108]	@ (800492c <pvPortMalloc+0x1bc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d203      	bcs.n	80048ce <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048c6:	4b17      	ldr	r3, [pc, #92]	@ (8004924 <pvPortMalloc+0x1b4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a18      	ldr	r2, [pc, #96]	@ (800492c <pvPortMalloc+0x1bc>)
 80048cc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	4b13      	ldr	r3, [pc, #76]	@ (8004920 <pvPortMalloc+0x1b0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048da:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80048e2:	4b13      	ldr	r3, [pc, #76]	@ (8004930 <pvPortMalloc+0x1c0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3301      	adds	r3, #1
 80048e8:	4a11      	ldr	r2, [pc, #68]	@ (8004930 <pvPortMalloc+0x1c0>)
 80048ea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80048ec:	f7fe fc3c 	bl	8003168 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00b      	beq.n	8004912 <pvPortMalloc+0x1a2>
        __asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	60fb      	str	r3, [r7, #12]
    }
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	e7fd      	b.n	800490e <pvPortMalloc+0x19e>
    return pvReturn;
 8004912:	69fb      	ldr	r3, [r7, #28]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3728      	adds	r7, #40	@ 0x28
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	20012e14 	.word	0x20012e14
 8004920:	20012e28 	.word	0x20012e28
 8004924:	20012e18 	.word	0x20012e18
 8004928:	20012e0c 	.word	0x20012e0c
 800492c:	20012e1c 	.word	0x20012e1c
 8004930:	20012e20 	.word	0x20012e20

08004934 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d04f      	beq.n	80049e6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004946:	2308      	movs	r3, #8
 8004948:	425b      	negs	r3, r3
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4413      	add	r3, r2
 800494e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	4b25      	ldr	r3, [pc, #148]	@ (80049f0 <vPortFree+0xbc>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4013      	ands	r3, r2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10b      	bne.n	800497a <vPortFree+0x46>
        __asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	60fb      	str	r3, [r7, #12]
    }
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	e7fd      	b.n	8004976 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <vPortFree+0x66>
        __asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	60bb      	str	r3, [r7, #8]
    }
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	e7fd      	b.n	8004996 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	4b14      	ldr	r3, [pc, #80]	@ (80049f0 <vPortFree+0xbc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01e      	beq.n	80049e6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d11a      	bne.n	80049e6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	4b0e      	ldr	r3, [pc, #56]	@ (80049f0 <vPortFree+0xbc>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	43db      	mvns	r3, r3
 80049ba:	401a      	ands	r2, r3
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80049c0:	f7fe fbc4 	bl	800314c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	4b0a      	ldr	r3, [pc, #40]	@ (80049f4 <vPortFree+0xc0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4413      	add	r3, r2
 80049ce:	4a09      	ldr	r2, [pc, #36]	@ (80049f4 <vPortFree+0xc0>)
 80049d0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049d2:	6938      	ldr	r0, [r7, #16]
 80049d4:	f000 f874 	bl	8004ac0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80049d8:	4b07      	ldr	r3, [pc, #28]	@ (80049f8 <vPortFree+0xc4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3301      	adds	r3, #1
 80049de:	4a06      	ldr	r2, [pc, #24]	@ (80049f8 <vPortFree+0xc4>)
 80049e0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80049e2:	f7fe fbc1 	bl	8003168 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80049e6:	bf00      	nop
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20012e28 	.word	0x20012e28
 80049f4:	20012e18 	.word	0x20012e18
 80049f8:	20012e24 	.word	0x20012e24

080049fc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a02:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004a06:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004a08:	4b27      	ldr	r3, [pc, #156]	@ (8004aa8 <prvHeapInit+0xac>)
 8004a0a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00c      	beq.n	8004a30 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3307      	adds	r3, #7
 8004a1a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0307 	bic.w	r3, r3, #7
 8004a22:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	4a1f      	ldr	r2, [pc, #124]	@ (8004aa8 <prvHeapInit+0xac>)
 8004a2c:	4413      	add	r3, r2
 8004a2e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a34:	4a1d      	ldr	r2, [pc, #116]	@ (8004aac <prvHeapInit+0xb0>)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8004aac <prvHeapInit+0xb0>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	4413      	add	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004a48:	2208      	movs	r2, #8
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0307 	bic.w	r3, r3, #7
 8004a56:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4a15      	ldr	r2, [pc, #84]	@ (8004ab0 <prvHeapInit+0xb4>)
 8004a5c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004a5e:	4b14      	ldr	r3, [pc, #80]	@ (8004ab0 <prvHeapInit+0xb4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2200      	movs	r2, #0
 8004a64:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004a66:	4b12      	ldr	r3, [pc, #72]	@ (8004ab0 <prvHeapInit+0xb4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	1ad2      	subs	r2, r2, r3
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab0 <prvHeapInit+0xb4>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab4 <prvHeapInit+0xb8>)
 8004a8a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	4a09      	ldr	r2, [pc, #36]	@ (8004ab8 <prvHeapInit+0xbc>)
 8004a92:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a94:	4b09      	ldr	r3, [pc, #36]	@ (8004abc <prvHeapInit+0xc0>)
 8004a96:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004a9a:	601a      	str	r2, [r3, #0]
}
 8004a9c:	bf00      	nop
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	2000020c 	.word	0x2000020c
 8004aac:	20012e0c 	.word	0x20012e0c
 8004ab0:	20012e14 	.word	0x20012e14
 8004ab4:	20012e1c 	.word	0x20012e1c
 8004ab8:	20012e18 	.word	0x20012e18
 8004abc:	20012e28 	.word	0x20012e28

08004ac0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ac8:	4b28      	ldr	r3, [pc, #160]	@ (8004b6c <prvInsertBlockIntoFreeList+0xac>)
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	e002      	b.n	8004ad4 <prvInsertBlockIntoFreeList+0x14>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d8f7      	bhi.n	8004ace <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	4413      	add	r3, r2
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d108      	bne.n	8004b02 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	441a      	add	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	441a      	add	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d118      	bne.n	8004b48 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4b15      	ldr	r3, [pc, #84]	@ (8004b70 <prvInsertBlockIntoFreeList+0xb0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d00d      	beq.n	8004b3e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	441a      	add	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	e008      	b.n	8004b50 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b70 <prvInsertBlockIntoFreeList+0xb0>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	e003      	b.n	8004b50 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d002      	beq.n	8004b5e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b5e:	bf00      	nop
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	20012e0c 	.word	0x20012e0c
 8004b70:	20012e14 	.word	0x20012e14

08004b74 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004b78:	4803      	ldr	r0, [pc, #12]	@ (8004b88 <_cbSendSystemDesc+0x14>)
 8004b7a:	f002 f89f 	bl	8006cbc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004b7e:	4803      	ldr	r0, [pc, #12]	@ (8004b8c <_cbSendSystemDesc+0x18>)
 8004b80:	f002 f89c 	bl	8006cbc <SEGGER_SYSVIEW_SendSysDesc>
}
 8004b84:	bf00      	nop
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	08007554 	.word	0x08007554
 8004b8c:	08007594 	.word	0x08007594

08004b90 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004b94:	4b06      	ldr	r3, [pc, #24]	@ (8004bb0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	4b05      	ldr	r3, [pc, #20]	@ (8004bb0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b9a:	6819      	ldr	r1, [r3, #0]
 8004b9c:	4b05      	ldr	r3, [pc, #20]	@ (8004bb4 <SEGGER_SYSVIEW_Conf+0x24>)
 8004b9e:	4a06      	ldr	r2, [pc, #24]	@ (8004bb8 <SEGGER_SYSVIEW_Conf+0x28>)
 8004ba0:	f001 fc08 	bl	80063b4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004ba4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004ba8:	f001 fc48 	bl	800643c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004bac:	bf00      	nop
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20000000 	.word	0x20000000
 8004bb4:	08004b75 	.word	0x08004b75
 8004bb8:	08007634 	.word	0x08007634

08004bbc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	607b      	str	r3, [r7, #4]
 8004bc6:	e033      	b.n	8004c30 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004bc8:	491e      	ldr	r1, [pc, #120]	@ (8004c44 <_cbSendTaskList+0x88>)
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	491a      	ldr	r1, [pc, #104]	@ (8004c44 <_cbSendTaskList+0x88>)
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	3304      	adds	r3, #4
 8004be8:	6819      	ldr	r1, [r3, #0]
 8004bea:	4c16      	ldr	r4, [pc, #88]	@ (8004c44 <_cbSendTaskList+0x88>)
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4423      	add	r3, r4
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	681c      	ldr	r4, [r3, #0]
 8004bfc:	4d11      	ldr	r5, [pc, #68]	@ (8004c44 <_cbSendTaskList+0x88>)
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	442b      	add	r3, r5
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	681d      	ldr	r5, [r3, #0]
 8004c0e:	4e0d      	ldr	r6, [pc, #52]	@ (8004c44 <_cbSendTaskList+0x88>)
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4433      	add	r3, r6
 8004c1c:	3310      	adds	r3, #16
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	462b      	mov	r3, r5
 8004c24:	4622      	mov	r2, r4
 8004c26:	f000 f8bd 	bl	8004da4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	607b      	str	r3, [r7, #4]
 8004c30:	4b05      	ldr	r3, [pc, #20]	@ (8004c48 <_cbSendTaskList+0x8c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d3c6      	bcc.n	8004bc8 <_cbSendTaskList+0xc>
  }
}
 8004c3a:	bf00      	nop
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c44:	20012e2c 	.word	0x20012e2c
 8004c48:	20012ecc 	.word	0x20012ecc

08004c4c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004c54:	f7fe fb3a 	bl	80032cc <xTaskGetTickCountFromISR>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	469a      	mov	sl, r3
 8004c5e:	4693      	mov	fp, r2
 8004c60:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004c64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	f04f 0a00 	mov.w	sl, #0
 8004c70:	f04f 0b00 	mov.w	fp, #0
 8004c74:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004c78:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004c7c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004c80:	4652      	mov	r2, sl
 8004c82:	465b      	mov	r3, fp
 8004c84:	1a14      	subs	r4, r2, r0
 8004c86:	eb63 0501 	sbc.w	r5, r3, r1
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	00ab      	lsls	r3, r5, #2
 8004c94:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004c98:	00a2      	lsls	r2, r4, #2
 8004c9a:	4614      	mov	r4, r2
 8004c9c:	461d      	mov	r5, r3
 8004c9e:	eb14 0800 	adds.w	r8, r4, r0
 8004ca2:	eb45 0901 	adc.w	r9, r5, r1
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cba:	4690      	mov	r8, r2
 8004cbc:	4699      	mov	r9, r3
 8004cbe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004cc2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	4619      	mov	r1, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004cd4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004ce2:	2205      	movs	r2, #5
 8004ce4:	492b      	ldr	r1, [pc, #172]	@ (8004d94 <SYSVIEW_AddTask+0xc0>)
 8004ce6:	68b8      	ldr	r0, [r7, #8]
 8004ce8:	f002 fb84 	bl	80073f4 <memcmp>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d04b      	beq.n	8004d8a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004cf2:	4b29      	ldr	r3, [pc, #164]	@ (8004d98 <SYSVIEW_AddTask+0xc4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b07      	cmp	r3, #7
 8004cf8:	d903      	bls.n	8004d02 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004cfa:	4828      	ldr	r0, [pc, #160]	@ (8004d9c <SYSVIEW_AddTask+0xc8>)
 8004cfc:	f002 faf0 	bl	80072e0 <SEGGER_SYSVIEW_Warn>
    return;
 8004d00:	e044      	b.n	8004d8c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004d02:	4b25      	ldr	r3, [pc, #148]	@ (8004d98 <SYSVIEW_AddTask+0xc4>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	4926      	ldr	r1, [pc, #152]	@ (8004da0 <SYSVIEW_AddTask+0xcc>)
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004d16:	4b20      	ldr	r3, [pc, #128]	@ (8004d98 <SYSVIEW_AddTask+0xc4>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4921      	ldr	r1, [pc, #132]	@ (8004da0 <SYSVIEW_AddTask+0xcc>)
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	3304      	adds	r3, #4
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004d98 <SYSVIEW_AddTask+0xc4>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	491b      	ldr	r1, [pc, #108]	@ (8004da0 <SYSVIEW_AddTask+0xcc>)
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d42:	4b15      	ldr	r3, [pc, #84]	@ (8004d98 <SYSVIEW_AddTask+0xc4>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4916      	ldr	r1, [pc, #88]	@ (8004da0 <SYSVIEW_AddTask+0xcc>)
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	330c      	adds	r3, #12
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004d58:	4b0f      	ldr	r3, [pc, #60]	@ (8004d98 <SYSVIEW_AddTask+0xc4>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	4910      	ldr	r1, [pc, #64]	@ (8004da0 <SYSVIEW_AddTask+0xcc>)
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	3310      	adds	r3, #16
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d98 <SYSVIEW_AddTask+0xc4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3301      	adds	r3, #1
 8004d74:	4a08      	ldr	r2, [pc, #32]	@ (8004d98 <SYSVIEW_AddTask+0xc4>)
 8004d76:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f80e 	bl	8004da4 <SYSVIEW_SendTaskInfo>
 8004d88:	e000      	b.n	8004d8c <SYSVIEW_AddTask+0xb8>
    return;
 8004d8a:	bf00      	nop

}
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	080075a4 	.word	0x080075a4
 8004d98:	20012ecc 	.word	0x20012ecc
 8004d9c:	080075ac 	.word	0x080075ac
 8004da0:	20012e2c 	.word	0x20012e2c

08004da4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08a      	sub	sp, #40	@ 0x28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004db2:	f107 0314 	add.w	r3, r7, #20
 8004db6:	2214      	movs	r2, #20
 8004db8:	2100      	movs	r1, #0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f002 fb2a 	bl	8007414 <memset>
  TaskInfo.TaskID     = TaskID;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004dd4:	f107 0314 	add.w	r3, r7, #20
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f001 fe77 	bl	8006acc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004dde:	bf00      	nop
 8004de0:	3728      	adds	r7, #40	@ 0x28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <__NVIC_EnableIRQ>:
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	db0b      	blt.n	8004e12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dfa:	79fb      	ldrb	r3, [r7, #7]
 8004dfc:	f003 021f 	and.w	r2, r3, #31
 8004e00:	4907      	ldr	r1, [pc, #28]	@ (8004e20 <__NVIC_EnableIRQ+0x38>)
 8004e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	2001      	movs	r0, #1
 8004e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	e000e100 	.word	0xe000e100

08004e24 <__NVIC_SetPriority>:
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	6039      	str	r1, [r7, #0]
 8004e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	db0a      	blt.n	8004e4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	490c      	ldr	r1, [pc, #48]	@ (8004e70 <__NVIC_SetPriority+0x4c>)
 8004e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e42:	0112      	lsls	r2, r2, #4
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	440b      	add	r3, r1
 8004e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004e4c:	e00a      	b.n	8004e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	4908      	ldr	r1, [pc, #32]	@ (8004e74 <__NVIC_SetPriority+0x50>)
 8004e54:	79fb      	ldrb	r3, [r7, #7]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	3b04      	subs	r3, #4
 8004e5c:	0112      	lsls	r2, r2, #4
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	440b      	add	r3, r1
 8004e62:	761a      	strb	r2, [r3, #24]
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	e000e100 	.word	0xe000e100
 8004e74:	e000ed00 	.word	0xe000ed00

08004e78 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004e7e:	f002 fa8b 	bl	8007398 <SEGGER_SYSVIEW_IsStarted>
 8004e82:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004e8a:	f001 fca3 	bl	80067d4 <SEGGER_SYSVIEW_Start>
  }
}
 8004e8e:	bf00      	nop
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed4 <_cbOnUARTRx+0x3c>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d806      	bhi.n	8004eb8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed4 <_cbOnUARTRx+0x3c>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	4b08      	ldr	r3, [pc, #32]	@ (8004ed4 <_cbOnUARTRx+0x3c>)
 8004eb4:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004eb6:	e009      	b.n	8004ecc <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004eb8:	f7ff ffde 	bl	8004e78 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004ebc:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <_cbOnUARTRx+0x3c>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	1dfb      	adds	r3, r7, #7
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	f000 fb9a 	bl	8005600 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004ecc:	bf00      	nop
}
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000014 	.word	0x20000014

08004ed8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004ee0:	4b14      	ldr	r3, [pc, #80]	@ (8004f34 <_cbOnUARTTx+0x5c>)
 8004ee2:	785b      	ldrb	r3, [r3, #1]
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d80f      	bhi.n	8004f08 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004ee8:	4b12      	ldr	r3, [pc, #72]	@ (8004f34 <_cbOnUARTTx+0x5c>)
 8004eea:	785b      	ldrb	r3, [r3, #1]
 8004eec:	461a      	mov	r2, r3
 8004eee:	4b12      	ldr	r3, [pc, #72]	@ (8004f38 <_cbOnUARTTx+0x60>)
 8004ef0:	5c9a      	ldrb	r2, [r3, r2]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8004f34 <_cbOnUARTTx+0x5c>)
 8004ef8:	785b      	ldrb	r3, [r3, #1]
 8004efa:	3301      	adds	r3, #1
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	4b0d      	ldr	r3, [pc, #52]	@ (8004f34 <_cbOnUARTTx+0x5c>)
 8004f00:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004f02:	2301      	movs	r3, #1
 8004f04:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004f06:	e00f      	b.n	8004f28 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004f08:	4b0a      	ldr	r3, [pc, #40]	@ (8004f34 <_cbOnUARTTx+0x5c>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fa19 	bl	8005348 <SEGGER_RTT_ReadUpBufferNoLock>
 8004f16:	4603      	mov	r3, r0
 8004f18:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	da02      	bge.n	8004f26 <_cbOnUARTTx+0x4e>
    r = 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	e000      	b.n	8004f28 <_cbOnUARTTx+0x50>
  }
Done:
 8004f26:	bf00      	nop
  return r;
 8004f28:	68fb      	ldr	r3, [r7, #12]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000014 	.word	0x20000014
 8004f38:	0800763c 	.word	0x0800763c

08004f3c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004f44:	4a04      	ldr	r2, [pc, #16]	@ (8004f58 <SEGGER_UART_init+0x1c>)
 8004f46:	4905      	ldr	r1, [pc, #20]	@ (8004f5c <SEGGER_UART_init+0x20>)
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f863 	bl	8005014 <HIF_UART_Init>
}
 8004f4e:	bf00      	nop
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	08004e99 	.word	0x08004e99
 8004f5c:	08004ed9 	.word	0x08004ed9

08004f60 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004f66:	4b1e      	ldr	r3, [pc, #120]	@ (8004fe0 <USART2_IRQHandler+0x80>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d011      	beq.n	8004f9a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004f76:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe4 <USART2_IRQHandler+0x84>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f003 030b 	and.w	r3, r3, #11
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d108      	bne.n	8004f9a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004f88:	4b17      	ldr	r3, [pc, #92]	@ (8004fe8 <USART2_IRQHandler+0x88>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d004      	beq.n	8004f9a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004f90:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <USART2_IRQHandler+0x88>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	79fa      	ldrb	r2, [r7, #7]
 8004f96:	4610      	mov	r0, r2
 8004f98:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01a      	beq.n	8004fda <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004fa4:	4b11      	ldr	r3, [pc, #68]	@ (8004fec <USART2_IRQHandler+0x8c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d015      	beq.n	8004fd8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004fac:	4b0f      	ldr	r3, [pc, #60]	@ (8004fec <USART2_IRQHandler+0x8c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	1dfa      	adds	r2, r7, #7
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	4798      	blx	r3
 8004fb6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d106      	bne.n	8004fcc <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff0 <USART2_IRQHandler+0x90>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a0b      	ldr	r2, [pc, #44]	@ (8004ff0 <USART2_IRQHandler+0x90>)
 8004fc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	e006      	b.n	8004fda <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004fcc:	4b04      	ldr	r3, [pc, #16]	@ (8004fe0 <USART2_IRQHandler+0x80>)
 8004fce:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004fd0:	79fa      	ldrb	r2, [r7, #7]
 8004fd2:	4b04      	ldr	r3, [pc, #16]	@ (8004fe4 <USART2_IRQHandler+0x84>)
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	e000      	b.n	8004fda <USART2_IRQHandler+0x7a>
      return;
 8004fd8:	bf00      	nop
    }
  }
}
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40004400 	.word	0x40004400
 8004fe4:	40004404 	.word	0x40004404
 8004fe8:	20012ed0 	.word	0x20012ed0
 8004fec:	20012ed4 	.word	0x20012ed4
 8004ff0:	4000440c 	.word	0x4000440c

08004ff4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004ff8:	4b05      	ldr	r3, [pc, #20]	@ (8005010 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a04      	ldr	r2, [pc, #16]	@ (8005010 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005002:	6013      	str	r3, [r2, #0]
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	4000440c 	.word	0x4000440c

08005014 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005020:	4b2e      	ldr	r3, [pc, #184]	@ (80050dc <HIF_UART_Init+0xc8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a2d      	ldr	r2, [pc, #180]	@ (80050dc <HIF_UART_Init+0xc8>)
 8005026:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800502a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 800502c:	4b2c      	ldr	r3, [pc, #176]	@ (80050e0 <HIF_UART_Init+0xcc>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a2b      	ldr	r2, [pc, #172]	@ (80050e0 <HIF_UART_Init+0xcc>)
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005038:	4b2a      	ldr	r3, [pc, #168]	@ (80050e4 <HIF_UART_Init+0xd0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005044:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800504c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800504e:	4a25      	ldr	r2, [pc, #148]	@ (80050e4 <HIF_UART_Init+0xd0>)
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005054:	4b24      	ldr	r3, [pc, #144]	@ (80050e8 <HIF_UART_Init+0xd4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005060:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005068:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800506a:	4a1f      	ldr	r2, [pc, #124]	@ (80050e8 <HIF_UART_Init+0xd4>)
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005070:	4b1e      	ldr	r3, [pc, #120]	@ (80050ec <HIF_UART_Init+0xd8>)
 8005072:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8005076:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005078:	4b1d      	ldr	r3, [pc, #116]	@ (80050f0 <HIF_UART_Init+0xdc>)
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800507e:	4b1d      	ldr	r3, [pc, #116]	@ (80050f4 <HIF_UART_Init+0xe0>)
 8005080:	2280      	movs	r2, #128	@ 0x80
 8005082:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800508a:	4a1b      	ldr	r2, [pc, #108]	@ (80050f8 <HIF_UART_Init+0xe4>)
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005092:	3301      	adds	r3, #1
 8005094:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	085b      	lsrs	r3, r3, #1
 800509a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050a2:	d302      	bcc.n	80050aa <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80050a4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80050a8:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d004      	beq.n	80050ba <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	4a11      	ldr	r2, [pc, #68]	@ (80050fc <HIF_UART_Init+0xe8>)
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80050ba:	4a11      	ldr	r2, [pc, #68]	@ (8005100 <HIF_UART_Init+0xec>)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80050c0:	4a10      	ldr	r2, [pc, #64]	@ (8005104 <HIF_UART_Init+0xf0>)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80050c6:	2106      	movs	r1, #6
 80050c8:	2026      	movs	r0, #38	@ 0x26
 80050ca:	f7ff feab 	bl	8004e24 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80050ce:	2026      	movs	r0, #38	@ 0x26
 80050d0:	f7ff fe8a 	bl	8004de8 <__NVIC_EnableIRQ>
}
 80050d4:	bf00      	nop
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40023840 	.word	0x40023840
 80050e0:	40023830 	.word	0x40023830
 80050e4:	40020020 	.word	0x40020020
 80050e8:	40020000 	.word	0x40020000
 80050ec:	4000440c 	.word	0x4000440c
 80050f0:	40004410 	.word	0x40004410
 80050f4:	40004414 	.word	0x40004414
 80050f8:	0501bd00 	.word	0x0501bd00
 80050fc:	40004408 	.word	0x40004408
 8005100:	20012ed0 	.word	0x20012ed0
 8005104:	20012ed4 	.word	0x20012ed4

08005108 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800510e:	4b24      	ldr	r3, [pc, #144]	@ (80051a0 <_DoInit+0x98>)
 8005110:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2203      	movs	r2, #3
 8005116:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2203      	movs	r2, #3
 800511c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a20      	ldr	r2, [pc, #128]	@ (80051a4 <_DoInit+0x9c>)
 8005122:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a20      	ldr	r2, [pc, #128]	@ (80051a8 <_DoInit+0xa0>)
 8005128:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005130:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a17      	ldr	r2, [pc, #92]	@ (80051a4 <_DoInit+0x9c>)
 8005148:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a17      	ldr	r2, [pc, #92]	@ (80051ac <_DoInit+0xa4>)
 800514e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2210      	movs	r2, #16
 8005154:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3307      	adds	r3, #7
 800516c:	4a10      	ldr	r2, [pc, #64]	@ (80051b0 <_DoInit+0xa8>)
 800516e:	6810      	ldr	r0, [r2, #0]
 8005170:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005172:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a0e      	ldr	r2, [pc, #56]	@ (80051b4 <_DoInit+0xac>)
 800517a:	6810      	ldr	r0, [r2, #0]
 800517c:	6018      	str	r0, [r3, #0]
 800517e:	8891      	ldrh	r1, [r2, #4]
 8005180:	7992      	ldrb	r2, [r2, #6]
 8005182:	8099      	strh	r1, [r3, #4]
 8005184:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005186:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005190:	f3bf 8f5f 	dmb	sy
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	20012ed8 	.word	0x20012ed8
 80051a4:	080075fc 	.word	0x080075fc
 80051a8:	20012f80 	.word	0x20012f80
 80051ac:	20013380 	.word	0x20013380
 80051b0:	08007608 	.word	0x08007608
 80051b4:	0800760c 	.word	0x0800760c

080051b8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08a      	sub	sp, #40	@ 0x28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80051c4:	2300      	movs	r3, #0
 80051c6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d905      	bls.n	80051e8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051e6:	e007      	b.n	80051f8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	69b9      	ldr	r1, [r7, #24]
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	1acb      	subs	r3, r1, r3
 80051f2:	4413      	add	r3, r2
 80051f4:	3b01      	subs	r3, #1
 80051f6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005202:	4293      	cmp	r3, r2
 8005204:	bf28      	it	cs
 8005206:	4613      	movcs	r3, r2
 8005208:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800520a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4293      	cmp	r3, r2
 8005210:	bf28      	it	cs
 8005212:	4613      	movcs	r3, r2
 8005214:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	6978      	ldr	r0, [r7, #20]
 8005226:	f002 f921 	bl	800746c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800522a:	6a3a      	ldr	r2, [r7, #32]
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	4413      	add	r3, r2
 8005230:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005236:	4413      	add	r3, r2
 8005238:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005242:	69fa      	ldr	r2, [r7, #28]
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	4413      	add	r3, r2
 8005248:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	429a      	cmp	r2, r3
 8005252:	d101      	bne.n	8005258 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005254:	2300      	movs	r3, #0
 8005256:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005258:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1b2      	bne.n	80051ce <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005268:	6a3b      	ldr	r3, [r7, #32]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3728      	adds	r7, #40	@ 0x28
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005272:	b580      	push	{r7, lr}
 8005274:	b088      	sub	sp, #32
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	429a      	cmp	r2, r3
 8005294:	d911      	bls.n	80052ba <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	4413      	add	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	6938      	ldr	r0, [r7, #16]
 80052a6:	f002 f8e1 	bl	800746c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052aa:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	441a      	add	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80052b8:	e01f      	b.n	80052fa <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	6938      	ldr	r0, [r7, #16]
 80052ce:	f002 f8cd 	bl	800746c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	4413      	add	r3, r2
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4619      	mov	r1, r3
 80052ea:	6938      	ldr	r0, [r7, #16]
 80052ec:	f002 f8be 	bl	800746c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052f0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	60da      	str	r2, [r3, #12]
}
 80052fa:	bf00      	nop
 80052fc:	3720      	adds	r7, #32
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005302:	b480      	push	{r7}
 8005304:	b087      	sub	sp, #28
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	429a      	cmp	r2, r3
 800531c:	d808      	bhi.n	8005330 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	1ad2      	subs	r2, r2, r3
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4413      	add	r3, r2
 800532a:	3b01      	subs	r3, #1
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	e004      	b.n	800533a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	3b01      	subs	r3, #1
 8005338:	617b      	str	r3, [r7, #20]
  }
  return r;
 800533a:	697b      	ldr	r3, [r7, #20]
}
 800533c:	4618      	mov	r0, r3
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005348:	b580      	push	{r7, lr}
 800534a:	b08c      	sub	sp, #48	@ 0x30
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005354:	4b3e      	ldr	r3, [pc, #248]	@ (8005450 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005356:	623b      	str	r3, [r7, #32]
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005362:	f7ff fed1 	bl	8005108 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	4613      	mov	r3, r2
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	4413      	add	r3, r2
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	4a37      	ldr	r2, [pc, #220]	@ (8005450 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005374:	4413      	add	r3, r2
 8005376:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005388:	2300      	movs	r3, #0
 800538a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800538c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	429a      	cmp	r2, r3
 8005392:	d92b      	bls.n	80053ec <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4293      	cmp	r3, r2
 80053a4:	bf28      	it	cs
 80053a6:	4613      	movcs	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b0:	4413      	add	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	6939      	ldr	r1, [r7, #16]
 80053b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053ba:	f002 f857 	bl	800746c <memcpy>
    NumBytesRead += NumBytesRem;
 80053be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	4413      	add	r3, r2
 80053c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80053c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	4413      	add	r3, r2
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	4413      	add	r3, r2
 80053dc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d101      	bne.n	80053ec <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80053e8:	2300      	movs	r3, #0
 80053ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4293      	cmp	r3, r2
 80053fa:	bf28      	it	cs
 80053fc:	4613      	movcs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d019      	beq.n	800543a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540c:	4413      	add	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	6939      	ldr	r1, [r7, #16]
 8005414:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005416:	f002 f829 	bl	800746c <memcpy>
    NumBytesRead += NumBytesRem;
 800541a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	4413      	add	r3, r2
 8005420:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	4413      	add	r3, r2
 8005428:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005432:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	4413      	add	r3, r2
 8005438:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800543a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005444:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005448:	4618      	mov	r0, r3
 800544a:	3730      	adds	r7, #48	@ 0x30
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	20012ed8 	.word	0x20012ed8

08005454 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005454:	b580      	push	{r7, lr}
 8005456:	b08c      	sub	sp, #48	@ 0x30
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005460:	4b3e      	ldr	r3, [pc, #248]	@ (800555c <SEGGER_RTT_ReadNoLock+0x108>)
 8005462:	623b      	str	r3, [r7, #32]
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <SEGGER_RTT_ReadNoLock+0x1e>
 800546e:	f7ff fe4b 	bl	8005108 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4613      	mov	r3, r2
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	4413      	add	r3, r2
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	3360      	adds	r3, #96	@ 0x60
 800547e:	4a37      	ldr	r2, [pc, #220]	@ (800555c <SEGGER_RTT_ReadNoLock+0x108>)
 8005480:	4413      	add	r3, r2
 8005482:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005494:	2300      	movs	r3, #0
 8005496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005498:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	429a      	cmp	r2, r3
 800549e:	d92b      	bls.n	80054f8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4293      	cmp	r3, r2
 80054b0:	bf28      	it	cs
 80054b2:	4613      	movcs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054bc:	4413      	add	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	6939      	ldr	r1, [r7, #16]
 80054c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054c6:	f001 ffd1 	bl	800746c <memcpy>
    NumBytesRead += NumBytesRem;
 80054ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	4413      	add	r3, r2
 80054d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80054d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	4413      	add	r3, r2
 80054d8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80054e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	4413      	add	r3, r2
 80054e8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d101      	bne.n	80054f8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80054f4:	2300      	movs	r3, #0
 80054f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4293      	cmp	r3, r2
 8005506:	bf28      	it	cs
 8005508:	4613      	movcs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d019      	beq.n	8005546 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005518:	4413      	add	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	6939      	ldr	r1, [r7, #16]
 8005520:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005522:	f001 ffa3 	bl	800746c <memcpy>
    NumBytesRead += NumBytesRem;
 8005526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	4413      	add	r3, r2
 800552c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800552e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	4413      	add	r3, r2
 8005534:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800553e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	4413      	add	r3, r2
 8005544:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005550:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005554:	4618      	mov	r0, r3
 8005556:	3730      	adds	r7, #48	@ 0x30
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20012ed8 	.word	0x20012ed8

08005560 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4613      	mov	r3, r2
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	4413      	add	r3, r2
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	3360      	adds	r3, #96	@ 0x60
 800557c:	4a1f      	ldr	r2, [pc, #124]	@ (80055fc <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800557e:	4413      	add	r3, r2
 8005580:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d029      	beq.n	80055de <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800558a:	2b02      	cmp	r3, #2
 800558c:	d82e      	bhi.n	80055ec <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005592:	2b01      	cmp	r3, #1
 8005594:	d013      	beq.n	80055be <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005596:	e029      	b.n	80055ec <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005598:	6978      	ldr	r0, [r7, #20]
 800559a:	f7ff feb2 	bl	8005302 <_GetAvailWriteSpace>
 800559e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d202      	bcs.n	80055ae <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80055a8:	2300      	movs	r3, #0
 80055aa:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80055ac:	e021      	b.n	80055f2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	69b9      	ldr	r1, [r7, #24]
 80055b6:	6978      	ldr	r0, [r7, #20]
 80055b8:	f7ff fe5b 	bl	8005272 <_WriteNoCheck>
    break;
 80055bc:	e019      	b.n	80055f2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80055be:	6978      	ldr	r0, [r7, #20]
 80055c0:	f7ff fe9f 	bl	8005302 <_GetAvailWriteSpace>
 80055c4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4293      	cmp	r3, r2
 80055cc:	bf28      	it	cs
 80055ce:	4613      	movcs	r3, r2
 80055d0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	69b9      	ldr	r1, [r7, #24]
 80055d6:	6978      	ldr	r0, [r7, #20]
 80055d8:	f7ff fe4b 	bl	8005272 <_WriteNoCheck>
    break;
 80055dc:	e009      	b.n	80055f2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	69b9      	ldr	r1, [r7, #24]
 80055e2:	6978      	ldr	r0, [r7, #20]
 80055e4:	f7ff fde8 	bl	80051b8 <_WriteBlocking>
 80055e8:	61f8      	str	r0, [r7, #28]
    break;
 80055ea:	e002      	b.n	80055f2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80055ec:	2300      	movs	r3, #0
 80055ee:	61fb      	str	r3, [r7, #28]
    break;
 80055f0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80055f2:	69fb      	ldr	r3, [r7, #28]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3720      	adds	r7, #32
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20012ed8 	.word	0x20012ed8

08005600 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800560c:	4b0e      	ldr	r3, [pc, #56]	@ (8005648 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800560e:	61fb      	str	r3, [r7, #28]
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800561a:	f7ff fd75 	bl	8005108 <_DoInit>
  SEGGER_RTT_LOCK();
 800561e:	f3ef 8311 	mrs	r3, BASEPRI
 8005622:	f04f 0120 	mov.w	r1, #32
 8005626:	f381 8811 	msr	BASEPRI, r1
 800562a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7ff ff95 	bl	8005560 <SEGGER_RTT_WriteDownBufferNoLock>
 8005636:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800563e:	697b      	ldr	r3, [r7, #20]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3720      	adds	r7, #32
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	20012ed8 	.word	0x20012ed8

0800564c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800565a:	4b3d      	ldr	r3, [pc, #244]	@ (8005750 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005668:	f7ff fd4e 	bl	8005108 <_DoInit>
  SEGGER_RTT_LOCK();
 800566c:	f3ef 8311 	mrs	r3, BASEPRI
 8005670:	f04f 0120 	mov.w	r1, #32
 8005674:	f381 8811 	msr	BASEPRI, r1
 8005678:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800567a:	4b35      	ldr	r3, [pc, #212]	@ (8005750 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800567c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800567e:	2300      	movs	r3, #0
 8005680:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005682:	6939      	ldr	r1, [r7, #16]
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	4613      	mov	r3, r2
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	4413      	add	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	440b      	add	r3, r1
 8005692:	3304      	adds	r3, #4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d008      	beq.n	80056ac <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	3301      	adds	r3, #1
 800569e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	dbeb      	blt.n	8005682 <SEGGER_RTT_AllocUpBuffer+0x36>
 80056aa:	e000      	b.n	80056ae <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80056ac:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	da3f      	bge.n	8005738 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80056b8:	6939      	ldr	r1, [r7, #16]
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	4613      	mov	r3, r2
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	4413      	add	r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	440b      	add	r3, r1
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80056cc:	6939      	ldr	r1, [r7, #16]
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	4613      	mov	r3, r2
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	4413      	add	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	440b      	add	r3, r1
 80056dc:	3304      	adds	r3, #4
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80056e2:	6939      	ldr	r1, [r7, #16]
 80056e4:	69fa      	ldr	r2, [r7, #28]
 80056e6:	4613      	mov	r3, r2
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	4413      	add	r3, r2
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	440b      	add	r3, r1
 80056f0:	3320      	adds	r3, #32
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80056f6:	6939      	ldr	r1, [r7, #16]
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	4613      	mov	r3, r2
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	4413      	add	r3, r2
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	440b      	add	r3, r1
 8005704:	3328      	adds	r3, #40	@ 0x28
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800570a:	6939      	ldr	r1, [r7, #16]
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	4613      	mov	r3, r2
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	4413      	add	r3, r2
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	440b      	add	r3, r1
 8005718:	3324      	adds	r3, #36	@ 0x24
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800571e:	6939      	ldr	r1, [r7, #16]
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	4613      	mov	r3, r2
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	4413      	add	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	440b      	add	r3, r1
 800572c:	332c      	adds	r3, #44	@ 0x2c
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005732:	f3bf 8f5f 	dmb	sy
 8005736:	e002      	b.n	800573e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005738:	f04f 33ff 	mov.w	r3, #4294967295
 800573c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005744:	69fb      	ldr	r3, [r7, #28]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3720      	adds	r7, #32
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20012ed8 	.word	0x20012ed8

08005754 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005762:	4b33      	ldr	r3, [pc, #204]	@ (8005830 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005770:	f7ff fcca 	bl	8005108 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005774:	4b2e      	ldr	r3, [pc, #184]	@ (8005830 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005776:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	461a      	mov	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4293      	cmp	r3, r2
 8005782:	d24d      	bcs.n	8005820 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005784:	f3ef 8311 	mrs	r3, BASEPRI
 8005788:	f04f 0120 	mov.w	r1, #32
 800578c:	f381 8811 	msr	BASEPRI, r1
 8005790:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d031      	beq.n	80057fc <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005798:	6979      	ldr	r1, [r7, #20]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4613      	mov	r3, r2
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	4413      	add	r3, r2
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	440b      	add	r3, r1
 80057a6:	3360      	adds	r3, #96	@ 0x60
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80057ac:	6979      	ldr	r1, [r7, #20]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4613      	mov	r3, r2
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	4413      	add	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	440b      	add	r3, r1
 80057ba:	3364      	adds	r3, #100	@ 0x64
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80057c0:	6979      	ldr	r1, [r7, #20]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4613      	mov	r3, r2
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	4413      	add	r3, r2
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	440b      	add	r3, r1
 80057ce:	3368      	adds	r3, #104	@ 0x68
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80057d4:	6979      	ldr	r1, [r7, #20]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4613      	mov	r3, r2
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	4413      	add	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	440b      	add	r3, r1
 80057e2:	3370      	adds	r3, #112	@ 0x70
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80057e8:	6979      	ldr	r1, [r7, #20]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4613      	mov	r3, r2
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	4413      	add	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	440b      	add	r3, r1
 80057f6:	336c      	adds	r3, #108	@ 0x6c
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80057fc:	6979      	ldr	r1, [r7, #20]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4613      	mov	r3, r2
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	4413      	add	r3, r2
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	440b      	add	r3, r1
 800580a:	3374      	adds	r3, #116	@ 0x74
 800580c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800580e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005810:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	e002      	b.n	8005826 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005820:	f04f 33ff 	mov.w	r3, #4294967295
 8005824:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005826:	69fb      	ldr	r3, [r7, #28]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3720      	adds	r7, #32
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	20012ed8 	.word	0x20012ed8

08005834 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005844:	e002      	b.n	800584c <_EncodeStr+0x18>
    Len++;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	3301      	adds	r3, #1
 800584a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	4413      	add	r3, r2
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f6      	bne.n	8005846 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	429a      	cmp	r2, r3
 800585e:	d901      	bls.n	8005864 <_EncodeStr+0x30>
    Len = Limit;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2bfe      	cmp	r3, #254	@ 0xfe
 8005868:	d806      	bhi.n	8005878 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	60fa      	str	r2, [r7, #12]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	e011      	b.n	800589c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	60fa      	str	r2, [r7, #12]
 800587e:	22ff      	movs	r2, #255	@ 0xff
 8005880:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	60fa      	str	r2, [r7, #12]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	0a19      	lsrs	r1, r3, #8
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	60fa      	str	r2, [r7, #12]
 8005898:	b2ca      	uxtb	r2, r1
 800589a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80058a0:	e00a      	b.n	80058b8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	1c53      	adds	r3, r2, #1
 80058a6:	60bb      	str	r3, [r7, #8]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	1c59      	adds	r1, r3, #1
 80058ac:	60f9      	str	r1, [r7, #12]
 80058ae:	7812      	ldrb	r2, [r2, #0]
 80058b0:	701a      	strb	r2, [r3, #0]
    n++;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	3301      	adds	r3, #1
 80058b6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d3f0      	bcc.n	80058a2 <_EncodeStr+0x6e>
  }
  return pPayload;
 80058c0:	68fb      	ldr	r3, [r7, #12]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3304      	adds	r3, #4
}
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80058ee:	4b35      	ldr	r3, [pc, #212]	@ (80059c4 <_HandleIncomingPacket+0xdc>)
 80058f0:	7e1b      	ldrb	r3, [r3, #24]
 80058f2:	4618      	mov	r0, r3
 80058f4:	1cfb      	adds	r3, r7, #3
 80058f6:	2201      	movs	r2, #1
 80058f8:	4619      	mov	r1, r3
 80058fa:	f7ff fdab 	bl	8005454 <SEGGER_RTT_ReadNoLock>
 80058fe:	4603      	mov	r3, r0
 8005900:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	dd59      	ble.n	80059bc <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005908:	78fb      	ldrb	r3, [r7, #3]
 800590a:	2b80      	cmp	r3, #128	@ 0x80
 800590c:	d032      	beq.n	8005974 <_HandleIncomingPacket+0x8c>
 800590e:	2b80      	cmp	r3, #128	@ 0x80
 8005910:	dc42      	bgt.n	8005998 <_HandleIncomingPacket+0xb0>
 8005912:	2b07      	cmp	r3, #7
 8005914:	dc16      	bgt.n	8005944 <_HandleIncomingPacket+0x5c>
 8005916:	2b00      	cmp	r3, #0
 8005918:	dd3e      	ble.n	8005998 <_HandleIncomingPacket+0xb0>
 800591a:	3b01      	subs	r3, #1
 800591c:	2b06      	cmp	r3, #6
 800591e:	d83b      	bhi.n	8005998 <_HandleIncomingPacket+0xb0>
 8005920:	a201      	add	r2, pc, #4	@ (adr r2, 8005928 <_HandleIncomingPacket+0x40>)
 8005922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005926:	bf00      	nop
 8005928:	0800594b 	.word	0x0800594b
 800592c:	08005951 	.word	0x08005951
 8005930:	08005957 	.word	0x08005957
 8005934:	0800595d 	.word	0x0800595d
 8005938:	08005963 	.word	0x08005963
 800593c:	08005969 	.word	0x08005969
 8005940:	0800596f 	.word	0x0800596f
 8005944:	2b7f      	cmp	r3, #127	@ 0x7f
 8005946:	d034      	beq.n	80059b2 <_HandleIncomingPacket+0xca>
 8005948:	e026      	b.n	8005998 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800594a:	f000 ff43 	bl	80067d4 <SEGGER_SYSVIEW_Start>
      break;
 800594e:	e035      	b.n	80059bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005950:	f000 fffc 	bl	800694c <SEGGER_SYSVIEW_Stop>
      break;
 8005954:	e032      	b.n	80059bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005956:	f001 f9d5 	bl	8006d04 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800595a:	e02f      	b.n	80059bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800595c:	f001 f99a 	bl	8006c94 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005960:	e02c      	b.n	80059bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005962:	f001 f819 	bl	8006998 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005966:	e029      	b.n	80059bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005968:	f001 fc68 	bl	800723c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800596c:	e026      	b.n	80059bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800596e:	f001 fc47 	bl	8007200 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005972:	e023      	b.n	80059bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005974:	4b13      	ldr	r3, [pc, #76]	@ (80059c4 <_HandleIncomingPacket+0xdc>)
 8005976:	7e1b      	ldrb	r3, [r3, #24]
 8005978:	4618      	mov	r0, r3
 800597a:	1cfb      	adds	r3, r7, #3
 800597c:	2201      	movs	r2, #1
 800597e:	4619      	mov	r1, r3
 8005980:	f7ff fd68 	bl	8005454 <SEGGER_RTT_ReadNoLock>
 8005984:	4603      	mov	r3, r0
 8005986:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	dd13      	ble.n	80059b6 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800598e:	78fb      	ldrb	r3, [r7, #3]
 8005990:	4618      	mov	r0, r3
 8005992:	f001 fbb5 	bl	8007100 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005996:	e00e      	b.n	80059b6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	b25b      	sxtb	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	da0c      	bge.n	80059ba <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80059a0:	4b08      	ldr	r3, [pc, #32]	@ (80059c4 <_HandleIncomingPacket+0xdc>)
 80059a2:	7e1b      	ldrb	r3, [r3, #24]
 80059a4:	4618      	mov	r0, r3
 80059a6:	1cfb      	adds	r3, r7, #3
 80059a8:	2201      	movs	r2, #1
 80059aa:	4619      	mov	r1, r3
 80059ac:	f7ff fd52 	bl	8005454 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80059b0:	e003      	b.n	80059ba <_HandleIncomingPacket+0xd2>
      break;
 80059b2:	bf00      	nop
 80059b4:	e002      	b.n	80059bc <_HandleIncomingPacket+0xd4>
      break;
 80059b6:	bf00      	nop
 80059b8:	e000      	b.n	80059bc <_HandleIncomingPacket+0xd4>
      break;
 80059ba:	bf00      	nop
    }
  }
}
 80059bc:	bf00      	nop
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20014398 	.word	0x20014398

080059c8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08c      	sub	sp, #48	@ 0x30
 80059cc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80059ce:	2301      	movs	r3, #1
 80059d0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80059d2:	1d3b      	adds	r3, r7, #4
 80059d4:	3301      	adds	r3, #1
 80059d6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059dc:	4b32      	ldr	r3, [pc, #200]	@ (8005aa8 <_TrySendOverflowPacket+0xe0>)
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059e2:	e00b      	b.n	80059fc <_TrySendOverflowPacket+0x34>
 80059e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ea:	1c59      	adds	r1, r3, #1
 80059ec:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80059ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f8:	09db      	lsrs	r3, r3, #7
 80059fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a00:	d8f0      	bhi.n	80059e4 <_TrySendOverflowPacket+0x1c>
 8005a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a10:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a12:	4b26      	ldr	r3, [pc, #152]	@ (8005aac <_TrySendOverflowPacket+0xe4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005a18:	4b23      	ldr	r3, [pc, #140]	@ (8005aa8 <_TrySendOverflowPacket+0xe0>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	623b      	str	r3, [r7, #32]
 8005a2a:	e00b      	b.n	8005a44 <_TrySendOverflowPacket+0x7c>
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a32:	1c59      	adds	r1, r3, #1
 8005a34:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a36:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	09db      	lsrs	r3, r3, #7
 8005a42:	623b      	str	r3, [r7, #32]
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a48:	d8f0      	bhi.n	8005a2c <_TrySendOverflowPacket+0x64>
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a50:	6a3a      	ldr	r2, [r7, #32]
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a58:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005a5a:	4b13      	ldr	r3, [pc, #76]	@ (8005aa8 <_TrySendOverflowPacket+0xe0>)
 8005a5c:	785b      	ldrb	r3, [r3, #1]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	1d3b      	adds	r3, r7, #4
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	1d3b      	adds	r3, r7, #4
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	f7fa fbb0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a70:	4603      	mov	r3, r0
 8005a72:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005a74:	f7ff fabe 	bl	8004ff4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8005aa8 <_TrySendOverflowPacket+0xe0>)
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005a84:	4b08      	ldr	r3, [pc, #32]	@ (8005aa8 <_TrySendOverflowPacket+0xe0>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	4b06      	ldr	r3, [pc, #24]	@ (8005aa8 <_TrySendOverflowPacket+0xe0>)
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	e004      	b.n	8005a9c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005a92:	4b05      	ldr	r3, [pc, #20]	@ (8005aa8 <_TrySendOverflowPacket+0xe0>)
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	3301      	adds	r3, #1
 8005a98:	4a03      	ldr	r2, [pc, #12]	@ (8005aa8 <_TrySendOverflowPacket+0xe0>)
 8005a9a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005a9c:	693b      	ldr	r3, [r7, #16]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3730      	adds	r7, #48	@ 0x30
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20014398 	.word	0x20014398
 8005aac:	e0001004 	.word	0xe0001004

08005ab0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08a      	sub	sp, #40	@ 0x28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005abc:	4b6d      	ldr	r3, [pc, #436]	@ (8005c74 <_SendPacket+0x1c4>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d010      	beq.n	8005ae6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005ac4:	4b6b      	ldr	r3, [pc, #428]	@ (8005c74 <_SendPacket+0x1c4>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 80a5 	beq.w	8005c18 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005ace:	4b69      	ldr	r3, [pc, #420]	@ (8005c74 <_SendPacket+0x1c4>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d109      	bne.n	8005aea <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005ad6:	f7ff ff77 	bl	80059c8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005ada:	4b66      	ldr	r3, [pc, #408]	@ (8005c74 <_SendPacket+0x1c4>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	f040 809c 	bne.w	8005c1c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005ae4:	e001      	b.n	8005aea <_SendPacket+0x3a>
    goto Send;
 8005ae6:	bf00      	nop
 8005ae8:	e000      	b.n	8005aec <_SendPacket+0x3c>
Send:
 8005aea:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b1f      	cmp	r3, #31
 8005af0:	d809      	bhi.n	8005b06 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005af2:	4b60      	ldr	r3, [pc, #384]	@ (8005c74 <_SendPacket+0x1c4>)
 8005af4:	69da      	ldr	r2, [r3, #28]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	fa22 f303 	lsr.w	r3, r2, r3
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f040 808d 	bne.w	8005c20 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b17      	cmp	r3, #23
 8005b0a:	d807      	bhi.n	8005b1c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	e03d      	b.n	8005b98 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b28:	d912      	bls.n	8005b50 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	09da      	lsrs	r2, r3, #7
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	3a01      	subs	r2, #1
 8005b42:	60fa      	str	r2, [r7, #12]
 8005b44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	e006      	b.n	8005b5e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b62:	d912      	bls.n	8005b8a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	09da      	lsrs	r2, r3, #7
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	3a01      	subs	r2, #1
 8005b7c:	60fa      	str	r2, [r7, #12]
 8005b7e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	701a      	strb	r2, [r3, #0]
 8005b88:	e006      	b.n	8005b98 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b98:	4b37      	ldr	r3, [pc, #220]	@ (8005c78 <_SendPacket+0x1c8>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005b9e:	4b35      	ldr	r3, [pc, #212]	@ (8005c74 <_SendPacket+0x1c4>)
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	623b      	str	r3, [r7, #32]
 8005bb0:	e00b      	b.n	8005bca <_SendPacket+0x11a>
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	1c59      	adds	r1, r3, #1
 8005bba:	6279      	str	r1, [r7, #36]	@ 0x24
 8005bbc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	701a      	strb	r2, [r3, #0]
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	09db      	lsrs	r3, r3, #7
 8005bc8:	623b      	str	r3, [r7, #32]
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bce:	d8f0      	bhi.n	8005bb2 <_SendPacket+0x102>
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bd6:	6a3a      	ldr	r2, [r7, #32]
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005be0:	4b24      	ldr	r3, [pc, #144]	@ (8005c74 <_SendPacket+0x1c4>)
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	4618      	mov	r0, r3
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	68f9      	ldr	r1, [r7, #12]
 8005bf0:	f7fa faee 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005bf8:	f7ff f9fc 	bl	8004ff4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005c02:	4a1c      	ldr	r2, [pc, #112]	@ (8005c74 <_SendPacket+0x1c4>)
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	60d3      	str	r3, [r2, #12]
 8005c08:	e00b      	b.n	8005c22 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8005c74 <_SendPacket+0x1c4>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	4b18      	ldr	r3, [pc, #96]	@ (8005c74 <_SendPacket+0x1c4>)
 8005c14:	701a      	strb	r2, [r3, #0]
 8005c16:	e004      	b.n	8005c22 <_SendPacket+0x172>
    goto SendDone;
 8005c18:	bf00      	nop
 8005c1a:	e002      	b.n	8005c22 <_SendPacket+0x172>
      goto SendDone;
 8005c1c:	bf00      	nop
 8005c1e:	e000      	b.n	8005c22 <_SendPacket+0x172>
      goto SendDone;
 8005c20:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005c22:	4b14      	ldr	r3, [pc, #80]	@ (8005c74 <_SendPacket+0x1c4>)
 8005c24:	7e1b      	ldrb	r3, [r3, #24]
 8005c26:	4619      	mov	r1, r3
 8005c28:	4a14      	ldr	r2, [pc, #80]	@ (8005c7c <_SendPacket+0x1cc>)
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	440b      	add	r3, r1
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	4413      	add	r3, r2
 8005c34:	336c      	adds	r3, #108	@ 0x6c
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	4b0e      	ldr	r3, [pc, #56]	@ (8005c74 <_SendPacket+0x1c4>)
 8005c3a:	7e1b      	ldrb	r3, [r3, #24]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	490f      	ldr	r1, [pc, #60]	@ (8005c7c <_SendPacket+0x1cc>)
 8005c40:	4603      	mov	r3, r0
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	4403      	add	r3, r0
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	440b      	add	r3, r1
 8005c4a:	3370      	adds	r3, #112	@ 0x70
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d00b      	beq.n	8005c6a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005c52:	4b08      	ldr	r3, [pc, #32]	@ (8005c74 <_SendPacket+0x1c4>)
 8005c54:	789b      	ldrb	r3, [r3, #2]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d107      	bne.n	8005c6a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005c5a:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <_SendPacket+0x1c4>)
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005c60:	f7ff fe42 	bl	80058e8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005c64:	4b03      	ldr	r3, [pc, #12]	@ (8005c74 <_SendPacket+0x1c4>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005c6a:	bf00      	nop
 8005c6c:	3728      	adds	r7, #40	@ 0x28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20014398 	.word	0x20014398
 8005c78:	e0001004 	.word	0xe0001004
 8005c7c:	20012ed8 	.word	0x20012ed8

08005c80 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08a      	sub	sp, #40	@ 0x28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	3301      	adds	r3, #1
 8005c96:	2b80      	cmp	r3, #128	@ 0x80
 8005c98:	d80a      	bhi.n	8005cb0 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	1c59      	adds	r1, r3, #1
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6051      	str	r1, [r2, #4]
 8005ca4:	78fa      	ldrb	r2, [r7, #3]
 8005ca6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	2b80      	cmp	r3, #128	@ 0x80
 8005cb6:	d15a      	bne.n	8005d6e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	623b      	str	r3, [r7, #32]
 8005cd8:	e00b      	b.n	8005cf2 <_StoreChar+0x72>
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce0:	1c59      	adds	r1, r3, #1
 8005ce2:	6279      	str	r1, [r7, #36]	@ 0x24
 8005ce4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	09db      	lsrs	r3, r3, #7
 8005cf0:	623b      	str	r3, [r7, #32]
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cf6:	d8f0      	bhi.n	8005cda <_StoreChar+0x5a>
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	627a      	str	r2, [r7, #36]	@ 0x24
 8005cfe:	6a3a      	ldr	r2, [r7, #32]
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61bb      	str	r3, [r7, #24]
 8005d10:	e00b      	b.n	8005d2a <_StoreChar+0xaa>
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	1c59      	adds	r1, r3, #1
 8005d1a:	61f9      	str	r1, [r7, #28]
 8005d1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	09db      	lsrs	r3, r3, #7
 8005d28:	61bb      	str	r3, [r7, #24]
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d2e:	d8f0      	bhi.n	8005d12 <_StoreChar+0x92>
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	61fa      	str	r2, [r7, #28]
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	221a      	movs	r2, #26
 8005d46:	6939      	ldr	r1, [r7, #16]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff feb1 	bl	8005ab0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff fdbb 	bl	80058ce <_PreparePacket>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	611a      	str	r2, [r3, #16]
  }
}
 8005d6e:	bf00      	nop
 8005d70:	3728      	adds	r7, #40	@ 0x28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	@ 0x28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005d92:	e007      	b.n	8005da4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005d94:	6a3a      	ldr	r2, [r7, #32]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9c:	623b      	str	r3, [r7, #32]
    Width++;
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	3301      	adds	r3, #1
 8005da2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005da4:	6a3a      	ldr	r2, [r7, #32]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d2f3      	bcs.n	8005d94 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d901      	bls.n	8005db8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d000      	beq.n	8005dc4 <_PrintUnsigned+0x4c>
 8005dc2:	e01f      	b.n	8005e04 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d01c      	beq.n	8005e04 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d005      	beq.n	8005de0 <_PrintUnsigned+0x68>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d102      	bne.n	8005de0 <_PrintUnsigned+0x68>
        c = '0';
 8005dda:	2330      	movs	r3, #48	@ 0x30
 8005ddc:	76fb      	strb	r3, [r7, #27]
 8005dde:	e001      	b.n	8005de4 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005de0:	2320      	movs	r3, #32
 8005de2:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005de4:	e007      	b.n	8005df6 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de8:	3b01      	subs	r3, #1
 8005dea:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005dec:	7efb      	ldrb	r3, [r7, #27]
 8005dee:	4619      	mov	r1, r3
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f7ff ff45 	bl	8005c80 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <_PrintUnsigned+0x8c>
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d3f0      	bcc.n	8005de6 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d903      	bls.n	8005e12 <_PrintUnsigned+0x9a>
      NumDigits--;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	e009      	b.n	8005e26 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1a:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d200      	bcs.n	8005e26 <_PrintUnsigned+0xae>
        break;
 8005e24:	e005      	b.n	8005e32 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	fb02 f303 	mul.w	r3, r2, r3
 8005e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005e30:	e7e8      	b.n	8005e04 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e3a:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e40:	fb02 f303 	mul.w	r3, r2, r3
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005e4a:	4a15      	ldr	r2, [pc, #84]	@ (8005ea0 <_PrintUnsigned+0x128>)
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	4413      	add	r3, r2
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	4619      	mov	r1, r3
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f7ff ff13 	bl	8005c80 <_StoreChar>
    Digit /= Base;
 8005e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e62:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e3      	bne.n	8005e32 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d011      	beq.n	8005e98 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00e      	beq.n	8005e98 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e7a:	e006      	b.n	8005e8a <_PrintUnsigned+0x112>
        FieldWidth--;
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005e82:	2120      	movs	r1, #32
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f7ff fefb 	bl	8005c80 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <_PrintUnsigned+0x120>
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d3f1      	bcc.n	8005e7c <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005e98:	bf00      	nop
 8005e9a:	3728      	adds	r7, #40	@ 0x28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	0800764c 	.word	0x0800764c

08005ea4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af02      	add	r7, sp, #8
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	bfb8      	it	lt
 8005eb8:	425b      	neglt	r3, r3
 8005eba:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005ec0:	e007      	b.n	8005ed2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	fb92 f3f3 	sdiv	r3, r2, r3
 8005eca:	613b      	str	r3, [r7, #16]
    Width++;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	daf3      	bge.n	8005ec2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d901      	bls.n	8005ee6 <_PrintInt+0x42>
    Width = NumDigits;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00a      	beq.n	8005f02 <_PrintInt+0x5e>
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	db04      	blt.n	8005efc <_PrintInt+0x58>
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <_PrintInt+0x5e>
    FieldWidth--;
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <_PrintInt+0x6e>
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d016      	beq.n	8005f40 <_PrintInt+0x9c>
 8005f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d111      	bne.n	8005f40 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00e      	beq.n	8005f40 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f22:	e006      	b.n	8005f32 <_PrintInt+0x8e>
        FieldWidth--;
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005f2a:	2120      	movs	r1, #32
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f7ff fea7 	bl	8005c80 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <_PrintInt+0x9c>
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d3f1      	bcc.n	8005f24 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	da07      	bge.n	8005f56 <_PrintInt+0xb2>
    v = -v;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	425b      	negs	r3, r3
 8005f4a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005f4c:	212d      	movs	r1, #45	@ 0x2d
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f7ff fe96 	bl	8005c80 <_StoreChar>
 8005f54:	e008      	b.n	8005f68 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005f60:	212b      	movs	r1, #43	@ 0x2b
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f7ff fe8c 	bl	8005c80 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d019      	beq.n	8005fa6 <_PrintInt+0x102>
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d114      	bne.n	8005fa6 <_PrintInt+0x102>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d111      	bne.n	8005fa6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00e      	beq.n	8005fa6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f88:	e006      	b.n	8005f98 <_PrintInt+0xf4>
        FieldWidth--;
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005f90:	2130      	movs	r1, #48	@ 0x30
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f7ff fe74 	bl	8005c80 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <_PrintInt+0x102>
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d3f1      	bcc.n	8005f8a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005faa:	9301      	str	r3, [sp, #4]
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f7ff fedf 	bl	8005d78 <_PrintUnsigned>
}
 8005fba:	bf00      	nop
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b098      	sub	sp, #96	@ 0x60
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fd0:	f3ef 8311 	mrs	r3, BASEPRI
 8005fd4:	f04f 0120 	mov.w	r1, #32
 8005fd8:	f381 8811 	msr	BASEPRI, r1
 8005fdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fde:	48b7      	ldr	r0, [pc, #732]	@ (80062bc <_VPrintTarget+0x2f8>)
 8005fe0:	f7ff fc75 	bl	80058ce <_PreparePacket>
 8005fe4:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005fe6:	4bb5      	ldr	r3, [pc, #724]	@ (80062bc <_VPrintTarget+0x2f8>)
 8005fe8:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005fea:	2300      	movs	r3, #0
 8005fec:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	3301      	adds	r3, #1
 8006008:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800600a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 8183 	beq.w	800631a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006014:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006018:	2b25      	cmp	r3, #37	@ 0x25
 800601a:	f040 8170 	bne.w	80062fe <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800601e:	2300      	movs	r3, #0
 8006020:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8006022:	2301      	movs	r3, #1
 8006024:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 800602e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006032:	3b23      	subs	r3, #35	@ 0x23
 8006034:	2b0d      	cmp	r3, #13
 8006036:	d83f      	bhi.n	80060b8 <_VPrintTarget+0xf4>
 8006038:	a201      	add	r2, pc, #4	@ (adr r2, 8006040 <_VPrintTarget+0x7c>)
 800603a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603e:	bf00      	nop
 8006040:	080060a9 	.word	0x080060a9
 8006044:	080060b9 	.word	0x080060b9
 8006048:	080060b9 	.word	0x080060b9
 800604c:	080060b9 	.word	0x080060b9
 8006050:	080060b9 	.word	0x080060b9
 8006054:	080060b9 	.word	0x080060b9
 8006058:	080060b9 	.word	0x080060b9
 800605c:	080060b9 	.word	0x080060b9
 8006060:	08006099 	.word	0x08006099
 8006064:	080060b9 	.word	0x080060b9
 8006068:	08006079 	.word	0x08006079
 800606c:	080060b9 	.word	0x080060b9
 8006070:	080060b9 	.word	0x080060b9
 8006074:	08006089 	.word	0x08006089
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006078:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800607a:	f043 0301 	orr.w	r3, r3, #1
 800607e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3301      	adds	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	e01a      	b.n	80060be <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006088:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800608a:	f043 0302 	orr.w	r3, r3, #2
 800608e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3301      	adds	r3, #1
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	e012      	b.n	80060be <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006098:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800609a:	f043 0304 	orr.w	r3, r3, #4
 800609e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3301      	adds	r3, #1
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	e00a      	b.n	80060be <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80060a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060aa:	f043 0308 	orr.w	r3, r3, #8
 80060ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	e002      	b.n	80060be <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80060b8:	2300      	movs	r3, #0
 80060ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80060bc:	bf00      	nop
        }
      } while (v);
 80060be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1b0      	bne.n	8006026 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80060c4:	2300      	movs	r3, #0
 80060c6:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 80060d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80060d6:	d912      	bls.n	80060fe <_VPrintTarget+0x13a>
 80060d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060dc:	2b39      	cmp	r3, #57	@ 0x39
 80060de:	d80e      	bhi.n	80060fe <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3301      	adds	r3, #1
 80060e4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80060e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	461a      	mov	r2, r3
 80060f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060f6:	4413      	add	r3, r2
 80060f8:	3b30      	subs	r3, #48	@ 0x30
 80060fa:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 80060fc:	e7e4      	b.n	80060c8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80060fe:	2300      	movs	r3, #0
 8006100:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 800610a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800610e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006110:	d11d      	bne.n	800614e <_VPrintTarget+0x18a>
        sFormat++;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3301      	adds	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006120:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006124:	2b2f      	cmp	r3, #47	@ 0x2f
 8006126:	d912      	bls.n	800614e <_VPrintTarget+0x18a>
 8006128:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800612c:	2b39      	cmp	r3, #57	@ 0x39
 800612e:	d80e      	bhi.n	800614e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3301      	adds	r3, #1
 8006134:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006136:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	461a      	mov	r2, r3
 8006142:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006146:	4413      	add	r3, r2
 8006148:	3b30      	subs	r3, #48	@ 0x30
 800614a:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 800614c:	e7e4      	b.n	8006118 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006156:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800615a:	2b6c      	cmp	r3, #108	@ 0x6c
 800615c:	d003      	beq.n	8006166 <_VPrintTarget+0x1a2>
 800615e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006162:	2b68      	cmp	r3, #104	@ 0x68
 8006164:	d107      	bne.n	8006176 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3301      	adds	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006174:	e7ef      	b.n	8006156 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006176:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800617a:	2b25      	cmp	r3, #37	@ 0x25
 800617c:	f000 80b3 	beq.w	80062e6 <_VPrintTarget+0x322>
 8006180:	2b25      	cmp	r3, #37	@ 0x25
 8006182:	f2c0 80b7 	blt.w	80062f4 <_VPrintTarget+0x330>
 8006186:	2b78      	cmp	r3, #120	@ 0x78
 8006188:	f300 80b4 	bgt.w	80062f4 <_VPrintTarget+0x330>
 800618c:	2b58      	cmp	r3, #88	@ 0x58
 800618e:	f2c0 80b1 	blt.w	80062f4 <_VPrintTarget+0x330>
 8006192:	3b58      	subs	r3, #88	@ 0x58
 8006194:	2b20      	cmp	r3, #32
 8006196:	f200 80ad 	bhi.w	80062f4 <_VPrintTarget+0x330>
 800619a:	a201      	add	r2, pc, #4	@ (adr r2, 80061a0 <_VPrintTarget+0x1dc>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	08006297 	.word	0x08006297
 80061a4:	080062f5 	.word	0x080062f5
 80061a8:	080062f5 	.word	0x080062f5
 80061ac:	080062f5 	.word	0x080062f5
 80061b0:	080062f5 	.word	0x080062f5
 80061b4:	080062f5 	.word	0x080062f5
 80061b8:	080062f5 	.word	0x080062f5
 80061bc:	080062f5 	.word	0x080062f5
 80061c0:	080062f5 	.word	0x080062f5
 80061c4:	080062f5 	.word	0x080062f5
 80061c8:	080062f5 	.word	0x080062f5
 80061cc:	08006225 	.word	0x08006225
 80061d0:	0800624b 	.word	0x0800624b
 80061d4:	080062f5 	.word	0x080062f5
 80061d8:	080062f5 	.word	0x080062f5
 80061dc:	080062f5 	.word	0x080062f5
 80061e0:	080062f5 	.word	0x080062f5
 80061e4:	080062f5 	.word	0x080062f5
 80061e8:	080062f5 	.word	0x080062f5
 80061ec:	080062f5 	.word	0x080062f5
 80061f0:	080062f5 	.word	0x080062f5
 80061f4:	080062f5 	.word	0x080062f5
 80061f8:	080062f5 	.word	0x080062f5
 80061fc:	080062f5 	.word	0x080062f5
 8006200:	080062c1 	.word	0x080062c1
 8006204:	080062f5 	.word	0x080062f5
 8006208:	080062f5 	.word	0x080062f5
 800620c:	080062f5 	.word	0x080062f5
 8006210:	080062f5 	.word	0x080062f5
 8006214:	08006271 	.word	0x08006271
 8006218:	080062f5 	.word	0x080062f5
 800621c:	080062f5 	.word	0x080062f5
 8006220:	08006297 	.word	0x08006297
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	1d19      	adds	r1, r3, #4
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6011      	str	r1, [r2, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006234:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8006238:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800623c:	f107 0314 	add.w	r3, r7, #20
 8006240:	4611      	mov	r1, r2
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff fd1c 	bl	8005c80 <_StoreChar>
        break;
 8006248:	e055      	b.n	80062f6 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	1d19      	adds	r1, r3, #4
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6011      	str	r1, [r2, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006258:	f107 0014 	add.w	r0, r7, #20
 800625c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800625e:	9301      	str	r3, [sp, #4]
 8006260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006266:	220a      	movs	r2, #10
 8006268:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800626a:	f7ff fe1b 	bl	8005ea4 <_PrintInt>
        break;
 800626e:	e042      	b.n	80062f6 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	1d19      	adds	r1, r3, #4
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6011      	str	r1, [r2, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800627e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006280:	f107 0014 	add.w	r0, r7, #20
 8006284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006286:	9301      	str	r3, [sp, #4]
 8006288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800628e:	220a      	movs	r2, #10
 8006290:	f7ff fd72 	bl	8005d78 <_PrintUnsigned>
        break;
 8006294:	e02f      	b.n	80062f6 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	1d19      	adds	r1, r3, #4
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6011      	str	r1, [r2, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80062a4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80062a6:	f107 0014 	add.w	r0, r7, #20
 80062aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062ac:	9301      	str	r3, [sp, #4]
 80062ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062b4:	2210      	movs	r2, #16
 80062b6:	f7ff fd5f 	bl	8005d78 <_PrintUnsigned>
        break;
 80062ba:	e01c      	b.n	80062f6 <_VPrintTarget+0x332>
 80062bc:	200143c8 	.word	0x200143c8
      case 'p':
        v = va_arg(*pParamList, int);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	1d19      	adds	r1, r3, #4
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6011      	str	r1, [r2, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80062ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80062d0:	f107 0014 	add.w	r0, r7, #20
 80062d4:	2300      	movs	r3, #0
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	2308      	movs	r3, #8
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	2308      	movs	r3, #8
 80062de:	2210      	movs	r2, #16
 80062e0:	f7ff fd4a 	bl	8005d78 <_PrintUnsigned>
        break;
 80062e4:	e007      	b.n	80062f6 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80062e6:	f107 0314 	add.w	r3, r7, #20
 80062ea:	2125      	movs	r1, #37	@ 0x25
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7ff fcc7 	bl	8005c80 <_StoreChar>
        break;
 80062f2:	e000      	b.n	80062f6 <_VPrintTarget+0x332>
      default:
        break;
 80062f4:	bf00      	nop
      }
      sFormat++;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	3301      	adds	r3, #1
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	e007      	b.n	800630e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80062fe:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006302:	f107 0314 	add.w	r3, r7, #20
 8006306:	4611      	mov	r1, r2
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff fcb9 	bl	8005c80 <_StoreChar>
    }
  } while (*sFormat);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	f47f ae72 	bne.w	8005ffc <_VPrintTarget+0x38>
 8006318:	e000      	b.n	800631c <_VPrintTarget+0x358>
      break;
 800631a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	2b00      	cmp	r3, #0
 8006320:	d041      	beq.n	80063a6 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	643b      	str	r3, [r7, #64]	@ 0x40
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006332:	e00b      	b.n	800634c <_VPrintTarget+0x388>
 8006334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006336:	b2da      	uxtb	r2, r3
 8006338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800633a:	1c59      	adds	r1, r3, #1
 800633c:	6439      	str	r1, [r7, #64]	@ 0x40
 800633e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006348:	09db      	lsrs	r3, r3, #7
 800634a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800634c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800634e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006350:	d8f0      	bhi.n	8006334 <_VPrintTarget+0x370>
 8006352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	643a      	str	r2, [r7, #64]	@ 0x40
 8006358:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006360:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006366:	2300      	movs	r3, #0
 8006368:	637b      	str	r3, [r7, #52]	@ 0x34
 800636a:	e00b      	b.n	8006384 <_VPrintTarget+0x3c0>
 800636c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800636e:	b2da      	uxtb	r2, r3
 8006370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006372:	1c59      	adds	r1, r3, #1
 8006374:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006376:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800637a:	b2d2      	uxtb	r2, r2
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006380:	09db      	lsrs	r3, r3, #7
 8006382:	637b      	str	r3, [r7, #52]	@ 0x34
 8006384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006386:	2b7f      	cmp	r3, #127	@ 0x7f
 8006388:	d8f0      	bhi.n	800636c <_VPrintTarget+0x3a8>
 800638a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006390:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006398:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	69b9      	ldr	r1, [r7, #24]
 800639e:	221a      	movs	r2, #26
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff fb85 	bl	8005ab0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80063ac:	bf00      	nop
 80063ae:	3758      	adds	r7, #88	@ 0x58
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
 80063c0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80063c2:	2300      	movs	r3, #0
 80063c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80063c8:	4917      	ldr	r1, [pc, #92]	@ (8006428 <SEGGER_SYSVIEW_Init+0x74>)
 80063ca:	4818      	ldr	r0, [pc, #96]	@ (800642c <SEGGER_SYSVIEW_Init+0x78>)
 80063cc:	f7ff f93e 	bl	800564c <SEGGER_RTT_AllocUpBuffer>
 80063d0:	4603      	mov	r3, r0
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	4b16      	ldr	r3, [pc, #88]	@ (8006430 <SEGGER_SYSVIEW_Init+0x7c>)
 80063d6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80063d8:	4b15      	ldr	r3, [pc, #84]	@ (8006430 <SEGGER_SYSVIEW_Init+0x7c>)
 80063da:	785a      	ldrb	r2, [r3, #1]
 80063dc:	4b14      	ldr	r3, [pc, #80]	@ (8006430 <SEGGER_SYSVIEW_Init+0x7c>)
 80063de:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80063e0:	4b13      	ldr	r3, [pc, #76]	@ (8006430 <SEGGER_SYSVIEW_Init+0x7c>)
 80063e2:	7e1b      	ldrb	r3, [r3, #24]
 80063e4:	4618      	mov	r0, r3
 80063e6:	2300      	movs	r3, #0
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	2308      	movs	r3, #8
 80063ec:	4a11      	ldr	r2, [pc, #68]	@ (8006434 <SEGGER_SYSVIEW_Init+0x80>)
 80063ee:	490f      	ldr	r1, [pc, #60]	@ (800642c <SEGGER_SYSVIEW_Init+0x78>)
 80063f0:	f7ff f9b0 	bl	8005754 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80063f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006430 <SEGGER_SYSVIEW_Init+0x7c>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80063fa:	4b0f      	ldr	r3, [pc, #60]	@ (8006438 <SEGGER_SYSVIEW_Init+0x84>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006430 <SEGGER_SYSVIEW_Init+0x7c>)
 8006400:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006402:	4a0b      	ldr	r2, [pc, #44]	@ (8006430 <SEGGER_SYSVIEW_Init+0x7c>)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006408:	4a09      	ldr	r2, [pc, #36]	@ (8006430 <SEGGER_SYSVIEW_Init+0x7c>)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800640e:	4a08      	ldr	r2, [pc, #32]	@ (8006430 <SEGGER_SYSVIEW_Init+0x7c>)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006414:	4a06      	ldr	r2, [pc, #24]	@ (8006430 <SEGGER_SYSVIEW_Init+0x7c>)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800641a:	4b05      	ldr	r3, [pc, #20]	@ (8006430 <SEGGER_SYSVIEW_Init+0x7c>)
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20013390 	.word	0x20013390
 800642c:	08007614 	.word	0x08007614
 8006430:	20014398 	.word	0x20014398
 8006434:	20014390 	.word	0x20014390
 8006438:	e0001004 	.word	0xe0001004

0800643c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006444:	4a04      	ldr	r2, [pc, #16]	@ (8006458 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6113      	str	r3, [r2, #16]
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	20014398 	.word	0x20014398

0800645c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006464:	f3ef 8311 	mrs	r3, BASEPRI
 8006468:	f04f 0120 	mov.w	r1, #32
 800646c:	f381 8811 	msr	BASEPRI, r1
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	4808      	ldr	r0, [pc, #32]	@ (8006494 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006474:	f7ff fa2b 	bl	80058ce <_PreparePacket>
 8006478:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	68b8      	ldr	r0, [r7, #8]
 8006480:	f7ff fb16 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f383 8811 	msr	BASEPRI, r3
}
 800648a:	bf00      	nop
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	200143c8 	.word	0x200143c8

08006498 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064a2:	f3ef 8311 	mrs	r3, BASEPRI
 80064a6:	f04f 0120 	mov.w	r1, #32
 80064aa:	f381 8811 	msr	BASEPRI, r1
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	4816      	ldr	r0, [pc, #88]	@ (800650c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80064b2:	f7ff fa0c 	bl	80058ce <_PreparePacket>
 80064b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	61bb      	str	r3, [r7, #24]
 80064c4:	e00b      	b.n	80064de <SEGGER_SYSVIEW_RecordU32+0x46>
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	1c59      	adds	r1, r3, #1
 80064ce:	61f9      	str	r1, [r7, #28]
 80064d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	09db      	lsrs	r3, r3, #7
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80064e2:	d8f0      	bhi.n	80064c6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	61fa      	str	r2, [r7, #28]
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	68f9      	ldr	r1, [r7, #12]
 80064f8:	6938      	ldr	r0, [r7, #16]
 80064fa:	f7ff fad9 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f383 8811 	msr	BASEPRI, r3
}
 8006504:	bf00      	nop
 8006506:	3720      	adds	r7, #32
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	200143c8 	.word	0x200143c8

08006510 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006510:	b580      	push	{r7, lr}
 8006512:	b08c      	sub	sp, #48	@ 0x30
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800651c:	f3ef 8311 	mrs	r3, BASEPRI
 8006520:	f04f 0120 	mov.w	r1, #32
 8006524:	f381 8811 	msr	BASEPRI, r1
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	4825      	ldr	r0, [pc, #148]	@ (80065c0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800652c:	f7ff f9cf 	bl	80058ce <_PreparePacket>
 8006530:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800653e:	e00b      	b.n	8006558 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006542:	b2da      	uxtb	r2, r3
 8006544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006546:	1c59      	adds	r1, r3, #1
 8006548:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800654a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006554:	09db      	lsrs	r3, r3, #7
 8006556:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655a:	2b7f      	cmp	r3, #127	@ 0x7f
 800655c:	d8f0      	bhi.n	8006540 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800655e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006564:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	627b      	str	r3, [r7, #36]	@ 0x24
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	623b      	str	r3, [r7, #32]
 8006576:	e00b      	b.n	8006590 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	b2da      	uxtb	r2, r3
 800657c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657e:	1c59      	adds	r1, r3, #1
 8006580:	6279      	str	r1, [r7, #36]	@ 0x24
 8006582:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	09db      	lsrs	r3, r3, #7
 800658e:	623b      	str	r3, [r7, #32]
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	2b7f      	cmp	r3, #127	@ 0x7f
 8006594:	d8f0      	bhi.n	8006578 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	627a      	str	r2, [r7, #36]	@ 0x24
 800659c:	6a3a      	ldr	r2, [r7, #32]
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	6979      	ldr	r1, [r7, #20]
 80065aa:	69b8      	ldr	r0, [r7, #24]
 80065ac:	f7ff fa80 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	f383 8811 	msr	BASEPRI, r3
}
 80065b6:	bf00      	nop
 80065b8:	3730      	adds	r7, #48	@ 0x30
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	200143c8 	.word	0x200143c8

080065c4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b08e      	sub	sp, #56	@ 0x38
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80065d2:	f3ef 8311 	mrs	r3, BASEPRI
 80065d6:	f04f 0120 	mov.w	r1, #32
 80065da:	f381 8811 	msr	BASEPRI, r1
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	4832      	ldr	r0, [pc, #200]	@ (80066ac <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80065e2:	f7ff f974 	bl	80058ce <_PreparePacket>
 80065e6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80065f4:	e00b      	b.n	800660e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80065f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065fc:	1c59      	adds	r1, r3, #1
 80065fe:	6379      	str	r1, [r7, #52]	@ 0x34
 8006600:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]
 8006608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660a:	09db      	lsrs	r3, r3, #7
 800660c:	633b      	str	r3, [r7, #48]	@ 0x30
 800660e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006610:	2b7f      	cmp	r3, #127	@ 0x7f
 8006612:	d8f0      	bhi.n	80065f6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	637a      	str	r2, [r7, #52]	@ 0x34
 800661a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006622:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800662c:	e00b      	b.n	8006646 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800662e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006630:	b2da      	uxtb	r2, r3
 8006632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006634:	1c59      	adds	r1, r3, #1
 8006636:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006638:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	701a      	strb	r2, [r3, #0]
 8006640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006642:	09db      	lsrs	r3, r3, #7
 8006644:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006648:	2b7f      	cmp	r3, #127	@ 0x7f
 800664a:	d8f0      	bhi.n	800662e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800664c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	623b      	str	r3, [r7, #32]
 8006664:	e00b      	b.n	800667e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	b2da      	uxtb	r2, r3
 800666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666c:	1c59      	adds	r1, r3, #1
 800666e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006670:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006674:	b2d2      	uxtb	r2, r2
 8006676:	701a      	strb	r2, [r3, #0]
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	09db      	lsrs	r3, r3, #7
 800667c:	623b      	str	r3, [r7, #32]
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	2b7f      	cmp	r3, #127	@ 0x7f
 8006682:	d8f0      	bhi.n	8006666 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	627a      	str	r2, [r7, #36]	@ 0x24
 800668a:	6a3a      	ldr	r2, [r7, #32]
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	701a      	strb	r2, [r3, #0]
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	6979      	ldr	r1, [r7, #20]
 8006698:	69b8      	ldr	r0, [r7, #24]
 800669a:	f7ff fa09 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	f383 8811 	msr	BASEPRI, r3
}
 80066a4:	bf00      	nop
 80066a6:	3738      	adds	r7, #56	@ 0x38
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	200143c8 	.word	0x200143c8

080066b0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b090      	sub	sp, #64	@ 0x40
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066be:	f3ef 8311 	mrs	r3, BASEPRI
 80066c2:	f04f 0120 	mov.w	r1, #32
 80066c6:	f381 8811 	msr	BASEPRI, r1
 80066ca:	61fb      	str	r3, [r7, #28]
 80066cc:	4840      	ldr	r0, [pc, #256]	@ (80067d0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80066ce:	f7ff f8fe 	bl	80058ce <_PreparePacket>
 80066d2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066e0:	e00b      	b.n	80066fa <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80066e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e8:	1c59      	adds	r1, r3, #1
 80066ea:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80066ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	701a      	strb	r2, [r3, #0]
 80066f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f6:	09db      	lsrs	r3, r3, #7
 80066f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80066fe:	d8f0      	bhi.n	80066e2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006706:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800670e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	637b      	str	r3, [r7, #52]	@ 0x34
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	633b      	str	r3, [r7, #48]	@ 0x30
 8006718:	e00b      	b.n	8006732 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800671a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671c:	b2da      	uxtb	r2, r3
 800671e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006720:	1c59      	adds	r1, r3, #1
 8006722:	6379      	str	r1, [r7, #52]	@ 0x34
 8006724:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672e:	09db      	lsrs	r3, r3, #7
 8006730:	633b      	str	r3, [r7, #48]	@ 0x30
 8006732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006734:	2b7f      	cmp	r3, #127	@ 0x7f
 8006736:	d8f0      	bhi.n	800671a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	637a      	str	r2, [r7, #52]	@ 0x34
 800673e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006746:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006750:	e00b      	b.n	800676a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006754:	b2da      	uxtb	r2, r3
 8006756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006758:	1c59      	adds	r1, r3, #1
 800675a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800675c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006760:	b2d2      	uxtb	r2, r2
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006766:	09db      	lsrs	r3, r3, #7
 8006768:	62bb      	str	r3, [r7, #40]	@ 0x28
 800676a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676c:	2b7f      	cmp	r3, #127	@ 0x7f
 800676e:	d8f0      	bhi.n	8006752 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006776:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	701a      	strb	r2, [r3, #0]
 800677c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800677e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	627b      	str	r3, [r7, #36]	@ 0x24
 8006784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006786:	623b      	str	r3, [r7, #32]
 8006788:	e00b      	b.n	80067a2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	b2da      	uxtb	r2, r3
 800678e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006790:	1c59      	adds	r1, r3, #1
 8006792:	6279      	str	r1, [r7, #36]	@ 0x24
 8006794:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006798:	b2d2      	uxtb	r2, r2
 800679a:	701a      	strb	r2, [r3, #0]
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	09db      	lsrs	r3, r3, #7
 80067a0:	623b      	str	r3, [r7, #32]
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80067a6:	d8f0      	bhi.n	800678a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80067a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80067ae:	6a3a      	ldr	r2, [r7, #32]
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	6979      	ldr	r1, [r7, #20]
 80067bc:	69b8      	ldr	r0, [r7, #24]
 80067be:	f7ff f977 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	f383 8811 	msr	BASEPRI, r3
}
 80067c8:	bf00      	nop
 80067ca:	3740      	adds	r7, #64	@ 0x40
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	200143c8 	.word	0x200143c8

080067d4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08c      	sub	sp, #48	@ 0x30
 80067d8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80067da:	4b59      	ldr	r3, [pc, #356]	@ (8006940 <SEGGER_SYSVIEW_Start+0x16c>)
 80067dc:	2201      	movs	r2, #1
 80067de:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80067e0:	f3ef 8311 	mrs	r3, BASEPRI
 80067e4:	f04f 0120 	mov.w	r1, #32
 80067e8:	f381 8811 	msr	BASEPRI, r1
 80067ec:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80067ee:	4b54      	ldr	r3, [pc, #336]	@ (8006940 <SEGGER_SYSVIEW_Start+0x16c>)
 80067f0:	785b      	ldrb	r3, [r3, #1]
 80067f2:	220a      	movs	r2, #10
 80067f4:	4953      	ldr	r1, [pc, #332]	@ (8006944 <SEGGER_SYSVIEW_Start+0x170>)
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7f9 fcea 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006802:	f7fe fbf7 	bl	8004ff4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006806:	200a      	movs	r0, #10
 8006808:	f7ff fe28 	bl	800645c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800680c:	f3ef 8311 	mrs	r3, BASEPRI
 8006810:	f04f 0120 	mov.w	r1, #32
 8006814:	f381 8811 	msr	BASEPRI, r1
 8006818:	60bb      	str	r3, [r7, #8]
 800681a:	484b      	ldr	r0, [pc, #300]	@ (8006948 <SEGGER_SYSVIEW_Start+0x174>)
 800681c:	f7ff f857 	bl	80058ce <_PreparePacket>
 8006820:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800682a:	4b45      	ldr	r3, [pc, #276]	@ (8006940 <SEGGER_SYSVIEW_Start+0x16c>)
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006830:	e00b      	b.n	800684a <SEGGER_SYSVIEW_Start+0x76>
 8006832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006834:	b2da      	uxtb	r2, r3
 8006836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006838:	1c59      	adds	r1, r3, #1
 800683a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800683c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006846:	09db      	lsrs	r3, r3, #7
 8006848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800684a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684c:	2b7f      	cmp	r3, #127	@ 0x7f
 800684e:	d8f0      	bhi.n	8006832 <SEGGER_SYSVIEW_Start+0x5e>
 8006850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006856:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	627b      	str	r3, [r7, #36]	@ 0x24
 8006864:	4b36      	ldr	r3, [pc, #216]	@ (8006940 <SEGGER_SYSVIEW_Start+0x16c>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	623b      	str	r3, [r7, #32]
 800686a:	e00b      	b.n	8006884 <SEGGER_SYSVIEW_Start+0xb0>
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	b2da      	uxtb	r2, r3
 8006870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006872:	1c59      	adds	r1, r3, #1
 8006874:	6279      	str	r1, [r7, #36]	@ 0x24
 8006876:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	09db      	lsrs	r3, r3, #7
 8006882:	623b      	str	r3, [r7, #32]
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	2b7f      	cmp	r3, #127	@ 0x7f
 8006888:	d8f0      	bhi.n	800686c <SEGGER_SYSVIEW_Start+0x98>
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006890:	6a3a      	ldr	r2, [r7, #32]
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006898:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	61fb      	str	r3, [r7, #28]
 800689e:	4b28      	ldr	r3, [pc, #160]	@ (8006940 <SEGGER_SYSVIEW_Start+0x16c>)
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	61bb      	str	r3, [r7, #24]
 80068a4:	e00b      	b.n	80068be <SEGGER_SYSVIEW_Start+0xea>
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	1c59      	adds	r1, r3, #1
 80068ae:	61f9      	str	r1, [r7, #28]
 80068b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	701a      	strb	r2, [r3, #0]
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	09db      	lsrs	r3, r3, #7
 80068bc:	61bb      	str	r3, [r7, #24]
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80068c2:	d8f0      	bhi.n	80068a6 <SEGGER_SYSVIEW_Start+0xd2>
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	61fa      	str	r2, [r7, #28]
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	b2d2      	uxtb	r2, r2
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	2300      	movs	r3, #0
 80068da:	613b      	str	r3, [r7, #16]
 80068dc:	e00b      	b.n	80068f6 <SEGGER_SYSVIEW_Start+0x122>
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	1c59      	adds	r1, r3, #1
 80068e6:	6179      	str	r1, [r7, #20]
 80068e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	701a      	strb	r2, [r3, #0]
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	09db      	lsrs	r3, r3, #7
 80068f4:	613b      	str	r3, [r7, #16]
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80068fa:	d8f0      	bhi.n	80068de <SEGGER_SYSVIEW_Start+0x10a>
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	617a      	str	r2, [r7, #20]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800690c:	2218      	movs	r2, #24
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7ff f8cd 	bl	8005ab0 <_SendPacket>
      RECORD_END();
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800691c:	4b08      	ldr	r3, [pc, #32]	@ (8006940 <SEGGER_SYSVIEW_Start+0x16c>)
 800691e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006924:	4b06      	ldr	r3, [pc, #24]	@ (8006940 <SEGGER_SYSVIEW_Start+0x16c>)
 8006926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006928:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800692a:	f000 f9eb 	bl	8006d04 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800692e:	f000 f9b1 	bl	8006c94 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006932:	f000 fc83 	bl	800723c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006936:	bf00      	nop
 8006938:	3730      	adds	r7, #48	@ 0x30
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20014398 	.word	0x20014398
 8006944:	08007640 	.word	0x08007640
 8006948:	200143c8 	.word	0x200143c8

0800694c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006952:	f3ef 8311 	mrs	r3, BASEPRI
 8006956:	f04f 0120 	mov.w	r1, #32
 800695a:	f381 8811 	msr	BASEPRI, r1
 800695e:	607b      	str	r3, [r7, #4]
 8006960:	480b      	ldr	r0, [pc, #44]	@ (8006990 <SEGGER_SYSVIEW_Stop+0x44>)
 8006962:	f7fe ffb4 	bl	80058ce <_PreparePacket>
 8006966:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006968:	4b0a      	ldr	r3, [pc, #40]	@ (8006994 <SEGGER_SYSVIEW_Stop+0x48>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d007      	beq.n	8006980 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006970:	220b      	movs	r2, #11
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6838      	ldr	r0, [r7, #0]
 8006976:	f7ff f89b 	bl	8005ab0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800697a:	4b06      	ldr	r3, [pc, #24]	@ (8006994 <SEGGER_SYSVIEW_Stop+0x48>)
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f383 8811 	msr	BASEPRI, r3
}
 8006986:	bf00      	nop
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	200143c8 	.word	0x200143c8
 8006994:	20014398 	.word	0x20014398

08006998 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006998:	b580      	push	{r7, lr}
 800699a:	b08c      	sub	sp, #48	@ 0x30
 800699c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800699e:	f3ef 8311 	mrs	r3, BASEPRI
 80069a2:	f04f 0120 	mov.w	r1, #32
 80069a6:	f381 8811 	msr	BASEPRI, r1
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	4845      	ldr	r0, [pc, #276]	@ (8006ac4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80069ae:	f7fe ff8e 	bl	80058ce <_PreparePacket>
 80069b2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069bc:	4b42      	ldr	r3, [pc, #264]	@ (8006ac8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069c2:	e00b      	b.n	80069dc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80069c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ca:	1c59      	adds	r1, r3, #1
 80069cc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80069ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	701a      	strb	r2, [r3, #0]
 80069d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d8:	09db      	lsrs	r3, r3, #7
 80069da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069de:	2b7f      	cmp	r3, #127	@ 0x7f
 80069e0:	d8f0      	bhi.n	80069c4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80069e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80069f6:	4b34      	ldr	r3, [pc, #208]	@ (8006ac8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	623b      	str	r3, [r7, #32]
 80069fc:	e00b      	b.n	8006a16 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a04:	1c59      	adds	r1, r3, #1
 8006a06:	6279      	str	r1, [r7, #36]	@ 0x24
 8006a08:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a0c:	b2d2      	uxtb	r2, r2
 8006a0e:	701a      	strb	r2, [r3, #0]
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	09db      	lsrs	r3, r3, #7
 8006a14:	623b      	str	r3, [r7, #32]
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a1a:	d8f0      	bhi.n	80069fe <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1e:	1c5a      	adds	r2, r3, #1
 8006a20:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a22:	6a3a      	ldr	r2, [r7, #32]
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	61fb      	str	r3, [r7, #28]
 8006a30:	4b25      	ldr	r3, [pc, #148]	@ (8006ac8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	e00b      	b.n	8006a50 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	1c59      	adds	r1, r3, #1
 8006a40:	61f9      	str	r1, [r7, #28]
 8006a42:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	09db      	lsrs	r3, r3, #7
 8006a4e:	61bb      	str	r3, [r7, #24]
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a54:	d8f0      	bhi.n	8006a38 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	61fa      	str	r2, [r7, #28]
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	613b      	str	r3, [r7, #16]
 8006a6e:	e00b      	b.n	8006a88 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	1c59      	adds	r1, r3, #1
 8006a78:	6179      	str	r1, [r7, #20]
 8006a7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	701a      	strb	r2, [r3, #0]
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	09db      	lsrs	r3, r3, #7
 8006a86:	613b      	str	r3, [r7, #16]
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a8c:	d8f0      	bhi.n	8006a70 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	617a      	str	r2, [r7, #20]
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006a9e:	2218      	movs	r2, #24
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	68b8      	ldr	r0, [r7, #8]
 8006aa4:	f7ff f804 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006aae:	4b06      	ldr	r3, [pc, #24]	@ (8006ac8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006ab6:	4b04      	ldr	r3, [pc, #16]	@ (8006ac8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aba:	4798      	blx	r3
  }
}
 8006abc:	bf00      	nop
 8006abe:	3730      	adds	r7, #48	@ 0x30
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	200143c8 	.word	0x200143c8
 8006ac8:	20014398 	.word	0x20014398

08006acc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b092      	sub	sp, #72	@ 0x48
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006ad4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ad8:	f04f 0120 	mov.w	r1, #32
 8006adc:	f381 8811 	msr	BASEPRI, r1
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	486a      	ldr	r0, [pc, #424]	@ (8006c8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006ae4:	f7fe fef3 	bl	80058ce <_PreparePacket>
 8006ae8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	4b66      	ldr	r3, [pc, #408]	@ (8006c90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006afe:	e00b      	b.n	8006b18 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b06:	1c59      	adds	r1, r3, #1
 8006b08:	6479      	str	r1, [r7, #68]	@ 0x44
 8006b0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b14:	09db      	lsrs	r3, r3, #7
 8006b16:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b1c:	d8f0      	bhi.n	8006b00 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b20:	1c5a      	adds	r2, r3, #1
 8006b22:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]
 8006b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b38:	e00b      	b.n	8006b52 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b40:	1c59      	adds	r1, r3, #1
 8006b42:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006b44:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b48:	b2d2      	uxtb	r2, r2
 8006b4a:	701a      	strb	r2, [r3, #0]
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4e:	09db      	lsrs	r3, r3, #7
 8006b50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b54:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b56:	d8f0      	bhi.n	8006b3a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006b5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b60:	b2d2      	uxtb	r2, r2
 8006b62:	701a      	strb	r2, [r3, #0]
 8006b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b66:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	4619      	mov	r1, r3
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f7fe fe5f 	bl	8005834 <_EncodeStr>
 8006b76:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006b78:	2209      	movs	r2, #9
 8006b7a:	68f9      	ldr	r1, [r7, #12]
 8006b7c:	6938      	ldr	r0, [r7, #16]
 8006b7e:	f7fe ff97 	bl	8005ab0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	4b40      	ldr	r3, [pc, #256]	@ (8006c90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b96:	e00b      	b.n	8006bb0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b9e:	1c59      	adds	r1, r3, #1
 8006ba0:	6379      	str	r1, [r7, #52]	@ 0x34
 8006ba2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bac:	09db      	lsrs	r3, r3, #7
 8006bae:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bb4:	d8f0      	bhi.n	8006b98 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	637a      	str	r2, [r7, #52]	@ 0x34
 8006bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	701a      	strb	r2, [r3, #0]
 8006bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bd0:	e00b      	b.n	8006bea <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd8:	1c59      	adds	r1, r3, #1
 8006bda:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006bdc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006be0:	b2d2      	uxtb	r2, r2
 8006be2:	701a      	strb	r2, [r3, #0]
 8006be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be6:	09db      	lsrs	r3, r3, #7
 8006be8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bec:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bee:	d8f0      	bhi.n	8006bd2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	701a      	strb	r2, [r3, #0]
 8006bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	623b      	str	r3, [r7, #32]
 8006c0a:	e00b      	b.n	8006c24 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c12:	1c59      	adds	r1, r3, #1
 8006c14:	6279      	str	r1, [r7, #36]	@ 0x24
 8006c16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	09db      	lsrs	r3, r3, #7
 8006c22:	623b      	str	r3, [r7, #32]
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c28:	d8f0      	bhi.n	8006c0c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c30:	6a3a      	ldr	r2, [r7, #32]
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	61fb      	str	r3, [r7, #28]
 8006c3e:	2300      	movs	r3, #0
 8006c40:	61bb      	str	r3, [r7, #24]
 8006c42:	e00b      	b.n	8006c5c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	1c59      	adds	r1, r3, #1
 8006c4c:	61f9      	str	r1, [r7, #28]
 8006c4e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	09db      	lsrs	r3, r3, #7
 8006c5a:	61bb      	str	r3, [r7, #24]
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c60:	d8f0      	bhi.n	8006c44 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	1c5a      	adds	r2, r3, #1
 8006c66:	61fa      	str	r2, [r7, #28]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006c72:	2215      	movs	r2, #21
 8006c74:	68f9      	ldr	r1, [r7, #12]
 8006c76:	6938      	ldr	r0, [r7, #16]
 8006c78:	f7fe ff1a 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f383 8811 	msr	BASEPRI, r3
}
 8006c82:	bf00      	nop
 8006c84:	3748      	adds	r7, #72	@ 0x48
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	200143c8 	.word	0x200143c8
 8006c90:	20014398 	.word	0x20014398

08006c94 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006c98:	4b07      	ldr	r3, [pc, #28]	@ (8006cb8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c9a:	6a1b      	ldr	r3, [r3, #32]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d008      	beq.n	8006cb2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006ca0:	4b05      	ldr	r3, [pc, #20]	@ (8006cb8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006caa:	4b03      	ldr	r3, [pc, #12]	@ (8006cb8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	4798      	blx	r3
  }
}
 8006cb2:	bf00      	nop
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20014398 	.word	0x20014398

08006cbc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cc4:	f3ef 8311 	mrs	r3, BASEPRI
 8006cc8:	f04f 0120 	mov.w	r1, #32
 8006ccc:	f381 8811 	msr	BASEPRI, r1
 8006cd0:	617b      	str	r3, [r7, #20]
 8006cd2:	480b      	ldr	r0, [pc, #44]	@ (8006d00 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006cd4:	f7fe fdfb 	bl	80058ce <_PreparePacket>
 8006cd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cda:	2280      	movs	r2, #128	@ 0x80
 8006cdc:	6879      	ldr	r1, [r7, #4]
 8006cde:	6938      	ldr	r0, [r7, #16]
 8006ce0:	f7fe fda8 	bl	8005834 <_EncodeStr>
 8006ce4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006ce6:	220e      	movs	r2, #14
 8006ce8:	68f9      	ldr	r1, [r7, #12]
 8006cea:	6938      	ldr	r0, [r7, #16]
 8006cec:	f7fe fee0 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f383 8811 	msr	BASEPRI, r3
}
 8006cf6:	bf00      	nop
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	200143c8 	.word	0x200143c8

08006d04 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006d04:	b590      	push	{r4, r7, lr}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006d0a:	4b15      	ldr	r3, [pc, #84]	@ (8006d60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d01a      	beq.n	8006d48 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006d12:	4b13      	ldr	r3, [pc, #76]	@ (8006d60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d015      	beq.n	8006d48 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006d1c:	4b10      	ldr	r3, [pc, #64]	@ (8006d60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4798      	blx	r3
 8006d24:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d28:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006d2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d2e:	f04f 0200 	mov.w	r2, #0
 8006d32:	f04f 0300 	mov.w	r3, #0
 8006d36:	000a      	movs	r2, r1
 8006d38:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4621      	mov	r1, r4
 8006d40:	200d      	movs	r0, #13
 8006d42:	f7ff fbe5 	bl	8006510 <SEGGER_SYSVIEW_RecordU32x2>
 8006d46:	e006      	b.n	8006d56 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006d48:	4b06      	ldr	r3, [pc, #24]	@ (8006d64 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	200c      	movs	r0, #12
 8006d50:	f7ff fba2 	bl	8006498 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd90      	pop	{r4, r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20014398 	.word	0x20014398
 8006d64:	e0001004 	.word	0xe0001004

08006d68 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d72:	f04f 0120 	mov.w	r1, #32
 8006d76:	f381 8811 	msr	BASEPRI, r1
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	4819      	ldr	r0, [pc, #100]	@ (8006de4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006d7e:	f7fe fda6 	bl	80058ce <_PreparePacket>
 8006d82:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006d88:	4b17      	ldr	r3, [pc, #92]	@ (8006de8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d90:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	617b      	str	r3, [r7, #20]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	613b      	str	r3, [r7, #16]
 8006d9a:	e00b      	b.n	8006db4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	1c59      	adds	r1, r3, #1
 8006da4:	6179      	str	r1, [r7, #20]
 8006da6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	09db      	lsrs	r3, r3, #7
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006db8:	d8f0      	bhi.n	8006d9c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	617a      	str	r2, [r7, #20]
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006dca:	2202      	movs	r2, #2
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	68b8      	ldr	r0, [r7, #8]
 8006dd0:	f7fe fe6e 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f383 8811 	msr	BASEPRI, r3
}
 8006dda:	bf00      	nop
 8006ddc:	3718      	adds	r7, #24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	200143c8 	.word	0x200143c8
 8006de8:	e000ed04 	.word	0xe000ed04

08006dec <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006df2:	f3ef 8311 	mrs	r3, BASEPRI
 8006df6:	f04f 0120 	mov.w	r1, #32
 8006dfa:	f381 8811 	msr	BASEPRI, r1
 8006dfe:	607b      	str	r3, [r7, #4]
 8006e00:	4807      	ldr	r0, [pc, #28]	@ (8006e20 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006e02:	f7fe fd64 	bl	80058ce <_PreparePacket>
 8006e06:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006e08:	2203      	movs	r2, #3
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6838      	ldr	r0, [r7, #0]
 8006e0e:	f7fe fe4f 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f383 8811 	msr	BASEPRI, r3
}
 8006e18:	bf00      	nop
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	200143c8 	.word	0x200143c8

08006e24 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e2e:	f04f 0120 	mov.w	r1, #32
 8006e32:	f381 8811 	msr	BASEPRI, r1
 8006e36:	607b      	str	r3, [r7, #4]
 8006e38:	4807      	ldr	r0, [pc, #28]	@ (8006e58 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006e3a:	f7fe fd48 	bl	80058ce <_PreparePacket>
 8006e3e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006e40:	2212      	movs	r2, #18
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6838      	ldr	r0, [r7, #0]
 8006e46:	f7fe fe33 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f383 8811 	msr	BASEPRI, r3
}
 8006e50:	bf00      	nop
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	200143c8 	.word	0x200143c8

08006e5c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e62:	f3ef 8311 	mrs	r3, BASEPRI
 8006e66:	f04f 0120 	mov.w	r1, #32
 8006e6a:	f381 8811 	msr	BASEPRI, r1
 8006e6e:	607b      	str	r3, [r7, #4]
 8006e70:	4807      	ldr	r0, [pc, #28]	@ (8006e90 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006e72:	f7fe fd2c 	bl	80058ce <_PreparePacket>
 8006e76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006e78:	2211      	movs	r2, #17
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6838      	ldr	r0, [r7, #0]
 8006e7e:	f7fe fe17 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f383 8811 	msr	BASEPRI, r3
}
 8006e88:	bf00      	nop
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	200143c8 	.word	0x200143c8

08006e94 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e9c:	f3ef 8311 	mrs	r3, BASEPRI
 8006ea0:	f04f 0120 	mov.w	r1, #32
 8006ea4:	f381 8811 	msr	BASEPRI, r1
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	4819      	ldr	r0, [pc, #100]	@ (8006f10 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006eac:	f7fe fd0f 	bl	80058ce <_PreparePacket>
 8006eb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006eb6:	4b17      	ldr	r3, [pc, #92]	@ (8006f14 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	61fb      	str	r3, [r7, #28]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	61bb      	str	r3, [r7, #24]
 8006ec8:	e00b      	b.n	8006ee2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	1c59      	adds	r1, r3, #1
 8006ed2:	61f9      	str	r1, [r7, #28]
 8006ed4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	701a      	strb	r2, [r3, #0]
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	09db      	lsrs	r3, r3, #7
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ee6:	d8f0      	bhi.n	8006eca <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	61fa      	str	r2, [r7, #28]
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006ef8:	2208      	movs	r2, #8
 8006efa:	68f9      	ldr	r1, [r7, #12]
 8006efc:	6938      	ldr	r0, [r7, #16]
 8006efe:	f7fe fdd7 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f383 8811 	msr	BASEPRI, r3
}
 8006f08:	bf00      	nop
 8006f0a:	3720      	adds	r7, #32
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	200143c8 	.word	0x200143c8
 8006f14:	20014398 	.word	0x20014398

08006f18 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f20:	f3ef 8311 	mrs	r3, BASEPRI
 8006f24:	f04f 0120 	mov.w	r1, #32
 8006f28:	f381 8811 	msr	BASEPRI, r1
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	4819      	ldr	r0, [pc, #100]	@ (8006f94 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006f30:	f7fe fccd 	bl	80058ce <_PreparePacket>
 8006f34:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f3a:	4b17      	ldr	r3, [pc, #92]	@ (8006f98 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	61fb      	str	r3, [r7, #28]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	61bb      	str	r3, [r7, #24]
 8006f4c:	e00b      	b.n	8006f66 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	1c59      	adds	r1, r3, #1
 8006f56:	61f9      	str	r1, [r7, #28]
 8006f58:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f5c:	b2d2      	uxtb	r2, r2
 8006f5e:	701a      	strb	r2, [r3, #0]
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	09db      	lsrs	r3, r3, #7
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f6a:	d8f0      	bhi.n	8006f4e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	61fa      	str	r2, [r7, #28]
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	b2d2      	uxtb	r2, r2
 8006f76:	701a      	strb	r2, [r3, #0]
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006f7c:	2204      	movs	r2, #4
 8006f7e:	68f9      	ldr	r1, [r7, #12]
 8006f80:	6938      	ldr	r0, [r7, #16]
 8006f82:	f7fe fd95 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f383 8811 	msr	BASEPRI, r3
}
 8006f8c:	bf00      	nop
 8006f8e:	3720      	adds	r7, #32
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	200143c8 	.word	0x200143c8
 8006f98:	20014398 	.word	0x20014398

08006f9c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006fa4:	f3ef 8311 	mrs	r3, BASEPRI
 8006fa8:	f04f 0120 	mov.w	r1, #32
 8006fac:	f381 8811 	msr	BASEPRI, r1
 8006fb0:	617b      	str	r3, [r7, #20]
 8006fb2:	4819      	ldr	r0, [pc, #100]	@ (8007018 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006fb4:	f7fe fc8b 	bl	80058ce <_PreparePacket>
 8006fb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006fbe:	4b17      	ldr	r3, [pc, #92]	@ (800701c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	61fb      	str	r3, [r7, #28]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	61bb      	str	r3, [r7, #24]
 8006fd0:	e00b      	b.n	8006fea <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	1c59      	adds	r1, r3, #1
 8006fda:	61f9      	str	r1, [r7, #28]
 8006fdc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	701a      	strb	r2, [r3, #0]
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	09db      	lsrs	r3, r3, #7
 8006fe8:	61bb      	str	r3, [r7, #24]
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fee:	d8f0      	bhi.n	8006fd2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	61fa      	str	r2, [r7, #28]
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007000:	2206      	movs	r2, #6
 8007002:	68f9      	ldr	r1, [r7, #12]
 8007004:	6938      	ldr	r0, [r7, #16]
 8007006:	f7fe fd53 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f383 8811 	msr	BASEPRI, r3
}
 8007010:	bf00      	nop
 8007012:	3720      	adds	r7, #32
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	200143c8 	.word	0x200143c8
 800701c:	20014398 	.word	0x20014398

08007020 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007020:	b580      	push	{r7, lr}
 8007022:	b08a      	sub	sp, #40	@ 0x28
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800702a:	f3ef 8311 	mrs	r3, BASEPRI
 800702e:	f04f 0120 	mov.w	r1, #32
 8007032:	f381 8811 	msr	BASEPRI, r1
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	4827      	ldr	r0, [pc, #156]	@ (80070d8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800703a:	f7fe fc48 	bl	80058ce <_PreparePacket>
 800703e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007044:	4b25      	ldr	r3, [pc, #148]	@ (80070dc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	627b      	str	r3, [r7, #36]	@ 0x24
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	623b      	str	r3, [r7, #32]
 8007056:	e00b      	b.n	8007070 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	b2da      	uxtb	r2, r3
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705e:	1c59      	adds	r1, r3, #1
 8007060:	6279      	str	r1, [r7, #36]	@ 0x24
 8007062:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	701a      	strb	r2, [r3, #0]
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	09db      	lsrs	r3, r3, #7
 800706e:	623b      	str	r3, [r7, #32]
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	2b7f      	cmp	r3, #127	@ 0x7f
 8007074:	d8f0      	bhi.n	8007058 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	627a      	str	r2, [r7, #36]	@ 0x24
 800707c:	6a3a      	ldr	r2, [r7, #32]
 800707e:	b2d2      	uxtb	r2, r2
 8007080:	701a      	strb	r2, [r3, #0]
 8007082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007084:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	61fb      	str	r3, [r7, #28]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	61bb      	str	r3, [r7, #24]
 800708e:	e00b      	b.n	80070a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	b2da      	uxtb	r2, r3
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	1c59      	adds	r1, r3, #1
 8007098:	61f9      	str	r1, [r7, #28]
 800709a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	701a      	strb	r2, [r3, #0]
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	09db      	lsrs	r3, r3, #7
 80070a6:	61bb      	str	r3, [r7, #24]
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80070ac:	d8f0      	bhi.n	8007090 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	61fa      	str	r2, [r7, #28]
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80070be:	2207      	movs	r2, #7
 80070c0:	68f9      	ldr	r1, [r7, #12]
 80070c2:	6938      	ldr	r0, [r7, #16]
 80070c4:	f7fe fcf4 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f383 8811 	msr	BASEPRI, r3
}
 80070ce:	bf00      	nop
 80070d0:	3728      	adds	r7, #40	@ 0x28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	200143c8 	.word	0x200143c8
 80070dc:	20014398 	.word	0x20014398

080070e0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80070e8:	4b04      	ldr	r3, [pc, #16]	@ (80070fc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	1ad3      	subs	r3, r2, r3
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	20014398 	.word	0x20014398

08007100 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007100:	b580      	push	{r7, lr}
 8007102:	b08c      	sub	sp, #48	@ 0x30
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800710a:	4b3b      	ldr	r3, [pc, #236]	@ (80071f8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d06d      	beq.n	80071ee <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007112:	4b39      	ldr	r3, [pc, #228]	@ (80071f8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007118:	2300      	movs	r3, #0
 800711a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800711c:	e008      	b.n	8007130 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800711e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007126:	2b00      	cmp	r3, #0
 8007128:	d007      	beq.n	800713a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800712a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712c:	3301      	adds	r3, #1
 800712e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007134:	429a      	cmp	r2, r3
 8007136:	d3f2      	bcc.n	800711e <SEGGER_SYSVIEW_SendModule+0x1e>
 8007138:	e000      	b.n	800713c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800713a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800713c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800713e:	2b00      	cmp	r3, #0
 8007140:	d055      	beq.n	80071ee <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007142:	f3ef 8311 	mrs	r3, BASEPRI
 8007146:	f04f 0120 	mov.w	r1, #32
 800714a:	f381 8811 	msr	BASEPRI, r1
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	482a      	ldr	r0, [pc, #168]	@ (80071fc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007152:	f7fe fbbc 	bl	80058ce <_PreparePacket>
 8007156:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007160:	79fb      	ldrb	r3, [r7, #7]
 8007162:	623b      	str	r3, [r7, #32]
 8007164:	e00b      	b.n	800717e <SEGGER_SYSVIEW_SendModule+0x7e>
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	b2da      	uxtb	r2, r3
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716c:	1c59      	adds	r1, r3, #1
 800716e:	6279      	str	r1, [r7, #36]	@ 0x24
 8007170:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007174:	b2d2      	uxtb	r2, r2
 8007176:	701a      	strb	r2, [r3, #0]
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	09db      	lsrs	r3, r3, #7
 800717c:	623b      	str	r3, [r7, #32]
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	2b7f      	cmp	r3, #127	@ 0x7f
 8007182:	d8f0      	bhi.n	8007166 <SEGGER_SYSVIEW_SendModule+0x66>
 8007184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	627a      	str	r2, [r7, #36]	@ 0x24
 800718a:	6a3a      	ldr	r2, [r7, #32]
 800718c:	b2d2      	uxtb	r2, r2
 800718e:	701a      	strb	r2, [r3, #0]
 8007190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007192:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	61fb      	str	r3, [r7, #28]
 8007198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	61bb      	str	r3, [r7, #24]
 800719e:	e00b      	b.n	80071b8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	1c59      	adds	r1, r3, #1
 80071a8:	61f9      	str	r1, [r7, #28]
 80071aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071ae:	b2d2      	uxtb	r2, r2
 80071b0:	701a      	strb	r2, [r3, #0]
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	09db      	lsrs	r3, r3, #7
 80071b6:	61bb      	str	r3, [r7, #24]
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80071bc:	d8f0      	bhi.n	80071a0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	61fa      	str	r2, [r7, #28]
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	701a      	strb	r2, [r3, #0]
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2280      	movs	r2, #128	@ 0x80
 80071d4:	4619      	mov	r1, r3
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f7fe fb2c 	bl	8005834 <_EncodeStr>
 80071dc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80071de:	2216      	movs	r2, #22
 80071e0:	68f9      	ldr	r1, [r7, #12]
 80071e2:	6938      	ldr	r0, [r7, #16]
 80071e4:	f7fe fc64 	bl	8005ab0 <_SendPacket>
      RECORD_END();
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80071ee:	bf00      	nop
 80071f0:	3730      	adds	r7, #48	@ 0x30
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	200143c0 	.word	0x200143c0
 80071fc:	200143c8 	.word	0x200143c8

08007200 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007206:	4b0c      	ldr	r3, [pc, #48]	@ (8007238 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00f      	beq.n	800722e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800720e:	4b0a      	ldr	r3, [pc, #40]	@ (8007238 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1f2      	bne.n	8007214 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800722e:	bf00      	nop
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	200143c0 	.word	0x200143c0

0800723c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007242:	f3ef 8311 	mrs	r3, BASEPRI
 8007246:	f04f 0120 	mov.w	r1, #32
 800724a:	f381 8811 	msr	BASEPRI, r1
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	4817      	ldr	r0, [pc, #92]	@ (80072b0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007252:	f7fe fb3c 	bl	80058ce <_PreparePacket>
 8007256:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	4b14      	ldr	r3, [pc, #80]	@ (80072b4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	613b      	str	r3, [r7, #16]
 8007266:	e00b      	b.n	8007280 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	b2da      	uxtb	r2, r3
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	1c59      	adds	r1, r3, #1
 8007270:	6179      	str	r1, [r7, #20]
 8007272:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007276:	b2d2      	uxtb	r2, r2
 8007278:	701a      	strb	r2, [r3, #0]
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	09db      	lsrs	r3, r3, #7
 800727e:	613b      	str	r3, [r7, #16]
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	2b7f      	cmp	r3, #127	@ 0x7f
 8007284:	d8f0      	bhi.n	8007268 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	1c5a      	adds	r2, r3, #1
 800728a:	617a      	str	r2, [r7, #20]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007296:	221b      	movs	r2, #27
 8007298:	6879      	ldr	r1, [r7, #4]
 800729a:	68b8      	ldr	r0, [r7, #8]
 800729c:	f7fe fc08 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f383 8811 	msr	BASEPRI, r3
}
 80072a6:	bf00      	nop
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	200143c8 	.word	0x200143c8
 80072b4:	200143c4 	.word	0x200143c4

080072b8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80072b8:	b40f      	push	{r0, r1, r2, r3}
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b082      	sub	sp, #8
 80072be:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80072c0:	f107 0314 	add.w	r3, r7, #20
 80072c4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80072c6:	1d3b      	adds	r3, r7, #4
 80072c8:	461a      	mov	r2, r3
 80072ca:	2100      	movs	r1, #0
 80072cc:	6938      	ldr	r0, [r7, #16]
 80072ce:	f7fe fe79 	bl	8005fc4 <_VPrintTarget>
  va_end(ParamList);
}
 80072d2:	bf00      	nop
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072dc:	b004      	add	sp, #16
 80072de:	4770      	bx	lr

080072e0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08a      	sub	sp, #40	@ 0x28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072e8:	f3ef 8311 	mrs	r3, BASEPRI
 80072ec:	f04f 0120 	mov.w	r1, #32
 80072f0:	f381 8811 	msr	BASEPRI, r1
 80072f4:	617b      	str	r3, [r7, #20]
 80072f6:	4827      	ldr	r0, [pc, #156]	@ (8007394 <SEGGER_SYSVIEW_Warn+0xb4>)
 80072f8:	f7fe fae9 	bl	80058ce <_PreparePacket>
 80072fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072fe:	2280      	movs	r2, #128	@ 0x80
 8007300:	6879      	ldr	r1, [r7, #4]
 8007302:	6938      	ldr	r0, [r7, #16]
 8007304:	f7fe fa96 	bl	8005834 <_EncodeStr>
 8007308:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	627b      	str	r3, [r7, #36]	@ 0x24
 800730e:	2301      	movs	r3, #1
 8007310:	623b      	str	r3, [r7, #32]
 8007312:	e00b      	b.n	800732c <SEGGER_SYSVIEW_Warn+0x4c>
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	b2da      	uxtb	r2, r3
 8007318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731a:	1c59      	adds	r1, r3, #1
 800731c:	6279      	str	r1, [r7, #36]	@ 0x24
 800731e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	09db      	lsrs	r3, r3, #7
 800732a:	623b      	str	r3, [r7, #32]
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007330:	d8f0      	bhi.n	8007314 <SEGGER_SYSVIEW_Warn+0x34>
 8007332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	627a      	str	r2, [r7, #36]	@ 0x24
 8007338:	6a3a      	ldr	r2, [r7, #32]
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007340:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	61fb      	str	r3, [r7, #28]
 8007346:	2300      	movs	r3, #0
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	e00b      	b.n	8007364 <SEGGER_SYSVIEW_Warn+0x84>
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	b2da      	uxtb	r2, r3
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	1c59      	adds	r1, r3, #1
 8007354:	61f9      	str	r1, [r7, #28]
 8007356:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	09db      	lsrs	r3, r3, #7
 8007362:	61bb      	str	r3, [r7, #24]
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	2b7f      	cmp	r3, #127	@ 0x7f
 8007368:	d8f0      	bhi.n	800734c <SEGGER_SYSVIEW_Warn+0x6c>
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	61fa      	str	r2, [r7, #28]
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	b2d2      	uxtb	r2, r2
 8007374:	701a      	strb	r2, [r3, #0]
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800737a:	221a      	movs	r2, #26
 800737c:	68f9      	ldr	r1, [r7, #12]
 800737e:	6938      	ldr	r0, [r7, #16]
 8007380:	f7fe fb96 	bl	8005ab0 <_SendPacket>
  RECORD_END();
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f383 8811 	msr	BASEPRI, r3
}
 800738a:	bf00      	nop
 800738c:	3728      	adds	r7, #40	@ 0x28
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	200143c8 	.word	0x200143c8

08007398 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007398:	b580      	push	{r7, lr}
 800739a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800739c:	4b13      	ldr	r3, [pc, #76]	@ (80073ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 800739e:	7e1b      	ldrb	r3, [r3, #24]
 80073a0:	4619      	mov	r1, r3
 80073a2:	4a13      	ldr	r2, [pc, #76]	@ (80073f0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80073a4:	460b      	mov	r3, r1
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	440b      	add	r3, r1
 80073aa:	00db      	lsls	r3, r3, #3
 80073ac:	4413      	add	r3, r2
 80073ae:	336c      	adds	r3, #108	@ 0x6c
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	4b0e      	ldr	r3, [pc, #56]	@ (80073ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073b4:	7e1b      	ldrb	r3, [r3, #24]
 80073b6:	4618      	mov	r0, r3
 80073b8:	490d      	ldr	r1, [pc, #52]	@ (80073f0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80073ba:	4603      	mov	r3, r0
 80073bc:	005b      	lsls	r3, r3, #1
 80073be:	4403      	add	r3, r0
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	440b      	add	r3, r1
 80073c4:	3370      	adds	r3, #112	@ 0x70
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d00b      	beq.n	80073e4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80073cc:	4b07      	ldr	r3, [pc, #28]	@ (80073ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073ce:	789b      	ldrb	r3, [r3, #2]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d107      	bne.n	80073e4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80073d4:	4b05      	ldr	r3, [pc, #20]	@ (80073ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073d6:	2201      	movs	r2, #1
 80073d8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80073da:	f7fe fa85 	bl	80058e8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80073de:	4b03      	ldr	r3, [pc, #12]	@ (80073ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80073e4:	4b01      	ldr	r3, [pc, #4]	@ (80073ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20014398 	.word	0x20014398
 80073f0:	20012ed8 	.word	0x20012ed8

080073f4 <memcmp>:
 80073f4:	b510      	push	{r4, lr}
 80073f6:	3901      	subs	r1, #1
 80073f8:	4402      	add	r2, r0
 80073fa:	4290      	cmp	r0, r2
 80073fc:	d101      	bne.n	8007402 <memcmp+0xe>
 80073fe:	2000      	movs	r0, #0
 8007400:	e005      	b.n	800740e <memcmp+0x1a>
 8007402:	7803      	ldrb	r3, [r0, #0]
 8007404:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007408:	42a3      	cmp	r3, r4
 800740a:	d001      	beq.n	8007410 <memcmp+0x1c>
 800740c:	1b18      	subs	r0, r3, r4
 800740e:	bd10      	pop	{r4, pc}
 8007410:	3001      	adds	r0, #1
 8007412:	e7f2      	b.n	80073fa <memcmp+0x6>

08007414 <memset>:
 8007414:	4402      	add	r2, r0
 8007416:	4603      	mov	r3, r0
 8007418:	4293      	cmp	r3, r2
 800741a:	d100      	bne.n	800741e <memset+0xa>
 800741c:	4770      	bx	lr
 800741e:	f803 1b01 	strb.w	r1, [r3], #1
 8007422:	e7f9      	b.n	8007418 <memset+0x4>

08007424 <__libc_init_array>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	4d0d      	ldr	r5, [pc, #52]	@ (800745c <__libc_init_array+0x38>)
 8007428:	4c0d      	ldr	r4, [pc, #52]	@ (8007460 <__libc_init_array+0x3c>)
 800742a:	1b64      	subs	r4, r4, r5
 800742c:	10a4      	asrs	r4, r4, #2
 800742e:	2600      	movs	r6, #0
 8007430:	42a6      	cmp	r6, r4
 8007432:	d109      	bne.n	8007448 <__libc_init_array+0x24>
 8007434:	4d0b      	ldr	r5, [pc, #44]	@ (8007464 <__libc_init_array+0x40>)
 8007436:	4c0c      	ldr	r4, [pc, #48]	@ (8007468 <__libc_init_array+0x44>)
 8007438:	f000 f826 	bl	8007488 <_init>
 800743c:	1b64      	subs	r4, r4, r5
 800743e:	10a4      	asrs	r4, r4, #2
 8007440:	2600      	movs	r6, #0
 8007442:	42a6      	cmp	r6, r4
 8007444:	d105      	bne.n	8007452 <__libc_init_array+0x2e>
 8007446:	bd70      	pop	{r4, r5, r6, pc}
 8007448:	f855 3b04 	ldr.w	r3, [r5], #4
 800744c:	4798      	blx	r3
 800744e:	3601      	adds	r6, #1
 8007450:	e7ee      	b.n	8007430 <__libc_init_array+0xc>
 8007452:	f855 3b04 	ldr.w	r3, [r5], #4
 8007456:	4798      	blx	r3
 8007458:	3601      	adds	r6, #1
 800745a:	e7f2      	b.n	8007442 <__libc_init_array+0x1e>
 800745c:	08007664 	.word	0x08007664
 8007460:	08007664 	.word	0x08007664
 8007464:	08007664 	.word	0x08007664
 8007468:	08007668 	.word	0x08007668

0800746c <memcpy>:
 800746c:	440a      	add	r2, r1
 800746e:	4291      	cmp	r1, r2
 8007470:	f100 33ff 	add.w	r3, r0, #4294967295
 8007474:	d100      	bne.n	8007478 <memcpy+0xc>
 8007476:	4770      	bx	lr
 8007478:	b510      	push	{r4, lr}
 800747a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800747e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007482:	4291      	cmp	r1, r2
 8007484:	d1f9      	bne.n	800747a <memcpy+0xe>
 8007486:	bd10      	pop	{r4, pc}

08007488 <_init>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr

08007494 <_fini>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	bf00      	nop
 8007498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749a:	bc08      	pop	{r3}
 800749c:	469e      	mov	lr, r3
 800749e:	4770      	bx	lr
