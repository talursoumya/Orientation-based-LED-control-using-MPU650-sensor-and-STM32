
008_Queue_n_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008be8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08008d78  08008d78  00009d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009198  08009198  0000b084  2**0
                  CONTENTS
  4 .ARM          00000008  08009198  08009198  0000a198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091a0  080091a0  0000b084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091a0  080091a0  0000a1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091a4  080091a4  0000a1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080091a8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b084  2**0
                  CONTENTS
 10 .bss          00013070  20000084  20000084  0000b084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200130f4  200130f4  0000b084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000167d6  00000000  00000000  0000b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039e2  00000000  00000000  0002188a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  00025270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe5  00000000  00000000  00026700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000252b3  00000000  00000000  000276e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019e85  00000000  00000000  0004c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc566  00000000  00000000  0006681d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00142d83  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005dfc  00000000  00000000  00142dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00148bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d60 	.word	0x08008d60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08008d60 	.word	0x08008d60

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <turn_off_all_leds>:


#include "main.h"

void turn_off_all_leds(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059a:	480b      	ldr	r0, [pc, #44]	@ (80005c8 <turn_off_all_leds+0x38>)
 800059c:	f001 ffa6 	bl	80024ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port,LD4_Pin,GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005a6:	4808      	ldr	r0, [pc, #32]	@ (80005c8 <turn_off_all_leds+0x38>)
 80005a8:	f001 ffa0 	bl	80024ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port,LD5_Pin,GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005b2:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <turn_off_all_leds+0x38>)
 80005b4:	f001 ff9a 	bl	80024ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port,LD6_Pin,GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005be:	4802      	ldr	r0, [pc, #8]	@ (80005c8 <turn_off_all_leds+0x38>)
 80005c0:	f001 ff94 	bl	80024ec <HAL_GPIO_WritePin>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40020c00 	.word	0x40020c00

080005cc <turn_on_all_leds>:

void turn_on_all_leds(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d6:	480b      	ldr	r0, [pc, #44]	@ (8000604 <turn_on_all_leds+0x38>)
 80005d8:	f001 ff88 	bl	80024ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port,LD4_Pin,GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005e2:	4808      	ldr	r0, [pc, #32]	@ (8000604 <turn_on_all_leds+0x38>)
 80005e4:	f001 ff82 	bl	80024ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port,LD5_Pin,GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ee:	4805      	ldr	r0, [pc, #20]	@ (8000604 <turn_on_all_leds+0x38>)
 80005f0:	f001 ff7c 	bl	80024ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port,LD6_Pin,GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005fa:	4802      	ldr	r0, [pc, #8]	@ (8000604 <turn_on_all_leds+0x38>)
 80005fc:	f001 ff76 	bl	80024ec <HAL_GPIO_WritePin>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020c00 	.word	0x40020c00

08000608 <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port,LD4_Pin,GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000612:	480b      	ldr	r0, [pc, #44]	@ (8000640 <turn_on_odd_leds+0x38>)
 8000614:	f001 ff6a 	bl	80024ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port,LD3_Pin,GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800061e:	4808      	ldr	r0, [pc, #32]	@ (8000640 <turn_on_odd_leds+0x38>)
 8000620:	f001 ff64 	bl	80024ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port,LD5_Pin,GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800062a:	4805      	ldr	r0, [pc, #20]	@ (8000640 <turn_on_odd_leds+0x38>)
 800062c:	f001 ff5e 	bl	80024ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port,LD6_Pin,GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000636:	4802      	ldr	r0, [pc, #8]	@ (8000640 <turn_on_odd_leds+0x38>)
 8000638:	f001 ff58 	bl	80024ec <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020c00 	.word	0x40020c00

08000644 <turn_on_even_leds>:

void turn_on_even_leds(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port,LD4_Pin,GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800064e:	480b      	ldr	r0, [pc, #44]	@ (800067c <turn_on_even_leds+0x38>)
 8000650:	f001 ff4c 	bl	80024ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port,LD3_Pin,GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800065a:	4808      	ldr	r0, [pc, #32]	@ (800067c <turn_on_even_leds+0x38>)
 800065c:	f001 ff46 	bl	80024ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port,LD5_Pin,GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <turn_on_even_leds+0x38>)
 8000668:	f001 ff40 	bl	80024ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port,LD6_Pin,GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000672:	4802      	ldr	r0, [pc, #8]	@ (800067c <turn_on_even_leds+0x38>)
 8000674:	f001 ff3a 	bl	80024ec <HAL_GPIO_WritePin>
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40020c00 	.word	0x40020c00

08000680 <LED_control>:


void LED_control( int value )
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < 4 ; i++)
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	e014      	b.n	80006b8 <LED_control+0x38>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, (LD4_Pin << i), ((value >> i)& 0x1));
 800068e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	fa02 f303 	lsl.w	r3, r2, r3
 8000698:	b299      	uxth	r1, r3
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	fa42 f303 	asr.w	r3, r2, r3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	461a      	mov	r2, r3
 80006ac:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <LED_control+0x48>)
 80006ae:	f001 ff1d 	bl	80024ec <HAL_GPIO_WritePin>
  for(int i = 0 ; i < 4 ; i++)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	3301      	adds	r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	dde7      	ble.n	800068e <LED_control+0xe>
}
 80006be:	bf00      	nop
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40020c00 	.word	0x40020c00

080006cc <led_effect_stop>:

void led_effect_stop(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af02      	add	r7, sp, #8
	for(int i=0;i<4;i++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	e00e      	b.n	80006f6 <led_effect_stop+0x2a>
	{
		xTimerStop(handle_led_timer[i],portMAX_DELAY);
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <led_effect_stop+0x3c>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2300      	movs	r3, #0
 80006e8:	2200      	movs	r2, #0
 80006ea:	2103      	movs	r1, #3
 80006ec:	f006 fa9c 	bl	8006c28 <xTimerGenericCommand>
	for(int i=0;i<4;i++)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3301      	adds	r3, #1
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b03      	cmp	r3, #3
 80006fa:	dded      	ble.n	80006d8 <led_effect_stop+0xc>
	}
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000012c 	.word	0x2000012c

0800070c <led_effect>:

void led_effect(int n)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b085      	sub	sp, #20
 8000710:	af02      	add	r7, sp, #8
 8000712:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 8000714:	f7ff ffda 	bl	80006cc <led_effect_stop>
	xTimerStart(handle_led_timer[n-1],portMAX_DELAY);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3b01      	subs	r3, #1
 800071c:	4a08      	ldr	r2, [pc, #32]	@ (8000740 <led_effect+0x34>)
 800071e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000722:	f005 fb6d 	bl	8005e00 <xTaskGetTickCount>
 8000726:	4602      	mov	r2, r0
 8000728:	f04f 33ff 	mov.w	r3, #4294967295
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2300      	movs	r3, #0
 8000730:	2101      	movs	r1, #1
 8000732:	4620      	mov	r0, r4
 8000734:	f006 fa78 	bl	8006c28 <xTimerGenericCommand>
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	2000012c 	.word	0x2000012c

08000744 <LED_effect1>:

void LED_effect1(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1)? turn_off_all_leds(): turn_on_all_leds();
 8000748:	4b08      	ldr	r3, [pc, #32]	@ (800076c <LED_effect1+0x28>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f083 0301 	eor.w	r3, r3, #1
 8000750:	4a06      	ldr	r2, [pc, #24]	@ (800076c <LED_effect1+0x28>)
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <LED_effect1+0x28>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d002      	beq.n	8000762 <LED_effect1+0x1e>
 800075c:	f7ff ff18 	bl	8000590 <turn_off_all_leds>
}
 8000760:	e001      	b.n	8000766 <LED_effect1+0x22>
	(flag ^= 1)? turn_off_all_leds(): turn_on_all_leds();
 8000762:	f7ff ff33 	bl	80005cc <turn_on_all_leds>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000

08000770 <LED_effect2>:

void LED_effect2(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1)? turn_on_even_leds(): turn_on_odd_leds();
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <LED_effect2+0x28>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f083 0301 	eor.w	r3, r3, #1
 800077c:	4a06      	ldr	r2, [pc, #24]	@ (8000798 <LED_effect2+0x28>)
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <LED_effect2+0x28>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d002      	beq.n	800078e <LED_effect2+0x1e>
 8000788:	f7ff ff5c 	bl	8000644 <turn_on_even_leds>
}
 800078c:	e001      	b.n	8000792 <LED_effect2+0x22>
	(flag ^= 1)? turn_on_even_leds(): turn_on_odd_leds();
 800078e:	f7ff ff3b 	bl	8000608 <turn_on_odd_leds>
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000004 	.word	0x20000004

0800079c <LED_effect3>:

void LED_effect3(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control(0x01 << (i++ %4));
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <LED_effect3+0x2c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	1c5a      	adds	r2, r3, #1
 80007a6:	4908      	ldr	r1, [pc, #32]	@ (80007c8 <LED_effect3+0x2c>)
 80007a8:	600a      	str	r2, [r1, #0]
 80007aa:	425a      	negs	r2, r3
 80007ac:	f003 0303 	and.w	r3, r3, #3
 80007b0:	f002 0203 	and.w	r2, r2, #3
 80007b4:	bf58      	it	pl
 80007b6:	4253      	negpl	r3, r2
 80007b8:	2201      	movs	r2, #1
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff5e 	bl	8000680 <LED_control>

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000a0 	.word	0x200000a0

080007cc <LED_effect4>:

void LED_effect4(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control(0x08 >> (i++ %4));
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <LED_effect4+0x2c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	4908      	ldr	r1, [pc, #32]	@ (80007f8 <LED_effect4+0x2c>)
 80007d8:	600a      	str	r2, [r1, #0]
 80007da:	425a      	negs	r2, r3
 80007dc:	f003 0303 	and.w	r3, r3, #3
 80007e0:	f002 0203 	and.w	r2, r2, #3
 80007e4:	bf58      	it	pl
 80007e6:	4253      	negpl	r3, r2
 80007e8:	2208      	movs	r2, #8
 80007ea:	fa42 f303 	asr.w	r3, r2, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff46 	bl	8000680 <LED_control>

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000a4 	.word	0x200000a4

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	@ 0x30
 8000800:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f001 fb21 	bl	8001e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f919 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f000 f9d3 	bl	8000bb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800080e:	f000 f9a7 	bl	8000b60 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000812:	f000 f97f 	bl	8000b14 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */


	status = xTaskCreate(menu_task, "menu_task", 200, NULL, 2, &handle_menu_task);
 8000816:	4b70      	ldr	r3, [pc, #448]	@ (80009d8 <main+0x1dc>)
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	2302      	movs	r3, #2
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2300      	movs	r3, #0
 8000820:	22c8      	movs	r2, #200	@ 0xc8
 8000822:	496e      	ldr	r1, [pc, #440]	@ (80009dc <main+0x1e0>)
 8000824:	486e      	ldr	r0, [pc, #440]	@ (80009e0 <main+0x1e4>)
 8000826:	f005 f8a7 	bl	8005978 <xTaskCreate>
 800082a:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 800082c:	6a3b      	ldr	r3, [r7, #32]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d00b      	beq.n	800084a <main+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000836:	f383 8811 	msr	BASEPRI, r3
 800083a:	f3bf 8f6f 	isb	sy
 800083e:	f3bf 8f4f 	dsb	sy
 8000842:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	e7fd      	b.n	8000846 <main+0x4a>

	status = xTaskCreate(cmd_handler_task, "cmd_task", 200, NULL, 2, &handle_cmd_task);
 800084a:	4b66      	ldr	r3, [pc, #408]	@ (80009e4 <main+0x1e8>)
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	2302      	movs	r3, #2
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2300      	movs	r3, #0
 8000854:	22c8      	movs	r2, #200	@ 0xc8
 8000856:	4964      	ldr	r1, [pc, #400]	@ (80009e8 <main+0x1ec>)
 8000858:	4864      	ldr	r0, [pc, #400]	@ (80009ec <main+0x1f0>)
 800085a:	f005 f88d 	bl	8005978 <xTaskCreate>
 800085e:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000860:	6a3b      	ldr	r3, [r7, #32]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d00b      	beq.n	800087e <main+0x82>
        __asm volatile
 8000866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800086a:	f383 8811 	msr	BASEPRI, r3
 800086e:	f3bf 8f6f 	isb	sy
 8000872:	f3bf 8f4f 	dsb	sy
 8000876:	61bb      	str	r3, [r7, #24]
    }
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	e7fd      	b.n	800087a <main+0x7e>

	status = xTaskCreate(print_task, "print_task", 200, NULL, 2, &handle_print_task);
 800087e:	4b5c      	ldr	r3, [pc, #368]	@ (80009f0 <main+0x1f4>)
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	2302      	movs	r3, #2
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2300      	movs	r3, #0
 8000888:	22c8      	movs	r2, #200	@ 0xc8
 800088a:	495a      	ldr	r1, [pc, #360]	@ (80009f4 <main+0x1f8>)
 800088c:	485a      	ldr	r0, [pc, #360]	@ (80009f8 <main+0x1fc>)
 800088e:	f005 f873 	bl	8005978 <xTaskCreate>
 8000892:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000894:	6a3b      	ldr	r3, [r7, #32]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d00b      	beq.n	80008b2 <main+0xb6>
        __asm volatile
 800089a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800089e:	f383 8811 	msr	BASEPRI, r3
 80008a2:	f3bf 8f6f 	isb	sy
 80008a6:	f3bf 8f4f 	dsb	sy
 80008aa:	617b      	str	r3, [r7, #20]
    }
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	e7fd      	b.n	80008ae <main+0xb2>

	status = xTaskCreate(led_task, "led_task", 200, NULL, 2, &handle_led_task);
 80008b2:	4b52      	ldr	r3, [pc, #328]	@ (80009fc <main+0x200>)
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	2302      	movs	r3, #2
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2300      	movs	r3, #0
 80008bc:	22c8      	movs	r2, #200	@ 0xc8
 80008be:	4950      	ldr	r1, [pc, #320]	@ (8000a00 <main+0x204>)
 80008c0:	4850      	ldr	r0, [pc, #320]	@ (8000a04 <main+0x208>)
 80008c2:	f005 f859 	bl	8005978 <xTaskCreate>
 80008c6:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 80008c8:	6a3b      	ldr	r3, [r7, #32]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d00b      	beq.n	80008e6 <main+0xea>
        __asm volatile
 80008ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008d2:	f383 8811 	msr	BASEPRI, r3
 80008d6:	f3bf 8f6f 	isb	sy
 80008da:	f3bf 8f4f 	dsb	sy
 80008de:	613b      	str	r3, [r7, #16]
    }
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	e7fd      	b.n	80008e2 <main+0xe6>

	status = xTaskCreate(rtc_task, "rtc_task", 200, NULL, 2, &handle_rtc_task);
 80008e6:	4b48      	ldr	r3, [pc, #288]	@ (8000a08 <main+0x20c>)
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	2302      	movs	r3, #2
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2300      	movs	r3, #0
 80008f0:	22c8      	movs	r2, #200	@ 0xc8
 80008f2:	4946      	ldr	r1, [pc, #280]	@ (8000a0c <main+0x210>)
 80008f4:	4846      	ldr	r0, [pc, #280]	@ (8000a10 <main+0x214>)
 80008f6:	f005 f83f 	bl	8005978 <xTaskCreate>
 80008fa:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d00b      	beq.n	800091a <main+0x11e>
        __asm volatile
 8000902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000906:	f383 8811 	msr	BASEPRI, r3
 800090a:	f3bf 8f6f 	isb	sy
 800090e:	f3bf 8f4f 	dsb	sy
 8000912:	60fb      	str	r3, [r7, #12]
    }
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	e7fd      	b.n	8000916 <main+0x11a>

	q_data = xQueueCreate (10, sizeof(char));
 800091a:	2200      	movs	r2, #0
 800091c:	2101      	movs	r1, #1
 800091e:	200a      	movs	r0, #10
 8000920:	f004 facc 	bl	8004ebc <xQueueGenericCreate>
 8000924:	4603      	mov	r3, r0
 8000926:	4a3b      	ldr	r2, [pc, #236]	@ (8000a14 <main+0x218>)
 8000928:	6013      	str	r3, [r2, #0]

	configASSERT(q_data != NULL);
 800092a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a14 <main+0x218>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d10b      	bne.n	800094a <main+0x14e>
        __asm volatile
 8000932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000936:	f383 8811 	msr	BASEPRI, r3
 800093a:	f3bf 8f6f 	isb	sy
 800093e:	f3bf 8f4f 	dsb	sy
 8000942:	60bb      	str	r3, [r7, #8]
    }
 8000944:	bf00      	nop
 8000946:	bf00      	nop
 8000948:	e7fd      	b.n	8000946 <main+0x14a>

	q_print = xQueueCreate (10, sizeof(size_t));
 800094a:	2200      	movs	r2, #0
 800094c:	2104      	movs	r1, #4
 800094e:	200a      	movs	r0, #10
 8000950:	f004 fab4 	bl	8004ebc <xQueueGenericCreate>
 8000954:	4603      	mov	r3, r0
 8000956:	4a30      	ldr	r2, [pc, #192]	@ (8000a18 <main+0x21c>)
 8000958:	6013      	str	r3, [r2, #0]

	configASSERT(q_print != NULL);
 800095a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a18 <main+0x21c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d10b      	bne.n	800097a <main+0x17e>
        __asm volatile
 8000962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000966:	f383 8811 	msr	BASEPRI, r3
 800096a:	f3bf 8f6f 	isb	sy
 800096e:	f3bf 8f4f 	dsb	sy
 8000972:	607b      	str	r3, [r7, #4]
    }
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	e7fd      	b.n	8000976 <main+0x17a>



	//Create software timers for LED effects
	for(int i = 0 ; i < 4 ; i++)
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
 800097e:	e013      	b.n	80009a8 <main+0x1ac>
		handle_led_timer[i] = xTimerCreate("led_timer",pdMS_TO_TICKS(500),pdTRUE, (void*)(i+1),led_effect_callback);
 8000980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000982:	3301      	adds	r3, #1
 8000984:	461a      	mov	r2, r3
 8000986:	4b25      	ldr	r3, [pc, #148]	@ (8000a1c <main+0x220>)
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	4613      	mov	r3, r2
 800098c:	2201      	movs	r2, #1
 800098e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000992:	4823      	ldr	r0, [pc, #140]	@ (8000a20 <main+0x224>)
 8000994:	f006 f8ea 	bl	8006b6c <xTimerCreate>
 8000998:	4602      	mov	r2, r0
 800099a:	4922      	ldr	r1, [pc, #136]	@ (8000a24 <main+0x228>)
 800099c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0 ; i < 4 ; i++)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a4:	3301      	adds	r3, #1
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80009a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	dde8      	ble.n	8000980 <main+0x184>


	rtc_timer = xTimerCreate ("rtc_report_timer",pdMS_TO_TICKS(1000),pdTRUE,NULL,rtc_report_callback);
 80009ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <main+0x22c>)
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2300      	movs	r3, #0
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009ba:	481c      	ldr	r0, [pc, #112]	@ (8000a2c <main+0x230>)
 80009bc:	f006 f8d6 	bl	8006b6c <xTimerCreate>
 80009c0:	4603      	mov	r3, r0
 80009c2:	4a1b      	ldr	r2, [pc, #108]	@ (8000a30 <main+0x234>)
 80009c4:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80009c6:	2201      	movs	r2, #1
 80009c8:	491a      	ldr	r1, [pc, #104]	@ (8000a34 <main+0x238>)
 80009ca:	481b      	ldr	r0, [pc, #108]	@ (8000a38 <main+0x23c>)
 80009cc:	f003 f9dd 	bl	8003d8a <HAL_UART_Receive_IT>

	vTaskStartScheduler();
 80009d0:	f005 f918 	bl	8005c04 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <main+0x1d8>
 80009d8:	20000114 	.word	0x20000114
 80009dc:	08008d78 	.word	0x08008d78
 80009e0:	08001605 	.word	0x08001605
 80009e4:	20000110 	.word	0x20000110
 80009e8:	08008d84 	.word	0x08008d84
 80009ec:	0800172d 	.word	0x0800172d
 80009f0:	20000118 	.word	0x20000118
 80009f4:	08008d90 	.word	0x08008d90
 80009f8:	080016ed 	.word	0x080016ed
 80009fc:	2000011c 	.word	0x2000011c
 8000a00:	08008d9c 	.word	0x08008d9c
 8000a04:	0800175d 	.word	0x0800175d
 8000a08:	20000120 	.word	0x20000120
 8000a0c:	08008da8 	.word	0x08008da8
 8000a10:	08001889 	.word	0x08001889
 8000a14:	20000124 	.word	0x20000124
 8000a18:	20000128 	.word	0x20000128
 8000a1c:	08000e85 	.word	0x08000e85
 8000a20:	08008db4 	.word	0x08008db4
 8000a24:	2000012c 	.word	0x2000012c
 8000a28:	08000e71 	.word	0x08000e71
 8000a2c:	08008dc0 	.word	0x08008dc0
 8000a30:	2000013c 	.word	0x2000013c
 8000a34:	20000140 	.word	0x20000140
 8000a38:	200000c8 	.word	0x200000c8

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b094      	sub	sp, #80	@ 0x50
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0320 	add.w	r3, r7, #32
 8000a46:	2230      	movs	r2, #48	@ 0x30
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f007 f9b9 	bl	8007dc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	4b29      	ldr	r3, [pc, #164]	@ (8000b0c <SystemClock_Config+0xd0>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	4a28      	ldr	r2, [pc, #160]	@ (8000b0c <SystemClock_Config+0xd0>)
 8000a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a70:	4b26      	ldr	r3, [pc, #152]	@ (8000b0c <SystemClock_Config+0xd0>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	4b23      	ldr	r3, [pc, #140]	@ (8000b10 <SystemClock_Config+0xd4>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a22      	ldr	r2, [pc, #136]	@ (8000b10 <SystemClock_Config+0xd4>)
 8000a86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <SystemClock_Config+0xd4>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a98:	230a      	movs	r3, #10
 8000a9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aac:	2300      	movs	r3, #0
 8000aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ab4:	2332      	movs	r3, #50	@ 0x32
 8000ab6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000abc:	2307      	movs	r3, #7
 8000abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac0:	f107 0320 	add.w	r3, r7, #32
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 fd2b 	bl	8002520 <HAL_RCC_OscConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ad0:	f000 fa5c 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000adc:	2380      	movs	r3, #128	@ 0x80
 8000ade:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ae6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 ff8c 	bl	8002a10 <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000afe:	f000 fa45 	bl	8000f8c <Error_Handler>
  }
}
 8000b02:	bf00      	nop
 8000b04:	3750      	adds	r7, #80	@ 0x50
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40007000 	.word	0x40007000

08000b14 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_RTC_Init+0x44>)
 8000b1a:	4a10      	ldr	r2, [pc, #64]	@ (8000b5c <MX_RTC_Init+0x48>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <MX_RTC_Init+0x44>)
 8000b20:	2240      	movs	r2, #64	@ 0x40
 8000b22:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <MX_RTC_Init+0x44>)
 8000b26:	227f      	movs	r2, #127	@ 0x7f
 8000b28:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <MX_RTC_Init+0x44>)
 8000b2c:	22ff      	movs	r2, #255	@ 0xff
 8000b2e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b30:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <MX_RTC_Init+0x44>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b36:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <MX_RTC_Init+0x44>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <MX_RTC_Init+0x44>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <MX_RTC_Init+0x44>)
 8000b44:	f002 fa98 	bl	8003078 <HAL_RTC_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b4e:	f000 fa1d 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000a8 	.word	0x200000a8
 8000b5c:	40002800 	.word	0x40002800

08000b60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	@ (8000bb0 <MX_USART2_UART_Init+0x50>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b98:	f003 f81c 	bl	8003bd4 <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ba2:	f000 f9f3 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200000c8 	.word	0x200000c8
 8000bb0:	40004400 	.word	0x40004400

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	@ 0x30
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	4ba2      	ldr	r3, [pc, #648]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4aa1      	ldr	r2, [pc, #644]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b9f      	ldr	r3, [pc, #636]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	4b9b      	ldr	r3, [pc, #620]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a9a      	ldr	r2, [pc, #616]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b98      	ldr	r3, [pc, #608]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b94      	ldr	r3, [pc, #592]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a93      	ldr	r2, [pc, #588]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b91      	ldr	r3, [pc, #580]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b8d      	ldr	r3, [pc, #564]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a8c      	ldr	r2, [pc, #560]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b8a      	ldr	r3, [pc, #552]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	4b86      	ldr	r3, [pc, #536]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a85      	ldr	r2, [pc, #532]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b83      	ldr	r3, [pc, #524]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a7e      	ldr	r2, [pc, #504]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c60:	f043 0308 	orr.w	r3, r3, #8
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b7c      	ldr	r3, [pc, #496]	@ (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0308 	and.w	r3, r3, #8
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2108      	movs	r1, #8
 8000c76:	4879      	ldr	r0, [pc, #484]	@ (8000e5c <MX_GPIO_Init+0x2a8>)
 8000c78:	f001 fc38 	bl	80024ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2101      	movs	r1, #1
 8000c80:	4877      	ldr	r0, [pc, #476]	@ (8000e60 <MX_GPIO_Init+0x2ac>)
 8000c82:	f001 fc33 	bl	80024ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c86:	2200      	movs	r2, #0
 8000c88:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000c8c:	4875      	ldr	r0, [pc, #468]	@ (8000e64 <MX_GPIO_Init+0x2b0>)
 8000c8e:	f001 fc2d 	bl	80024ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c92:	2308      	movs	r3, #8
 8000c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	486c      	ldr	r0, [pc, #432]	@ (8000e5c <MX_GPIO_Init+0x2a8>)
 8000caa:	f001 fa83 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4866      	ldr	r0, [pc, #408]	@ (8000e60 <MX_GPIO_Init+0x2ac>)
 8000cc6:	f001 fa75 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cca:	2308      	movs	r3, #8
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cda:	2305      	movs	r3, #5
 8000cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	485e      	ldr	r0, [pc, #376]	@ (8000e60 <MX_GPIO_Init+0x2ac>)
 8000ce6:	f001 fa65 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cea:	2301      	movs	r3, #1
 8000cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	485a      	ldr	r0, [pc, #360]	@ (8000e68 <MX_GPIO_Init+0x2b4>)
 8000d00:	f001 fa58 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d04:	2310      	movs	r3, #16
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d14:	2306      	movs	r3, #6
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4852      	ldr	r0, [pc, #328]	@ (8000e68 <MX_GPIO_Init+0x2b4>)
 8000d20:	f001 fa48 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d24:	23e0      	movs	r3, #224	@ 0xe0
 8000d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d34:	2305      	movs	r3, #5
 8000d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	484a      	ldr	r0, [pc, #296]	@ (8000e68 <MX_GPIO_Init+0x2b4>)
 8000d40:	f001 fa38 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d44:	2304      	movs	r3, #4
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	4845      	ldr	r0, [pc, #276]	@ (8000e6c <MX_GPIO_Init+0x2b8>)
 8000d58:	f001 fa2c 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	483c      	ldr	r0, [pc, #240]	@ (8000e6c <MX_GPIO_Init+0x2b8>)
 8000d7a:	f001 fa1b 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d7e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000d82:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	4833      	ldr	r0, [pc, #204]	@ (8000e64 <MX_GPIO_Init+0x2b0>)
 8000d98:	f001 fa0c 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d9c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dae:	2306      	movs	r3, #6
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4829      	ldr	r0, [pc, #164]	@ (8000e60 <MX_GPIO_Init+0x2ac>)
 8000dba:	f001 f9fb 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000dbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4825      	ldr	r0, [pc, #148]	@ (8000e68 <MX_GPIO_Init+0x2b4>)
 8000dd4:	f001 f9ee 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000dd8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dea:	230a      	movs	r3, #10
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	481c      	ldr	r0, [pc, #112]	@ (8000e68 <MX_GPIO_Init+0x2b4>)
 8000df6:	f001 f9dd 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000dfa:	2320      	movs	r3, #32
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4815      	ldr	r0, [pc, #84]	@ (8000e64 <MX_GPIO_Init+0x2b0>)
 8000e0e:	f001 f9d1 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e12:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e18:	2312      	movs	r3, #18
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e24:	2304      	movs	r3, #4
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480f      	ldr	r0, [pc, #60]	@ (8000e6c <MX_GPIO_Init+0x2b8>)
 8000e30:	f001 f9c0 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e38:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	4619      	mov	r1, r3
 8000e48:	4804      	ldr	r0, [pc, #16]	@ (8000e5c <MX_GPIO_Init+0x2a8>)
 8000e4a:	f001 f9b3 	bl	80021b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4e:	bf00      	nop
 8000e50:	3730      	adds	r7, #48	@ 0x30
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40020c00 	.word	0x40020c00
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40020400 	.word	0x40020400

08000e70 <rtc_report_callback>:

/* USER CODE BEGIN 4 */

void rtc_report_callback( TimerHandle_t xTimer )
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	 show_time_date_itm();
 8000e78:	f000 f88e 	bl	8000f98 <show_time_date_itm>

}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <led_effect_callback>:


void led_effect_callback(TimerHandle_t xTimer)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	 int id;
	 id = ( uint32_t ) pvTimerGetTimerID( xTimer );
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f006 f9df 	bl	8007250 <pvTimerGetTimerID>
 8000e92:	4603      	mov	r3, r0
 8000e94:	60fb      	str	r3, [r7, #12]

	 switch(id)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d816      	bhi.n	8000ecc <led_effect_callback+0x48>
 8000e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8000ea4 <led_effect_callback+0x20>)
 8000ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea4:	08000eb5 	.word	0x08000eb5
 8000ea8:	08000ebb 	.word	0x08000ebb
 8000eac:	08000ec1 	.word	0x08000ec1
 8000eb0:	08000ec7 	.word	0x08000ec7
	 {
	 case 1 :
		 LED_effect1();
 8000eb4:	f7ff fc46 	bl	8000744 <LED_effect1>
		 break;
 8000eb8:	e008      	b.n	8000ecc <led_effect_callback+0x48>
	 case 2:
		 LED_effect2();
 8000eba:	f7ff fc59 	bl	8000770 <LED_effect2>
		 break;
 8000ebe:	e005      	b.n	8000ecc <led_effect_callback+0x48>
	 case 3:
		 LED_effect3();
 8000ec0:	f7ff fc6c 	bl	800079c <LED_effect3>
		 break;
 8000ec4:	e002      	b.n	8000ecc <led_effect_callback+0x48>
	 case 4:
		 LED_effect4();
 8000ec6:	f7ff fc81 	bl	80007cc <LED_effect4>
	 }


}
 8000eca:	e7ff      	b.n	8000ecc <led_effect_callback+0x48>
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_UART_RxCpltCallback>:


/* This function called from UART interrupt handler , hence executes in interrupt context */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	//for(uint32_t i = 0 ; i < 4000 ; i++);

	if(! xQueueIsQueueFullFromISR(q_data))
 8000edc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f58 <HAL_UART_RxCpltCallback+0x84>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f004 fcc4 	bl	800586e <xQueueIsQueueFullFromISR>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d107      	bne.n	8000efc <HAL_UART_RxCpltCallback+0x28>
	{
		/*Enqueue data byte */
		xQueueSendFromISR(q_data , (void*)&user_data , NULL);
 8000eec:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <HAL_UART_RxCpltCallback+0x84>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4919      	ldr	r1, [pc, #100]	@ (8000f5c <HAL_UART_RxCpltCallback+0x88>)
 8000ef6:	f004 f969 	bl	80051cc <xQueueGenericSendFromISR>
 8000efa:	e013      	b.n	8000f24 <HAL_UART_RxCpltCallback+0x50>
	}else{
		if(user_data == '\n')
 8000efc:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <HAL_UART_RxCpltCallback+0x88>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b0a      	cmp	r3, #10
 8000f04:	d10e      	bne.n	8000f24 <HAL_UART_RxCpltCallback+0x50>
		{
			/*Make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void*)&dummy,NULL);
 8000f06:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <HAL_UART_RxCpltCallback+0x84>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f107 010f 	add.w	r1, r7, #15
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f004 faeb 	bl	80054ec <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data ,(void*)&user_data , NULL);
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <HAL_UART_RxCpltCallback+0x84>)
 8000f18:	6818      	ldr	r0, [r3, #0]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	490f      	ldr	r1, [pc, #60]	@ (8000f5c <HAL_UART_RxCpltCallback+0x88>)
 8000f20:	f004 f954 	bl	80051cc <xQueueGenericSendFromISR>
		}
	}

	/*Send notification to command handling task if user_data = '\n' */
	if( user_data == '\n' ){
 8000f24:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <HAL_UART_RxCpltCallback+0x88>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b0a      	cmp	r3, #10
 8000f2c:	d10a      	bne.n	8000f44 <HAL_UART_RxCpltCallback+0x70>
		/*send notification to command handling task */
		xTaskNotifyFromISR (handle_cmd_task,0,eNoAction,NULL);
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <HAL_UART_RxCpltCallback+0x8c>)
 8000f30:	6818      	ldr	r0, [r3, #0]
 8000f32:	2300      	movs	r3, #0
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	2300      	movs	r3, #0
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f005 fc74 	bl	800682c <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	 HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	4905      	ldr	r1, [pc, #20]	@ (8000f5c <HAL_UART_RxCpltCallback+0x88>)
 8000f48:	4806      	ldr	r0, [pc, #24]	@ (8000f64 <HAL_UART_RxCpltCallback+0x90>)
 8000f4a:	f002 ff1e 	bl	8003d8a <HAL_UART_Receive_IT>


}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000124 	.word	0x20000124
 8000f5c:	20000140 	.word	0x20000140
 8000f60:	20000110 	.word	0x20000110
 8000f64:	200000c8 	.word	0x200000c8

08000f68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d101      	bne.n	8000f7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f7a:	f000 ff87 	bl	8001e8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40001000 	.word	0x40001000

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <Error_Handler+0x8>

08000f98 <show_time_date_itm>:


#include "main.h"

void show_time_date_itm(void)
 {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000f9e:	f107 0318 	add.w	r3, r7, #24
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f006 ff0b 	bl	8007dc2 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2214      	movs	r2, #20
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f006 ff05 	bl	8007dc2 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4815      	ldr	r0, [pc, #84]	@ (8001014 <show_time_date_itm+0x7c>)
 8000fc0:	f002 f977 	bl	80032b2 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000fc4:	f107 0318 	add.w	r3, r7, #24
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4811      	ldr	r0, [pc, #68]	@ (8001014 <show_time_date_itm+0x7c>)
 8000fce:	f002 fa52 	bl	8003476 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <show_time_date_itm+0x44>
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <show_time_date_itm+0x80>)
 8000fda:	e000      	b.n	8000fde <show_time_date_itm+0x46>
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <show_time_date_itm+0x84>)
 8000fde:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000fe0:	793b      	ldrb	r3, [r7, #4]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	797b      	ldrb	r3, [r7, #5]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	4618      	mov	r0, r3
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	480b      	ldr	r0, [pc, #44]	@ (8001020 <show_time_date_itm+0x88>)
 8000ff4:	f006 fe70 	bl	8007cd8 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000ff8:	7e7b      	ldrb	r3, [r7, #25]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	7ebb      	ldrb	r3, [r7, #26]
 8000ffe:	461a      	mov	r2, r3
 8001000:	7efb      	ldrb	r3, [r7, #27]
 8001002:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001006:	4807      	ldr	r0, [pc, #28]	@ (8001024 <show_time_date_itm+0x8c>)
 8001008:	f006 fe66 	bl	8007cd8 <iprintf>

 }
 800100c:	bf00      	nop
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200000a8 	.word	0x200000a8
 8001018:	08008dd4 	.word	0x08008dd4
 800101c:	08008dd8 	.word	0x08008dd8
 8001020:	08008ddc 	.word	0x08008ddc
 8001024:	08008df0 	.word	0x08008df0

08001028 <rtc_configure_time>:

void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 8001042:	2200      	movs	r2, #0
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4803      	ldr	r0, [pc, #12]	@ (8001054 <rtc_configure_time+0x2c>)
 8001048:	f002 f899 	bl	800317e <HAL_RTC_SetTime>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200000a8 	.word	0x200000a8

08001058 <rtc_configure_date>:

void rtc_configure_date(RTC_DateTypeDef *date)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4803      	ldr	r0, [pc, #12]	@ (8001074 <rtc_configure_date+0x1c>)
 8001066:	f002 f982 	bl	800336e <HAL_RTC_SetDate>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200000a8 	.word	0x200000a8

08001078 <show_time_date>:

void show_time_date(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	@ 0x30
 800107c:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 800107e:	f107 0318 	add.w	r3, r7, #24
 8001082:	2204      	movs	r2, #4
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f006 fe9b 	bl	8007dc2 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2214      	movs	r2, #20
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f006 fe95 	bl	8007dc2 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	4619      	mov	r1, r3
 800109e:	4821      	ldr	r0, [pc, #132]	@ (8001124 <show_time_date+0xac>)
 80010a0:	f002 f907 	bl	80032b2 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	2200      	movs	r2, #0
 80010aa:	4619      	mov	r1, r3
 80010ac:	481d      	ldr	r0, [pc, #116]	@ (8001124 <show_time_date+0xac>)
 80010ae:	f002 f9e2 	bl	8003476 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <show_time_date+0x44>
 80010b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <show_time_date+0xb0>)
 80010ba:	e000      	b.n	80010be <show_time_date+0x46>
 80010bc:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <show_time_date+0xb4>)
 80010be:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 80010c0:	793b      	ldrb	r3, [r7, #4]
 80010c2:	4618      	mov	r0, r3
 80010c4:	797b      	ldrb	r3, [r7, #5]
 80010c6:	461a      	mov	r2, r3
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	4619      	mov	r1, r3
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	9302      	str	r3, [sp, #8]
 80010d0:	9101      	str	r1, [sp, #4]
 80010d2:	9200      	str	r2, [sp, #0]
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a16      	ldr	r2, [pc, #88]	@ (8001130 <show_time_date+0xb8>)
 80010d8:	4916      	ldr	r1, [pc, #88]	@ (8001134 <show_time_date+0xbc>)
 80010da:	4817      	ldr	r0, [pc, #92]	@ (8001138 <show_time_date+0xc0>)
 80010dc:	f006 fe0e 	bl	8007cfc <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <show_time_date+0xc4>)
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	2300      	movs	r3, #0
 80010e6:	f04f 32ff 	mov.w	r2, #4294967295
 80010ea:	4915      	ldr	r1, [pc, #84]	@ (8001140 <show_time_date+0xc8>)
 80010ec:	f003 ff6c 	bl	8004fc8 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 80010f0:	7e7b      	ldrb	r3, [r7, #25]
 80010f2:	461a      	mov	r2, r3
 80010f4:	7ebb      	ldrb	r3, [r7, #26]
 80010f6:	4619      	mov	r1, r3
 80010f8:	7efb      	ldrb	r3, [r7, #27]
 80010fa:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	460b      	mov	r3, r1
 8001102:	4910      	ldr	r1, [pc, #64]	@ (8001144 <show_time_date+0xcc>)
 8001104:	4810      	ldr	r0, [pc, #64]	@ (8001148 <show_time_date+0xd0>)
 8001106:	f006 fdf9 	bl	8007cfc <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <show_time_date+0xc4>)
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	2300      	movs	r3, #0
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	490d      	ldr	r1, [pc, #52]	@ (800114c <show_time_date+0xd4>)
 8001116:	f003 ff57 	bl	8004fc8 <xQueueGenericSend>
}
 800111a:	bf00      	nop
 800111c:	3720      	adds	r7, #32
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200000a8 	.word	0x200000a8
 8001128:	08008dd4 	.word	0x08008dd4
 800112c:	08008dd8 	.word	0x08008dd8
 8001130:	08008e00 	.word	0x08008e00
 8001134:	08008e14 	.word	0x08008e14
 8001138:	20000144 	.word	0x20000144
 800113c:	20000128 	.word	0x20000128
 8001140:	20000008 	.word	0x20000008
 8001144:	08008df0 	.word	0x08008df0
 8001148:	2000016c 	.word	0x2000016c
 800114c:	2000000c 	.word	0x2000000c

08001150 <getnumber>:

uint8_t getnumber(uint8_t *p,int len)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
	int value;

	if(len > 1)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	dd0f      	ble.n	8001180 <getnumber+0x30>
	{
		//value = ((p[0]-48 *10)+ (p[1]-48));
		value = ((p[0] - 48) * 10) + (p[1] - 48);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	461a      	mov	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3301      	adds	r3, #1
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	3b30      	subs	r3, #48	@ 0x30
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	e003      	b.n	8001188 <getnumber+0x38>
	}
	else
	{
		value = p[0] - 48;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	3b30      	subs	r3, #48	@ 0x30
 8001186:	60fb      	str	r3, [r7, #12]
	}

	return value;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	b2db      	uxtb	r3, r3
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <validate_rtc_information>:




int validate_rtc_information(RTC_TimeTypeDef *time,RTC_DateTypeDef *date)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	if(time)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00d      	beq.n	80011c4 <validate_rtc_information+0x2c>
	{
		if((time->Hours > 12)|| (time->Minutes >59) || (time->Seconds >59))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b0c      	cmp	r3, #12
 80011ae:	d807      	bhi.n	80011c0 <validate_rtc_information+0x28>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	785b      	ldrb	r3, [r3, #1]
 80011b4:	2b3b      	cmp	r3, #59	@ 0x3b
 80011b6:	d803      	bhi.n	80011c0 <validate_rtc_information+0x28>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	789b      	ldrb	r3, [r3, #2]
 80011bc:	2b3b      	cmp	r3, #59	@ 0x3b
 80011be:	d901      	bls.n	80011c4 <validate_rtc_information+0x2c>
			return 1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e015      	b.n	80011f0 <validate_rtc_information+0x58>
	}

	if(date)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d011      	beq.n	80011ee <validate_rtc_information+0x56>
	{
		if((date->Date > 31 ) || (date->WeekDay > 7) || (date->Year >99) || (date->Month >12))
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	789b      	ldrb	r3, [r3, #2]
 80011ce:	2b1f      	cmp	r3, #31
 80011d0:	d80b      	bhi.n	80011ea <validate_rtc_information+0x52>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b07      	cmp	r3, #7
 80011d8:	d807      	bhi.n	80011ea <validate_rtc_information+0x52>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	78db      	ldrb	r3, [r3, #3]
 80011de:	2b63      	cmp	r3, #99	@ 0x63
 80011e0:	d803      	bhi.n	80011ea <validate_rtc_information+0x52>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	785b      	ldrb	r3, [r3, #1]
 80011e6:	2b0c      	cmp	r3, #12
 80011e8:	d901      	bls.n	80011ee <validate_rtc_information+0x56>
			return 1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <validate_rtc_information+0x58>
	}

	return 0;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <HAL_MspInit+0x4c>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120a:	4a0f      	ldr	r2, [pc, #60]	@ (8001248 <HAL_MspInit+0x4c>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001210:	6453      	str	r3, [r2, #68]	@ 0x44
 8001212:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <HAL_MspInit+0x4c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <HAL_MspInit+0x4c>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	4a08      	ldr	r2, [pc, #32]	@ (8001248 <HAL_MspInit+0x4c>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800122c:	6413      	str	r3, [r2, #64]	@ 0x40
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_MspInit+0x4c>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a0c      	ldr	r2, [pc, #48]	@ (8001298 <HAL_RTC_MspInit+0x4c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d111      	bne.n	8001290 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800126c:	2302      	movs	r3, #2
 800126e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001270:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001274:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	4618      	mov	r0, r3
 800127c:	f001 fe1a 	bl	8002eb4 <HAL_RCCEx_PeriphCLKConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001286:	f7ff fe81 	bl	8000f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800128a:	4b04      	ldr	r3, [pc, #16]	@ (800129c <HAL_RTC_MspInit+0x50>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001290:	bf00      	nop
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40002800 	.word	0x40002800
 800129c:	42470e3c 	.word	0x42470e3c

080012a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	@ 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001334 <HAL_UART_MspInit+0x94>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d133      	bne.n	800132a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <HAL_UART_MspInit+0x98>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001338 <HAL_UART_MspInit+0x98>)
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d2:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <HAL_UART_MspInit+0x98>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <HAL_UART_MspInit+0x98>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a14      	ldr	r2, [pc, #80]	@ (8001338 <HAL_UART_MspInit+0x98>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_UART_MspInit+0x98>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012fa:	230c      	movs	r3, #12
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800130a:	2307      	movs	r3, #7
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4809      	ldr	r0, [pc, #36]	@ (800133c <HAL_UART_MspInit+0x9c>)
 8001316:	f000 ff4d 	bl	80021b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2106      	movs	r1, #6
 800131e:	2026      	movs	r0, #38	@ 0x26
 8001320:	f000 fe8c 	bl	800203c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001324:	2026      	movs	r0, #38	@ 0x26
 8001326:	f000 fea5 	bl	8002074 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	@ 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40004400 	.word	0x40004400
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000

08001340 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08e      	sub	sp, #56	@ 0x38
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	4b33      	ldr	r3, [pc, #204]	@ (8001424 <HAL_InitTick+0xe4>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001358:	4a32      	ldr	r2, [pc, #200]	@ (8001424 <HAL_InitTick+0xe4>)
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001360:	4b30      	ldr	r3, [pc, #192]	@ (8001424 <HAL_InitTick+0xe4>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001364:	f003 0310 	and.w	r3, r3, #16
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800136c:	f107 0210 	add.w	r2, r7, #16
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4611      	mov	r1, r2
 8001376:	4618      	mov	r0, r3
 8001378:	f001 fd6a 	bl	8002e50 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001382:	2b00      	cmp	r3, #0
 8001384:	d103      	bne.n	800138e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001386:	f001 fd3b 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 800138a:	6378      	str	r0, [r7, #52]	@ 0x34
 800138c:	e004      	b.n	8001398 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800138e:	f001 fd37 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 8001392:	4603      	mov	r3, r0
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800139a:	4a23      	ldr	r2, [pc, #140]	@ (8001428 <HAL_InitTick+0xe8>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	0c9b      	lsrs	r3, r3, #18
 80013a2:	3b01      	subs	r3, #1
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013a6:	4b21      	ldr	r3, [pc, #132]	@ (800142c <HAL_InitTick+0xec>)
 80013a8:	4a21      	ldr	r2, [pc, #132]	@ (8001430 <HAL_InitTick+0xf0>)
 80013aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	@ (800142c <HAL_InitTick+0xec>)
 80013ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013b4:	4a1d      	ldr	r2, [pc, #116]	@ (800142c <HAL_InitTick+0xec>)
 80013b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	@ (800142c <HAL_InitTick+0xec>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	@ (800142c <HAL_InitTick+0xec>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c6:	4b19      	ldr	r3, [pc, #100]	@ (800142c <HAL_InitTick+0xec>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013cc:	4817      	ldr	r0, [pc, #92]	@ (800142c <HAL_InitTick+0xec>)
 80013ce:	f002 f95f 	bl	8003690 <HAL_TIM_Base_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80013d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d11b      	bne.n	8001418 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013e0:	4812      	ldr	r0, [pc, #72]	@ (800142c <HAL_InitTick+0xec>)
 80013e2:	f002 f9af 	bl	8003744 <HAL_TIM_Base_Start_IT>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80013ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d111      	bne.n	8001418 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013f4:	2036      	movs	r0, #54	@ 0x36
 80013f6:	f000 fe3d 	bl	8002074 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d808      	bhi.n	8001412 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001400:	2200      	movs	r2, #0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	2036      	movs	r0, #54	@ 0x36
 8001406:	f000 fe19 	bl	800203c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800140a:	4a0a      	ldr	r2, [pc, #40]	@ (8001434 <HAL_InitTick+0xf4>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	e002      	b.n	8001418 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001418:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800141c:	4618      	mov	r0, r3
 800141e:	3738      	adds	r7, #56	@ 0x38
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	431bde83 	.word	0x431bde83
 800142c:	20000194 	.word	0x20000194
 8001430:	40001000 	.word	0x40001000
 8001434:	20000018 	.word	0x20000018

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <NMI_Handler+0x4>

08001440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <MemManage_Handler+0x4>

08001450 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <UsageFault_Handler+0x4>

08001460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <USART2_IRQHandler+0x10>)
 8001476:	f002 fcad 	bl	8003dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200000c8 	.word	0x200000c8

08001484 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001488:	4802      	ldr	r0, [pc, #8]	@ (8001494 <TIM6_DAC_IRQHandler+0x10>)
 800148a:	f002 f9cb 	bl	8003824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000194 	.word	0x20000194

08001498 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	e00a      	b.n	80014c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014aa:	f3af 8000 	nop.w
 80014ae:	4601      	mov	r1, r0
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	60ba      	str	r2, [r7, #8]
 80014b6:	b2ca      	uxtb	r2, r1
 80014b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	dbf0      	blt.n	80014aa <_read+0x12>
  }

  return len;
 80014c8:	687b      	ldr	r3, [r7, #4]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	e009      	b.n	80014f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	60ba      	str	r2, [r7, #8]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dbf1      	blt.n	80014e4 <_write+0x12>
  }
  return len;
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_close>:

int _close(int file)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001532:	605a      	str	r2, [r3, #4]
  return 0;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <_isatty>:

int _isatty(int file)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800157c:	4a14      	ldr	r2, [pc, #80]	@ (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001588:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a4:	f006 fc5c 	bl	8007e60 <__errno>
 80015a8:	4603      	mov	r3, r0
 80015aa:	220c      	movs	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b4:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ba:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	@ (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20020000 	.word	0x20020000
 80015d4:	00000400 	.word	0x00000400
 80015d8:	200001dc 	.word	0x200001dc
 80015dc:	200130f8 	.word	0x200130f8

080015e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <SystemInit+0x20>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ea:	4a05      	ldr	r2, [pc, #20]	@ (8001600 <SystemInit+0x20>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <menu_task>:

RTC_TimeTypeDef time;
RTC_DateTypeDef date;

void menu_task(void *param)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af02      	add	r7, sp, #8
 800160a:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int  option;

	const char* msg_menu = "===========================\n"
 800160c:	4b31      	ldr	r3, [pc, #196]	@ (80016d4 <menu_task+0xd0>)
 800160e:	60bb      	str	r3, [r7, #8]
								"Exit             --->2\n"
								"Enter your choice here :";

	while(1)
	{
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8001610:	4b31      	ldr	r3, [pc, #196]	@ (80016d8 <menu_task+0xd4>)
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	f107 0108 	add.w	r1, r7, #8
 8001618:	2300      	movs	r3, #0
 800161a:	f04f 32ff 	mov.w	r2, #4294967295
 800161e:	f003 fcd3 	bl	8004fc8 <xQueueGenericSend>

		//wait for menu commands
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	f04f 32ff 	mov.w	r2, #4294967295
 800162a:	9200      	str	r2, [sp, #0]
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	2000      	movs	r0, #0
 8001632:	f004 ff97 	bl	8006564 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d133      	bne.n	80016aa <menu_task+0xa6>
		{
			option = cmd->payload[0] - 48;
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	3b30      	subs	r3, #48	@ 0x30
 8001648:	613b      	str	r3, [r7, #16]
			switch(option)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d035      	beq.n	80016bc <menu_task+0xb8>
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	2b02      	cmp	r3, #2
 8001654:	dc20      	bgt.n	8001698 <menu_task+0x94>
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <menu_task+0x60>
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d00d      	beq.n	800167e <menu_task+0x7a>
 8001662:	e019      	b.n	8001698 <menu_task+0x94>
			{
			case 0:
				curr_state = sLedEffect;
 8001664:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <menu_task+0xd8>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_led_task,0,eNoAction);
 800166a:	4b1d      	ldr	r3, [pc, #116]	@ (80016e0 <menu_task+0xdc>)
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	2300      	movs	r3, #0
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2300      	movs	r3, #0
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	f004 fff4 	bl	8006664 <xTaskGenericNotify>
				break;
 800167c:	e01f      	b.n	80016be <menu_task+0xba>
			case 1:
				curr_state = sRtcMenu;
 800167e:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <menu_task+0xd8>)
 8001680:	2202      	movs	r2, #2
 8001682:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_rtc_task,0,eNoAction);
 8001684:	4b17      	ldr	r3, [pc, #92]	@ (80016e4 <menu_task+0xe0>)
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	2300      	movs	r3, #0
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2300      	movs	r3, #0
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	f004 ffe7 	bl	8006664 <xTaskGenericNotify>
				break;
 8001696:	e012      	b.n	80016be <menu_task+0xba>
			case 2: /*Implement exit */
				break;
			default:
				xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001698:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <menu_task+0xd4>)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	2300      	movs	r3, #0
 800169e:	f04f 32ff 	mov.w	r2, #4294967295
 80016a2:	4911      	ldr	r1, [pc, #68]	@ (80016e8 <menu_task+0xe4>)
 80016a4:	f003 fc90 	bl	8004fc8 <xQueueGenericSend>
				continue;
 80016a8:	e012      	b.n	80016d0 <menu_task+0xcc>
			}
		}
		else
		{
			//invalid entry
			xQueueSend(q_print, &msg_inv,portMAX_DELAY);
 80016aa:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <menu_task+0xd4>)
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	2300      	movs	r3, #0
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	490c      	ldr	r1, [pc, #48]	@ (80016e8 <menu_task+0xe4>)
 80016b6:	f003 fc87 	bl	8004fc8 <xQueueGenericSend>
			continue;
 80016ba:	e009      	b.n	80016d0 <menu_task+0xcc>
				break;
 80016bc:	bf00      	nop
		}

		//wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2300      	movs	r3, #0
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	2000      	movs	r0, #0
 80016cc:	f004 ff4a 	bl	8006564 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80016d0:	e79e      	b.n	8001610 <menu_task+0xc>
 80016d2:	bf00      	nop
 80016d4:	08008e44 	.word	0x08008e44
 80016d8:	20000128 	.word	0x20000128
 80016dc:	20000141 	.word	0x20000141
 80016e0:	2000011c 	.word	0x2000011c
 80016e4:	20000120 	.word	0x20000120
 80016e8:	20000014 	.word	0x20000014

080016ec <print_task>:
}



void print_task(void *param)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1)
	{
		xQueueReceive(q_print,&msg,portMAX_DELAY);
 80016f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <print_task+0x38>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f107 010c 	add.w	r1, r7, #12
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fe11 	bl	8005328 <xQueueReceive>
		HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen((char*)msg),HAL_MAX_DELAY);
 8001706:	68fc      	ldr	r4, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe fd6a 	bl	80001e4 <strlen>
 8001710:	4603      	mov	r3, r0
 8001712:	b29a      	uxth	r2, r3
 8001714:	f04f 33ff 	mov.w	r3, #4294967295
 8001718:	4621      	mov	r1, r4
 800171a:	4803      	ldr	r0, [pc, #12]	@ (8001728 <print_task+0x3c>)
 800171c:	f002 faaa 	bl	8003c74 <HAL_UART_Transmit>
		xQueueReceive(q_print,&msg,portMAX_DELAY);
 8001720:	bf00      	nop
 8001722:	e7e7      	b.n	80016f4 <print_task+0x8>
 8001724:	20000128 	.word	0x20000128
 8001728:	200000c8 	.word	0x200000c8

0800172c <cmd_handler_task>:
	}
}

void cmd_handler_task(void *param)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af02      	add	r7, sp, #8
 8001732:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;
	while(1)
	{
		/*TODO :Implement notify wait*/
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2300      	movs	r3, #0
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2000      	movs	r0, #0
 8001742:	f004 ff0f 	bl	8006564 <xTaskGenericNotifyWait>
 8001746:	61f8      	str	r0, [r7, #28]

		if(ret == pdTRUE)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d1f2      	bne.n	8001734 <cmd_handler_task+0x8>
		{
			/*TODO :Process the user data(command)stored in input data queue*/

			process_command(&cmd);
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fad8 	bl	8001d08 <process_command>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001758:	e7ec      	b.n	8001734 <cmd_handler_task+0x8>
	...

0800175c <led_task>:
	}
}


void led_task(void *param)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af02      	add	r7, sp, #8
 8001762:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 8001764:	4b3e      	ldr	r3, [pc, #248]	@ (8001860 <led_task+0x104>)
 8001766:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		/*TODO: Wait for notification (Notify wait) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2300      	movs	r3, #0
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	2000      	movs	r0, #0
 8001776:	f004 fef5 	bl	8006564 <xTaskGenericNotifyWait>

		/*TODO: Print LED menu */
		xQueueSend(q_print,&msg_led,portMAX_DELAY);
 800177a:	4b3a      	ldr	r3, [pc, #232]	@ (8001864 <led_task+0x108>)
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	f107 010c 	add.w	r1, r7, #12
 8001782:	2300      	movs	r3, #0
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	f003 fc1e 	bl	8004fc8 <xQueueGenericSend>

		/*TODO: wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	9200      	str	r2, [sp, #0]
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2000      	movs	r0, #0
 800179c:	f004 fee2 	bl	8006564 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d843      	bhi.n	8001834 <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	492e      	ldr	r1, [pc, #184]	@ (8001868 <led_task+0x10c>)
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fd0d 	bl	80001d0 <strcmp>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <led_task+0x66>
				led_effect_stop();
 80017bc:	f7fe ff86 	bl	80006cc <led_effect_stop>
 80017c0:	e040      	b.n	8001844 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	4929      	ldr	r1, [pc, #164]	@ (800186c <led_task+0x110>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fd02 	bl	80001d0 <strcmp>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d103      	bne.n	80017da <led_task+0x7e>
				led_effect(1);
 80017d2:	2001      	movs	r0, #1
 80017d4:	f7fe ff9a 	bl	800070c <led_effect>
 80017d8:	e034      	b.n	8001844 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	4924      	ldr	r1, [pc, #144]	@ (8001870 <led_task+0x114>)
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fcf6 	bl	80001d0 <strcmp>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d103      	bne.n	80017f2 <led_task+0x96>
				led_effect(2);
 80017ea:	2002      	movs	r0, #2
 80017ec:	f7fe ff8e 	bl	800070c <led_effect>
 80017f0:	e028      	b.n	8001844 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	491f      	ldr	r1, [pc, #124]	@ (8001874 <led_task+0x118>)
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fcea 	bl	80001d0 <strcmp>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d103      	bne.n	800180a <led_task+0xae>
				led_effect(3);
 8001802:	2003      	movs	r0, #3
 8001804:	f7fe ff82 	bl	800070c <led_effect>
 8001808:	e01c      	b.n	8001844 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	491a      	ldr	r1, [pc, #104]	@ (8001878 <led_task+0x11c>)
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fcde 	bl	80001d0 <strcmp>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d103      	bne.n	8001822 <led_task+0xc6>
				led_effect(4);
 800181a:	2004      	movs	r0, #4
 800181c:	f7fe ff76 	bl	800070c <led_effect>
 8001820:	e010      	b.n	8001844 <led_task+0xe8>
			else
			{
				xQueueSend(q_print,&msg_inv,portMAX_DELAY); /*TODO: print invalid message */
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <led_task+0x108>)
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	2300      	movs	r3, #0
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	4913      	ldr	r1, [pc, #76]	@ (800187c <led_task+0x120>)
 800182e:	f003 fbcb 	bl	8004fc8 <xQueueGenericSend>
 8001832:	e007      	b.n	8001844 <led_task+0xe8>
			}
		}
		else
		{
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001834:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <led_task+0x108>)
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	2300      	movs	r3, #0
 800183a:	f04f 32ff 	mov.w	r2, #4294967295
 800183e:	490f      	ldr	r1, [pc, #60]	@ (800187c <led_task+0x120>)
 8001840:	f003 fbc2 	bl	8004fc8 <xQueueGenericSend>

		}
			/*TODO: print invalid message */

		/*TODO : update state variable */
		curr_state = sMainMenu;
 8001844:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <led_task+0x124>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]

		/*TODO : Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 800184a:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <led_task+0x128>)
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	2300      	movs	r3, #0
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2300      	movs	r3, #0
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	f004 ff04 	bl	8006664 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800185c:	e784      	b.n	8001768 <led_task+0xc>
 800185e:	bf00      	nop
 8001860:	08008edc 	.word	0x08008edc
 8001864:	20000128 	.word	0x20000128
 8001868:	08008f54 	.word	0x08008f54
 800186c:	08008f5c 	.word	0x08008f5c
 8001870:	08008f60 	.word	0x08008f60
 8001874:	08008f64 	.word	0x08008f64
 8001878:	08008f68 	.word	0x08008f68
 800187c:	20000014 	.word	0x20000014
 8001880:	20000141 	.word	0x20000141
 8001884:	20000114 	.word	0x20000114

08001888 <rtc_task>:

	}
}

void rtc_task(void *param)
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b095      	sub	sp, #84	@ 0x54
 800188c:	af02      	add	r7, sp, #8
 800188e:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 8001890:	4bb3      	ldr	r3, [pc, #716]	@ (8001b60 <rtc_task+0x2d8>)
 8001892:	637b      	str	r3, [r7, #52]	@ 0x34
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 8001894:	4bb3      	ldr	r3, [pc, #716]	@ (8001b64 <rtc_task+0x2dc>)
 8001896:	633b      	str	r3, [r7, #48]	@ 0x30
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 8001898:	4bb3      	ldr	r3, [pc, #716]	@ (8001b68 <rtc_task+0x2e0>)
 800189a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 800189c:	4bb3      	ldr	r3, [pc, #716]	@ (8001b6c <rtc_task+0x2e4>)
 800189e:	62bb      	str	r3, [r7, #40]	@ 0x28
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 80018a0:	4bb3      	ldr	r3, [pc, #716]	@ (8001b70 <rtc_task+0x2e8>)
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24

	const char *msg_rtc_dd  = "Enter date(1-31):";
 80018a4:	4bb3      	ldr	r3, [pc, #716]	@ (8001b74 <rtc_task+0x2ec>)
 80018a6:	623b      	str	r3, [r7, #32]
	const char *msg_rtc_mo  ="Enter month(1-12):";
 80018a8:	4bb3      	ldr	r3, [pc, #716]	@ (8001b78 <rtc_task+0x2f0>)
 80018aa:	61fb      	str	r3, [r7, #28]
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 80018ac:	4bb3      	ldr	r3, [pc, #716]	@ (8001b7c <rtc_task+0x2f4>)
 80018ae:	61bb      	str	r3, [r7, #24]
	const char *msg_rtc_yr  = "Enter year(0-99):";
 80018b0:	4bb3      	ldr	r3, [pc, #716]	@ (8001b80 <rtc_task+0x2f8>)
 80018b2:	617b      	str	r3, [r7, #20]

	const char *msg_conf = "Configuration successful\n";
 80018b4:	4bb3      	ldr	r3, [pc, #716]	@ (8001b84 <rtc_task+0x2fc>)
 80018b6:	613b      	str	r3, [r7, #16]
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 80018b8:	4bb3      	ldr	r3, [pc, #716]	@ (8001b88 <rtc_task+0x300>)
 80018ba:	60fb      	str	r3, [r7, #12]


	while(1){
		/*TODO: Notify wait (wait till someone notifies)		 */

		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2300      	movs	r3, #0
 80018c4:	2200      	movs	r2, #0
 80018c6:	2100      	movs	r1, #0
 80018c8:	2000      	movs	r0, #0
 80018ca:	f004 fe4b 	bl	8006564 <xTaskGenericNotifyWait>

		/*TODO : Print the menu and show current date and time information */
		xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 80018ce:	4baf      	ldr	r3, [pc, #700]	@ (8001b8c <rtc_task+0x304>)
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80018d6:	2300      	movs	r3, #0
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295
 80018dc:	f003 fb74 	bl	8004fc8 <xQueueGenericSend>
		show_time_date();
 80018e0:	f7ff fbca 	bl	8001078 <show_time_date>
		xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 80018e4:	4ba9      	ldr	r3, [pc, #676]	@ (8001b8c <rtc_task+0x304>)
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80018ec:	2300      	movs	r3, #0
 80018ee:	f04f 32ff 	mov.w	r2, #4294967295
 80018f2:	f003 fb69 	bl	8004fc8 <xQueueGenericSend>


		while(curr_state != sMainMenu){
 80018f6:	e1e9      	b.n	8001ccc <rtc_task+0x444>

			/*TODO: Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	9200      	str	r2, [sp, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	2000      	movs	r0, #0
 8001908:	f004 fe2c 	bl	8006564 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	647b      	str	r3, [r7, #68]	@ 0x44

			switch(curr_state)
 8001910:	4b9f      	ldr	r3, [pc, #636]	@ (8001b90 <rtc_task+0x308>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	3b02      	subs	r3, #2
 8001916:	2b03      	cmp	r3, #3
 8001918:	f200 81d8 	bhi.w	8001ccc <rtc_task+0x444>
 800191c:	a201      	add	r2, pc, #4	@ (adr r2, 8001924 <rtc_task+0x9c>)
 800191e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001922:	bf00      	nop
 8001924:	08001935 	.word	0x08001935
 8001928:	080019e9 	.word	0x080019e9
 800192c:	08001ad5 	.word	0x08001ad5
 8001930:	08001c43 	.word	0x08001c43
			      int  menu_code;
				case sRtcMenu:
				{

					/*TODO: process RTC menu commands */
					if(cmd->len == 1)
 8001934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d148      	bne.n	80019ce <rtc_task+0x146>
					{
						menu_code = cmd->payload[0] - 48;
 800193c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	3b30      	subs	r3, #48	@ 0x30
 8001942:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001946:	2b03      	cmp	r3, #3
 8001948:	d835      	bhi.n	80019b6 <rtc_task+0x12e>
 800194a:	a201      	add	r2, pc, #4	@ (adr r2, 8001950 <rtc_task+0xc8>)
 800194c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001950:	08001961 	.word	0x08001961
 8001954:	0800197b 	.word	0x0800197b
 8001958:	08001995 	.word	0x08001995
 800195c:	080019af 	.word	0x080019af

						switch(menu_code)
						{
						case 0:
							curr_state = sRtcTimeConfig;
 8001960:	4b8b      	ldr	r3, [pc, #556]	@ (8001b90 <rtc_task+0x308>)
 8001962:	2203      	movs	r2, #3
 8001964:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY);
 8001966:	4b89      	ldr	r3, [pc, #548]	@ (8001b8c <rtc_task+0x304>)
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800196e:	2300      	movs	r3, #0
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	f003 fb28 	bl	8004fc8 <xQueueGenericSend>
							break;
 8001978:	e035      	b.n	80019e6 <rtc_task+0x15e>
						case 1:
							curr_state = sRtcDateConfig;
 800197a:	4b85      	ldr	r3, [pc, #532]	@ (8001b90 <rtc_task+0x308>)
 800197c:	2204      	movs	r2, #4
 800197e:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY);
 8001980:	4b82      	ldr	r3, [pc, #520]	@ (8001b8c <rtc_task+0x304>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	f107 0120 	add.w	r1, r7, #32
 8001988:	2300      	movs	r3, #0
 800198a:	f04f 32ff 	mov.w	r2, #4294967295
 800198e:	f003 fb1b 	bl	8004fc8 <xQueueGenericSend>
							break;
 8001992:	e028      	b.n	80019e6 <rtc_task+0x15e>
						case 2:
							curr_state = sRtcReport;
 8001994:	4b7e      	ldr	r3, [pc, #504]	@ (8001b90 <rtc_task+0x308>)
 8001996:	2205      	movs	r2, #5
 8001998:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_report,portMAX_DELAY);
 800199a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b8c <rtc_task+0x304>)
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	f107 010c 	add.w	r1, r7, #12
 80019a2:	2300      	movs	r3, #0
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295
 80019a8:	f003 fb0e 	bl	8004fc8 <xQueueGenericSend>
							break;
 80019ac:	e01b      	b.n	80019e6 <rtc_task+0x15e>
						case 3:
							curr_state = sMainMenu;
 80019ae:	4b78      	ldr	r3, [pc, #480]	@ (8001b90 <rtc_task+0x308>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
							break;
 80019b4:	e017      	b.n	80019e6 <rtc_task+0x15e>
						default:
							curr_state = sMainMenu;
 80019b6:	4b76      	ldr	r3, [pc, #472]	@ (8001b90 <rtc_task+0x308>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80019bc:	4b73      	ldr	r3, [pc, #460]	@ (8001b8c <rtc_task+0x304>)
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	2300      	movs	r3, #0
 80019c2:	f04f 32ff 	mov.w	r2, #4294967295
 80019c6:	4973      	ldr	r1, [pc, #460]	@ (8001b94 <rtc_task+0x30c>)
 80019c8:	f003 fafe 	bl	8004fc8 <xQueueGenericSend>
					else
					{
						curr_state = sMainMenu;
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
					}
					break;
 80019cc:	e17e      	b.n	8001ccc <rtc_task+0x444>
						curr_state = sMainMenu;
 80019ce:	4b70      	ldr	r3, [pc, #448]	@ (8001b90 <rtc_task+0x308>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80019d4:	4b6d      	ldr	r3, [pc, #436]	@ (8001b8c <rtc_task+0x304>)
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	2300      	movs	r3, #0
 80019da:	f04f 32ff 	mov.w	r2, #4294967295
 80019de:	496d      	ldr	r1, [pc, #436]	@ (8001b94 <rtc_task+0x30c>)
 80019e0:	f003 faf2 	bl	8004fc8 <xQueueGenericSend>
					break;
 80019e4:	e172      	b.n	8001ccc <rtc_task+0x444>
 80019e6:	e171      	b.n	8001ccc <rtc_task+0x444>
				case sRtcTimeConfig:
				{
					/*TODO : get hh, mm, ss infor and configure RTC */

					/*TODO: take care of invalid entries */
					switch(rtc_state)
 80019e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001b98 <rtc_task+0x310>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d03d      	beq.n	8001a6c <rtc_task+0x1e4>
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	f300 8168 	bgt.w	8001cc6 <rtc_task+0x43e>
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <rtc_task+0x178>
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d01b      	beq.n	8001a36 <rtc_task+0x1ae>
						curr_state = sMainMenu;
						rtc_state =0;
						break;
					}
					}
					break;}
 80019fe:	e162      	b.n	8001cc6 <rtc_task+0x43e>
						uint8_t hour = getnumber(cmd->payload ,cmd->len);
 8001a00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	4619      	mov	r1, r3
 8001a08:	4610      	mov	r0, r2
 8001a0a:	f7ff fba1 	bl	8001150 <getnumber>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
						time.Hours = hour;
 8001a14:	4a61      	ldr	r2, [pc, #388]	@ (8001b9c <rtc_task+0x314>)
 8001a16:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001a1a:	7013      	strb	r3, [r2, #0]
						rtc_state = MM_CONFIG;
 8001a1c:	4b5e      	ldr	r3, [pc, #376]	@ (8001b98 <rtc_task+0x310>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
						xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 8001a22:	4b5a      	ldr	r3, [pc, #360]	@ (8001b8c <rtc_task+0x304>)
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	f003 faca 	bl	8004fc8 <xQueueGenericSend>
						break;
 8001a34:	e04d      	b.n	8001ad2 <rtc_task+0x24a>
						uint8_t min = getnumber(cmd->payload ,cmd->len);
 8001a36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4610      	mov	r0, r2
 8001a40:	f7ff fb86 	bl	8001150 <getnumber>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
						time.Minutes = min;
 8001a4a:	4a54      	ldr	r2, [pc, #336]	@ (8001b9c <rtc_task+0x314>)
 8001a4c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001a50:	7053      	strb	r3, [r2, #1]
						rtc_state = SS_CONFIG;
 8001a52:	4b51      	ldr	r3, [pc, #324]	@ (8001b98 <rtc_task+0x310>)
 8001a54:	2202      	movs	r2, #2
 8001a56:	601a      	str	r2, [r3, #0]
						xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 8001a58:	4b4c      	ldr	r3, [pc, #304]	@ (8001b8c <rtc_task+0x304>)
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001a60:	2300      	movs	r3, #0
 8001a62:	f04f 32ff 	mov.w	r2, #4294967295
 8001a66:	f003 faaf 	bl	8004fc8 <xQueueGenericSend>
						break;
 8001a6a:	e032      	b.n	8001ad2 <rtc_task+0x24a>
						uint8_t sec = getnumber(cmd->payload ,cmd->len);
 8001a6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	4619      	mov	r1, r3
 8001a74:	4610      	mov	r0, r2
 8001a76:	f7ff fb6b 	bl	8001150 <getnumber>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
						time.Seconds = sec;
 8001a80:	4a46      	ldr	r2, [pc, #280]	@ (8001b9c <rtc_task+0x314>)
 8001a82:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001a86:	7093      	strb	r3, [r2, #2]
						if(!validate_rtc_information(&time,NULL))
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4844      	ldr	r0, [pc, #272]	@ (8001b9c <rtc_task+0x314>)
 8001a8c:	f7ff fb84 	bl	8001198 <validate_rtc_information>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10e      	bne.n	8001ab4 <rtc_task+0x22c>
							rtc_configure_time(&time);
 8001a96:	4841      	ldr	r0, [pc, #260]	@ (8001b9c <rtc_task+0x314>)
 8001a98:	f7ff fac6 	bl	8001028 <rtc_configure_time>
							xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b8c <rtc_task+0x304>)
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	f107 0110 	add.w	r1, r7, #16
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aaa:	f003 fa8d 	bl	8004fc8 <xQueueGenericSend>
							show_time_date();
 8001aae:	f7ff fae3 	bl	8001078 <show_time_date>
 8001ab2:	e007      	b.n	8001ac4 <rtc_task+0x23c>
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001ab4:	4b35      	ldr	r3, [pc, #212]	@ (8001b8c <rtc_task+0x304>)
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f04f 32ff 	mov.w	r2, #4294967295
 8001abe:	4935      	ldr	r1, [pc, #212]	@ (8001b94 <rtc_task+0x30c>)
 8001ac0:	f003 fa82 	bl	8004fc8 <xQueueGenericSend>
						curr_state = sMainMenu;
 8001ac4:	4b32      	ldr	r3, [pc, #200]	@ (8001b90 <rtc_task+0x308>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
						rtc_state =0;
 8001aca:	4b33      	ldr	r3, [pc, #204]	@ (8001b98 <rtc_task+0x310>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
						break;
 8001ad0:	bf00      	nop
					break;}
 8001ad2:	e0f8      	b.n	8001cc6 <rtc_task+0x43e>

					/*TODO : get date, month, day , year info and configure RTC */

					/*TODO: take care of invalid entries */

					switch(rtc_state)
 8001ad4:	4b30      	ldr	r3, [pc, #192]	@ (8001b98 <rtc_task+0x310>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	f200 80f6 	bhi.w	8001cca <rtc_task+0x442>
 8001ade:	a201      	add	r2, pc, #4	@ (adr r2, 8001ae4 <rtc_task+0x25c>)
 8001ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae4:	08001af5 	.word	0x08001af5
 8001ae8:	08001b2b 	.word	0x08001b2b
 8001aec:	08001bdb 	.word	0x08001bdb
 8001af0:	08001ba5 	.word	0x08001ba5
					{
					case DATE_CONFIG:
					{
						uint8_t d = getnumber(cmd->payload,cmd->len);
 8001af4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001af6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	4619      	mov	r1, r3
 8001afc:	4610      	mov	r0, r2
 8001afe:	f7ff fb27 	bl	8001150 <getnumber>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
						date.Date = d;
 8001b08:	4a25      	ldr	r2, [pc, #148]	@ (8001ba0 <rtc_task+0x318>)
 8001b0a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001b0e:	7093      	strb	r3, [r2, #2]
						rtc_state = MONTH_CONFIG;
 8001b10:	4b21      	ldr	r3, [pc, #132]	@ (8001b98 <rtc_task+0x310>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
						xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 8001b16:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <rtc_task+0x304>)
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	f107 011c 	add.w	r1, r7, #28
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	f003 fa50 	bl	8004fc8 <xQueueGenericSend>
						break;
 8001b28:	e08a      	b.n	8001c40 <rtc_task+0x3b8>
					}

					case MONTH_CONFIG:
					{
						uint8_t month = getnumber(cmd->payload,cmd->len);
 8001b2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4619      	mov	r1, r3
 8001b32:	4610      	mov	r0, r2
 8001b34:	f7ff fb0c 	bl	8001150 <getnumber>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
						date.Month = month;
 8001b3e:	4a18      	ldr	r2, [pc, #96]	@ (8001ba0 <rtc_task+0x318>)
 8001b40:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8001b44:	7053      	strb	r3, [r2, #1]
						rtc_state = DAY_CONFIG;
 8001b46:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <rtc_task+0x310>)
 8001b48:	2203      	movs	r2, #3
 8001b4a:	601a      	str	r2, [r3, #0]
						xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <rtc_task+0x304>)
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	f107 0118 	add.w	r1, r7, #24
 8001b54:	2300      	movs	r3, #0
 8001b56:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5a:	f003 fa35 	bl	8004fc8 <xQueueGenericSend>
						break;
 8001b5e:	e06f      	b.n	8001c40 <rtc_task+0x3b8>
 8001b60:	08008f6c 	.word	0x08008f6c
 8001b64:	08008fb8 	.word	0x08008fb8
 8001b68:	0800905c 	.word	0x0800905c
 8001b6c:	08009070 	.word	0x08009070
 8001b70:	08009088 	.word	0x08009088
 8001b74:	080090a0 	.word	0x080090a0
 8001b78:	080090b4 	.word	0x080090b4
 8001b7c:	080090c8 	.word	0x080090c8
 8001b80:	080090e0 	.word	0x080090e0
 8001b84:	080090f4 	.word	0x080090f4
 8001b88:	08009110 	.word	0x08009110
 8001b8c:	20000128 	.word	0x20000128
 8001b90:	20000141 	.word	0x20000141
 8001b94:	20000014 	.word	0x20000014
 8001b98:	200001f8 	.word	0x200001f8
 8001b9c:	200001e0 	.word	0x200001e0
 8001ba0:	200001f4 	.word	0x200001f4
					}

					case DAY_CONFIG:
					{
						uint8_t day = getnumber(cmd->payload,cmd->len);
 8001ba4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f7ff facf 	bl	8001150 <getnumber>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
						date.WeekDay = day;
 8001bb8:	4a4c      	ldr	r2, [pc, #304]	@ (8001cec <rtc_task+0x464>)
 8001bba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001bbe:	7013      	strb	r3, [r2, #0]
						rtc_state = YEAR_CONFIG;
 8001bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf0 <rtc_task+0x468>)
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	601a      	str	r2, [r3, #0]
						xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 8001bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf4 <rtc_task+0x46c>)
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	f107 0114 	add.w	r1, r7, #20
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd4:	f003 f9f8 	bl	8004fc8 <xQueueGenericSend>
						break;
 8001bd8:	e032      	b.n	8001c40 <rtc_task+0x3b8>
					}

					case YEAR_CONFIG:
					{
						uint8_t year = getnumber(cmd->payload,cmd->len);
 8001bda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	4619      	mov	r1, r3
 8001be2:	4610      	mov	r0, r2
 8001be4:	f7ff fab4 	bl	8001150 <getnumber>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
						date.Year = year;
 8001bee:	4a3f      	ldr	r2, [pc, #252]	@ (8001cec <rtc_task+0x464>)
 8001bf0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001bf4:	70d3      	strb	r3, [r2, #3]

						if(!validate_rtc_information(NULL,&date))
 8001bf6:	493d      	ldr	r1, [pc, #244]	@ (8001cec <rtc_task+0x464>)
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f7ff facd 	bl	8001198 <validate_rtc_information>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10e      	bne.n	8001c22 <rtc_task+0x39a>
						{
								rtc_configure_date(&date);
 8001c04:	4839      	ldr	r0, [pc, #228]	@ (8001cec <rtc_task+0x464>)
 8001c06:	f7ff fa27 	bl	8001058 <rtc_configure_date>
								xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001c0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf4 <rtc_task+0x46c>)
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	f107 0110 	add.w	r1, r7, #16
 8001c12:	2300      	movs	r3, #0
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295
 8001c18:	f003 f9d6 	bl	8004fc8 <xQueueGenericSend>
								show_time_date();
 8001c1c:	f7ff fa2c 	bl	8001078 <show_time_date>
 8001c20:	e007      	b.n	8001c32 <rtc_task+0x3aa>
						}
						else
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001c22:	4b34      	ldr	r3, [pc, #208]	@ (8001cf4 <rtc_task+0x46c>)
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	2300      	movs	r3, #0
 8001c28:	f04f 32ff 	mov.w	r2, #4294967295
 8001c2c:	4932      	ldr	r1, [pc, #200]	@ (8001cf8 <rtc_task+0x470>)
 8001c2e:	f003 f9cb 	bl	8004fc8 <xQueueGenericSend>

						curr_state = sMainMenu;
 8001c32:	4b32      	ldr	r3, [pc, #200]	@ (8001cfc <rtc_task+0x474>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
						rtc_state = 0;
 8001c38:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf0 <rtc_task+0x468>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
						break;
 8001c3e:	bf00      	nop

					}
					}

					break;}
 8001c40:	e043      	b.n	8001cca <rtc_task+0x442>

				case sRtcReport:{
					/*TODO: enable or disable RTC current time reporting over ITM printf */
					if(cmd->len == 1)
 8001c42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d131      	bne.n	8001cae <rtc_task+0x426>
					{
						if(cmd->payload[0] == 'y'){
 8001c4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b79      	cmp	r3, #121	@ 0x79
 8001c50:	d115      	bne.n	8001c7e <rtc_task+0x3f6>
							if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001c52:	4b2b      	ldr	r3, [pc, #172]	@ (8001d00 <rtc_task+0x478>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f005 fad0 	bl	80071fc <xTimerIsTimerActive>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d12d      	bne.n	8001cbe <rtc_task+0x436>
								xTimerStart(rtc_timer,portMAX_DELAY);
 8001c62:	4b27      	ldr	r3, [pc, #156]	@ (8001d00 <rtc_task+0x478>)
 8001c64:	681c      	ldr	r4, [r3, #0]
 8001c66:	f004 f8cb 	bl	8005e00 <xTaskGetTickCount>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2300      	movs	r3, #0
 8001c74:	2101      	movs	r1, #1
 8001c76:	4620      	mov	r0, r4
 8001c78:	f004 ffd6 	bl	8006c28 <xTimerGenericCommand>
 8001c7c:	e01f      	b.n	8001cbe <rtc_task+0x436>
						}else if (cmd->payload[0] == 'n'){
 8001c7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b6e      	cmp	r3, #110	@ 0x6e
 8001c84:	d10a      	bne.n	8001c9c <rtc_task+0x414>
							xTimerStop(rtc_timer,portMAX_DELAY);
 8001c86:	4b1e      	ldr	r3, [pc, #120]	@ (8001d00 <rtc_task+0x478>)
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2300      	movs	r3, #0
 8001c92:	2200      	movs	r2, #0
 8001c94:	2103      	movs	r1, #3
 8001c96:	f004 ffc7 	bl	8006c28 <xTimerGenericCommand>
 8001c9a:	e010      	b.n	8001cbe <rtc_task+0x436>
						}else{
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001c9c:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <rtc_task+0x46c>)
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca6:	4914      	ldr	r1, [pc, #80]	@ (8001cf8 <rtc_task+0x470>)
 8001ca8:	f003 f98e 	bl	8004fc8 <xQueueGenericSend>
 8001cac:	e007      	b.n	8001cbe <rtc_task+0x436>
						}
					}else
					    xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001cae:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <rtc_task+0x46c>)
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	490f      	ldr	r1, [pc, #60]	@ (8001cf8 <rtc_task+0x470>)
 8001cba:	f003 f985 	bl	8004fc8 <xQueueGenericSend>
					curr_state = sMainMenu;
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <rtc_task+0x474>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
					break;}
 8001cc4:	e002      	b.n	8001ccc <rtc_task+0x444>
					break;}
 8001cc6:	bf00      	nop
 8001cc8:	e000      	b.n	8001ccc <rtc_task+0x444>
					break;}
 8001cca:	bf00      	nop
		while(curr_state != sMainMenu){
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <rtc_task+0x474>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f47f ae11 	bne.w	80018f8 <rtc_task+0x70>
			}// switch end

		} //while end

		   /*TODO : Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <rtc_task+0x47c>)
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	f004 fcbe 	bl	8006664 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001ce8:	e5e8      	b.n	80018bc <rtc_task+0x34>
 8001cea:	bf00      	nop
 8001cec:	200001f4 	.word	0x200001f4
 8001cf0:	200001f8 	.word	0x200001f8
 8001cf4:	20000128 	.word	0x20000128
 8001cf8:	20000014 	.word	0x20000014
 8001cfc:	20000141 	.word	0x20000141
 8001d00:	2000013c 	.word	0x2000013c
 8001d04:	20000114 	.word	0x20000114

08001d08 <process_command>:
		}//while super loop end
}


void process_command(command_t *cmd)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f835 	bl	8001d80 <extract_command>

	switch(curr_state)
 8001d16:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <process_command+0x68>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b05      	cmp	r3, #5
 8001d1c:	dc24      	bgt.n	8001d68 <process_command+0x60>
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	da18      	bge.n	8001d54 <process_command+0x4c>
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <process_command+0x24>
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d00a      	beq.n	8001d40 <process_command+0x38>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
		break;

	}

}
 8001d2a:	e01d      	b.n	8001d68 <process_command+0x60>
			xTaskNotify(handle_menu_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001d2c:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <process_command+0x6c>)
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	2300      	movs	r3, #0
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2303      	movs	r3, #3
 8001d38:	2100      	movs	r1, #0
 8001d3a:	f004 fc93 	bl	8006664 <xTaskGenericNotify>
		break;
 8001d3e:	e013      	b.n	8001d68 <process_command+0x60>
			xTaskNotify(handle_led_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001d40:	4b0d      	ldr	r3, [pc, #52]	@ (8001d78 <process_command+0x70>)
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	2300      	movs	r3, #0
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	f004 fc89 	bl	8006664 <xTaskGenericNotify>
		break;
 8001d52:	e009      	b.n	8001d68 <process_command+0x60>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001d54:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <process_command+0x74>)
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	2303      	movs	r3, #3
 8001d60:	2100      	movs	r1, #0
 8001d62:	f004 fc7f 	bl	8006664 <xTaskGenericNotify>
		break;
 8001d66:	bf00      	nop
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000141 	.word	0x20000141
 8001d74:	20000114 	.word	0x20000114
 8001d78:	2000011c 	.word	0x2000011c
 8001d7c:	20000120 	.word	0x20000120

08001d80 <extract_command>:

int extract_command(command_t *cmd)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t  status;

	status = uxQueueMessagesWaiting(q_data );
 8001d88:	4b19      	ldr	r3, [pc, #100]	@ (8001df0 <extract_command+0x70>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 fc3f 	bl	8005610 <uxQueueMessagesWaiting>
 8001d92:	4603      	mov	r3, r0
 8001d94:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d102      	bne.n	8001da2 <extract_command+0x22>
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001da0:	e022      	b.n	8001de8 <extract_command+0x68>
	uint8_t i =0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(q_data,&item,0);
 8001da6:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <extract_command+0x70>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f107 010f 	add.w	r1, r7, #15
 8001dae:	2200      	movs	r2, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 fab9 	bl	8005328 <xQueueReceive>
 8001db6:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d106      	bne.n	8001dcc <extract_command+0x4c>
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	75fa      	strb	r2, [r7, #23]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	7bf9      	ldrb	r1, [r7, #15]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	2b0a      	cmp	r3, #10
 8001dd0:	d1e9      	bne.n	8001da6 <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	2100      	movs	r1, #0
 8001dda:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1; /*save  length of the command excluding null char */
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	461a      	mov	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	60da      	str	r2, [r3, #12]

	return 0;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000124 	.word	0x20000124

08001df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001df4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001df8:	f7ff fbf2 	bl	80015e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dfc:	480c      	ldr	r0, [pc, #48]	@ (8001e30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dfe:	490d      	ldr	r1, [pc, #52]	@ (8001e34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e00:	4a0d      	ldr	r2, [pc, #52]	@ (8001e38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a0a      	ldr	r2, [pc, #40]	@ (8001e3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e14:	4c0a      	ldr	r4, [pc, #40]	@ (8001e40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e22:	f006 f823 	bl	8007e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e26:	f7fe fce9 	bl	80007fc <main>
  bx  lr    
 8001e2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e34:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001e38:	080091a8 	.word	0x080091a8
  ldr r2, =_sbss
 8001e3c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001e40:	200130f4 	.word	0x200130f4

08001e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <ADC_IRQHandler>
	...

08001e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <HAL_Init+0x40>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0d      	ldr	r2, [pc, #52]	@ (8001e88 <HAL_Init+0x40>)
 8001e52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e58:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <HAL_Init+0x40>)
 8001e5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e64:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <HAL_Init+0x40>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a07      	ldr	r2, [pc, #28]	@ (8001e88 <HAL_Init+0x40>)
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e70:	2003      	movs	r0, #3
 8001e72:	f000 f8d8 	bl	8002026 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e76:	200f      	movs	r0, #15
 8001e78:	f7ff fa62 	bl	8001340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e7c:	f7ff f9be 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023c00 	.word	0x40023c00

08001e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_IncTick+0x20>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_IncTick+0x24>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a04      	ldr	r2, [pc, #16]	@ (8001eb0 <HAL_IncTick+0x24>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2000001c 	.word	0x2000001c
 8001eb0:	200001fc 	.word	0x200001fc

08001eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <HAL_GetTick+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	200001fc 	.word	0x200001fc

08001ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efe:	4a04      	ldr	r2, [pc, #16]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	60d3      	str	r3, [r2, #12]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f18:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <__NVIC_GetPriorityGrouping+0x18>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 0307 	and.w	r3, r3, #7
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db0b      	blt.n	8001f5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	4907      	ldr	r1, [pc, #28]	@ (8001f68 <__NVIC_EnableIRQ+0x38>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	@ (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	@ (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	@ 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
         );
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	@ 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ff4c 	bl	8001ecc <__NVIC_SetPriorityGrouping>
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800204e:	f7ff ff61 	bl	8001f14 <__NVIC_GetPriorityGrouping>
 8002052:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68b9      	ldr	r1, [r7, #8]
 8002058:	6978      	ldr	r0, [r7, #20]
 800205a:	f7ff ffb1 	bl	8001fc0 <NVIC_EncodePriority>
 800205e:	4602      	mov	r2, r0
 8002060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff80 	bl	8001f6c <__NVIC_SetPriority>
}
 800206c:	bf00      	nop
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff54 	bl	8001f30 <__NVIC_EnableIRQ>
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800209e:	f7ff ff09 	bl	8001eb4 <HAL_GetTick>
 80020a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d008      	beq.n	80020c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2280      	movs	r2, #128	@ 0x80
 80020b4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e052      	b.n	8002168 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0216 	bic.w	r2, r2, #22
 80020d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d103      	bne.n	80020f2 <HAL_DMA_Abort+0x62>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0208 	bic.w	r2, r2, #8
 8002100:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0201 	bic.w	r2, r2, #1
 8002110:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002112:	e013      	b.n	800213c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002114:	f7ff fece 	bl	8001eb4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b05      	cmp	r3, #5
 8002120:	d90c      	bls.n	800213c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2220      	movs	r2, #32
 8002126:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2203      	movs	r2, #3
 800212c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e015      	b.n	8002168 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1e4      	bne.n	8002114 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214e:	223f      	movs	r2, #63	@ 0x3f
 8002150:	409a      	lsls	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d004      	beq.n	800218e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2280      	movs	r2, #128	@ 0x80
 8002188:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e00c      	b.n	80021a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2205      	movs	r2, #5
 8002192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0201 	bic.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	@ 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	e16b      	b.n	80024a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	f040 815a 	bne.w	80024a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d005      	beq.n	8002206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002202:	2b02      	cmp	r3, #2
 8002204:	d130      	bne.n	8002268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 0201 	and.w	r2, r3, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b03      	cmp	r3, #3
 8002272:	d017      	beq.n	80022a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d123      	bne.n	80022f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	08da      	lsrs	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3208      	adds	r2, #8
 80022f2:	69b9      	ldr	r1, [r7, #24]
 80022f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0203 	and.w	r2, r3, #3
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80b4 	beq.w	80024a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b60      	ldr	r3, [pc, #384]	@ (80024c0 <HAL_GPIO_Init+0x30c>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	4a5f      	ldr	r2, [pc, #380]	@ (80024c0 <HAL_GPIO_Init+0x30c>)
 8002344:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002348:	6453      	str	r3, [r2, #68]	@ 0x44
 800234a:	4b5d      	ldr	r3, [pc, #372]	@ (80024c0 <HAL_GPIO_Init+0x30c>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002356:	4a5b      	ldr	r2, [pc, #364]	@ (80024c4 <HAL_GPIO_Init+0x310>)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a52      	ldr	r2, [pc, #328]	@ (80024c8 <HAL_GPIO_Init+0x314>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d02b      	beq.n	80023da <HAL_GPIO_Init+0x226>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a51      	ldr	r2, [pc, #324]	@ (80024cc <HAL_GPIO_Init+0x318>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d025      	beq.n	80023d6 <HAL_GPIO_Init+0x222>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a50      	ldr	r2, [pc, #320]	@ (80024d0 <HAL_GPIO_Init+0x31c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d01f      	beq.n	80023d2 <HAL_GPIO_Init+0x21e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4f      	ldr	r2, [pc, #316]	@ (80024d4 <HAL_GPIO_Init+0x320>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d019      	beq.n	80023ce <HAL_GPIO_Init+0x21a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4e      	ldr	r2, [pc, #312]	@ (80024d8 <HAL_GPIO_Init+0x324>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d013      	beq.n	80023ca <HAL_GPIO_Init+0x216>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4d      	ldr	r2, [pc, #308]	@ (80024dc <HAL_GPIO_Init+0x328>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00d      	beq.n	80023c6 <HAL_GPIO_Init+0x212>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4c      	ldr	r2, [pc, #304]	@ (80024e0 <HAL_GPIO_Init+0x32c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d007      	beq.n	80023c2 <HAL_GPIO_Init+0x20e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4b      	ldr	r2, [pc, #300]	@ (80024e4 <HAL_GPIO_Init+0x330>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d101      	bne.n	80023be <HAL_GPIO_Init+0x20a>
 80023ba:	2307      	movs	r3, #7
 80023bc:	e00e      	b.n	80023dc <HAL_GPIO_Init+0x228>
 80023be:	2308      	movs	r3, #8
 80023c0:	e00c      	b.n	80023dc <HAL_GPIO_Init+0x228>
 80023c2:	2306      	movs	r3, #6
 80023c4:	e00a      	b.n	80023dc <HAL_GPIO_Init+0x228>
 80023c6:	2305      	movs	r3, #5
 80023c8:	e008      	b.n	80023dc <HAL_GPIO_Init+0x228>
 80023ca:	2304      	movs	r3, #4
 80023cc:	e006      	b.n	80023dc <HAL_GPIO_Init+0x228>
 80023ce:	2303      	movs	r3, #3
 80023d0:	e004      	b.n	80023dc <HAL_GPIO_Init+0x228>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e002      	b.n	80023dc <HAL_GPIO_Init+0x228>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <HAL_GPIO_Init+0x228>
 80023da:	2300      	movs	r3, #0
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	f002 0203 	and.w	r2, r2, #3
 80023e2:	0092      	lsls	r2, r2, #2
 80023e4:	4093      	lsls	r3, r2
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023ec:	4935      	ldr	r1, [pc, #212]	@ (80024c4 <HAL_GPIO_Init+0x310>)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	3302      	adds	r3, #2
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023fa:	4b3b      	ldr	r3, [pc, #236]	@ (80024e8 <HAL_GPIO_Init+0x334>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800241e:	4a32      	ldr	r2, [pc, #200]	@ (80024e8 <HAL_GPIO_Init+0x334>)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002424:	4b30      	ldr	r3, [pc, #192]	@ (80024e8 <HAL_GPIO_Init+0x334>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002448:	4a27      	ldr	r2, [pc, #156]	@ (80024e8 <HAL_GPIO_Init+0x334>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800244e:	4b26      	ldr	r3, [pc, #152]	@ (80024e8 <HAL_GPIO_Init+0x334>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002472:	4a1d      	ldr	r2, [pc, #116]	@ (80024e8 <HAL_GPIO_Init+0x334>)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002478:	4b1b      	ldr	r3, [pc, #108]	@ (80024e8 <HAL_GPIO_Init+0x334>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800249c:	4a12      	ldr	r2, [pc, #72]	@ (80024e8 <HAL_GPIO_Init+0x334>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3301      	adds	r3, #1
 80024a6:	61fb      	str	r3, [r7, #28]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	2b0f      	cmp	r3, #15
 80024ac:	f67f ae90 	bls.w	80021d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	3724      	adds	r7, #36	@ 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40013800 	.word	0x40013800
 80024c8:	40020000 	.word	0x40020000
 80024cc:	40020400 	.word	0x40020400
 80024d0:	40020800 	.word	0x40020800
 80024d4:	40020c00 	.word	0x40020c00
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40021400 	.word	0x40021400
 80024e0:	40021800 	.word	0x40021800
 80024e4:	40021c00 	.word	0x40021c00
 80024e8:	40013c00 	.word	0x40013c00

080024ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	807b      	strh	r3, [r7, #2]
 80024f8:	4613      	mov	r3, r2
 80024fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024fc:	787b      	ldrb	r3, [r7, #1]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002508:	e003      	b.n	8002512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800250a:	887b      	ldrh	r3, [r7, #2]
 800250c:	041a      	lsls	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	619a      	str	r2, [r3, #24]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e267      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d075      	beq.n	800262a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800253e:	4b88      	ldr	r3, [pc, #544]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b04      	cmp	r3, #4
 8002548:	d00c      	beq.n	8002564 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800254a:	4b85      	ldr	r3, [pc, #532]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002552:	2b08      	cmp	r3, #8
 8002554:	d112      	bne.n	800257c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002556:	4b82      	ldr	r3, [pc, #520]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800255e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002562:	d10b      	bne.n	800257c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	4b7e      	ldr	r3, [pc, #504]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d05b      	beq.n	8002628 <HAL_RCC_OscConfig+0x108>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d157      	bne.n	8002628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e242      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002584:	d106      	bne.n	8002594 <HAL_RCC_OscConfig+0x74>
 8002586:	4b76      	ldr	r3, [pc, #472]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a75      	ldr	r2, [pc, #468]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e01d      	b.n	80025d0 <HAL_RCC_OscConfig+0xb0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x98>
 800259e:	4b70      	ldr	r3, [pc, #448]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6c      	ldr	r2, [pc, #432]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0xb0>
 80025b8:	4b69      	ldr	r3, [pc, #420]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a68      	ldr	r2, [pc, #416]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b66      	ldr	r3, [pc, #408]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a65      	ldr	r2, [pc, #404]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7ff fc6c 	bl	8001eb4 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e0:	f7ff fc68 	bl	8001eb4 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	@ 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e207      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0xc0>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7ff fc58 	bl	8001eb4 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002608:	f7ff fc54 	bl	8001eb4 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	@ 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e1f3      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261a:	4b51      	ldr	r3, [pc, #324]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0xe8>
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d063      	beq.n	80026fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002636:	4b4a      	ldr	r3, [pc, #296]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002642:	4b47      	ldr	r3, [pc, #284]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800264a:	2b08      	cmp	r3, #8
 800264c:	d11c      	bne.n	8002688 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264e:	4b44      	ldr	r3, [pc, #272]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d116      	bne.n	8002688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	4b41      	ldr	r3, [pc, #260]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_RCC_OscConfig+0x152>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e1c7      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002672:	4b3b      	ldr	r3, [pc, #236]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4937      	ldr	r1, [pc, #220]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	e03a      	b.n	80026fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002690:	4b34      	ldr	r3, [pc, #208]	@ (8002764 <HAL_RCC_OscConfig+0x244>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002696:	f7ff fc0d 	bl	8001eb4 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269e:	f7ff fc09 	bl	8001eb4 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e1a8      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026bc:	4b28      	ldr	r3, [pc, #160]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4925      	ldr	r1, [pc, #148]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]
 80026d0:	e015      	b.n	80026fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d2:	4b24      	ldr	r3, [pc, #144]	@ (8002764 <HAL_RCC_OscConfig+0x244>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7ff fbec 	bl	8001eb4 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e0:	f7ff fbe8 	bl	8001eb4 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e187      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d036      	beq.n	8002778 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d016      	beq.n	8002740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002712:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <HAL_RCC_OscConfig+0x248>)
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7ff fbcc 	bl	8001eb4 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002720:	f7ff fbc8 	bl	8001eb4 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e167      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002732:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <HAL_RCC_OscConfig+0x240>)
 8002734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x200>
 800273e:	e01b      	b.n	8002778 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002740:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <HAL_RCC_OscConfig+0x248>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002746:	f7ff fbb5 	bl	8001eb4 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274c:	e00e      	b.n	800276c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274e:	f7ff fbb1 	bl	8001eb4 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d907      	bls.n	800276c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e150      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
 8002760:	40023800 	.word	0x40023800
 8002764:	42470000 	.word	0x42470000
 8002768:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	4b88      	ldr	r3, [pc, #544]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800276e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ea      	bne.n	800274e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8097 	beq.w	80028b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278a:	4b81      	ldr	r3, [pc, #516]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	4b7d      	ldr	r3, [pc, #500]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	4a7c      	ldr	r2, [pc, #496]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80027a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b2:	2301      	movs	r3, #1
 80027b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b6:	4b77      	ldr	r3, [pc, #476]	@ (8002994 <HAL_RCC_OscConfig+0x474>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d118      	bne.n	80027f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c2:	4b74      	ldr	r3, [pc, #464]	@ (8002994 <HAL_RCC_OscConfig+0x474>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a73      	ldr	r2, [pc, #460]	@ (8002994 <HAL_RCC_OscConfig+0x474>)
 80027c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ce:	f7ff fb71 	bl	8001eb4 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d6:	f7ff fb6d 	bl	8001eb4 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e10c      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002994 <HAL_RCC_OscConfig+0x474>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x2ea>
 80027fc:	4b64      	ldr	r3, [pc, #400]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002800:	4a63      	ldr	r2, [pc, #396]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6713      	str	r3, [r2, #112]	@ 0x70
 8002808:	e01c      	b.n	8002844 <HAL_RCC_OscConfig+0x324>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b05      	cmp	r3, #5
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x30c>
 8002812:	4b5f      	ldr	r3, [pc, #380]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002816:	4a5e      	ldr	r2, [pc, #376]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	6713      	str	r3, [r2, #112]	@ 0x70
 800281e:	4b5c      	ldr	r3, [pc, #368]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002822:	4a5b      	ldr	r2, [pc, #364]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6713      	str	r3, [r2, #112]	@ 0x70
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0x324>
 800282c:	4b58      	ldr	r3, [pc, #352]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002830:	4a57      	ldr	r2, [pc, #348]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	6713      	str	r3, [r2, #112]	@ 0x70
 8002838:	4b55      	ldr	r3, [pc, #340]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283c:	4a54      	ldr	r2, [pc, #336]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800283e:	f023 0304 	bic.w	r3, r3, #4
 8002842:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d015      	beq.n	8002878 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7ff fb32 	bl	8001eb4 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002852:	e00a      	b.n	800286a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f7ff fb2e 	bl	8001eb4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e0cb      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286a:	4b49      	ldr	r3, [pc, #292]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0ee      	beq.n	8002854 <HAL_RCC_OscConfig+0x334>
 8002876:	e014      	b.n	80028a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002878:	f7ff fb1c 	bl	8001eb4 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287e:	e00a      	b.n	8002896 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f7ff fb18 	bl	8001eb4 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e0b5      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002896:	4b3e      	ldr	r3, [pc, #248]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1ee      	bne.n	8002880 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d105      	bne.n	80028b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a8:	4b39      	ldr	r3, [pc, #228]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	4a38      	ldr	r2, [pc, #224]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80028ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80a1 	beq.w	8002a00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028be:	4b34      	ldr	r3, [pc, #208]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d05c      	beq.n	8002984 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d141      	bne.n	8002956 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4b31      	ldr	r3, [pc, #196]	@ (8002998 <HAL_RCC_OscConfig+0x478>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7ff faec 	bl	8001eb4 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7ff fae8 	bl	8001eb4 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e087      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	4b27      	ldr	r3, [pc, #156]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69da      	ldr	r2, [r3, #28]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	019b      	lsls	r3, r3, #6
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002914:	085b      	lsrs	r3, r3, #1
 8002916:	3b01      	subs	r3, #1
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002920:	061b      	lsls	r3, r3, #24
 8002922:	491b      	ldr	r1, [pc, #108]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002928:	4b1b      	ldr	r3, [pc, #108]	@ (8002998 <HAL_RCC_OscConfig+0x478>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7ff fac1 	bl	8001eb4 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002936:	f7ff fabd 	bl	8001eb4 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e05c      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002948:	4b11      	ldr	r3, [pc, #68]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x416>
 8002954:	e054      	b.n	8002a00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002956:	4b10      	ldr	r3, [pc, #64]	@ (8002998 <HAL_RCC_OscConfig+0x478>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7ff faaa 	bl	8001eb4 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002964:	f7ff faa6 	bl	8001eb4 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e045      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002976:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <HAL_RCC_OscConfig+0x470>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x444>
 8002982:	e03d      	b.n	8002a00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d107      	bne.n	800299c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e038      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
 8002990:	40023800 	.word	0x40023800
 8002994:	40007000 	.word	0x40007000
 8002998:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800299c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a0c <HAL_RCC_OscConfig+0x4ec>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d028      	beq.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d121      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d11a      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029cc:	4013      	ands	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d111      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	3b01      	subs	r3, #1
 80029e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800

08002a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0cc      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a24:	4b68      	ldr	r3, [pc, #416]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d90c      	bls.n	8002a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b65      	ldr	r3, [pc, #404]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b63      	ldr	r3, [pc, #396]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0b8      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a64:	4b59      	ldr	r3, [pc, #356]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a58      	ldr	r2, [pc, #352]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a7c:	4b53      	ldr	r3, [pc, #332]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a52      	ldr	r2, [pc, #328]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a88:	4b50      	ldr	r3, [pc, #320]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	494d      	ldr	r1, [pc, #308]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d044      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	4b47      	ldr	r3, [pc, #284]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d119      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e07f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d003      	beq.n	8002ace <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	4b3f      	ldr	r3, [pc, #252]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ade:	4b3b      	ldr	r3, [pc, #236]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e067      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aee:	4b37      	ldr	r3, [pc, #220]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f023 0203 	bic.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4934      	ldr	r1, [pc, #208]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b00:	f7ff f9d8 	bl	8001eb4 <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b08:	f7ff f9d4 	bl	8001eb4 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e04f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 020c 	and.w	r2, r3, #12
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d1eb      	bne.n	8002b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b30:	4b25      	ldr	r3, [pc, #148]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d20c      	bcs.n	8002b58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b22      	ldr	r3, [pc, #136]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e032      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b64:	4b19      	ldr	r3, [pc, #100]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4916      	ldr	r1, [pc, #88]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b82:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	490e      	ldr	r1, [pc, #56]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b96:	f000 f821 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	490a      	ldr	r1, [pc, #40]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba8:	5ccb      	ldrb	r3, [r1, r3]
 8002baa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bae:	4a09      	ldr	r2, [pc, #36]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bb2:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fbc2 	bl	8001340 <HAL_InitTick>

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023c00 	.word	0x40023c00
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	0800914c 	.word	0x0800914c
 8002bd4:	20000010 	.word	0x20000010
 8002bd8:	20000018 	.word	0x20000018

08002bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be0:	b094      	sub	sp, #80	@ 0x50
 8002be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf4:	4b79      	ldr	r3, [pc, #484]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d00d      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x40>
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	f200 80e1 	bhi.w	8002dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x34>
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d003      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c0e:	e0db      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c10:	4b73      	ldr	r3, [pc, #460]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c14:	e0db      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c16:	4b73      	ldr	r3, [pc, #460]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c1a:	e0d8      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c26:	4b6d      	ldr	r3, [pc, #436]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d063      	beq.n	8002cfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c32:	4b6a      	ldr	r3, [pc, #424]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	099b      	lsrs	r3, r3, #6
 8002c38:	2200      	movs	r2, #0
 8002c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c44:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c46:	2300      	movs	r3, #0
 8002c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c4e:	4622      	mov	r2, r4
 8002c50:	462b      	mov	r3, r5
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	0159      	lsls	r1, r3, #5
 8002c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c60:	0150      	lsls	r0, r2, #5
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4621      	mov	r1, r4
 8002c68:	1a51      	subs	r1, r2, r1
 8002c6a:	6139      	str	r1, [r7, #16]
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c80:	4659      	mov	r1, fp
 8002c82:	018b      	lsls	r3, r1, #6
 8002c84:	4651      	mov	r1, sl
 8002c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c8a:	4651      	mov	r1, sl
 8002c8c:	018a      	lsls	r2, r1, #6
 8002c8e:	4651      	mov	r1, sl
 8002c90:	ebb2 0801 	subs.w	r8, r2, r1
 8002c94:	4659      	mov	r1, fp
 8002c96:	eb63 0901 	sbc.w	r9, r3, r1
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cae:	4690      	mov	r8, r2
 8002cb0:	4699      	mov	r9, r3
 8002cb2:	4623      	mov	r3, r4
 8002cb4:	eb18 0303 	adds.w	r3, r8, r3
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	462b      	mov	r3, r5
 8002cbc:	eb49 0303 	adc.w	r3, r9, r3
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cce:	4629      	mov	r1, r5
 8002cd0:	024b      	lsls	r3, r1, #9
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cd8:	4621      	mov	r1, r4
 8002cda:	024a      	lsls	r2, r1, #9
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cec:	f7fd fad8 	bl	80002a0 <__aeabi_uldivmod>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cf8:	e058      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfa:	4b38      	ldr	r3, [pc, #224]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	099b      	lsrs	r3, r3, #6
 8002d00:	2200      	movs	r2, #0
 8002d02:	4618      	mov	r0, r3
 8002d04:	4611      	mov	r1, r2
 8002d06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d0a:	623b      	str	r3, [r7, #32]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d14:	4642      	mov	r2, r8
 8002d16:	464b      	mov	r3, r9
 8002d18:	f04f 0000 	mov.w	r0, #0
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	0159      	lsls	r1, r3, #5
 8002d22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d26:	0150      	lsls	r0, r2, #5
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4641      	mov	r1, r8
 8002d2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d32:	4649      	mov	r1, r9
 8002d34:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d4c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d50:	eb63 050b 	sbc.w	r5, r3, fp
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	00eb      	lsls	r3, r5, #3
 8002d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d62:	00e2      	lsls	r2, r4, #3
 8002d64:	4614      	mov	r4, r2
 8002d66:	461d      	mov	r5, r3
 8002d68:	4643      	mov	r3, r8
 8002d6a:	18e3      	adds	r3, r4, r3
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	464b      	mov	r3, r9
 8002d70:	eb45 0303 	adc.w	r3, r5, r3
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d82:	4629      	mov	r1, r5
 8002d84:	028b      	lsls	r3, r1, #10
 8002d86:	4621      	mov	r1, r4
 8002d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	028a      	lsls	r2, r1, #10
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d96:	2200      	movs	r2, #0
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	61fa      	str	r2, [r7, #28]
 8002d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da0:	f7fd fa7e 	bl	80002a0 <__aeabi_uldivmod>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4613      	mov	r3, r2
 8002daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002dac:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	3301      	adds	r3, #1
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002dbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dc6:	e002      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc8:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3750      	adds	r7, #80	@ 0x50
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	00f42400 	.word	0x00f42400
 8002de4:	007a1200 	.word	0x007a1200

08002de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dec:	4b03      	ldr	r3, [pc, #12]	@ (8002dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000010 	.word	0x20000010

08002e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e04:	f7ff fff0 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	0a9b      	lsrs	r3, r3, #10
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	4903      	ldr	r1, [pc, #12]	@ (8002e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40023800 	.word	0x40023800
 8002e24:	0800915c 	.word	0x0800915c

08002e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e2c:	f7ff ffdc 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e30:	4602      	mov	r2, r0
 8002e32:	4b05      	ldr	r3, [pc, #20]	@ (8002e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	0b5b      	lsrs	r3, r3, #13
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	4903      	ldr	r1, [pc, #12]	@ (8002e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e3e:	5ccb      	ldrb	r3, [r1, r3]
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	0800915c 	.word	0x0800915c

08002e50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	220f      	movs	r2, #15
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e60:	4b12      	ldr	r3, [pc, #72]	@ (8002eac <HAL_RCC_GetClockConfig+0x5c>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0203 	and.w	r2, r3, #3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002eac <HAL_RCC_GetClockConfig+0x5c>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e78:	4b0c      	ldr	r3, [pc, #48]	@ (8002eac <HAL_RCC_GetClockConfig+0x5c>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e84:	4b09      	ldr	r3, [pc, #36]	@ (8002eac <HAL_RCC_GetClockConfig+0x5c>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	08db      	lsrs	r3, r3, #3
 8002e8a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e92:	4b07      	ldr	r3, [pc, #28]	@ (8002eb0 <HAL_RCC_GetClockConfig+0x60>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0207 	and.w	r2, r3, #7
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	601a      	str	r2, [r3, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40023c00 	.word	0x40023c00

08002eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d105      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d035      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002edc:	4b62      	ldr	r3, [pc, #392]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ee2:	f7fe ffe7 	bl	8001eb4 <HAL_GetTick>
 8002ee6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002eea:	f7fe ffe3 	bl	8001eb4 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e0b0      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002efc:	4b5b      	ldr	r3, [pc, #364]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f0      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	019a      	lsls	r2, r3, #6
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	071b      	lsls	r3, r3, #28
 8002f14:	4955      	ldr	r1, [pc, #340]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f1c:	4b52      	ldr	r3, [pc, #328]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f22:	f7fe ffc7 	bl	8001eb4 <HAL_GetTick>
 8002f26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f2a:	f7fe ffc3 	bl	8001eb4 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e090      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f3c:	4b4b      	ldr	r3, [pc, #300]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8083 	beq.w	800305c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	4b44      	ldr	r3, [pc, #272]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	4a43      	ldr	r2, [pc, #268]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f66:	4b41      	ldr	r3, [pc, #260]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f72:	4b3f      	ldr	r3, [pc, #252]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a3e      	ldr	r2, [pc, #248]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f7c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f7e:	f7fe ff99 	bl	8001eb4 <HAL_GetTick>
 8002f82:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f86:	f7fe ff95 	bl	8001eb4 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e062      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002f98:	4b35      	ldr	r3, [pc, #212]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fa4:	4b31      	ldr	r3, [pc, #196]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fac:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d02f      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d028      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fcc:	4b29      	ldr	r3, [pc, #164]	@ (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fd2:	4b28      	ldr	r3, [pc, #160]	@ (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002fd8:	4a24      	ldr	r2, [pc, #144]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fde:	4b23      	ldr	r3, [pc, #140]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d114      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fe ff63 	bl	8001eb4 <HAL_GetTick>
 8002fee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fe ff5f 	bl	8001eb4 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e02a      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003008:	4b18      	ldr	r3, [pc, #96]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ee      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800301c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003020:	d10d      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003022:	4b12      	ldr	r3, [pc, #72]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003036:	490d      	ldr	r1, [pc, #52]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]
 800303c:	e005      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800303e:	4b0b      	ldr	r3, [pc, #44]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	4a0a      	ldr	r2, [pc, #40]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003044:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003048:	6093      	str	r3, [r2, #8]
 800304a:	4b08      	ldr	r3, [pc, #32]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800304c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003056:	4905      	ldr	r1, [pc, #20]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003058:	4313      	orrs	r3, r2
 800305a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	42470068 	.word	0x42470068
 800306c:	40023800 	.word	0x40023800
 8003070:	40007000 	.word	0x40007000
 8003074:	42470e40 	.word	0x42470e40

08003078 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e073      	b.n	8003176 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7f5b      	ldrb	r3, [r3, #29]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d105      	bne.n	80030a4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fe f8d4 	bl	800124c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b10      	cmp	r3, #16
 80030b6:	d055      	beq.n	8003164 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	22ca      	movs	r2, #202	@ 0xca
 80030be:	625a      	str	r2, [r3, #36]	@ 0x24
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2253      	movs	r2, #83	@ 0x53
 80030c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fa49 	bl	8003560 <RTC_EnterInitMode>
 80030ce:	4603      	mov	r3, r0
 80030d0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d12c      	bne.n	8003132 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80030e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030ea:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6899      	ldr	r1, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68d2      	ldr	r2, [r2, #12]
 8003112:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6919      	ldr	r1, [r3, #16]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	041a      	lsls	r2, r3, #16
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fa50 	bl	80035ce <RTC_ExitInitMode>
 800312e:	4603      	mov	r3, r0
 8003130:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d110      	bne.n	800315a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003146:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	22ff      	movs	r2, #255	@ 0xff
 8003160:	625a      	str	r2, [r3, #36]	@ 0x24
 8003162:	e001      	b.n	8003168 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d102      	bne.n	8003174 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003174:	7bfb      	ldrb	r3, [r7, #15]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800317e:	b590      	push	{r4, r7, lr}
 8003180:	b087      	sub	sp, #28
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	7f1b      	ldrb	r3, [r3, #28]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_RTC_SetTime+0x1c>
 8003196:	2302      	movs	r3, #2
 8003198:	e087      	b.n	80032aa <HAL_RTC_SetTime+0x12c>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2202      	movs	r2, #2
 80031a4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d126      	bne.n	80031fa <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2200      	movs	r2, #0
 80031be:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fa27 	bl	8003618 <RTC_ByteToBcd2>
 80031ca:	4603      	mov	r3, r0
 80031cc:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	785b      	ldrb	r3, [r3, #1]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fa20 	bl	8003618 <RTC_ByteToBcd2>
 80031d8:	4603      	mov	r3, r0
 80031da:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031dc:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	789b      	ldrb	r3, [r3, #2]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fa18 	bl	8003618 <RTC_ByteToBcd2>
 80031e8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031ea:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	78db      	ldrb	r3, [r3, #3]
 80031f2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	e018      	b.n	800322c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2200      	movs	r2, #0
 800320c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	785b      	ldrb	r3, [r3, #1]
 8003218:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800321a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003220:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	78db      	ldrb	r3, [r3, #3]
 8003226:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	22ca      	movs	r2, #202	@ 0xca
 8003232:	625a      	str	r2, [r3, #36]	@ 0x24
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2253      	movs	r2, #83	@ 0x53
 800323a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f98f 	bl	8003560 <RTC_EnterInitMode>
 8003242:	4603      	mov	r3, r0
 8003244:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003246:	7cfb      	ldrb	r3, [r7, #19]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d120      	bne.n	800328e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003256:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800325a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800326a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6899      	ldr	r1, [r3, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	431a      	orrs	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 f9a2 	bl	80035ce <RTC_ExitInitMode>
 800328a:	4603      	mov	r3, r0
 800328c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800328e:	7cfb      	ldrb	r3, [r7, #19]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d102      	bne.n	800329a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	22ff      	movs	r2, #255	@ 0xff
 80032a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	771a      	strb	r2, [r3, #28]

  return status;
 80032a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd90      	pop	{r4, r7, pc}

080032b2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80032e4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80032e8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	0c1b      	lsrs	r3, r3, #16
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003304:	b2da      	uxtb	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003312:	b2da      	uxtb	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	0d9b      	lsrs	r3, r3, #22
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	b2da      	uxtb	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d11a      	bne.n	8003364 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f98e 	bl	8003654 <RTC_Bcd2ToByte>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	785b      	ldrb	r3, [r3, #1]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 f985 	bl	8003654 <RTC_Bcd2ToByte>
 800334a:	4603      	mov	r3, r0
 800334c:	461a      	mov	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	789b      	ldrb	r3, [r3, #2]
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f97c 	bl	8003654 <RTC_Bcd2ToByte>
 800335c:	4603      	mov	r3, r0
 800335e:	461a      	mov	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800336e:	b590      	push	{r4, r7, lr}
 8003370:	b087      	sub	sp, #28
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	7f1b      	ldrb	r3, [r3, #28]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_RTC_SetDate+0x1c>
 8003386:	2302      	movs	r3, #2
 8003388:	e071      	b.n	800346e <HAL_RTC_SetDate+0x100>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2202      	movs	r2, #2
 8003394:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10e      	bne.n	80033ba <HAL_RTC_SetDate+0x4c>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	785b      	ldrb	r3, [r3, #1]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	785b      	ldrb	r3, [r3, #1]
 80033ac:	f023 0310 	bic.w	r3, r3, #16
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	330a      	adds	r3, #10
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d11c      	bne.n	80033fa <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	78db      	ldrb	r3, [r3, #3]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 f927 	bl	8003618 <RTC_ByteToBcd2>
 80033ca:	4603      	mov	r3, r0
 80033cc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	785b      	ldrb	r3, [r3, #1]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 f920 	bl	8003618 <RTC_ByteToBcd2>
 80033d8:	4603      	mov	r3, r0
 80033da:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033dc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	789b      	ldrb	r3, [r3, #2]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 f918 	bl	8003618 <RTC_ByteToBcd2>
 80033e8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80033ea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	e00e      	b.n	8003418 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	78db      	ldrb	r3, [r3, #3]
 80033fe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	785b      	ldrb	r3, [r3, #1]
 8003404:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003406:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800340c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	22ca      	movs	r2, #202	@ 0xca
 800341e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2253      	movs	r2, #83	@ 0x53
 8003426:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f899 	bl	8003560 <RTC_EnterInitMode>
 800342e:	4603      	mov	r3, r0
 8003430:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003432:	7cfb      	ldrb	r3, [r7, #19]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10c      	bne.n	8003452 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003442:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003446:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f8c0 	bl	80035ce <RTC_ExitInitMode>
 800344e:	4603      	mov	r3, r0
 8003450:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003452:	7cfb      	ldrb	r3, [r7, #19]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d102      	bne.n	800345e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	22ff      	movs	r2, #255	@ 0xff
 8003464:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	771a      	strb	r2, [r3, #28]

  return status;
 800346c:	7cfb      	ldrb	r3, [r7, #19]
}
 800346e:	4618      	mov	r0, r3
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	bd90      	pop	{r4, r7, pc}

08003476 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003490:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003494:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	b2da      	uxtb	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	0b5b      	lsrs	r3, r3, #13
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d11a      	bne.n	800350a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	78db      	ldrb	r3, [r3, #3]
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 f8bb 	bl	8003654 <RTC_Bcd2ToByte>
 80034de:	4603      	mov	r3, r0
 80034e0:	461a      	mov	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	785b      	ldrb	r3, [r3, #1]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f8b2 	bl	8003654 <RTC_Bcd2ToByte>
 80034f0:	4603      	mov	r3, r0
 80034f2:	461a      	mov	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	789b      	ldrb	r3, [r3, #2]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 f8a9 	bl	8003654 <RTC_Bcd2ToByte>
 8003502:	4603      	mov	r3, r0
 8003504:	461a      	mov	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a0d      	ldr	r2, [pc, #52]	@ (800355c <HAL_RTC_WaitForSynchro+0x48>)
 8003526:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003528:	f7fe fcc4 	bl	8001eb4 <HAL_GetTick>
 800352c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800352e:	e009      	b.n	8003544 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003530:	f7fe fcc0 	bl	8001eb4 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800353e:	d901      	bls.n	8003544 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e007      	b.n	8003554 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0ee      	beq.n	8003530 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	00017f5f 	.word	0x00017f5f

08003560 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d122      	bne.n	80035c4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800358c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800358e:	f7fe fc91 	bl	8001eb4 <HAL_GetTick>
 8003592:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003594:	e00c      	b.n	80035b0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003596:	f7fe fc8d 	bl	8001eb4 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035a4:	d904      	bls.n	80035b0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2204      	movs	r2, #4
 80035aa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d102      	bne.n	80035c4 <RTC_EnterInitMode+0x64>
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d1e8      	bne.n	8003596 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035e8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10a      	bne.n	800360e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff ff8b 	bl	8003514 <HAL_RTC_WaitForSynchro>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d004      	beq.n	800360e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2204      	movs	r2, #4
 8003608:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800360e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003626:	e005      	b.n	8003634 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	3301      	adds	r3, #1
 800362c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	3b0a      	subs	r3, #10
 8003632:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	2b09      	cmp	r3, #9
 8003638:	d8f6      	bhi.n	8003628 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	b2da      	uxtb	r2, r3
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	4313      	orrs	r3, r2
 8003646:	b2db      	uxtb	r3, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	b2db      	uxtb	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	b2db      	uxtb	r3, r3
 8003680:	4413      	add	r3, r2
 8003682:	b2db      	uxtb	r3, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e041      	b.n	8003726 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f839 	bl	800372e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	4619      	mov	r1, r3
 80036ce:	4610      	mov	r0, r2
 80036d0:	f000 f9c0 	bl	8003a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d001      	beq.n	800375c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e04e      	b.n	80037fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a23      	ldr	r2, [pc, #140]	@ (8003808 <HAL_TIM_Base_Start_IT+0xc4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d022      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003786:	d01d      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1f      	ldr	r2, [pc, #124]	@ (800380c <HAL_TIM_Base_Start_IT+0xc8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d018      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1e      	ldr	r2, [pc, #120]	@ (8003810 <HAL_TIM_Base_Start_IT+0xcc>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d013      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003814 <HAL_TIM_Base_Start_IT+0xd0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00e      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003818 <HAL_TIM_Base_Start_IT+0xd4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d009      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a19      	ldr	r2, [pc, #100]	@ (800381c <HAL_TIM_Base_Start_IT+0xd8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a18      	ldr	r2, [pc, #96]	@ (8003820 <HAL_TIM_Base_Start_IT+0xdc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d111      	bne.n	80037e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b06      	cmp	r3, #6
 80037d4:	d010      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0201 	orr.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e6:	e007      	b.n	80037f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40010000 	.word	0x40010000
 800380c:	40000400 	.word	0x40000400
 8003810:	40000800 	.word	0x40000800
 8003814:	40000c00 	.word	0x40000c00
 8003818:	40010400 	.word	0x40010400
 800381c:	40014000 	.word	0x40014000
 8003820:	40001800 	.word	0x40001800

08003824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d020      	beq.n	8003888 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01b      	beq.n	8003888 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0202 	mvn.w	r2, #2
 8003858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8d2 	bl	8003a18 <HAL_TIM_IC_CaptureCallback>
 8003874:	e005      	b.n	8003882 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f8c4 	bl	8003a04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f8d5 	bl	8003a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	d020      	beq.n	80038d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d01b      	beq.n	80038d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0204 	mvn.w	r2, #4
 80038a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2202      	movs	r2, #2
 80038aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f8ac 	bl	8003a18 <HAL_TIM_IC_CaptureCallback>
 80038c0:	e005      	b.n	80038ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f89e 	bl	8003a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f8af 	bl	8003a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d020      	beq.n	8003920 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01b      	beq.n	8003920 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0208 	mvn.w	r2, #8
 80038f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2204      	movs	r2, #4
 80038f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f886 	bl	8003a18 <HAL_TIM_IC_CaptureCallback>
 800390c:	e005      	b.n	800391a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f878 	bl	8003a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f889 	bl	8003a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b00      	cmp	r3, #0
 8003928:	d020      	beq.n	800396c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01b      	beq.n	800396c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0210 	mvn.w	r2, #16
 800393c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2208      	movs	r2, #8
 8003942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f860 	bl	8003a18 <HAL_TIM_IC_CaptureCallback>
 8003958:	e005      	b.n	8003966 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f852 	bl	8003a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f863 	bl	8003a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00c      	beq.n	8003990 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0201 	mvn.w	r2, #1
 8003988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd faec 	bl	8000f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00c      	beq.n	80039b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d007      	beq.n	80039b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f906 	bl	8003bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00c      	beq.n	80039d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d007      	beq.n	80039d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f834 	bl	8003a40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00c      	beq.n	80039fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d007      	beq.n	80039fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0220 	mvn.w	r2, #32
 80039f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f8d8 	bl	8003bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a46      	ldr	r2, [pc, #280]	@ (8003b80 <TIM_Base_SetConfig+0x12c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d013      	beq.n	8003a94 <TIM_Base_SetConfig+0x40>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a72:	d00f      	beq.n	8003a94 <TIM_Base_SetConfig+0x40>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a43      	ldr	r2, [pc, #268]	@ (8003b84 <TIM_Base_SetConfig+0x130>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00b      	beq.n	8003a94 <TIM_Base_SetConfig+0x40>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a42      	ldr	r2, [pc, #264]	@ (8003b88 <TIM_Base_SetConfig+0x134>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d007      	beq.n	8003a94 <TIM_Base_SetConfig+0x40>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a41      	ldr	r2, [pc, #260]	@ (8003b8c <TIM_Base_SetConfig+0x138>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <TIM_Base_SetConfig+0x40>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a40      	ldr	r2, [pc, #256]	@ (8003b90 <TIM_Base_SetConfig+0x13c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d108      	bne.n	8003aa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a35      	ldr	r2, [pc, #212]	@ (8003b80 <TIM_Base_SetConfig+0x12c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d02b      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ab4:	d027      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a32      	ldr	r2, [pc, #200]	@ (8003b84 <TIM_Base_SetConfig+0x130>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d023      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a31      	ldr	r2, [pc, #196]	@ (8003b88 <TIM_Base_SetConfig+0x134>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d01f      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a30      	ldr	r2, [pc, #192]	@ (8003b8c <TIM_Base_SetConfig+0x138>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d01b      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a2f      	ldr	r2, [pc, #188]	@ (8003b90 <TIM_Base_SetConfig+0x13c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d017      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2e      	ldr	r2, [pc, #184]	@ (8003b94 <TIM_Base_SetConfig+0x140>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d013      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8003b98 <TIM_Base_SetConfig+0x144>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00f      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2c      	ldr	r2, [pc, #176]	@ (8003b9c <TIM_Base_SetConfig+0x148>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00b      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba0 <TIM_Base_SetConfig+0x14c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d007      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2a      	ldr	r2, [pc, #168]	@ (8003ba4 <TIM_Base_SetConfig+0x150>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d003      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a29      	ldr	r2, [pc, #164]	@ (8003ba8 <TIM_Base_SetConfig+0x154>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d108      	bne.n	8003b18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a10      	ldr	r2, [pc, #64]	@ (8003b80 <TIM_Base_SetConfig+0x12c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d003      	beq.n	8003b4c <TIM_Base_SetConfig+0xf8>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a12      	ldr	r2, [pc, #72]	@ (8003b90 <TIM_Base_SetConfig+0x13c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d103      	bne.n	8003b54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d105      	bne.n	8003b72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f023 0201 	bic.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	611a      	str	r2, [r3, #16]
  }
}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40010000 	.word	0x40010000
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40000800 	.word	0x40000800
 8003b8c:	40000c00 	.word	0x40000c00
 8003b90:	40010400 	.word	0x40010400
 8003b94:	40014000 	.word	0x40014000
 8003b98:	40014400 	.word	0x40014400
 8003b9c:	40014800 	.word	0x40014800
 8003ba0:	40001800 	.word	0x40001800
 8003ba4:	40001c00 	.word	0x40001c00
 8003ba8:	40002000 	.word	0x40002000

08003bac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e042      	b.n	8003c6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fd fb50 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2224      	movs	r2, #36	@ 0x24
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 fdbd 	bl	8004798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	@ 0x28
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	4613      	mov	r3, r2
 8003c82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b20      	cmp	r3, #32
 8003c92:	d175      	bne.n	8003d80 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_UART_Transmit+0x2c>
 8003c9a:	88fb      	ldrh	r3, [r7, #6]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e06e      	b.n	8003d82 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2221      	movs	r2, #33	@ 0x21
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cb2:	f7fe f8ff 	bl	8001eb4 <HAL_GetTick>
 8003cb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	88fa      	ldrh	r2, [r7, #6]
 8003cbc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	88fa      	ldrh	r2, [r7, #6]
 8003cc2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ccc:	d108      	bne.n	8003ce0 <HAL_UART_Transmit+0x6c>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d104      	bne.n	8003ce0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	e003      	b.n	8003ce8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ce8:	e02e      	b.n	8003d48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2180      	movs	r1, #128	@ 0x80
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fb1f 	bl	8004338 <UART_WaitOnFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e03a      	b.n	8003d82 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10b      	bne.n	8003d2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	3302      	adds	r3, #2
 8003d26:	61bb      	str	r3, [r7, #24]
 8003d28:	e007      	b.n	8003d3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	781a      	ldrb	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	3301      	adds	r3, #1
 8003d38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1cb      	bne.n	8003cea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2140      	movs	r1, #64	@ 0x40
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 faeb 	bl	8004338 <UART_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e006      	b.n	8003d82 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e000      	b.n	8003d82 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d80:	2302      	movs	r3, #2
  }
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3720      	adds	r7, #32
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	4613      	mov	r3, r2
 8003d96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d112      	bne.n	8003dca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <HAL_UART_Receive_IT+0x26>
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e00b      	b.n	8003dcc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 fb12 	bl	80043ea <UART_Start_Receive_IT>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	e000      	b.n	8003dcc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
  }
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b0ba      	sub	sp, #232	@ 0xe8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_UART_IRQHandler+0x66>
 8003e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fbf2 	bl	800461c <UART_Receive_IT>
      return;
 8003e38:	e25b      	b.n	80042f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80de 	beq.w	8004000 <HAL_UART_IRQHandler+0x22c>
 8003e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d106      	bne.n	8003e5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e54:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 80d1 	beq.w	8004000 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <HAL_UART_IRQHandler+0xae>
 8003e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7a:	f043 0201 	orr.w	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_UART_IRQHandler+0xd2>
 8003e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	f043 0202 	orr.w	r2, r3, #2
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <HAL_UART_IRQHandler+0xf6>
 8003eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d005      	beq.n	8003eca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec2:	f043 0204 	orr.w	r2, r3, #4
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d011      	beq.n	8003efa <HAL_UART_IRQHandler+0x126>
 8003ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d105      	bne.n	8003eee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d005      	beq.n	8003efa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef2:	f043 0208 	orr.w	r2, r3, #8
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 81f2 	beq.w	80042e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_UART_IRQHandler+0x14e>
 8003f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fb7d 	bl	800461c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2c:	2b40      	cmp	r3, #64	@ 0x40
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d103      	bne.n	8003f4e <HAL_UART_IRQHandler+0x17a>
 8003f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d04f      	beq.n	8003fee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fa85 	bl	800445e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5e:	2b40      	cmp	r3, #64	@ 0x40
 8003f60:	d141      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3314      	adds	r3, #20
 8003f68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3314      	adds	r3, #20
 8003f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1d9      	bne.n	8003f62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d013      	beq.n	8003fde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fba:	4a7e      	ldr	r2, [pc, #504]	@ (80041b4 <HAL_UART_IRQHandler+0x3e0>)
 8003fbc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe f8d4 	bl	8002170 <HAL_DMA_Abort_IT>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d016      	beq.n	8003ffc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fdc:	e00e      	b.n	8003ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f994 	bl	800430c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe4:	e00a      	b.n	8003ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f990 	bl	800430c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fec:	e006      	b.n	8003ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f98c 	bl	800430c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003ffa:	e175      	b.n	80042e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ffc:	bf00      	nop
    return;
 8003ffe:	e173      	b.n	80042e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004004:	2b01      	cmp	r3, #1
 8004006:	f040 814f 	bne.w	80042a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800400a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8148 	beq.w	80042a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8141 	beq.w	80042a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004046:	2b40      	cmp	r3, #64	@ 0x40
 8004048:	f040 80b6 	bne.w	80041b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004058:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8145 	beq.w	80042ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800406a:	429a      	cmp	r2, r3
 800406c:	f080 813e 	bcs.w	80042ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004076:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004082:	f000 8088 	beq.w	8004196 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	330c      	adds	r3, #12
 800408c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800409c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	330c      	adds	r3, #12
 80040ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80040b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80040be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80040c2:	e841 2300 	strex	r3, r2, [r1]
 80040c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80040ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1d9      	bne.n	8004086 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3314      	adds	r3, #20
 80040d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80040e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040e4:	f023 0301 	bic.w	r3, r3, #1
 80040e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3314      	adds	r3, #20
 80040f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80040fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80040fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004108:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e1      	bne.n	80040d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3314      	adds	r3, #20
 8004114:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800411e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004120:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004124:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3314      	adds	r3, #20
 800412e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004132:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004134:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004138:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004140:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e3      	bne.n	800410e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800415e:	e853 3f00 	ldrex	r3, [r3]
 8004162:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004166:	f023 0310 	bic.w	r3, r3, #16
 800416a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004178:	65ba      	str	r2, [r7, #88]	@ 0x58
 800417a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800417e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004180:	e841 2300 	strex	r3, r2, [r1]
 8004184:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e3      	bne.n	8004154 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004190:	4618      	mov	r0, r3
 8004192:	f7fd ff7d 	bl	8002090 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	4619      	mov	r1, r3
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f8b7 	bl	8004320 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041b2:	e09b      	b.n	80042ec <HAL_UART_IRQHandler+0x518>
 80041b4:	08004525 	.word	0x08004525
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 808e 	beq.w	80042f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80041d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8089 	beq.w	80042f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004202:	647a      	str	r2, [r7, #68]	@ 0x44
 8004204:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004206:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004208:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800420a:	e841 2300 	strex	r3, r2, [r1]
 800420e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1e3      	bne.n	80041de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3314      	adds	r3, #20
 800421c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004220:	e853 3f00 	ldrex	r3, [r3]
 8004224:	623b      	str	r3, [r7, #32]
   return(result);
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3314      	adds	r3, #20
 8004236:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800423a:	633a      	str	r2, [r7, #48]	@ 0x30
 800423c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e3      	bne.n	8004216 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	60fb      	str	r3, [r7, #12]
   return(result);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0310 	bic.w	r3, r3, #16
 8004272:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	330c      	adds	r3, #12
 800427c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004280:	61fa      	str	r2, [r7, #28]
 8004282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	69b9      	ldr	r1, [r7, #24]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	617b      	str	r3, [r7, #20]
   return(result);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e3      	bne.n	800425c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800429a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f83d 	bl	8004320 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042a6:	e023      	b.n	80042f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d009      	beq.n	80042c8 <HAL_UART_IRQHandler+0x4f4>
 80042b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f943 	bl	800454c <UART_Transmit_IT>
    return;
 80042c6:	e014      	b.n	80042f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00e      	beq.n	80042f2 <HAL_UART_IRQHandler+0x51e>
 80042d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f983 	bl	80045ec <UART_EndTransmit_IT>
    return;
 80042e6:	e004      	b.n	80042f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80042e8:	bf00      	nop
 80042ea:	e002      	b.n	80042f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80042ec:	bf00      	nop
 80042ee:	e000      	b.n	80042f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80042f0:	bf00      	nop
  }
}
 80042f2:	37e8      	adds	r7, #232	@ 0xe8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004348:	e03b      	b.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d037      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7fd fdaf 	bl	8001eb4 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	6a3a      	ldr	r2, [r7, #32]
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <UART_WaitOnFlagUntilTimeout+0x30>
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e03a      	b.n	80043e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d023      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b80      	cmp	r3, #128	@ 0x80
 800437e:	d020      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b40      	cmp	r3, #64	@ 0x40
 8004384:	d01d      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b08      	cmp	r3, #8
 8004392:	d116      	bne.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004394:	2300      	movs	r3, #0
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f857 	bl	800445e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2208      	movs	r2, #8
 80043b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e00f      	b.n	80043e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4013      	ands	r3, r2
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	bf0c      	ite	eq
 80043d2:	2301      	moveq	r3, #1
 80043d4:	2300      	movne	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d0b4      	beq.n	800434a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b085      	sub	sp, #20
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	4613      	mov	r3, r2
 80043f6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	88fa      	ldrh	r2, [r7, #6]
 8004402:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	88fa      	ldrh	r2, [r7, #6]
 8004408:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2222      	movs	r2, #34	@ 0x22
 8004414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d007      	beq.n	8004430 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800442e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0220 	orr.w	r2, r2, #32
 800444e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800445e:	b480      	push	{r7}
 8004460:	b095      	sub	sp, #84	@ 0x54
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	330c      	adds	r3, #12
 800446c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004478:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800447c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	330c      	adds	r3, #12
 8004484:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004486:	643a      	str	r2, [r7, #64]	@ 0x40
 8004488:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800448c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e5      	bne.n	8004466 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3314      	adds	r3, #20
 80044a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3314      	adds	r3, #20
 80044b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e5      	bne.n	800449a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d119      	bne.n	800450a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	330c      	adds	r3, #12
 80044dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f023 0310 	bic.w	r3, r3, #16
 80044ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	330c      	adds	r3, #12
 80044f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044f6:	61ba      	str	r2, [r7, #24]
 80044f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6979      	ldr	r1, [r7, #20]
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	613b      	str	r3, [r7, #16]
   return(result);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e5      	bne.n	80044d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004518:	bf00      	nop
 800451a:	3754      	adds	r7, #84	@ 0x54
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004530:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f7ff fee4 	bl	800430c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004544:	bf00      	nop
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b21      	cmp	r3, #33	@ 0x21
 800455e:	d13e      	bne.n	80045de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004568:	d114      	bne.n	8004594 <UART_Transmit_IT+0x48>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d110      	bne.n	8004594 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004586:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	1c9a      	adds	r2, r3, #2
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	621a      	str	r2, [r3, #32]
 8004592:	e008      	b.n	80045a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	1c59      	adds	r1, r3, #1
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6211      	str	r1, [r2, #32]
 800459e:	781a      	ldrb	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	4619      	mov	r1, r3
 80045b4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10f      	bne.n	80045da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e000      	b.n	80045e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045de:	2302      	movs	r3, #2
  }
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004602:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff fe73 	bl	80042f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08c      	sub	sp, #48	@ 0x30
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b22      	cmp	r3, #34	@ 0x22
 800462e:	f040 80ae 	bne.w	800478e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800463a:	d117      	bne.n	800466c <UART_Receive_IT+0x50>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d113      	bne.n	800466c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004644:	2300      	movs	r3, #0
 8004646:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	b29b      	uxth	r3, r3
 8004656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465a:	b29a      	uxth	r2, r3
 800465c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004664:	1c9a      	adds	r2, r3, #2
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	629a      	str	r2, [r3, #40]	@ 0x28
 800466a:	e026      	b.n	80046ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004670:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004672:	2300      	movs	r3, #0
 8004674:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800467e:	d007      	beq.n	8004690 <UART_Receive_IT+0x74>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <UART_Receive_IT+0x82>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d106      	bne.n	800469e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	b2da      	uxtb	r2, r3
 8004698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	e008      	b.n	80046b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	4619      	mov	r1, r3
 80046c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d15d      	bne.n	800478a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0220 	bic.w	r2, r2, #32
 80046dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0201 	bic.w	r2, r2, #1
 80046fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004710:	2b01      	cmp	r3, #1
 8004712:	d135      	bne.n	8004780 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	613b      	str	r3, [r7, #16]
   return(result);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f023 0310 	bic.w	r3, r3, #16
 8004730:	627b      	str	r3, [r7, #36]	@ 0x24
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	330c      	adds	r3, #12
 8004738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800473a:	623a      	str	r2, [r7, #32]
 800473c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	69f9      	ldr	r1, [r7, #28]
 8004740:	6a3a      	ldr	r2, [r7, #32]
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	61bb      	str	r3, [r7, #24]
   return(result);
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e5      	bne.n	800471a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	2b10      	cmp	r3, #16
 800475a:	d10a      	bne.n	8004772 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004776:	4619      	mov	r1, r3
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff fdd1 	bl	8004320 <HAL_UARTEx_RxEventCallback>
 800477e:	e002      	b.n	8004786 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7fc fba7 	bl	8000ed4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	e002      	b.n	8004790 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	e000      	b.n	8004790 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800478e:	2302      	movs	r3, #2
  }
}
 8004790:	4618      	mov	r0, r3
 8004792:	3730      	adds	r7, #48	@ 0x30
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800479c:	b0c0      	sub	sp, #256	@ 0x100
 800479e:	af00      	add	r7, sp, #0
 80047a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b4:	68d9      	ldr	r1, [r3, #12]
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	ea40 0301 	orr.w	r3, r0, r1
 80047c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047f0:	f021 010c 	bic.w	r1, r1, #12
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047fe:	430b      	orrs	r3, r1
 8004800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004812:	6999      	ldr	r1, [r3, #24]
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	ea40 0301 	orr.w	r3, r0, r1
 800481e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4b8f      	ldr	r3, [pc, #572]	@ (8004a64 <UART_SetConfig+0x2cc>)
 8004828:	429a      	cmp	r2, r3
 800482a:	d005      	beq.n	8004838 <UART_SetConfig+0xa0>
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4b8d      	ldr	r3, [pc, #564]	@ (8004a68 <UART_SetConfig+0x2d0>)
 8004834:	429a      	cmp	r2, r3
 8004836:	d104      	bne.n	8004842 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004838:	f7fe faf6 	bl	8002e28 <HAL_RCC_GetPCLK2Freq>
 800483c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004840:	e003      	b.n	800484a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004842:	f7fe fadd 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 8004846:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800484a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004854:	f040 810c 	bne.w	8004a70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800485c:	2200      	movs	r2, #0
 800485e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004862:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004866:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800486a:	4622      	mov	r2, r4
 800486c:	462b      	mov	r3, r5
 800486e:	1891      	adds	r1, r2, r2
 8004870:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004872:	415b      	adcs	r3, r3
 8004874:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004876:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800487a:	4621      	mov	r1, r4
 800487c:	eb12 0801 	adds.w	r8, r2, r1
 8004880:	4629      	mov	r1, r5
 8004882:	eb43 0901 	adc.w	r9, r3, r1
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800489a:	4690      	mov	r8, r2
 800489c:	4699      	mov	r9, r3
 800489e:	4623      	mov	r3, r4
 80048a0:	eb18 0303 	adds.w	r3, r8, r3
 80048a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048a8:	462b      	mov	r3, r5
 80048aa:	eb49 0303 	adc.w	r3, r9, r3
 80048ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048c6:	460b      	mov	r3, r1
 80048c8:	18db      	adds	r3, r3, r3
 80048ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80048cc:	4613      	mov	r3, r2
 80048ce:	eb42 0303 	adc.w	r3, r2, r3
 80048d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80048d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048dc:	f7fb fce0 	bl	80002a0 <__aeabi_uldivmod>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4b61      	ldr	r3, [pc, #388]	@ (8004a6c <UART_SetConfig+0x2d4>)
 80048e6:	fba3 2302 	umull	r2, r3, r3, r2
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	011c      	lsls	r4, r3, #4
 80048ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004900:	4642      	mov	r2, r8
 8004902:	464b      	mov	r3, r9
 8004904:	1891      	adds	r1, r2, r2
 8004906:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004908:	415b      	adcs	r3, r3
 800490a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800490c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004910:	4641      	mov	r1, r8
 8004912:	eb12 0a01 	adds.w	sl, r2, r1
 8004916:	4649      	mov	r1, r9
 8004918:	eb43 0b01 	adc.w	fp, r3, r1
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004928:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800492c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004930:	4692      	mov	sl, r2
 8004932:	469b      	mov	fp, r3
 8004934:	4643      	mov	r3, r8
 8004936:	eb1a 0303 	adds.w	r3, sl, r3
 800493a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800493e:	464b      	mov	r3, r9
 8004940:	eb4b 0303 	adc.w	r3, fp, r3
 8004944:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004954:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004958:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800495c:	460b      	mov	r3, r1
 800495e:	18db      	adds	r3, r3, r3
 8004960:	643b      	str	r3, [r7, #64]	@ 0x40
 8004962:	4613      	mov	r3, r2
 8004964:	eb42 0303 	adc.w	r3, r2, r3
 8004968:	647b      	str	r3, [r7, #68]	@ 0x44
 800496a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800496e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004972:	f7fb fc95 	bl	80002a0 <__aeabi_uldivmod>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4611      	mov	r1, r2
 800497c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a6c <UART_SetConfig+0x2d4>)
 800497e:	fba3 2301 	umull	r2, r3, r3, r1
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2264      	movs	r2, #100	@ 0x64
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	1acb      	subs	r3, r1, r3
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004992:	4b36      	ldr	r3, [pc, #216]	@ (8004a6c <UART_SetConfig+0x2d4>)
 8004994:	fba3 2302 	umull	r2, r3, r3, r2
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049a0:	441c      	add	r4, r3
 80049a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049a6:	2200      	movs	r2, #0
 80049a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049b4:	4642      	mov	r2, r8
 80049b6:	464b      	mov	r3, r9
 80049b8:	1891      	adds	r1, r2, r2
 80049ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049bc:	415b      	adcs	r3, r3
 80049be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049c4:	4641      	mov	r1, r8
 80049c6:	1851      	adds	r1, r2, r1
 80049c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80049ca:	4649      	mov	r1, r9
 80049cc:	414b      	adcs	r3, r1
 80049ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049dc:	4659      	mov	r1, fp
 80049de:	00cb      	lsls	r3, r1, #3
 80049e0:	4651      	mov	r1, sl
 80049e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049e6:	4651      	mov	r1, sl
 80049e8:	00ca      	lsls	r2, r1, #3
 80049ea:	4610      	mov	r0, r2
 80049ec:	4619      	mov	r1, r3
 80049ee:	4603      	mov	r3, r0
 80049f0:	4642      	mov	r2, r8
 80049f2:	189b      	adds	r3, r3, r2
 80049f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049f8:	464b      	mov	r3, r9
 80049fa:	460a      	mov	r2, r1
 80049fc:	eb42 0303 	adc.w	r3, r2, r3
 8004a00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a18:	460b      	mov	r3, r1
 8004a1a:	18db      	adds	r3, r3, r3
 8004a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a1e:	4613      	mov	r3, r2
 8004a20:	eb42 0303 	adc.w	r3, r2, r3
 8004a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a2e:	f7fb fc37 	bl	80002a0 <__aeabi_uldivmod>
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	4b0d      	ldr	r3, [pc, #52]	@ (8004a6c <UART_SetConfig+0x2d4>)
 8004a38:	fba3 1302 	umull	r1, r3, r3, r2
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	2164      	movs	r1, #100	@ 0x64
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	3332      	adds	r3, #50	@ 0x32
 8004a4a:	4a08      	ldr	r2, [pc, #32]	@ (8004a6c <UART_SetConfig+0x2d4>)
 8004a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	f003 0207 	and.w	r2, r3, #7
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4422      	add	r2, r4
 8004a5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a60:	e106      	b.n	8004c70 <UART_SetConfig+0x4d8>
 8004a62:	bf00      	nop
 8004a64:	40011000 	.word	0x40011000
 8004a68:	40011400 	.word	0x40011400
 8004a6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a82:	4642      	mov	r2, r8
 8004a84:	464b      	mov	r3, r9
 8004a86:	1891      	adds	r1, r2, r2
 8004a88:	6239      	str	r1, [r7, #32]
 8004a8a:	415b      	adcs	r3, r3
 8004a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a92:	4641      	mov	r1, r8
 8004a94:	1854      	adds	r4, r2, r1
 8004a96:	4649      	mov	r1, r9
 8004a98:	eb43 0501 	adc.w	r5, r3, r1
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	00eb      	lsls	r3, r5, #3
 8004aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aaa:	00e2      	lsls	r2, r4, #3
 8004aac:	4614      	mov	r4, r2
 8004aae:	461d      	mov	r5, r3
 8004ab0:	4643      	mov	r3, r8
 8004ab2:	18e3      	adds	r3, r4, r3
 8004ab4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ab8:	464b      	mov	r3, r9
 8004aba:	eb45 0303 	adc.w	r3, r5, r3
 8004abe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ace:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ade:	4629      	mov	r1, r5
 8004ae0:	008b      	lsls	r3, r1, #2
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ae8:	4621      	mov	r1, r4
 8004aea:	008a      	lsls	r2, r1, #2
 8004aec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004af0:	f7fb fbd6 	bl	80002a0 <__aeabi_uldivmod>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4b60      	ldr	r3, [pc, #384]	@ (8004c7c <UART_SetConfig+0x4e4>)
 8004afa:	fba3 2302 	umull	r2, r3, r3, r2
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	011c      	lsls	r4, r3, #4
 8004b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b06:	2200      	movs	r2, #0
 8004b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b14:	4642      	mov	r2, r8
 8004b16:	464b      	mov	r3, r9
 8004b18:	1891      	adds	r1, r2, r2
 8004b1a:	61b9      	str	r1, [r7, #24]
 8004b1c:	415b      	adcs	r3, r3
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b24:	4641      	mov	r1, r8
 8004b26:	1851      	adds	r1, r2, r1
 8004b28:	6139      	str	r1, [r7, #16]
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	414b      	adcs	r3, r1
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	f04f 0300 	mov.w	r3, #0
 8004b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b3c:	4659      	mov	r1, fp
 8004b3e:	00cb      	lsls	r3, r1, #3
 8004b40:	4651      	mov	r1, sl
 8004b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b46:	4651      	mov	r1, sl
 8004b48:	00ca      	lsls	r2, r1, #3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4642      	mov	r2, r8
 8004b52:	189b      	adds	r3, r3, r2
 8004b54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b58:	464b      	mov	r3, r9
 8004b5a:	460a      	mov	r2, r1
 8004b5c:	eb42 0303 	adc.w	r3, r2, r3
 8004b60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b7c:	4649      	mov	r1, r9
 8004b7e:	008b      	lsls	r3, r1, #2
 8004b80:	4641      	mov	r1, r8
 8004b82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b86:	4641      	mov	r1, r8
 8004b88:	008a      	lsls	r2, r1, #2
 8004b8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b8e:	f7fb fb87 	bl	80002a0 <__aeabi_uldivmod>
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	4611      	mov	r1, r2
 8004b98:	4b38      	ldr	r3, [pc, #224]	@ (8004c7c <UART_SetConfig+0x4e4>)
 8004b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	2264      	movs	r2, #100	@ 0x64
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	1acb      	subs	r3, r1, r3
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	3332      	adds	r3, #50	@ 0x32
 8004bac:	4a33      	ldr	r2, [pc, #204]	@ (8004c7c <UART_SetConfig+0x4e4>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bb8:	441c      	add	r4, r3
 8004bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004bc8:	4642      	mov	r2, r8
 8004bca:	464b      	mov	r3, r9
 8004bcc:	1891      	adds	r1, r2, r2
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	415b      	adcs	r3, r3
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bd8:	4641      	mov	r1, r8
 8004bda:	1851      	adds	r1, r2, r1
 8004bdc:	6039      	str	r1, [r7, #0]
 8004bde:	4649      	mov	r1, r9
 8004be0:	414b      	adcs	r3, r1
 8004be2:	607b      	str	r3, [r7, #4]
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bf0:	4659      	mov	r1, fp
 8004bf2:	00cb      	lsls	r3, r1, #3
 8004bf4:	4651      	mov	r1, sl
 8004bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bfa:	4651      	mov	r1, sl
 8004bfc:	00ca      	lsls	r2, r1, #3
 8004bfe:	4610      	mov	r0, r2
 8004c00:	4619      	mov	r1, r3
 8004c02:	4603      	mov	r3, r0
 8004c04:	4642      	mov	r2, r8
 8004c06:	189b      	adds	r3, r3, r2
 8004c08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c0a:	464b      	mov	r3, r9
 8004c0c:	460a      	mov	r2, r1
 8004c0e:	eb42 0303 	adc.w	r3, r2, r3
 8004c12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	008b      	lsls	r3, r1, #2
 8004c30:	4641      	mov	r1, r8
 8004c32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c36:	4641      	mov	r1, r8
 8004c38:	008a      	lsls	r2, r1, #2
 8004c3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c3e:	f7fb fb2f 	bl	80002a0 <__aeabi_uldivmod>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4b0d      	ldr	r3, [pc, #52]	@ (8004c7c <UART_SetConfig+0x4e4>)
 8004c48:	fba3 1302 	umull	r1, r3, r3, r2
 8004c4c:	095b      	lsrs	r3, r3, #5
 8004c4e:	2164      	movs	r1, #100	@ 0x64
 8004c50:	fb01 f303 	mul.w	r3, r1, r3
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	3332      	adds	r3, #50	@ 0x32
 8004c5a:	4a08      	ldr	r2, [pc, #32]	@ (8004c7c <UART_SetConfig+0x4e4>)
 8004c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	f003 020f 	and.w	r2, r3, #15
 8004c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4422      	add	r2, r4
 8004c6e:	609a      	str	r2, [r3, #8]
}
 8004c70:	bf00      	nop
 8004c72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c76:	46bd      	mov	sp, r7
 8004c78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c7c:	51eb851f 	.word	0x51eb851f

08004c80 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f103 0208 	add.w	r2, r3, #8
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f04f 32ff 	mov.w	r2, #4294967295
 8004c98:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f103 0208 	add.w	r2, r3, #8
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f103 0208 	add.w	r2, r3, #8
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b085      	sub	sp, #20
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	601a      	str	r2, [r3, #0]
}
 8004d16:	bf00      	nop
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004d22:	b480      	push	{r7}
 8004d24:	b085      	sub	sp, #20
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d103      	bne.n	8004d42 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	e00c      	b.n	8004d5c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3308      	adds	r3, #8
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	e002      	b.n	8004d50 <vListInsert+0x2e>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d2f6      	bcs.n	8004d4a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	601a      	str	r2, [r3, #0]
}
 8004d88:	bf00      	nop
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6892      	ldr	r2, [r2, #8]
 8004daa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6852      	ldr	r2, [r2, #4]
 8004db4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d103      	bne.n	8004dc8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	1e5a      	subs	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10b      	bne.n	8004e14 <xQueueGenericReset+0x2c>
        __asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	60bb      	str	r3, [r7, #8]
    }
 8004e0e:	bf00      	nop
 8004e10:	bf00      	nop
 8004e12:	e7fd      	b.n	8004e10 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004e14:	f002 fb72 	bl	80074fc <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e20:	68f9      	ldr	r1, [r7, #12]
 8004e22:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e24:	fb01 f303 	mul.w	r3, r1, r3
 8004e28:	441a      	add	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e44:	3b01      	subs	r3, #1
 8004e46:	68f9      	ldr	r1, [r7, #12]
 8004e48:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e4a:	fb01 f303 	mul.w	r3, r1, r3
 8004e4e:	441a      	add	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	22ff      	movs	r2, #255	@ 0xff
 8004e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	22ff      	movs	r2, #255	@ 0xff
 8004e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d114      	bne.n	8004e94 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d01a      	beq.n	8004ea8 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3310      	adds	r3, #16
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 f93a 	bl	80060f0 <xTaskRemoveFromEventList>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d012      	beq.n	8004ea8 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004e82:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb8 <xQueueGenericReset+0xd0>)
 8004e84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	e009      	b.n	8004ea8 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3310      	adds	r3, #16
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff fef1 	bl	8004c80 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3324      	adds	r3, #36	@ 0x24
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff feec 	bl	8004c80 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004ea8:	f002 fb5a 	bl	8007560 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004eac:	2301      	movs	r3, #1
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08c      	sub	sp, #48	@ 0x30
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10b      	bne.n	8004ee8 <xQueueGenericCreate+0x2c>
        __asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	61bb      	str	r3, [r7, #24]
    }
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	e7fd      	b.n	8004ee4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	fb02 f303 	mul.w	r3, r2, r3
 8004ef0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d006      	beq.n	8004f06 <xQueueGenericCreate+0x4a>
 8004ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d101      	bne.n	8004f0a <xQueueGenericCreate+0x4e>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <xQueueGenericCreate+0x50>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10b      	bne.n	8004f28 <xQueueGenericCreate+0x6c>
        __asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	617b      	str	r3, [r7, #20]
    }
 8004f22:	bf00      	nop
 8004f24:	bf00      	nop
 8004f26:	e7fd      	b.n	8004f24 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8004f2e:	d90b      	bls.n	8004f48 <xQueueGenericCreate+0x8c>
        __asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	613b      	str	r3, [r7, #16]
    }
 8004f42:	bf00      	nop
 8004f44:	bf00      	nop
 8004f46:	e7fd      	b.n	8004f44 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4a:	3350      	adds	r3, #80	@ 0x50
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f002 fbff 	bl	8007750 <pvPortMalloc>
 8004f52:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00d      	beq.n	8004f76 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	3350      	adds	r3, #80	@ 0x50
 8004f62:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f64:	79fa      	ldrb	r2, [r7, #7]
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	68b9      	ldr	r1, [r7, #8]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 f805 	bl	8004f80 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004f76:	6a3b      	ldr	r3, [r7, #32]
    }
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3728      	adds	r7, #40	@ 0x28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d103      	bne.n	8004f9c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e002      	b.n	8004fa2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fae:	2101      	movs	r1, #1
 8004fb0:	69b8      	ldr	r0, [r7, #24]
 8004fb2:	f7ff ff19 	bl	8004de8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	78fa      	ldrb	r2, [r7, #3]
 8004fba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004fbe:	bf00      	nop
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08e      	sub	sp, #56	@ 0x38
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8004fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10b      	bne.n	8004ffc <xQueueGenericSend+0x34>
        __asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8004ff6:	bf00      	nop
 8004ff8:	bf00      	nop
 8004ffa:	e7fd      	b.n	8004ff8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <xQueueGenericSend+0x42>
 8005002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <xQueueGenericSend+0x46>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <xQueueGenericSend+0x48>
 800500e:	2300      	movs	r3, #0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10b      	bne.n	800502c <xQueueGenericSend+0x64>
        __asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005026:	bf00      	nop
 8005028:	bf00      	nop
 800502a:	e7fd      	b.n	8005028 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d103      	bne.n	800503a <xQueueGenericSend+0x72>
 8005032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <xQueueGenericSend+0x76>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <xQueueGenericSend+0x78>
 800503e:	2300      	movs	r3, #0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10b      	bne.n	800505c <xQueueGenericSend+0x94>
        __asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	623b      	str	r3, [r7, #32]
    }
 8005056:	bf00      	nop
 8005058:	bf00      	nop
 800505a:	e7fd      	b.n	8005058 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800505c:	f001 f9e8 	bl	8006430 <xTaskGetSchedulerState>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d102      	bne.n	800506c <xQueueGenericSend+0xa4>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <xQueueGenericSend+0xa8>
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <xQueueGenericSend+0xaa>
 8005070:	2300      	movs	r3, #0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10b      	bne.n	800508e <xQueueGenericSend+0xc6>
        __asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	61fb      	str	r3, [r7, #28]
    }
 8005088:	bf00      	nop
 800508a:	bf00      	nop
 800508c:	e7fd      	b.n	800508a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800508e:	f002 fa35 	bl	80074fc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <xQueueGenericSend+0xdc>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d129      	bne.n	80050f8 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050aa:	f000 fad0 	bl	800564e <prvCopyDataToQueue>
 80050ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d010      	beq.n	80050da <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	3324      	adds	r3, #36	@ 0x24
 80050bc:	4618      	mov	r0, r3
 80050be:	f001 f817 	bl	80060f0 <xTaskRemoveFromEventList>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d013      	beq.n	80050f0 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80050c8:	4b3f      	ldr	r3, [pc, #252]	@ (80051c8 <xQueueGenericSend+0x200>)
 80050ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	e00a      	b.n	80050f0 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80050da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d007      	beq.n	80050f0 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80050e0:	4b39      	ldr	r3, [pc, #228]	@ (80051c8 <xQueueGenericSend+0x200>)
 80050e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80050f0:	f002 fa36 	bl	8007560 <vPortExitCritical>
                return pdPASS;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e063      	b.n	80051c0 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80050fe:	f002 fa2f 	bl	8007560 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005102:	2300      	movs	r3, #0
 8005104:	e05c      	b.n	80051c0 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005108:	2b00      	cmp	r3, #0
 800510a:	d106      	bne.n	800511a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800510c:	f107 0314 	add.w	r3, r7, #20
 8005110:	4618      	mov	r0, r3
 8005112:	f001 f851 	bl	80061b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005116:	2301      	movs	r3, #1
 8005118:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800511a:	f002 fa21 	bl	8007560 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800511e:	f000 fdc3 	bl	8005ca8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005122:	f002 f9eb 	bl	80074fc <vPortEnterCritical>
 8005126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005128:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800512c:	b25b      	sxtb	r3, r3
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d103      	bne.n	800513c <xQueueGenericSend+0x174>
 8005134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800513c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005142:	b25b      	sxtb	r3, r3
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005148:	d103      	bne.n	8005152 <xQueueGenericSend+0x18a>
 800514a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005152:	f002 fa05 	bl	8007560 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005156:	1d3a      	adds	r2, r7, #4
 8005158:	f107 0314 	add.w	r3, r7, #20
 800515c:	4611      	mov	r1, r2
 800515e:	4618      	mov	r0, r3
 8005160:	f001 f840 	bl	80061e4 <xTaskCheckForTimeOut>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d124      	bne.n	80051b4 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800516a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800516c:	f000 fb67 	bl	800583e <prvIsQueueFull>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d018      	beq.n	80051a8 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005178:	3310      	adds	r3, #16
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	4611      	mov	r1, r2
 800517e:	4618      	mov	r0, r3
 8005180:	f000 ff64 	bl	800604c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005184:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005186:	f000 faf2 	bl	800576e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800518a:	f000 fd9b 	bl	8005cc4 <xTaskResumeAll>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	f47f af7c 	bne.w	800508e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8005196:	4b0c      	ldr	r3, [pc, #48]	@ (80051c8 <xQueueGenericSend+0x200>)
 8005198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	e772      	b.n	800508e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80051a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051aa:	f000 fae0 	bl	800576e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80051ae:	f000 fd89 	bl	8005cc4 <xTaskResumeAll>
 80051b2:	e76c      	b.n	800508e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80051b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051b6:	f000 fada 	bl	800576e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80051ba:	f000 fd83 	bl	8005cc4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80051be:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3738      	adds	r7, #56	@ 0x38
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	e000ed04 	.word	0xe000ed04

080051cc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b090      	sub	sp, #64	@ 0x40
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80051de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10b      	bne.n	80051fc <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d103      	bne.n	800520a <xQueueGenericSendFromISR+0x3e>
 8005202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <xQueueGenericSendFromISR+0x42>
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <xQueueGenericSendFromISR+0x44>
 800520e:	2300      	movs	r3, #0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10b      	bne.n	800522c <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005226:	bf00      	nop
 8005228:	bf00      	nop
 800522a:	e7fd      	b.n	8005228 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d103      	bne.n	800523a <xQueueGenericSendFromISR+0x6e>
 8005232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <xQueueGenericSendFromISR+0x72>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <xQueueGenericSendFromISR+0x74>
 800523e:	2300      	movs	r3, #0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10b      	bne.n	800525c <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	623b      	str	r3, [r7, #32]
    }
 8005256:	bf00      	nop
 8005258:	bf00      	nop
 800525a:	e7fd      	b.n	8005258 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800525c:	f002 fa36 	bl	80076cc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005260:	f3ef 8211 	mrs	r2, BASEPRI
 8005264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	61fa      	str	r2, [r7, #28]
 8005276:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005278:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800527a:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800527c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005284:	429a      	cmp	r2, r3
 8005286:	d302      	bcc.n	800528e <xQueueGenericSendFromISR+0xc2>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d13f      	bne.n	800530e <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800528e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005290:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005294:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80052a4:	f000 f9d3 	bl	800564e <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80052a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d112      	bne.n	80052d8 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d026      	beq.n	8005308 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052bc:	3324      	adds	r3, #36	@ 0x24
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 ff16 	bl	80060f0 <xTaskRemoveFromEventList>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01e      	beq.n	8005308 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01b      	beq.n	8005308 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	e017      	b.n	8005308 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80052d8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80052dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80052de:	d10b      	bne.n	80052f8 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	617b      	str	r3, [r7, #20]
    }
 80052f2:	bf00      	nop
 80052f4:	bf00      	nop
 80052f6:	e7fd      	b.n	80052f4 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80052fc:	3301      	adds	r3, #1
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	b25a      	sxtb	r2, r3
 8005302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8005308:	2301      	movs	r3, #1
 800530a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 800530c:	e001      	b.n	8005312 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800530e:	2300      	movs	r3, #0
 8005310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005314:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800531c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800531e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005320:	4618      	mov	r0, r3
 8005322:	3740      	adds	r7, #64	@ 0x40
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08c      	sub	sp, #48	@ 0x30
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005334:	2300      	movs	r3, #0
 8005336:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800533c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10b      	bne.n	800535a <xQueueReceive+0x32>
        __asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	623b      	str	r3, [r7, #32]
    }
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	e7fd      	b.n	8005356 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d103      	bne.n	8005368 <xQueueReceive+0x40>
 8005360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <xQueueReceive+0x44>
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <xQueueReceive+0x46>
 800536c:	2300      	movs	r3, #0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10b      	bne.n	800538a <xQueueReceive+0x62>
        __asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	61fb      	str	r3, [r7, #28]
    }
 8005384:	bf00      	nop
 8005386:	bf00      	nop
 8005388:	e7fd      	b.n	8005386 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800538a:	f001 f851 	bl	8006430 <xTaskGetSchedulerState>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d102      	bne.n	800539a <xQueueReceive+0x72>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <xQueueReceive+0x76>
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <xQueueReceive+0x78>
 800539e:	2300      	movs	r3, #0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10b      	bne.n	80053bc <xQueueReceive+0x94>
        __asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	61bb      	str	r3, [r7, #24]
    }
 80053b6:	bf00      	nop
 80053b8:	bf00      	nop
 80053ba:	e7fd      	b.n	80053b8 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80053bc:	f002 f89e 	bl	80074fc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01f      	beq.n	800540c <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053d0:	f000 f9a7 	bl	8005722 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d6:	1e5a      	subs	r2, r3, #1
 80053d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053da:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00f      	beq.n	8005404 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e6:	3310      	adds	r3, #16
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fe81 	bl	80060f0 <xTaskRemoveFromEventList>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d007      	beq.n	8005404 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80053f4:	4b3c      	ldr	r3, [pc, #240]	@ (80054e8 <xQueueReceive+0x1c0>)
 80053f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005404:	f002 f8ac 	bl	8007560 <vPortExitCritical>
                return pdPASS;
 8005408:	2301      	movs	r3, #1
 800540a:	e069      	b.n	80054e0 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d103      	bne.n	800541a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005412:	f002 f8a5 	bl	8007560 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005416:	2300      	movs	r3, #0
 8005418:	e062      	b.n	80054e0 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800541a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800541c:	2b00      	cmp	r3, #0
 800541e:	d106      	bne.n	800542e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005420:	f107 0310 	add.w	r3, r7, #16
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fec7 	bl	80061b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800542a:	2301      	movs	r3, #1
 800542c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800542e:	f002 f897 	bl	8007560 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005432:	f000 fc39 	bl	8005ca8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005436:	f002 f861 	bl	80074fc <vPortEnterCritical>
 800543a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005440:	b25b      	sxtb	r3, r3
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005446:	d103      	bne.n	8005450 <xQueueReceive+0x128>
 8005448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005452:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005456:	b25b      	sxtb	r3, r3
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545c:	d103      	bne.n	8005466 <xQueueReceive+0x13e>
 800545e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005466:	f002 f87b 	bl	8007560 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800546a:	1d3a      	adds	r2, r7, #4
 800546c:	f107 0310 	add.w	r3, r7, #16
 8005470:	4611      	mov	r1, r2
 8005472:	4618      	mov	r0, r3
 8005474:	f000 feb6 	bl	80061e4 <xTaskCheckForTimeOut>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d123      	bne.n	80054c6 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800547e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005480:	f000 f9c7 	bl	8005812 <prvIsQueueEmpty>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d017      	beq.n	80054ba <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800548a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548c:	3324      	adds	r3, #36	@ 0x24
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	4611      	mov	r1, r2
 8005492:	4618      	mov	r0, r3
 8005494:	f000 fdda 	bl	800604c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005498:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800549a:	f000 f968 	bl	800576e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800549e:	f000 fc11 	bl	8005cc4 <xTaskResumeAll>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d189      	bne.n	80053bc <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80054a8:	4b0f      	ldr	r3, [pc, #60]	@ (80054e8 <xQueueReceive+0x1c0>)
 80054aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	e780      	b.n	80053bc <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80054ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054bc:	f000 f957 	bl	800576e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80054c0:	f000 fc00 	bl	8005cc4 <xTaskResumeAll>
 80054c4:	e77a      	b.n	80053bc <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80054c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054c8:	f000 f951 	bl	800576e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80054cc:	f000 fbfa 	bl	8005cc4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054d2:	f000 f99e 	bl	8005812 <prvIsQueueEmpty>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f43f af6f 	beq.w	80053bc <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80054de:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3730      	adds	r7, #48	@ 0x30
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	e000ed04 	.word	0xe000ed04

080054ec <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b090      	sub	sp, #64	@ 0x40
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80054fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10b      	bne.n	800551a <xQueueReceiveFromISR+0x2e>
        __asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	e7fd      	b.n	8005516 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d103      	bne.n	8005528 <xQueueReceiveFromISR+0x3c>
 8005520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <xQueueReceiveFromISR+0x40>
 8005528:	2301      	movs	r3, #1
 800552a:	e000      	b.n	800552e <xQueueReceiveFromISR+0x42>
 800552c:	2300      	movs	r3, #0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10b      	bne.n	800554a <xQueueReceiveFromISR+0x5e>
        __asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005544:	bf00      	nop
 8005546:	bf00      	nop
 8005548:	e7fd      	b.n	8005546 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800554a:	f002 f8bf 	bl	80076cc <vPortValidateInterruptPriority>
        __asm volatile
 800554e:	f3ef 8211 	mrs	r2, BASEPRI
 8005552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	623a      	str	r2, [r7, #32]
 8005564:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8005566:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005568:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800556a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005572:	2b00      	cmp	r3, #0
 8005574:	d03f      	beq.n	80055f6 <xQueueReceiveFromISR+0x10a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005578:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800557c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005584:	f000 f8cd 	bl	8005722 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558a:	1e5a      	subs	r2, r3, #1
 800558c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005590:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d112      	bne.n	80055c0 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800559a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d026      	beq.n	80055f0 <xQueueReceiveFromISR+0x104>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a4:	3310      	adds	r3, #16
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fda2 	bl	80060f0 <xTaskRemoveFromEventList>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01e      	beq.n	80055f0 <xQueueReceiveFromISR+0x104>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01b      	beq.n	80055f0 <xQueueReceiveFromISR+0x104>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	e017      	b.n	80055f0 <xQueueReceiveFromISR+0x104>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80055c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80055c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80055c6:	d10b      	bne.n	80055e0 <xQueueReceiveFromISR+0xf4>
        __asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	61bb      	str	r3, [r7, #24]
    }
 80055da:	bf00      	nop
 80055dc:	bf00      	nop
 80055de:	e7fd      	b.n	80055dc <xQueueReceiveFromISR+0xf0>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80055e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055e4:	3301      	adds	r3, #1
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	b25a      	sxtb	r2, r3
 80055ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 80055f0:	2301      	movs	r3, #1
 80055f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055f4:	e001      	b.n	80055fa <xQueueReceiveFromISR+0x10e>
        }
        else
        {
            xReturn = pdFAIL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055fc:	617b      	str	r3, [r7, #20]
        __asm volatile
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f383 8811 	msr	BASEPRI, r3
    }
 8005604:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005608:	4618      	mov	r0, r3
 800560a:	3740      	adds	r7, #64	@ 0x40
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10b      	bne.n	8005636 <uxQueueMessagesWaiting+0x26>
        __asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	60bb      	str	r3, [r7, #8]
    }
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	e7fd      	b.n	8005632 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005636:	f001 ff61 	bl	80074fc <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563e:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005640:	f001 ff8e 	bl	8007560 <vPortExitCritical>

    return uxReturn;
 8005644:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b086      	sub	sp, #24
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005662:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10d      	bne.n	8005688 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d14d      	bne.n	8005710 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fef7 	bl	800646c <xTaskPriorityDisinherit>
 800567e:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	609a      	str	r2, [r3, #8]
 8005686:	e043      	b.n	8005710 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d119      	bne.n	80056c2 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6858      	ldr	r0, [r3, #4]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	461a      	mov	r2, r3
 8005698:	68b9      	ldr	r1, [r7, #8]
 800569a:	f002 fc0e 	bl	8007eba <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a6:	441a      	add	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d32b      	bcc.n	8005710 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	605a      	str	r2, [r3, #4]
 80056c0:	e026      	b.n	8005710 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	68d8      	ldr	r0, [r3, #12]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ca:	461a      	mov	r2, r3
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	f002 fbf4 	bl	8007eba <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056da:	425b      	negs	r3, r3
 80056dc:	441a      	add	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d207      	bcs.n	80056fe <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f6:	425b      	negs	r3, r3
 80056f8:	441a      	add	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d105      	bne.n	8005710 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	3b01      	subs	r3, #1
 800570e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8005718:	697b      	ldr	r3, [r7, #20]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b082      	sub	sp, #8
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005730:	2b00      	cmp	r3, #0
 8005732:	d018      	beq.n	8005766 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573c:	441a      	add	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	429a      	cmp	r2, r3
 800574c:	d303      	bcc.n	8005756 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68d9      	ldr	r1, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575e:	461a      	mov	r2, r3
 8005760:	6838      	ldr	r0, [r7, #0]
 8005762:	f002 fbaa 	bl	8007eba <memcpy>
    }
}
 8005766:	bf00      	nop
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005776:	f001 fec1 	bl	80074fc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005780:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005782:	e011      	b.n	80057a8 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	d012      	beq.n	80057b2 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3324      	adds	r3, #36	@ 0x24
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fcad 	bl	80060f0 <xTaskRemoveFromEventList>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800579c:	f000 fd8a 	bl	80062b4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80057a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	dce9      	bgt.n	8005784 <prvUnlockQueue+0x16>
 80057b0:	e000      	b.n	80057b4 <prvUnlockQueue+0x46>
                        break;
 80057b2:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	22ff      	movs	r2, #255	@ 0xff
 80057b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80057bc:	f001 fed0 	bl	8007560 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80057c0:	f001 fe9c 	bl	80074fc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057ca:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80057cc:	e011      	b.n	80057f2 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d012      	beq.n	80057fc <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3310      	adds	r3, #16
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fc88 	bl	80060f0 <xTaskRemoveFromEventList>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80057e6:	f000 fd65 	bl	80062b4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80057ea:	7bbb      	ldrb	r3, [r7, #14]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80057f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	dce9      	bgt.n	80057ce <prvUnlockQueue+0x60>
 80057fa:	e000      	b.n	80057fe <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80057fc:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	22ff      	movs	r2, #255	@ 0xff
 8005802:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8005806:	f001 feab 	bl	8007560 <vPortExitCritical>
}
 800580a:	bf00      	nop
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800581a:	f001 fe6f 	bl	80074fc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005822:	2b00      	cmp	r3, #0
 8005824:	d102      	bne.n	800582c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005826:	2301      	movs	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	e001      	b.n	8005830 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005830:	f001 fe96 	bl	8007560 <vPortExitCritical>

    return xReturn;
 8005834:	68fb      	ldr	r3, [r7, #12]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005846:	f001 fe59 	bl	80074fc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005852:	429a      	cmp	r2, r3
 8005854:	d102      	bne.n	800585c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005856:	2301      	movs	r3, #1
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	e001      	b.n	8005860 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005860:	f001 fe7e 	bl	8007560 <vPortExitCritical>

    return xReturn;
 8005864:	68fb      	ldr	r3, [r7, #12]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800586e:	b480      	push	{r7}
 8005870:	b087      	sub	sp, #28
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10b      	bne.n	8005898 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	60fb      	str	r3, [r7, #12]
    }
 8005892:	bf00      	nop
 8005894:	bf00      	nop
 8005896:	e7fd      	b.n	8005894 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d102      	bne.n	80058aa <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 80058a4:	2301      	movs	r3, #1
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	e001      	b.n	80058ae <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 80058aa:	2300      	movs	r3, #0
 80058ac:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80058ae:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80058b0:	4618      	mov	r0, r3
 80058b2:	371c      	adds	r7, #28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	e014      	b.n	80058f6 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058cc:	4a0f      	ldr	r2, [pc, #60]	@ (800590c <vQueueAddToRegistry+0x50>)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10b      	bne.n	80058f0 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058d8:	490c      	ldr	r1, [pc, #48]	@ (800590c <vQueueAddToRegistry+0x50>)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80058e2:	4a0a      	ldr	r2, [pc, #40]	@ (800590c <vQueueAddToRegistry+0x50>)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	4413      	add	r3, r2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80058ee:	e006      	b.n	80058fe <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3301      	adds	r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b07      	cmp	r3, #7
 80058fa:	d9e7      	bls.n	80058cc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	20000200 	.word	0x20000200

08005910 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005920:	f001 fdec 	bl	80074fc <vPortEnterCritical>
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800592a:	b25b      	sxtb	r3, r3
 800592c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005930:	d103      	bne.n	800593a <vQueueWaitForMessageRestricted+0x2a>
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005940:	b25b      	sxtb	r3, r3
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d103      	bne.n	8005950 <vQueueWaitForMessageRestricted+0x40>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005950:	f001 fe06 	bl	8007560 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005958:	2b00      	cmp	r3, #0
 800595a:	d106      	bne.n	800596a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	3324      	adds	r3, #36	@ 0x24
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fb97 	bl	8006098 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800596a:	6978      	ldr	r0, [r7, #20]
 800596c:	f7ff feff 	bl	800576e <prvUnlockQueue>
    }
 8005970:	bf00      	nop
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005978:	b580      	push	{r7, lr}
 800597a:	b08c      	sub	sp, #48	@ 0x30
 800597c:	af04      	add	r7, sp, #16
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	603b      	str	r3, [r7, #0]
 8005984:	4613      	mov	r3, r2
 8005986:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4618      	mov	r0, r3
 800598e:	f001 fedf 	bl	8007750 <pvPortMalloc>
 8005992:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00e      	beq.n	80059b8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800599a:	2058      	movs	r0, #88	@ 0x58
 800599c:	f001 fed8 	bl	8007750 <pvPortMalloc>
 80059a0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80059ae:	e005      	b.n	80059bc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80059b0:	6978      	ldr	r0, [r7, #20]
 80059b2:	f001 ffaf 	bl	8007914 <vPortFree>
 80059b6:	e001      	b.n	80059bc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80059b8:	2300      	movs	r3, #0
 80059ba:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d013      	beq.n	80059ea <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059c2:	88fa      	ldrh	r2, [r7, #6]
 80059c4:	2300      	movs	r3, #0
 80059c6:	9303      	str	r3, [sp, #12]
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	9302      	str	r3, [sp, #8]
 80059cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ce:	9301      	str	r3, [sp, #4]
 80059d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 f80e 	bl	80059fa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80059de:	69f8      	ldr	r0, [r7, #28]
 80059e0:	f000 f8a2 	bl	8005b28 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80059e4:	2301      	movs	r3, #1
 80059e6:	61bb      	str	r3, [r7, #24]
 80059e8:	e002      	b.n	80059f0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059ea:	f04f 33ff 	mov.w	r3, #4294967295
 80059ee:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80059f0:	69bb      	ldr	r3, [r7, #24]
    }
 80059f2:	4618      	mov	r0, r3
 80059f4:	3720      	adds	r7, #32
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b088      	sub	sp, #32
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	607a      	str	r2, [r7, #4]
 8005a06:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	461a      	mov	r2, r3
 8005a12:	21a5      	movs	r1, #165	@ 0xa5
 8005a14:	f002 f9d5 	bl	8007dc2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a22:	3b01      	subs	r3, #1
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	f023 0307 	bic.w	r3, r3, #7
 8005a30:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00b      	beq.n	8005a54 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	617b      	str	r3, [r7, #20]
    }
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
 8005a52:	e7fd      	b.n	8005a50 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d01f      	beq.n	8005a9a <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61fb      	str	r3, [r7, #28]
 8005a5e:	e012      	b.n	8005a86 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4413      	add	r3, r2
 8005a66:	7819      	ldrb	r1, [r3, #0]
 8005a68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	3334      	adds	r3, #52	@ 0x34
 8005a70:	460a      	mov	r2, r1
 8005a72:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d006      	beq.n	8005a8e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	3301      	adds	r3, #1
 8005a84:	61fb      	str	r3, [r7, #28]
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	2b09      	cmp	r3, #9
 8005a8a:	d9e9      	bls.n	8005a60 <prvInitialiseNewTask+0x66>
 8005a8c:	e000      	b.n	8005a90 <prvInitialiseNewTask+0x96>
            {
                break;
 8005a8e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005a98:	e003      	b.n	8005aa2 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d901      	bls.n	8005aac <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005aa8:	2304      	movs	r3, #4
 8005aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ab6:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aba:	2200      	movs	r2, #0
 8005abc:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7ff f8fc 	bl	8004cc0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aca:	3318      	adds	r3, #24
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff f8f7 	bl	8004cc0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ad6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ada:	f1c3 0205 	rsb	r2, r3, #5
 8005ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ae6:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aea:	3350      	adds	r3, #80	@ 0x50
 8005aec:	2204      	movs	r2, #4
 8005aee:	2100      	movs	r1, #0
 8005af0:	4618      	mov	r0, r3
 8005af2:	f002 f966 	bl	8007dc2 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af8:	3354      	adds	r3, #84	@ 0x54
 8005afa:	2201      	movs	r2, #1
 8005afc:	2100      	movs	r1, #0
 8005afe:	4618      	mov	r0, r3
 8005b00:	f002 f95f 	bl	8007dc2 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	68f9      	ldr	r1, [r7, #12]
 8005b08:	69b8      	ldr	r0, [r7, #24]
 8005b0a:	f001 fbc3 	bl	8007294 <pxPortInitialiseStack>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b12:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b1e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b20:	bf00      	nop
 8005b22:	3720      	adds	r7, #32
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005b30:	f001 fce4 	bl	80074fc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005b34:	4b2c      	ldr	r3, [pc, #176]	@ (8005be8 <prvAddNewTaskToReadyList+0xc0>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8005be8 <prvAddNewTaskToReadyList+0xc0>)
 8005b3c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8005bec <prvAddNewTaskToReadyList+0xc4>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005b46:	4a29      	ldr	r2, [pc, #164]	@ (8005bec <prvAddNewTaskToReadyList+0xc4>)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b4c:	4b26      	ldr	r3, [pc, #152]	@ (8005be8 <prvAddNewTaskToReadyList+0xc0>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d110      	bne.n	8005b76 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005b54:	f000 fbd2 	bl	80062fc <prvInitialiseTaskLists>
 8005b58:	e00d      	b.n	8005b76 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005b5a:	4b25      	ldr	r3, [pc, #148]	@ (8005bf0 <prvAddNewTaskToReadyList+0xc8>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b62:	4b22      	ldr	r3, [pc, #136]	@ (8005bec <prvAddNewTaskToReadyList+0xc4>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d802      	bhi.n	8005b76 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005b70:	4a1e      	ldr	r2, [pc, #120]	@ (8005bec <prvAddNewTaskToReadyList+0xc4>)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005b76:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf4 <prvAddNewTaskToReadyList+0xcc>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005bf4 <prvAddNewTaskToReadyList+0xcc>)
 8005b7e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b80:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf4 <prvAddNewTaskToReadyList+0xcc>)
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	409a      	lsls	r2, r3
 8005b90:	4b19      	ldr	r3, [pc, #100]	@ (8005bf8 <prvAddNewTaskToReadyList+0xd0>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	4a18      	ldr	r2, [pc, #96]	@ (8005bf8 <prvAddNewTaskToReadyList+0xd0>)
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4a15      	ldr	r2, [pc, #84]	@ (8005bfc <prvAddNewTaskToReadyList+0xd4>)
 8005ba8:	441a      	add	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	f7ff f892 	bl	8004cda <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005bb6:	f001 fcd3 	bl	8007560 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005bba:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf0 <prvAddNewTaskToReadyList+0xc8>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00e      	beq.n	8005be0 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bec <prvAddNewTaskToReadyList+0xc4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d207      	bcs.n	8005be0 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005c00 <prvAddNewTaskToReadyList+0xd8>)
 8005bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000318 	.word	0x20000318
 8005bec:	20000240 	.word	0x20000240
 8005bf0:	20000324 	.word	0x20000324
 8005bf4:	20000334 	.word	0x20000334
 8005bf8:	20000320 	.word	0x20000320
 8005bfc:	20000244 	.word	0x20000244
 8005c00:	e000ed04 	.word	0xe000ed04

08005c04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005c0a:	4b20      	ldr	r3, [pc, #128]	@ (8005c8c <vTaskStartScheduler+0x88>)
 8005c0c:	9301      	str	r3, [sp, #4]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	2300      	movs	r3, #0
 8005c14:	2282      	movs	r2, #130	@ 0x82
 8005c16:	491e      	ldr	r1, [pc, #120]	@ (8005c90 <vTaskStartScheduler+0x8c>)
 8005c18:	481e      	ldr	r0, [pc, #120]	@ (8005c94 <vTaskStartScheduler+0x90>)
 8005c1a:	f7ff fead 	bl	8005978 <xTaskCreate>
 8005c1e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d102      	bne.n	8005c2c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005c26:	f000 ff6d 	bl	8006b04 <xTimerCreateTimerTask>
 8005c2a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d116      	bne.n	8005c60 <vTaskStartScheduler+0x5c>
        __asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	60bb      	str	r3, [r7, #8]
    }
 8005c44:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005c46:	4b14      	ldr	r3, [pc, #80]	@ (8005c98 <vTaskStartScheduler+0x94>)
 8005c48:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005c4e:	4b13      	ldr	r3, [pc, #76]	@ (8005c9c <vTaskStartScheduler+0x98>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c54:	4b12      	ldr	r3, [pc, #72]	@ (8005ca0 <vTaskStartScheduler+0x9c>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005c5a:	f001 fbab 	bl	80073b4 <xPortStartScheduler>
 8005c5e:	e00f      	b.n	8005c80 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c66:	d10b      	bne.n	8005c80 <vTaskStartScheduler+0x7c>
        __asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	607b      	str	r3, [r7, #4]
    }
 8005c7a:	bf00      	nop
 8005c7c:	bf00      	nop
 8005c7e:	e7fd      	b.n	8005c7c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005c80:	4b08      	ldr	r3, [pc, #32]	@ (8005ca4 <vTaskStartScheduler+0xa0>)
 8005c82:	681b      	ldr	r3, [r3, #0]
}
 8005c84:	bf00      	nop
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	2000033c 	.word	0x2000033c
 8005c90:	08009134 	.word	0x08009134
 8005c94:	080062cd 	.word	0x080062cd
 8005c98:	20000338 	.word	0x20000338
 8005c9c:	20000324 	.word	0x20000324
 8005ca0:	2000031c 	.word	0x2000031c
 8005ca4:	20000020 	.word	0x20000020

08005ca8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005cac:	4b04      	ldr	r3, [pc, #16]	@ (8005cc0 <vTaskSuspendAll+0x18>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	4a03      	ldr	r2, [pc, #12]	@ (8005cc0 <vTaskSuspendAll+0x18>)
 8005cb4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005cb6:	bf00      	nop
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	20000340 	.word	0x20000340

08005cc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005cd2:	4b42      	ldr	r3, [pc, #264]	@ (8005ddc <xTaskResumeAll+0x118>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10b      	bne.n	8005cf2 <xTaskResumeAll+0x2e>
        __asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	603b      	str	r3, [r7, #0]
    }
 8005cec:	bf00      	nop
 8005cee:	bf00      	nop
 8005cf0:	e7fd      	b.n	8005cee <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005cf2:	f001 fc03 	bl	80074fc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005cf6:	4b39      	ldr	r3, [pc, #228]	@ (8005ddc <xTaskResumeAll+0x118>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	4a37      	ldr	r2, [pc, #220]	@ (8005ddc <xTaskResumeAll+0x118>)
 8005cfe:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d00:	4b36      	ldr	r3, [pc, #216]	@ (8005ddc <xTaskResumeAll+0x118>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d161      	bne.n	8005dcc <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d08:	4b35      	ldr	r3, [pc, #212]	@ (8005de0 <xTaskResumeAll+0x11c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d05d      	beq.n	8005dcc <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d10:	e02e      	b.n	8005d70 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d12:	4b34      	ldr	r3, [pc, #208]	@ (8005de4 <xTaskResumeAll+0x120>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3318      	adds	r3, #24
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff f838 	bl	8004d94 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	3304      	adds	r3, #4
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff f833 	bl	8004d94 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d32:	2201      	movs	r2, #1
 8005d34:	409a      	lsls	r2, r3
 8005d36:	4b2c      	ldr	r3, [pc, #176]	@ (8005de8 <xTaskResumeAll+0x124>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	4a2a      	ldr	r2, [pc, #168]	@ (8005de8 <xTaskResumeAll+0x124>)
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d44:	4613      	mov	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4a27      	ldr	r2, [pc, #156]	@ (8005dec <xTaskResumeAll+0x128>)
 8005d4e:	441a      	add	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4619      	mov	r1, r3
 8005d56:	4610      	mov	r0, r2
 8005d58:	f7fe ffbf 	bl	8004cda <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d60:	4b23      	ldr	r3, [pc, #140]	@ (8005df0 <xTaskResumeAll+0x12c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d302      	bcc.n	8005d70 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8005d6a:	4b22      	ldr	r3, [pc, #136]	@ (8005df4 <xTaskResumeAll+0x130>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d70:	4b1c      	ldr	r3, [pc, #112]	@ (8005de4 <xTaskResumeAll+0x120>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1cc      	bne.n	8005d12 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005d7e:	f000 fb3b 	bl	80063f8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d82:	4b1d      	ldr	r3, [pc, #116]	@ (8005df8 <xTaskResumeAll+0x134>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d010      	beq.n	8005db0 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005d8e:	f000 f847 	bl	8005e20 <xTaskIncrementTick>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8005d98:	4b16      	ldr	r3, [pc, #88]	@ (8005df4 <xTaskResumeAll+0x130>)
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3b01      	subs	r3, #1
 8005da2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1f1      	bne.n	8005d8e <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8005daa:	4b13      	ldr	r3, [pc, #76]	@ (8005df8 <xTaskResumeAll+0x134>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005db0:	4b10      	ldr	r3, [pc, #64]	@ (8005df4 <xTaskResumeAll+0x130>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d009      	beq.n	8005dcc <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005db8:	2301      	movs	r3, #1
 8005dba:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8005dfc <xTaskResumeAll+0x138>)
 8005dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005dcc:	f001 fbc8 	bl	8007560 <vPortExitCritical>

    return xAlreadyYielded;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20000340 	.word	0x20000340
 8005de0:	20000318 	.word	0x20000318
 8005de4:	200002d8 	.word	0x200002d8
 8005de8:	20000320 	.word	0x20000320
 8005dec:	20000244 	.word	0x20000244
 8005df0:	20000240 	.word	0x20000240
 8005df4:	2000032c 	.word	0x2000032c
 8005df8:	20000328 	.word	0x20000328
 8005dfc:	e000ed04 	.word	0xe000ed04

08005e00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005e06:	4b05      	ldr	r3, [pc, #20]	@ (8005e1c <xTaskGetTickCount+0x1c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005e0c:	687b      	ldr	r3, [r7, #4]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	2000031c 	.word	0x2000031c

08005e20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005e26:	2300      	movs	r3, #0
 8005e28:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8005f68 <xTaskIncrementTick+0x148>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f040 808f 	bne.w	8005f52 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e34:	4b4d      	ldr	r3, [pc, #308]	@ (8005f6c <xTaskIncrementTick+0x14c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005e3c:	4a4b      	ldr	r2, [pc, #300]	@ (8005f6c <xTaskIncrementTick+0x14c>)
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d121      	bne.n	8005e8c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8005e48:	4b49      	ldr	r3, [pc, #292]	@ (8005f70 <xTaskIncrementTick+0x150>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00b      	beq.n	8005e6a <xTaskIncrementTick+0x4a>
        __asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	603b      	str	r3, [r7, #0]
    }
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	e7fd      	b.n	8005e66 <xTaskIncrementTick+0x46>
 8005e6a:	4b41      	ldr	r3, [pc, #260]	@ (8005f70 <xTaskIncrementTick+0x150>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	4b40      	ldr	r3, [pc, #256]	@ (8005f74 <xTaskIncrementTick+0x154>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a3e      	ldr	r2, [pc, #248]	@ (8005f70 <xTaskIncrementTick+0x150>)
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	4a3e      	ldr	r2, [pc, #248]	@ (8005f74 <xTaskIncrementTick+0x154>)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8005f78 <xTaskIncrementTick+0x158>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3301      	adds	r3, #1
 8005e84:	4a3c      	ldr	r2, [pc, #240]	@ (8005f78 <xTaskIncrementTick+0x158>)
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	f000 fab6 	bl	80063f8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8005f7c <xTaskIncrementTick+0x15c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d348      	bcc.n	8005f28 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e96:	4b36      	ldr	r3, [pc, #216]	@ (8005f70 <xTaskIncrementTick+0x150>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d104      	bne.n	8005eaa <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ea0:	4b36      	ldr	r3, [pc, #216]	@ (8005f7c <xTaskIncrementTick+0x15c>)
 8005ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea6:	601a      	str	r2, [r3, #0]
                    break;
 8005ea8:	e03e      	b.n	8005f28 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eaa:	4b31      	ldr	r3, [pc, #196]	@ (8005f70 <xTaskIncrementTick+0x150>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d203      	bcs.n	8005eca <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005ec2:	4a2e      	ldr	r2, [pc, #184]	@ (8005f7c <xTaskIncrementTick+0x15c>)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ec8:	e02e      	b.n	8005f28 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fe ff60 	bl	8004d94 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d004      	beq.n	8005ee6 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	3318      	adds	r3, #24
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fe ff57 	bl	8004d94 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eea:	2201      	movs	r2, #1
 8005eec:	409a      	lsls	r2, r3
 8005eee:	4b24      	ldr	r3, [pc, #144]	@ (8005f80 <xTaskIncrementTick+0x160>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	4a22      	ldr	r2, [pc, #136]	@ (8005f80 <xTaskIncrementTick+0x160>)
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005efc:	4613      	mov	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4a1f      	ldr	r2, [pc, #124]	@ (8005f84 <xTaskIncrementTick+0x164>)
 8005f06:	441a      	add	r2, r3
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	f7fe fee3 	bl	8004cda <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f18:	4b1b      	ldr	r3, [pc, #108]	@ (8005f88 <xTaskIncrementTick+0x168>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d3b9      	bcc.n	8005e96 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8005f22:	2301      	movs	r3, #1
 8005f24:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f26:	e7b6      	b.n	8005e96 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f28:	4b17      	ldr	r3, [pc, #92]	@ (8005f88 <xTaskIncrementTick+0x168>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f2e:	4915      	ldr	r1, [pc, #84]	@ (8005f84 <xTaskIncrementTick+0x164>)
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d901      	bls.n	8005f44 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8005f40:	2301      	movs	r3, #1
 8005f42:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005f44:	4b11      	ldr	r3, [pc, #68]	@ (8005f8c <xTaskIncrementTick+0x16c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	e004      	b.n	8005f5c <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005f52:	4b0f      	ldr	r3, [pc, #60]	@ (8005f90 <xTaskIncrementTick+0x170>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3301      	adds	r3, #1
 8005f58:	4a0d      	ldr	r2, [pc, #52]	@ (8005f90 <xTaskIncrementTick+0x170>)
 8005f5a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005f5c:	697b      	ldr	r3, [r7, #20]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20000340 	.word	0x20000340
 8005f6c:	2000031c 	.word	0x2000031c
 8005f70:	200002d0 	.word	0x200002d0
 8005f74:	200002d4 	.word	0x200002d4
 8005f78:	20000330 	.word	0x20000330
 8005f7c:	20000338 	.word	0x20000338
 8005f80:	20000320 	.word	0x20000320
 8005f84:	20000244 	.word	0x20000244
 8005f88:	20000240 	.word	0x20000240
 8005f8c:	2000032c 	.word	0x2000032c
 8005f90:	20000328 	.word	0x20000328

08005f94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f9a:	4b27      	ldr	r3, [pc, #156]	@ (8006038 <vTaskSwitchContext+0xa4>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005fa2:	4b26      	ldr	r3, [pc, #152]	@ (800603c <vTaskSwitchContext+0xa8>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005fa8:	e040      	b.n	800602c <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8005faa:	4b24      	ldr	r3, [pc, #144]	@ (800603c <vTaskSwitchContext+0xa8>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fb0:	4b23      	ldr	r3, [pc, #140]	@ (8006040 <vTaskSwitchContext+0xac>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	fab3 f383 	clz	r3, r3
 8005fbc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005fbe:	7afb      	ldrb	r3, [r7, #11]
 8005fc0:	f1c3 031f 	rsb	r3, r3, #31
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	491f      	ldr	r1, [pc, #124]	@ (8006044 <vTaskSwitchContext+0xb0>)
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	440b      	add	r3, r1
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10b      	bne.n	8005ff2 <vTaskSwitchContext+0x5e>
        __asm volatile
 8005fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	607b      	str	r3, [r7, #4]
    }
 8005fec:	bf00      	nop
 8005fee:	bf00      	nop
 8005ff0:	e7fd      	b.n	8005fee <vTaskSwitchContext+0x5a>
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4a11      	ldr	r2, [pc, #68]	@ (8006044 <vTaskSwitchContext+0xb0>)
 8005ffe:	4413      	add	r3, r2
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	605a      	str	r2, [r3, #4]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	3308      	adds	r3, #8
 8006014:	429a      	cmp	r2, r3
 8006016:	d104      	bne.n	8006022 <vTaskSwitchContext+0x8e>
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	605a      	str	r2, [r3, #4]
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	4a07      	ldr	r2, [pc, #28]	@ (8006048 <vTaskSwitchContext+0xb4>)
 800602a:	6013      	str	r3, [r2, #0]
}
 800602c:	bf00      	nop
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	20000340 	.word	0x20000340
 800603c:	2000032c 	.word	0x2000032c
 8006040:	20000320 	.word	0x20000320
 8006044:	20000244 	.word	0x20000244
 8006048:	20000240 	.word	0x20000240

0800604c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	60fb      	str	r3, [r7, #12]
    }
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	e7fd      	b.n	8006070 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006074:	4b07      	ldr	r3, [pc, #28]	@ (8006094 <vTaskPlaceOnEventList+0x48>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3318      	adds	r3, #24
 800607a:	4619      	mov	r1, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7fe fe50 	bl	8004d22 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006082:	2101      	movs	r1, #1
 8006084:	6838      	ldr	r0, [r7, #0]
 8006086:	f000 fcd7 	bl	8006a38 <prvAddCurrentTaskToDelayedList>
}
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20000240 	.word	0x20000240

08006098 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10b      	bne.n	80060c2 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	617b      	str	r3, [r7, #20]
    }
 80060bc:	bf00      	nop
 80060be:	bf00      	nop
 80060c0:	e7fd      	b.n	80060be <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060c2:	4b0a      	ldr	r3, [pc, #40]	@ (80060ec <vTaskPlaceOnEventListRestricted+0x54>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3318      	adds	r3, #24
 80060c8:	4619      	mov	r1, r3
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f7fe fe05 	bl	8004cda <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80060d6:	f04f 33ff 	mov.w	r3, #4294967295
 80060da:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	68b8      	ldr	r0, [r7, #8]
 80060e0:	f000 fcaa 	bl	8006a38 <prvAddCurrentTaskToDelayedList>
    }
 80060e4:	bf00      	nop
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	20000240 	.word	0x20000240

080060f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10b      	bne.n	800611e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	60fb      	str	r3, [r7, #12]
    }
 8006118:	bf00      	nop
 800611a:	bf00      	nop
 800611c:	e7fd      	b.n	800611a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	3318      	adds	r3, #24
 8006122:	4618      	mov	r0, r3
 8006124:	f7fe fe36 	bl	8004d94 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006128:	4b1d      	ldr	r3, [pc, #116]	@ (80061a0 <xTaskRemoveFromEventList+0xb0>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d11c      	bne.n	800616a <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	3304      	adds	r3, #4
 8006134:	4618      	mov	r0, r3
 8006136:	f7fe fe2d 	bl	8004d94 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613e:	2201      	movs	r2, #1
 8006140:	409a      	lsls	r2, r3
 8006142:	4b18      	ldr	r3, [pc, #96]	@ (80061a4 <xTaskRemoveFromEventList+0xb4>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4313      	orrs	r3, r2
 8006148:	4a16      	ldr	r2, [pc, #88]	@ (80061a4 <xTaskRemoveFromEventList+0xb4>)
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4a13      	ldr	r2, [pc, #76]	@ (80061a8 <xTaskRemoveFromEventList+0xb8>)
 800615a:	441a      	add	r2, r3
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	3304      	adds	r3, #4
 8006160:	4619      	mov	r1, r3
 8006162:	4610      	mov	r0, r2
 8006164:	f7fe fdb9 	bl	8004cda <vListInsertEnd>
 8006168:	e005      	b.n	8006176 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	3318      	adds	r3, #24
 800616e:	4619      	mov	r1, r3
 8006170:	480e      	ldr	r0, [pc, #56]	@ (80061ac <xTaskRemoveFromEventList+0xbc>)
 8006172:	f7fe fdb2 	bl	8004cda <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800617a:	4b0d      	ldr	r3, [pc, #52]	@ (80061b0 <xTaskRemoveFromEventList+0xc0>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	429a      	cmp	r2, r3
 8006182:	d905      	bls.n	8006190 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006184:	2301      	movs	r3, #1
 8006186:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006188:	4b0a      	ldr	r3, [pc, #40]	@ (80061b4 <xTaskRemoveFromEventList+0xc4>)
 800618a:	2201      	movs	r2, #1
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	e001      	b.n	8006194 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8006190:	2300      	movs	r3, #0
 8006192:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006194:	697b      	ldr	r3, [r7, #20]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000340 	.word	0x20000340
 80061a4:	20000320 	.word	0x20000320
 80061a8:	20000244 	.word	0x20000244
 80061ac:	200002d8 	.word	0x200002d8
 80061b0:	20000240 	.word	0x20000240
 80061b4:	2000032c 	.word	0x2000032c

080061b8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061c0:	4b06      	ldr	r3, [pc, #24]	@ (80061dc <vTaskInternalSetTimeOutState+0x24>)
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80061c8:	4b05      	ldr	r3, [pc, #20]	@ (80061e0 <vTaskInternalSetTimeOutState+0x28>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	605a      	str	r2, [r3, #4]
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	20000330 	.word	0x20000330
 80061e0:	2000031c 	.word	0x2000031c

080061e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b088      	sub	sp, #32
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10b      	bne.n	800620c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	613b      	str	r3, [r7, #16]
    }
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	e7fd      	b.n	8006208 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10b      	bne.n	800622a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8006212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	60fb      	str	r3, [r7, #12]
    }
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	e7fd      	b.n	8006226 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800622a:	f001 f967 	bl	80074fc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800622e:	4b1f      	ldr	r3, [pc, #124]	@ (80062ac <xTaskCheckForTimeOut+0xc8>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006246:	d102      	bne.n	800624e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006248:	2300      	movs	r3, #0
 800624a:	61fb      	str	r3, [r7, #28]
 800624c:	e026      	b.n	800629c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4b17      	ldr	r3, [pc, #92]	@ (80062b0 <xTaskCheckForTimeOut+0xcc>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d00a      	beq.n	8006270 <xTaskCheckForTimeOut+0x8c>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	429a      	cmp	r2, r3
 8006262:	d305      	bcc.n	8006270 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006264:	2301      	movs	r3, #1
 8006266:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e015      	b.n	800629c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	429a      	cmp	r2, r3
 8006278:	d20b      	bcs.n	8006292 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	1ad2      	subs	r2, r2, r3
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff ff96 	bl	80061b8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800628c:	2300      	movs	r3, #0
 800628e:	61fb      	str	r3, [r7, #28]
 8006290:	e004      	b.n	800629c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006298:	2301      	movs	r3, #1
 800629a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800629c:	f001 f960 	bl	8007560 <vPortExitCritical>

    return xReturn;
 80062a0:	69fb      	ldr	r3, [r7, #28]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3720      	adds	r7, #32
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	2000031c 	.word	0x2000031c
 80062b0:	20000330 	.word	0x20000330

080062b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80062b8:	4b03      	ldr	r3, [pc, #12]	@ (80062c8 <vTaskMissedYield+0x14>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	601a      	str	r2, [r3, #0]
}
 80062be:	bf00      	nop
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	2000032c 	.word	0x2000032c

080062cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80062d4:	f000 f852 	bl	800637c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062d8:	4b06      	ldr	r3, [pc, #24]	@ (80062f4 <prvIdleTask+0x28>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d9f9      	bls.n	80062d4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80062e0:	4b05      	ldr	r3, [pc, #20]	@ (80062f8 <prvIdleTask+0x2c>)
 80062e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80062f0:	e7f0      	b.n	80062d4 <prvIdleTask+0x8>
 80062f2:	bf00      	nop
 80062f4:	20000244 	.word	0x20000244
 80062f8:	e000ed04 	.word	0xe000ed04

080062fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006302:	2300      	movs	r3, #0
 8006304:	607b      	str	r3, [r7, #4]
 8006306:	e00c      	b.n	8006322 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4a12      	ldr	r2, [pc, #72]	@ (800635c <prvInitialiseTaskLists+0x60>)
 8006314:	4413      	add	r3, r2
 8006316:	4618      	mov	r0, r3
 8006318:	f7fe fcb2 	bl	8004c80 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3301      	adds	r3, #1
 8006320:	607b      	str	r3, [r7, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b04      	cmp	r3, #4
 8006326:	d9ef      	bls.n	8006308 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006328:	480d      	ldr	r0, [pc, #52]	@ (8006360 <prvInitialiseTaskLists+0x64>)
 800632a:	f7fe fca9 	bl	8004c80 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800632e:	480d      	ldr	r0, [pc, #52]	@ (8006364 <prvInitialiseTaskLists+0x68>)
 8006330:	f7fe fca6 	bl	8004c80 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006334:	480c      	ldr	r0, [pc, #48]	@ (8006368 <prvInitialiseTaskLists+0x6c>)
 8006336:	f7fe fca3 	bl	8004c80 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800633a:	480c      	ldr	r0, [pc, #48]	@ (800636c <prvInitialiseTaskLists+0x70>)
 800633c:	f7fe fca0 	bl	8004c80 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006340:	480b      	ldr	r0, [pc, #44]	@ (8006370 <prvInitialiseTaskLists+0x74>)
 8006342:	f7fe fc9d 	bl	8004c80 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006346:	4b0b      	ldr	r3, [pc, #44]	@ (8006374 <prvInitialiseTaskLists+0x78>)
 8006348:	4a05      	ldr	r2, [pc, #20]	@ (8006360 <prvInitialiseTaskLists+0x64>)
 800634a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800634c:	4b0a      	ldr	r3, [pc, #40]	@ (8006378 <prvInitialiseTaskLists+0x7c>)
 800634e:	4a05      	ldr	r2, [pc, #20]	@ (8006364 <prvInitialiseTaskLists+0x68>)
 8006350:	601a      	str	r2, [r3, #0]
}
 8006352:	bf00      	nop
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20000244 	.word	0x20000244
 8006360:	200002a8 	.word	0x200002a8
 8006364:	200002bc 	.word	0x200002bc
 8006368:	200002d8 	.word	0x200002d8
 800636c:	200002ec 	.word	0x200002ec
 8006370:	20000304 	.word	0x20000304
 8006374:	200002d0 	.word	0x200002d0
 8006378:	200002d4 	.word	0x200002d4

0800637c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006382:	e019      	b.n	80063b8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006384:	f001 f8ba 	bl	80074fc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006388:	4b10      	ldr	r3, [pc, #64]	@ (80063cc <prvCheckTasksWaitingTermination+0x50>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3304      	adds	r3, #4
 8006394:	4618      	mov	r0, r3
 8006396:	f7fe fcfd 	bl	8004d94 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800639a:	4b0d      	ldr	r3, [pc, #52]	@ (80063d0 <prvCheckTasksWaitingTermination+0x54>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3b01      	subs	r3, #1
 80063a0:	4a0b      	ldr	r2, [pc, #44]	@ (80063d0 <prvCheckTasksWaitingTermination+0x54>)
 80063a2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80063a4:	4b0b      	ldr	r3, [pc, #44]	@ (80063d4 <prvCheckTasksWaitingTermination+0x58>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	4a0a      	ldr	r2, [pc, #40]	@ (80063d4 <prvCheckTasksWaitingTermination+0x58>)
 80063ac:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80063ae:	f001 f8d7 	bl	8007560 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f810 	bl	80063d8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063b8:	4b06      	ldr	r3, [pc, #24]	@ (80063d4 <prvCheckTasksWaitingTermination+0x58>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e1      	bne.n	8006384 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	200002ec 	.word	0x200002ec
 80063d0:	20000318 	.word	0x20000318
 80063d4:	20000300 	.word	0x20000300

080063d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 fa95 	bl	8007914 <vPortFree>
                vPortFree( pxTCB );
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f001 fa92 	bl	8007914 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063f8:	b480      	push	{r7}
 80063fa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006428 <prvResetNextTaskUnblockTime+0x30>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d104      	bne.n	8006410 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006406:	4b09      	ldr	r3, [pc, #36]	@ (800642c <prvResetNextTaskUnblockTime+0x34>)
 8006408:	f04f 32ff 	mov.w	r2, #4294967295
 800640c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800640e:	e005      	b.n	800641c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006410:	4b05      	ldr	r3, [pc, #20]	@ (8006428 <prvResetNextTaskUnblockTime+0x30>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a04      	ldr	r2, [pc, #16]	@ (800642c <prvResetNextTaskUnblockTime+0x34>)
 800641a:	6013      	str	r3, [r2, #0]
}
 800641c:	bf00      	nop
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	200002d0 	.word	0x200002d0
 800642c:	20000338 	.word	0x20000338

08006430 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006436:	4b0b      	ldr	r3, [pc, #44]	@ (8006464 <xTaskGetSchedulerState+0x34>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d102      	bne.n	8006444 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800643e:	2301      	movs	r3, #1
 8006440:	607b      	str	r3, [r7, #4]
 8006442:	e008      	b.n	8006456 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006444:	4b08      	ldr	r3, [pc, #32]	@ (8006468 <xTaskGetSchedulerState+0x38>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d102      	bne.n	8006452 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800644c:	2302      	movs	r3, #2
 800644e:	607b      	str	r3, [r7, #4]
 8006450:	e001      	b.n	8006456 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006452:	2300      	movs	r3, #0
 8006454:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006456:	687b      	ldr	r3, [r7, #4]
    }
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	20000324 	.word	0x20000324
 8006468:	20000340 	.word	0x20000340

0800646c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006478:	2300      	movs	r3, #0
 800647a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d065      	beq.n	800654e <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006482:	4b35      	ldr	r3, [pc, #212]	@ (8006558 <xTaskPriorityDisinherit+0xec>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	429a      	cmp	r2, r3
 800648a:	d00b      	beq.n	80064a4 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	60fb      	str	r3, [r7, #12]
    }
 800649e:	bf00      	nop
 80064a0:	bf00      	nop
 80064a2:	e7fd      	b.n	80064a0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10b      	bne.n	80064c4 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	60bb      	str	r3, [r7, #8]
    }
 80064be:	bf00      	nop
 80064c0:	bf00      	nop
 80064c2:	e7fd      	b.n	80064c0 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064c8:	1e5a      	subs	r2, r3, #1
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d039      	beq.n	800654e <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d135      	bne.n	800654e <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	3304      	adds	r3, #4
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fe fc54 	bl	8004d94 <uxListRemove>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f6:	2201      	movs	r2, #1
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	43da      	mvns	r2, r3
 80064fe:	4b17      	ldr	r3, [pc, #92]	@ (800655c <xTaskPriorityDisinherit+0xf0>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4013      	ands	r3, r2
 8006504:	4a15      	ldr	r2, [pc, #84]	@ (800655c <xTaskPriorityDisinherit+0xf0>)
 8006506:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006514:	f1c3 0205 	rsb	r2, r3, #5
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006520:	2201      	movs	r2, #1
 8006522:	409a      	lsls	r2, r3
 8006524:	4b0d      	ldr	r3, [pc, #52]	@ (800655c <xTaskPriorityDisinherit+0xf0>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4313      	orrs	r3, r2
 800652a:	4a0c      	ldr	r2, [pc, #48]	@ (800655c <xTaskPriorityDisinherit+0xf0>)
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4a09      	ldr	r2, [pc, #36]	@ (8006560 <xTaskPriorityDisinherit+0xf4>)
 800653c:	441a      	add	r2, r3
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	3304      	adds	r3, #4
 8006542:	4619      	mov	r1, r3
 8006544:	4610      	mov	r0, r2
 8006546:	f7fe fbc8 	bl	8004cda <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800654a:	2301      	movs	r3, #1
 800654c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800654e:	697b      	ldr	r3, [r7, #20]
    }
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	20000240 	.word	0x20000240
 800655c:	20000320 	.word	0x20000320
 8006560:	20000244 	.word	0x20000244

08006564 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00b      	beq.n	8006590 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	613b      	str	r3, [r7, #16]
    }
 800658a:	bf00      	nop
 800658c:	bf00      	nop
 800658e:	e7fd      	b.n	800658c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006590:	f000 ffb4 	bl	80074fc <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006594:	4b31      	ldr	r3, [pc, #196]	@ (800665c <xTaskGenericNotifyWait+0xf8>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	3354      	adds	r3, #84	@ 0x54
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d022      	beq.n	80065ec <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80065a6:	4b2d      	ldr	r3, [pc, #180]	@ (800665c <xTaskGenericNotifyWait+0xf8>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	3214      	adds	r2, #20
 80065ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	43d2      	mvns	r2, r2
 80065b6:	4011      	ands	r1, r2
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	3214      	adds	r2, #20
 80065bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80065c0:	4b26      	ldr	r3, [pc, #152]	@ (800665c <xTaskGenericNotifyWait+0xf8>)
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	3354      	adds	r3, #84	@ 0x54
 80065ca:	2201      	movs	r2, #1
 80065cc:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00b      	beq.n	80065ec <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065d4:	2101      	movs	r1, #1
 80065d6:	6a38      	ldr	r0, [r7, #32]
 80065d8:	f000 fa2e 	bl	8006a38 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80065dc:	4b20      	ldr	r3, [pc, #128]	@ (8006660 <xTaskGenericNotifyWait+0xfc>)
 80065de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80065ec:	f000 ffb8 	bl	8007560 <vPortExitCritical>

        taskENTER_CRITICAL();
 80065f0:	f000 ff84 	bl	80074fc <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80065fa:	4b18      	ldr	r3, [pc, #96]	@ (800665c <xTaskGenericNotifyWait+0xf8>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	3214      	adds	r2, #20
 8006602:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800660a:	4b14      	ldr	r3, [pc, #80]	@ (800665c <xTaskGenericNotifyWait+0xf8>)
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4413      	add	r3, r2
 8006612:	3354      	adds	r3, #84	@ 0x54
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d002      	beq.n	8006622 <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800661c:	2300      	movs	r3, #0
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	e00e      	b.n	8006640 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006622:	4b0e      	ldr	r3, [pc, #56]	@ (800665c <xTaskGenericNotifyWait+0xf8>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	3214      	adds	r2, #20
 800662a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	43d2      	mvns	r2, r2
 8006632:	4011      	ands	r1, r2
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	3214      	adds	r2, #20
 8006638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800663c:	2301      	movs	r3, #1
 800663e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006640:	4b06      	ldr	r3, [pc, #24]	@ (800665c <xTaskGenericNotifyWait+0xf8>)
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	3354      	adds	r3, #84	@ 0x54
 800664a:	2200      	movs	r2, #0
 800664c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800664e:	f000 ff87 	bl	8007560 <vPortExitCritical>

        return xReturn;
 8006652:	697b      	ldr	r3, [r7, #20]
    }
 8006654:	4618      	mov	r0, r3
 8006656:	3718      	adds	r7, #24
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	20000240 	.word	0x20000240
 8006660:	e000ed04 	.word	0xe000ed04

08006664 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006664:	b580      	push	{r7, lr}
 8006666:	b08c      	sub	sp, #48	@ 0x30
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006672:	2301      	movs	r3, #1
 8006674:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00b      	beq.n	8006694 <xTaskGenericNotify+0x30>
        __asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	623b      	str	r3, [r7, #32]
    }
 800668e:	bf00      	nop
 8006690:	bf00      	nop
 8006692:	e7fd      	b.n	8006690 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10b      	bne.n	80066b2 <xTaskGenericNotify+0x4e>
        __asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	61fb      	str	r3, [r7, #28]
    }
 80066ac:	bf00      	nop
 80066ae:	bf00      	nop
 80066b0:	e7fd      	b.n	80066ae <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 80066b6:	f000 ff21 	bl	80074fc <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80066ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d006      	beq.n	80066ce <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80066c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	3214      	adds	r2, #20
 80066c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066cc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80066ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4413      	add	r3, r2
 80066d4:	3354      	adds	r3, #84	@ 0x54
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80066dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	4413      	add	r3, r2
 80066e2:	3354      	adds	r3, #84	@ 0x54
 80066e4:	2202      	movs	r2, #2
 80066e6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80066e8:	78fb      	ldrb	r3, [r7, #3]
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d83b      	bhi.n	8006766 <xTaskGenericNotify+0x102>
 80066ee:	a201      	add	r2, pc, #4	@ (adr r2, 80066f4 <xTaskGenericNotify+0x90>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	08006787 	.word	0x08006787
 80066f8:	08006709 	.word	0x08006709
 80066fc:	08006725 	.word	0x08006725
 8006700:	0800673d 	.word	0x0800673d
 8006704:	0800674b 	.word	0x0800674b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	3214      	adds	r2, #20
 800670e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	ea42 0103 	orr.w	r1, r2, r3
 8006718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	3214      	adds	r2, #20
 800671e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006722:	e033      	b.n	800678c <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	3214      	adds	r2, #20
 800672a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672e:	1c59      	adds	r1, r3, #1
 8006730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	3214      	adds	r2, #20
 8006736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800673a:	e027      	b.n	800678c <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800673c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	3214      	adds	r2, #20
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006748:	e020      	b.n	800678c <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800674a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800674e:	2b02      	cmp	r3, #2
 8006750:	d006      	beq.n	8006760 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	3214      	adds	r2, #20
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800675e:	e015      	b.n	800678c <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8006760:	2300      	movs	r3, #0
 8006762:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 8006764:	e012      	b.n	800678c <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006766:	4b2c      	ldr	r3, [pc, #176]	@ (8006818 <xTaskGenericNotify+0x1b4>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00d      	beq.n	800678a <xTaskGenericNotify+0x126>
        __asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	61bb      	str	r3, [r7, #24]
    }
 8006780:	bf00      	nop
 8006782:	bf00      	nop
 8006784:	e7fd      	b.n	8006782 <xTaskGenericNotify+0x11e>
                    break;
 8006786:	bf00      	nop
 8006788:	e000      	b.n	800678c <xTaskGenericNotify+0x128>

                    break;
 800678a:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800678c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006790:	2b01      	cmp	r3, #1
 8006792:	d13a      	bne.n	800680a <xTaskGenericNotify+0x1a6>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006796:	3304      	adds	r3, #4
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe fafb 	bl	8004d94 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800679e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a2:	2201      	movs	r2, #1
 80067a4:	409a      	lsls	r2, r3
 80067a6:	4b1d      	ldr	r3, [pc, #116]	@ (800681c <xTaskGenericNotify+0x1b8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	4a1b      	ldr	r2, [pc, #108]	@ (800681c <xTaskGenericNotify+0x1b8>)
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4a18      	ldr	r2, [pc, #96]	@ (8006820 <xTaskGenericNotify+0x1bc>)
 80067be:	441a      	add	r2, r3
 80067c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c2:	3304      	adds	r3, #4
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	f7fe fa87 	bl	8004cda <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80067cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00b      	beq.n	80067ec <xTaskGenericNotify+0x188>
        __asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	617b      	str	r3, [r7, #20]
    }
 80067e6:	bf00      	nop
 80067e8:	bf00      	nop
 80067ea:	e7fd      	b.n	80067e8 <xTaskGenericNotify+0x184>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006824 <xTaskGenericNotify+0x1c0>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d907      	bls.n	800680a <xTaskGenericNotify+0x1a6>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80067fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006828 <xTaskGenericNotify+0x1c4>)
 80067fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800680a:	f000 fea9 	bl	8007560 <vPortExitCritical>

        return xReturn;
 800680e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8006810:	4618      	mov	r0, r3
 8006812:	3730      	adds	r7, #48	@ 0x30
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	2000031c 	.word	0x2000031c
 800681c:	20000320 	.word	0x20000320
 8006820:	20000244 	.word	0x20000244
 8006824:	20000240 	.word	0x20000240
 8006828:	e000ed04 	.word	0xe000ed04

0800682c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800682c:	b580      	push	{r7, lr}
 800682e:	b090      	sub	sp, #64	@ 0x40
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800683a:	2301      	movs	r3, #1
 800683c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10b      	bne.n	800685c <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8006856:	bf00      	nop
 8006858:	bf00      	nop
 800685a:	e7fd      	b.n	8006858 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00b      	beq.n	800687a <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8006874:	bf00      	nop
 8006876:	bf00      	nop
 8006878:	e7fd      	b.n	8006876 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800687a:	f000 ff27 	bl	80076cc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 8006882:	f3ef 8211 	mrs	r2, BASEPRI
 8006886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	627a      	str	r2, [r7, #36]	@ 0x24
 8006898:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800689c:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800689e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d006      	beq.n	80068b2 <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80068a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	3214      	adds	r2, #20
 80068aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068b0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80068b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4413      	add	r3, r2
 80068b8:	3354      	adds	r3, #84	@ 0x54
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80068c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4413      	add	r3, r2
 80068c6:	3354      	adds	r3, #84	@ 0x54
 80068c8:	2202      	movs	r2, #2
 80068ca:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d83b      	bhi.n	800694a <xTaskGenericNotifyFromISR+0x11e>
 80068d2:	a201      	add	r2, pc, #4	@ (adr r2, 80068d8 <xTaskGenericNotifyFromISR+0xac>)
 80068d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d8:	0800696b 	.word	0x0800696b
 80068dc:	080068ed 	.word	0x080068ed
 80068e0:	08006909 	.word	0x08006909
 80068e4:	08006921 	.word	0x08006921
 80068e8:	0800692f 	.word	0x0800692f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80068ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	3214      	adds	r2, #20
 80068f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	ea42 0103 	orr.w	r1, r2, r3
 80068fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	3214      	adds	r2, #20
 8006902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006906:	e033      	b.n	8006970 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	3214      	adds	r2, #20
 800690e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006912:	1c59      	adds	r1, r3, #1
 8006914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	3214      	adds	r2, #20
 800691a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800691e:	e027      	b.n	8006970 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	3214      	adds	r2, #20
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800692c:	e020      	b.n	8006970 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800692e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006932:	2b02      	cmp	r3, #2
 8006934:	d006      	beq.n	8006944 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	3214      	adds	r2, #20
 800693c:	6879      	ldr	r1, [r7, #4]
 800693e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006942:	e015      	b.n	8006970 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8006944:	2300      	movs	r3, #0
 8006946:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 8006948:	e012      	b.n	8006970 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800694a:	4b34      	ldr	r3, [pc, #208]	@ (8006a1c <xTaskGenericNotifyFromISR+0x1f0>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00d      	beq.n	800696e <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	61fb      	str	r3, [r7, #28]
    }
 8006964:	bf00      	nop
 8006966:	bf00      	nop
 8006968:	e7fd      	b.n	8006966 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 800696a:	bf00      	nop
 800696c:	e000      	b.n	8006970 <xTaskGenericNotifyFromISR+0x144>
                    break;
 800696e:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006970:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006974:	2b01      	cmp	r3, #1
 8006976:	d146      	bne.n	8006a06 <xTaskGenericNotifyFromISR+0x1da>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00b      	beq.n	8006998 <xTaskGenericNotifyFromISR+0x16c>
        __asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	61bb      	str	r3, [r7, #24]
    }
 8006992:	bf00      	nop
 8006994:	bf00      	nop
 8006996:	e7fd      	b.n	8006994 <xTaskGenericNotifyFromISR+0x168>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006998:	4b21      	ldr	r3, [pc, #132]	@ (8006a20 <xTaskGenericNotifyFromISR+0x1f4>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d11c      	bne.n	80069da <xTaskGenericNotifyFromISR+0x1ae>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a2:	3304      	adds	r3, #4
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fe f9f5 	bl	8004d94 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80069aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ae:	2201      	movs	r2, #1
 80069b0:	409a      	lsls	r2, r3
 80069b2:	4b1c      	ldr	r3, [pc, #112]	@ (8006a24 <xTaskGenericNotifyFromISR+0x1f8>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	4a1a      	ldr	r2, [pc, #104]	@ (8006a24 <xTaskGenericNotifyFromISR+0x1f8>)
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4a17      	ldr	r2, [pc, #92]	@ (8006a28 <xTaskGenericNotifyFromISR+0x1fc>)
 80069ca:	441a      	add	r2, r3
 80069cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ce:	3304      	adds	r3, #4
 80069d0:	4619      	mov	r1, r3
 80069d2:	4610      	mov	r0, r2
 80069d4:	f7fe f981 	bl	8004cda <vListInsertEnd>
 80069d8:	e005      	b.n	80069e6 <xTaskGenericNotifyFromISR+0x1ba>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80069da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069dc:	3318      	adds	r3, #24
 80069de:	4619      	mov	r1, r3
 80069e0:	4812      	ldr	r0, [pc, #72]	@ (8006a2c <xTaskGenericNotifyFromISR+0x200>)
 80069e2:	f7fe f97a 	bl	8004cda <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ea:	4b11      	ldr	r3, [pc, #68]	@ (8006a30 <xTaskGenericNotifyFromISR+0x204>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d908      	bls.n	8006a06 <xTaskGenericNotifyFromISR+0x1da>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80069f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <xTaskGenericNotifyFromISR+0x1d4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80069fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069fc:	2201      	movs	r2, #1
 80069fe:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006a00:	4b0c      	ldr	r3, [pc, #48]	@ (8006a34 <xTaskGenericNotifyFromISR+0x208>)
 8006a02:	2201      	movs	r2, #1
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a08:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f383 8811 	msr	BASEPRI, r3
    }
 8006a10:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 8006a14:	4618      	mov	r0, r3
 8006a16:	3740      	adds	r7, #64	@ 0x40
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	2000031c 	.word	0x2000031c
 8006a20:	20000340 	.word	0x20000340
 8006a24:	20000320 	.word	0x20000320
 8006a28:	20000244 	.word	0x20000244
 8006a2c:	200002d8 	.word	0x200002d8
 8006a30:	20000240 	.word	0x20000240
 8006a34:	2000032c 	.word	0x2000032c

08006a38 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006a42:	4b29      	ldr	r3, [pc, #164]	@ (8006ae8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a48:	4b28      	ldr	r3, [pc, #160]	@ (8006aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe f9a0 	bl	8004d94 <uxListRemove>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10b      	bne.n	8006a72 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006a5a:	4b24      	ldr	r3, [pc, #144]	@ (8006aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a60:	2201      	movs	r2, #1
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	43da      	mvns	r2, r3
 8006a68:	4b21      	ldr	r3, [pc, #132]	@ (8006af0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	4a20      	ldr	r2, [pc, #128]	@ (8006af0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a70:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a78:	d10a      	bne.n	8006a90 <prvAddCurrentTaskToDelayedList+0x58>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d007      	beq.n	8006a90 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a80:	4b1a      	ldr	r3, [pc, #104]	@ (8006aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3304      	adds	r3, #4
 8006a86:	4619      	mov	r1, r3
 8006a88:	481a      	ldr	r0, [pc, #104]	@ (8006af4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006a8a:	f7fe f926 	bl	8004cda <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006a8e:	e026      	b.n	8006ade <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4413      	add	r3, r2
 8006a96:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a98:	4b14      	ldr	r3, [pc, #80]	@ (8006aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d209      	bcs.n	8006abc <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aa8:	4b13      	ldr	r3, [pc, #76]	@ (8006af8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	4b0f      	ldr	r3, [pc, #60]	@ (8006aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	f7fe f934 	bl	8004d22 <vListInsert>
}
 8006aba:	e010      	b.n	8006ade <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006abc:	4b0f      	ldr	r3, [pc, #60]	@ (8006afc <prvAddCurrentTaskToDelayedList+0xc4>)
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8006aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f7fe f92a 	bl	8004d22 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006ace:	4b0c      	ldr	r3, [pc, #48]	@ (8006b00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d202      	bcs.n	8006ade <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006ad8:	4a09      	ldr	r2, [pc, #36]	@ (8006b00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	6013      	str	r3, [r2, #0]
}
 8006ade:	bf00      	nop
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	2000031c 	.word	0x2000031c
 8006aec:	20000240 	.word	0x20000240
 8006af0:	20000320 	.word	0x20000320
 8006af4:	20000304 	.word	0x20000304
 8006af8:	200002d4 	.word	0x200002d4
 8006afc:	200002d0 	.word	0x200002d0
 8006b00:	20000338 	.word	0x20000338

08006b04 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006b0e:	f000 fb3f 	bl	8007190 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006b12:	4b12      	ldr	r3, [pc, #72]	@ (8006b5c <xTimerCreateTimerTask+0x58>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00b      	beq.n	8006b32 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006b1a:	4b11      	ldr	r3, [pc, #68]	@ (8006b60 <xTimerCreateTimerTask+0x5c>)
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	2302      	movs	r3, #2
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	2300      	movs	r3, #0
 8006b24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006b28:	490e      	ldr	r1, [pc, #56]	@ (8006b64 <xTimerCreateTimerTask+0x60>)
 8006b2a:	480f      	ldr	r0, [pc, #60]	@ (8006b68 <xTimerCreateTimerTask+0x64>)
 8006b2c:	f7fe ff24 	bl	8005978 <xTaskCreate>
 8006b30:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10b      	bne.n	8006b50 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	603b      	str	r3, [r7, #0]
    }
 8006b4a:	bf00      	nop
 8006b4c:	bf00      	nop
 8006b4e:	e7fd      	b.n	8006b4c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006b50:	687b      	ldr	r3, [r7, #4]
    }
 8006b52:	4618      	mov	r0, r3
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000374 	.word	0x20000374
 8006b60:	20000378 	.word	0x20000378
 8006b64:	0800913c 	.word	0x0800913c
 8006b68:	08006d61 	.word	0x08006d61

08006b6c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b088      	sub	sp, #32
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006b7a:	202c      	movs	r0, #44	@ 0x2c
 8006b7c:	f000 fde8 	bl	8007750 <pvPortMalloc>
 8006b80:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00d      	beq.n	8006ba4 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	9301      	str	r3, [sp, #4]
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	68b9      	ldr	r1, [r7, #8]
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 f805 	bl	8006bae <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006ba4:	697b      	ldr	r3, [r7, #20]
        }
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b086      	sub	sp, #24
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	60f8      	str	r0, [r7, #12]
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	607a      	str	r2, [r7, #4]
 8006bba:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10b      	bne.n	8006bda <prvInitialiseNewTimer+0x2c>
        __asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	617b      	str	r3, [r7, #20]
    }
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop
 8006bd8:	e7fd      	b.n	8006bd6 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01e      	beq.n	8006c1e <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006be0:	f000 fad6 	bl	8007190 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8006be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	6a3a      	ldr	r2, [r7, #32]
 8006bfa:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfe:	3304      	adds	r3, #4
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fe f85d 	bl	8004cc0 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d008      	beq.n	8006c1e <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c12:	f043 0304 	orr.w	r3, r3, #4
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8006c1e:	bf00      	nop
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08a      	sub	sp, #40	@ 0x28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10b      	bne.n	8006c58 <xTimerGenericCommand+0x30>
        __asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	623b      	str	r3, [r7, #32]
    }
 8006c52:	bf00      	nop
 8006c54:	bf00      	nop
 8006c56:	e7fd      	b.n	8006c54 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006c58:	4b19      	ldr	r3, [pc, #100]	@ (8006cc0 <xTimerGenericCommand+0x98>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d02a      	beq.n	8006cb6 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2b05      	cmp	r3, #5
 8006c70:	dc18      	bgt.n	8006ca4 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c72:	f7ff fbdd 	bl	8006430 <xTaskGetSchedulerState>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d109      	bne.n	8006c90 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c7c:	4b10      	ldr	r3, [pc, #64]	@ (8006cc0 <xTimerGenericCommand+0x98>)
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	f107 0114 	add.w	r1, r7, #20
 8006c84:	2300      	movs	r3, #0
 8006c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c88:	f7fe f99e 	bl	8004fc8 <xQueueGenericSend>
 8006c8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c8e:	e012      	b.n	8006cb6 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c90:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc0 <xTimerGenericCommand+0x98>)
 8006c92:	6818      	ldr	r0, [r3, #0]
 8006c94:	f107 0114 	add.w	r1, r7, #20
 8006c98:	2300      	movs	r3, #0
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f7fe f994 	bl	8004fc8 <xQueueGenericSend>
 8006ca0:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ca2:	e008      	b.n	8006cb6 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ca4:	4b06      	ldr	r3, [pc, #24]	@ (8006cc0 <xTimerGenericCommand+0x98>)
 8006ca6:	6818      	ldr	r0, [r3, #0]
 8006ca8:	f107 0114 	add.w	r1, r7, #20
 8006cac:	2300      	movs	r3, #0
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	f7fe fa8c 	bl	80051cc <xQueueGenericSendFromISR>
 8006cb4:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3728      	adds	r7, #40	@ 0x28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20000374 	.word	0x20000374

08006cc4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b088      	sub	sp, #32
 8006cc8:	af02      	add	r7, sp, #8
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cce:	4b23      	ldr	r3, [pc, #140]	@ (8006d5c <prvProcessExpiredTimer+0x98>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	3304      	adds	r3, #4
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fe f859 	bl	8004d94 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d023      	beq.n	8006d38 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	699a      	ldr	r2, [r3, #24]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	18d1      	adds	r1, r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	6978      	ldr	r0, [r7, #20]
 8006cfe:	f000 f8d5 	bl	8006eac <prvInsertTimerInActiveList>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d020      	beq.n	8006d4a <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d08:	2300      	movs	r3, #0
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	2100      	movs	r1, #0
 8006d12:	6978      	ldr	r0, [r7, #20]
 8006d14:	f7ff ff88 	bl	8006c28 <xTimerGenericCommand>
 8006d18:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d114      	bne.n	8006d4a <prvProcessExpiredTimer+0x86>
        __asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	60fb      	str	r3, [r7, #12]
    }
 8006d32:	bf00      	nop
 8006d34:	bf00      	nop
 8006d36:	e7fd      	b.n	8006d34 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d3e:	f023 0301 	bic.w	r3, r3, #1
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	6978      	ldr	r0, [r7, #20]
 8006d50:	4798      	blx	r3
    }
 8006d52:	bf00      	nop
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	2000036c 	.word	0x2000036c

08006d60 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d68:	f107 0308 	add.w	r3, r7, #8
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 f859 	bl	8006e24 <prvGetNextExpireTime>
 8006d72:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4619      	mov	r1, r3
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 f805 	bl	8006d88 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006d7e:	f000 f8d7 	bl	8006f30 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d82:	bf00      	nop
 8006d84:	e7f0      	b.n	8006d68 <prvTimerTask+0x8>
	...

08006d88 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006d92:	f7fe ff89 	bl	8005ca8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d96:	f107 0308 	add.w	r3, r7, #8
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 f866 	bl	8006e6c <prvSampleTimeNow>
 8006da0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d130      	bne.n	8006e0a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10a      	bne.n	8006dc4 <prvProcessTimerOrBlockTask+0x3c>
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d806      	bhi.n	8006dc4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006db6:	f7fe ff85 	bl	8005cc4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006dba:	68f9      	ldr	r1, [r7, #12]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7ff ff81 	bl	8006cc4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006dc2:	e024      	b.n	8006e0e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d008      	beq.n	8006ddc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006dca:	4b13      	ldr	r3, [pc, #76]	@ (8006e18 <prvProcessTimerOrBlockTask+0x90>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <prvProcessTimerOrBlockTask+0x50>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e000      	b.n	8006dda <prvProcessTimerOrBlockTask+0x52>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8006e1c <prvProcessTimerOrBlockTask+0x94>)
 8006dde:	6818      	ldr	r0, [r3, #0]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	4619      	mov	r1, r3
 8006dea:	f7fe fd91 	bl	8005910 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006dee:	f7fe ff69 	bl	8005cc4 <xTaskResumeAll>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006df8:	4b09      	ldr	r3, [pc, #36]	@ (8006e20 <prvProcessTimerOrBlockTask+0x98>)
 8006dfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	f3bf 8f6f 	isb	sy
    }
 8006e08:	e001      	b.n	8006e0e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006e0a:	f7fe ff5b 	bl	8005cc4 <xTaskResumeAll>
    }
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20000370 	.word	0x20000370
 8006e1c:	20000374 	.word	0x20000374
 8006e20:	e000ed04 	.word	0xe000ed04

08006e24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e68 <prvGetNextExpireTime+0x44>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <prvGetNextExpireTime+0x16>
 8006e36:	2201      	movs	r2, #1
 8006e38:	e000      	b.n	8006e3c <prvGetNextExpireTime+0x18>
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d105      	bne.n	8006e54 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e48:	4b07      	ldr	r3, [pc, #28]	@ (8006e68 <prvGetNextExpireTime+0x44>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	e001      	b.n	8006e58 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006e58:	68fb      	ldr	r3, [r7, #12]
    }
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	2000036c 	.word	0x2000036c

08006e6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006e74:	f7fe ffc4 	bl	8005e00 <xTaskGetTickCount>
 8006e78:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea8 <prvSampleTimeNow+0x3c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d205      	bcs.n	8006e90 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006e84:	f000 f91e 	bl	80070c4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e002      	b.n	8006e96 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006e96:	4a04      	ldr	r2, [pc, #16]	@ (8006ea8 <prvSampleTimeNow+0x3c>)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
    }
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	2000037c 	.word	0x2000037c

08006eac <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d812      	bhi.n	8006ef8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	1ad2      	subs	r2, r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d302      	bcc.n	8006ee6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	e01b      	b.n	8006f1e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ee6:	4b10      	ldr	r3, [pc, #64]	@ (8006f28 <prvInsertTimerInActiveList+0x7c>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3304      	adds	r3, #4
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	f7fd ff16 	bl	8004d22 <vListInsert>
 8006ef6:	e012      	b.n	8006f1e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d206      	bcs.n	8006f0e <prvInsertTimerInActiveList+0x62>
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d302      	bcc.n	8006f0e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	e007      	b.n	8006f1e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f0e:	4b07      	ldr	r3, [pc, #28]	@ (8006f2c <prvInsertTimerInActiveList+0x80>)
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3304      	adds	r3, #4
 8006f16:	4619      	mov	r1, r3
 8006f18:	4610      	mov	r0, r2
 8006f1a:	f7fd ff02 	bl	8004d22 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006f1e:	697b      	ldr	r3, [r7, #20]
    }
 8006f20:	4618      	mov	r0, r3
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20000370 	.word	0x20000370
 8006f2c:	2000036c 	.word	0x2000036c

08006f30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08c      	sub	sp, #48	@ 0x30
 8006f34:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f36:	e0b2      	b.n	800709e <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f2c0 80af 	blt.w	800709e <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d004      	beq.n	8006f56 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	3304      	adds	r3, #4
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fd ff1f 	bl	8004d94 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f56:	1d3b      	adds	r3, r7, #4
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff ff87 	bl	8006e6c <prvSampleTimeNow>
 8006f5e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2b09      	cmp	r3, #9
 8006f64:	f200 8098 	bhi.w	8007098 <prvProcessReceivedCommands+0x168>
 8006f68:	a201      	add	r2, pc, #4	@ (adr r2, 8006f70 <prvProcessReceivedCommands+0x40>)
 8006f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6e:	bf00      	nop
 8006f70:	08006f99 	.word	0x08006f99
 8006f74:	08006f99 	.word	0x08006f99
 8006f78:	08006f99 	.word	0x08006f99
 8006f7c:	0800700f 	.word	0x0800700f
 8006f80:	08007023 	.word	0x08007023
 8006f84:	0800706f 	.word	0x0800706f
 8006f88:	08006f99 	.word	0x08006f99
 8006f8c:	08006f99 	.word	0x08006f99
 8006f90:	0800700f 	.word	0x0800700f
 8006f94:	08007023 	.word	0x08007023
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f9e:	f043 0301 	orr.w	r3, r3, #1
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	18d1      	adds	r1, r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6a3a      	ldr	r2, [r7, #32]
 8006fb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006fb8:	f7ff ff78 	bl	8006eac <prvInsertTimerInActiveList>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d06c      	beq.n	800709c <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006fc8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d061      	beq.n	800709c <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	441a      	add	r2, r3
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006fea:	f7ff fe1d 	bl	8006c28 <xTimerGenericCommand>
 8006fee:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d152      	bne.n	800709c <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	61bb      	str	r3, [r7, #24]
    }
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	e7fd      	b.n	800700a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800700e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007010:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007014:	f023 0301 	bic.w	r3, r3, #1
 8007018:	b2da      	uxtb	r2, r3
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007020:	e03d      	b.n	800709e <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007028:	f043 0301 	orr.w	r3, r3, #1
 800702c:	b2da      	uxtb	r2, r3
 800702e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007030:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007038:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800703a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10b      	bne.n	800705a <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8007042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	617b      	str	r3, [r7, #20]
    }
 8007054:	bf00      	nop
 8007056:	bf00      	nop
 8007058:	e7fd      	b.n	8007056 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	699a      	ldr	r2, [r3, #24]
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	18d1      	adds	r1, r2, r3
 8007062:	6a3b      	ldr	r3, [r7, #32]
 8007064:	6a3a      	ldr	r2, [r7, #32]
 8007066:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007068:	f7ff ff20 	bl	8006eac <prvInsertTimerInActiveList>
                        break;
 800706c:	e017      	b.n	800709e <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007070:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d103      	bne.n	8007084 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 800707c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800707e:	f000 fc49 	bl	8007914 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007082:	e00c      	b.n	800709e <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007086:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800708a:	f023 0301 	bic.w	r3, r3, #1
 800708e:	b2da      	uxtb	r2, r3
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007096:	e002      	b.n	800709e <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007098:	bf00      	nop
 800709a:	e000      	b.n	800709e <prvProcessReceivedCommands+0x16e>
                        break;
 800709c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800709e:	4b08      	ldr	r3, [pc, #32]	@ (80070c0 <prvProcessReceivedCommands+0x190>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f107 0108 	add.w	r1, r7, #8
 80070a6:	2200      	movs	r2, #0
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fe f93d 	bl	8005328 <xQueueReceive>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f47f af41 	bne.w	8006f38 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80070b6:	bf00      	nop
 80070b8:	bf00      	nop
 80070ba:	3728      	adds	r7, #40	@ 0x28
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20000374 	.word	0x20000374

080070c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070ca:	e049      	b.n	8007160 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070cc:	4b2e      	ldr	r3, [pc, #184]	@ (8007188 <prvSwitchTimerLists+0xc4>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070d6:	4b2c      	ldr	r3, [pc, #176]	@ (8007188 <prvSwitchTimerLists+0xc4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3304      	adds	r3, #4
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fd fe55 	bl	8004d94 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d02f      	beq.n	8007160 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	4413      	add	r3, r2
 8007108:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	429a      	cmp	r2, r3
 8007110:	d90e      	bls.n	8007130 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800711e:	4b1a      	ldr	r3, [pc, #104]	@ (8007188 <prvSwitchTimerLists+0xc4>)
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3304      	adds	r3, #4
 8007126:	4619      	mov	r1, r3
 8007128:	4610      	mov	r0, r2
 800712a:	f7fd fdfa 	bl	8004d22 <vListInsert>
 800712e:	e017      	b.n	8007160 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007130:	2300      	movs	r3, #0
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	2300      	movs	r3, #0
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	2100      	movs	r1, #0
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f7ff fd74 	bl	8006c28 <xTimerGenericCommand>
 8007140:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10b      	bne.n	8007160 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8007148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	603b      	str	r3, [r7, #0]
    }
 800715a:	bf00      	nop
 800715c:	bf00      	nop
 800715e:	e7fd      	b.n	800715c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007160:	4b09      	ldr	r3, [pc, #36]	@ (8007188 <prvSwitchTimerLists+0xc4>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1b0      	bne.n	80070cc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800716a:	4b07      	ldr	r3, [pc, #28]	@ (8007188 <prvSwitchTimerLists+0xc4>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8007170:	4b06      	ldr	r3, [pc, #24]	@ (800718c <prvSwitchTimerLists+0xc8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a04      	ldr	r2, [pc, #16]	@ (8007188 <prvSwitchTimerLists+0xc4>)
 8007176:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007178:	4a04      	ldr	r2, [pc, #16]	@ (800718c <prvSwitchTimerLists+0xc8>)
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	6013      	str	r3, [r2, #0]
    }
 800717e:	bf00      	nop
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	2000036c 	.word	0x2000036c
 800718c:	20000370 	.word	0x20000370

08007190 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007194:	f000 f9b2 	bl	80074fc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007198:	4b12      	ldr	r3, [pc, #72]	@ (80071e4 <prvCheckForValidListAndQueue+0x54>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d11d      	bne.n	80071dc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80071a0:	4811      	ldr	r0, [pc, #68]	@ (80071e8 <prvCheckForValidListAndQueue+0x58>)
 80071a2:	f7fd fd6d 	bl	8004c80 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80071a6:	4811      	ldr	r0, [pc, #68]	@ (80071ec <prvCheckForValidListAndQueue+0x5c>)
 80071a8:	f7fd fd6a 	bl	8004c80 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80071ac:	4b10      	ldr	r3, [pc, #64]	@ (80071f0 <prvCheckForValidListAndQueue+0x60>)
 80071ae:	4a0e      	ldr	r2, [pc, #56]	@ (80071e8 <prvCheckForValidListAndQueue+0x58>)
 80071b0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80071b2:	4b10      	ldr	r3, [pc, #64]	@ (80071f4 <prvCheckForValidListAndQueue+0x64>)
 80071b4:	4a0d      	ldr	r2, [pc, #52]	@ (80071ec <prvCheckForValidListAndQueue+0x5c>)
 80071b6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80071b8:	2200      	movs	r2, #0
 80071ba:	210c      	movs	r1, #12
 80071bc:	200a      	movs	r0, #10
 80071be:	f7fd fe7d 	bl	8004ebc <xQueueGenericCreate>
 80071c2:	4603      	mov	r3, r0
 80071c4:	4a07      	ldr	r2, [pc, #28]	@ (80071e4 <prvCheckForValidListAndQueue+0x54>)
 80071c6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80071c8:	4b06      	ldr	r3, [pc, #24]	@ (80071e4 <prvCheckForValidListAndQueue+0x54>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d005      	beq.n	80071dc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80071d0:	4b04      	ldr	r3, [pc, #16]	@ (80071e4 <prvCheckForValidListAndQueue+0x54>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4908      	ldr	r1, [pc, #32]	@ (80071f8 <prvCheckForValidListAndQueue+0x68>)
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe fb70 	bl	80058bc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80071dc:	f000 f9c0 	bl	8007560 <vPortExitCritical>
    }
 80071e0:	bf00      	nop
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	20000374 	.word	0x20000374
 80071e8:	20000344 	.word	0x20000344
 80071ec:	20000358 	.word	0x20000358
 80071f0:	2000036c 	.word	0x2000036c
 80071f4:	20000370 	.word	0x20000370
 80071f8:	08009144 	.word	0x08009144

080071fc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10b      	bne.n	8007226 <xTimerIsTimerActive+0x2a>
        __asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	60fb      	str	r3, [r7, #12]
    }
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	e7fd      	b.n	8007222 <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 8007226:	f000 f969 	bl	80074fc <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d102      	bne.n	800723e <xTimerIsTimerActive+0x42>
            {
                xReturn = pdFALSE;
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	e001      	b.n	8007242 <xTimerIsTimerActive+0x46>
            }
            else
            {
                xReturn = pdTRUE;
 800723e:	2301      	movs	r3, #1
 8007240:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8007242:	f000 f98d 	bl	8007560 <vPortExitCritical>

        return xReturn;
 8007246:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10b      	bne.n	800727a <pvTimerGetTimerID+0x2a>
        __asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	60fb      	str	r3, [r7, #12]
    }
 8007274:	bf00      	nop
 8007276:	bf00      	nop
 8007278:	e7fd      	b.n	8007276 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 800727a:	f000 f93f 	bl	80074fc <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8007284:	f000 f96c 	bl	8007560 <vPortExitCritical>

        return pvReturn;
 8007288:	693b      	ldr	r3, [r7, #16]
    }
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3b04      	subs	r3, #4
 80072a4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80072ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3b04      	subs	r3, #4
 80072b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f023 0201 	bic.w	r2, r3, #1
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3b04      	subs	r3, #4
 80072c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80072c4:	4a0c      	ldr	r2, [pc, #48]	@ (80072f8 <pxPortInitialiseStack+0x64>)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3b14      	subs	r3, #20
 80072ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3b04      	subs	r3, #4
 80072da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f06f 0202 	mvn.w	r2, #2
 80072e2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3b20      	subs	r3, #32
 80072e8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80072ea:	68fb      	ldr	r3, [r7, #12]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	080072fd 	.word	0x080072fd

080072fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007306:	4b13      	ldr	r3, [pc, #76]	@ (8007354 <prvTaskExitError+0x58>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730e:	d00b      	beq.n	8007328 <prvTaskExitError+0x2c>
        __asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	60fb      	str	r3, [r7, #12]
    }
 8007322:	bf00      	nop
 8007324:	bf00      	nop
 8007326:	e7fd      	b.n	8007324 <prvTaskExitError+0x28>
        __asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	60bb      	str	r3, [r7, #8]
    }
 800733a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800733c:	bf00      	nop
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0fc      	beq.n	800733e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	20000024 	.word	0x20000024
	...

08007360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007360:	4b07      	ldr	r3, [pc, #28]	@ (8007380 <pxCurrentTCBConst2>)
 8007362:	6819      	ldr	r1, [r3, #0]
 8007364:	6808      	ldr	r0, [r1, #0]
 8007366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736a:	f380 8809 	msr	PSP, r0
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f04f 0000 	mov.w	r0, #0
 8007376:	f380 8811 	msr	BASEPRI, r0
 800737a:	4770      	bx	lr
 800737c:	f3af 8000 	nop.w

08007380 <pxCurrentTCBConst2>:
 8007380:	20000240 	.word	0x20000240
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop

08007388 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007388:	4808      	ldr	r0, [pc, #32]	@ (80073ac <prvPortStartFirstTask+0x24>)
 800738a:	6800      	ldr	r0, [r0, #0]
 800738c:	6800      	ldr	r0, [r0, #0]
 800738e:	f380 8808 	msr	MSP, r0
 8007392:	f04f 0000 	mov.w	r0, #0
 8007396:	f380 8814 	msr	CONTROL, r0
 800739a:	b662      	cpsie	i
 800739c:	b661      	cpsie	f
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	df00      	svc	0
 80073a8:	bf00      	nop
 80073aa:	0000      	.short	0x0000
 80073ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80073b0:	bf00      	nop
 80073b2:	bf00      	nop

080073b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073ba:	4b47      	ldr	r3, [pc, #284]	@ (80074d8 <xPortStartScheduler+0x124>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a47      	ldr	r2, [pc, #284]	@ (80074dc <xPortStartScheduler+0x128>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d10b      	bne.n	80073dc <xPortStartScheduler+0x28>
        __asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	613b      	str	r3, [r7, #16]
    }
 80073d6:	bf00      	nop
 80073d8:	bf00      	nop
 80073da:	e7fd      	b.n	80073d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073dc:	4b3e      	ldr	r3, [pc, #248]	@ (80074d8 <xPortStartScheduler+0x124>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a3f      	ldr	r2, [pc, #252]	@ (80074e0 <xPortStartScheduler+0x12c>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d10b      	bne.n	80073fe <xPortStartScheduler+0x4a>
        __asm volatile
 80073e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	60fb      	str	r3, [r7, #12]
    }
 80073f8:	bf00      	nop
 80073fa:	bf00      	nop
 80073fc:	e7fd      	b.n	80073fa <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073fe:	4b39      	ldr	r3, [pc, #228]	@ (80074e4 <xPortStartScheduler+0x130>)
 8007400:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	b2db      	uxtb	r3, r3
 8007408:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	22ff      	movs	r2, #255	@ 0xff
 800740e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007420:	b2da      	uxtb	r2, r3
 8007422:	4b31      	ldr	r3, [pc, #196]	@ (80074e8 <xPortStartScheduler+0x134>)
 8007424:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007426:	4b31      	ldr	r3, [pc, #196]	@ (80074ec <xPortStartScheduler+0x138>)
 8007428:	2207      	movs	r2, #7
 800742a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800742c:	e009      	b.n	8007442 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800742e:	4b2f      	ldr	r3, [pc, #188]	@ (80074ec <xPortStartScheduler+0x138>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3b01      	subs	r3, #1
 8007434:	4a2d      	ldr	r2, [pc, #180]	@ (80074ec <xPortStartScheduler+0x138>)
 8007436:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007438:	78fb      	ldrb	r3, [r7, #3]
 800743a:	b2db      	uxtb	r3, r3
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	b2db      	uxtb	r3, r3
 8007440:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007442:	78fb      	ldrb	r3, [r7, #3]
 8007444:	b2db      	uxtb	r3, r3
 8007446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800744a:	2b80      	cmp	r3, #128	@ 0x80
 800744c:	d0ef      	beq.n	800742e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800744e:	4b27      	ldr	r3, [pc, #156]	@ (80074ec <xPortStartScheduler+0x138>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f1c3 0307 	rsb	r3, r3, #7
 8007456:	2b04      	cmp	r3, #4
 8007458:	d00b      	beq.n	8007472 <xPortStartScheduler+0xbe>
        __asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	60bb      	str	r3, [r7, #8]
    }
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	e7fd      	b.n	800746e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007472:	4b1e      	ldr	r3, [pc, #120]	@ (80074ec <xPortStartScheduler+0x138>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	021b      	lsls	r3, r3, #8
 8007478:	4a1c      	ldr	r2, [pc, #112]	@ (80074ec <xPortStartScheduler+0x138>)
 800747a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800747c:	4b1b      	ldr	r3, [pc, #108]	@ (80074ec <xPortStartScheduler+0x138>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007484:	4a19      	ldr	r2, [pc, #100]	@ (80074ec <xPortStartScheduler+0x138>)
 8007486:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	b2da      	uxtb	r2, r3
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007490:	4b17      	ldr	r3, [pc, #92]	@ (80074f0 <xPortStartScheduler+0x13c>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a16      	ldr	r2, [pc, #88]	@ (80074f0 <xPortStartScheduler+0x13c>)
 8007496:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800749a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800749c:	4b14      	ldr	r3, [pc, #80]	@ (80074f0 <xPortStartScheduler+0x13c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a13      	ldr	r2, [pc, #76]	@ (80074f0 <xPortStartScheduler+0x13c>)
 80074a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80074a6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80074a8:	f000 f8e0 	bl	800766c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80074ac:	4b11      	ldr	r3, [pc, #68]	@ (80074f4 <xPortStartScheduler+0x140>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80074b2:	f000 f8ff 	bl	80076b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074b6:	4b10      	ldr	r3, [pc, #64]	@ (80074f8 <xPortStartScheduler+0x144>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a0f      	ldr	r2, [pc, #60]	@ (80074f8 <xPortStartScheduler+0x144>)
 80074bc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80074c0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80074c2:	f7ff ff61 	bl	8007388 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80074c6:	f7fe fd65 	bl	8005f94 <vTaskSwitchContext>
    prvTaskExitError();
 80074ca:	f7ff ff17 	bl	80072fc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	e000ed00 	.word	0xe000ed00
 80074dc:	410fc271 	.word	0x410fc271
 80074e0:	410fc270 	.word	0x410fc270
 80074e4:	e000e400 	.word	0xe000e400
 80074e8:	20000380 	.word	0x20000380
 80074ec:	20000384 	.word	0x20000384
 80074f0:	e000ed20 	.word	0xe000ed20
 80074f4:	20000024 	.word	0x20000024
 80074f8:	e000ef34 	.word	0xe000ef34

080074fc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
        __asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	607b      	str	r3, [r7, #4]
    }
 8007514:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007516:	4b10      	ldr	r3, [pc, #64]	@ (8007558 <vPortEnterCritical+0x5c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3301      	adds	r3, #1
 800751c:	4a0e      	ldr	r2, [pc, #56]	@ (8007558 <vPortEnterCritical+0x5c>)
 800751e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007520:	4b0d      	ldr	r3, [pc, #52]	@ (8007558 <vPortEnterCritical+0x5c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d110      	bne.n	800754a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007528:	4b0c      	ldr	r3, [pc, #48]	@ (800755c <vPortEnterCritical+0x60>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00b      	beq.n	800754a <vPortEnterCritical+0x4e>
        __asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	603b      	str	r3, [r7, #0]
    }
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	e7fd      	b.n	8007546 <vPortEnterCritical+0x4a>
    }
}
 800754a:	bf00      	nop
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	20000024 	.word	0x20000024
 800755c:	e000ed04 	.word	0xe000ed04

08007560 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007566:	4b12      	ldr	r3, [pc, #72]	@ (80075b0 <vPortExitCritical+0x50>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10b      	bne.n	8007586 <vPortExitCritical+0x26>
        __asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	607b      	str	r3, [r7, #4]
    }
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	e7fd      	b.n	8007582 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007586:	4b0a      	ldr	r3, [pc, #40]	@ (80075b0 <vPortExitCritical+0x50>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3b01      	subs	r3, #1
 800758c:	4a08      	ldr	r2, [pc, #32]	@ (80075b0 <vPortExitCritical+0x50>)
 800758e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007590:	4b07      	ldr	r3, [pc, #28]	@ (80075b0 <vPortExitCritical+0x50>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d105      	bne.n	80075a4 <vPortExitCritical+0x44>
 8007598:	2300      	movs	r3, #0
 800759a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	f383 8811 	msr	BASEPRI, r3
    }
 80075a2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	20000024 	.word	0x20000024
	...

080075c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80075c0:	f3ef 8009 	mrs	r0, PSP
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	4b15      	ldr	r3, [pc, #84]	@ (8007620 <pxCurrentTCBConst>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	f01e 0f10 	tst.w	lr, #16
 80075d0:	bf08      	it	eq
 80075d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075da:	6010      	str	r0, [r2, #0]
 80075dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80075e4:	f380 8811 	msr	BASEPRI, r0
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f7fe fcd0 	bl	8005f94 <vTaskSwitchContext>
 80075f4:	f04f 0000 	mov.w	r0, #0
 80075f8:	f380 8811 	msr	BASEPRI, r0
 80075fc:	bc09      	pop	{r0, r3}
 80075fe:	6819      	ldr	r1, [r3, #0]
 8007600:	6808      	ldr	r0, [r1, #0]
 8007602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007606:	f01e 0f10 	tst.w	lr, #16
 800760a:	bf08      	it	eq
 800760c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007610:	f380 8809 	msr	PSP, r0
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	f3af 8000 	nop.w

08007620 <pxCurrentTCBConst>:
 8007620:	20000240 	.word	0x20000240
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007624:	bf00      	nop
 8007626:	bf00      	nop

08007628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
        __asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	607b      	str	r3, [r7, #4]
    }
 8007640:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007642:	f7fe fbed 	bl	8005e20 <xTaskIncrementTick>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800764c:	4b06      	ldr	r3, [pc, #24]	@ (8007668 <SysTick_Handler+0x40>)
 800764e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	2300      	movs	r3, #0
 8007656:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	f383 8811 	msr	BASEPRI, r3
    }
 800765e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007660:	bf00      	nop
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	e000ed04 	.word	0xe000ed04

0800766c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800766c:	b480      	push	{r7}
 800766e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007670:	4b0b      	ldr	r3, [pc, #44]	@ (80076a0 <vPortSetupTimerInterrupt+0x34>)
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007676:	4b0b      	ldr	r3, [pc, #44]	@ (80076a4 <vPortSetupTimerInterrupt+0x38>)
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800767c:	4b0a      	ldr	r3, [pc, #40]	@ (80076a8 <vPortSetupTimerInterrupt+0x3c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a0a      	ldr	r2, [pc, #40]	@ (80076ac <vPortSetupTimerInterrupt+0x40>)
 8007682:	fba2 2303 	umull	r2, r3, r2, r3
 8007686:	099b      	lsrs	r3, r3, #6
 8007688:	4a09      	ldr	r2, [pc, #36]	@ (80076b0 <vPortSetupTimerInterrupt+0x44>)
 800768a:	3b01      	subs	r3, #1
 800768c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800768e:	4b04      	ldr	r3, [pc, #16]	@ (80076a0 <vPortSetupTimerInterrupt+0x34>)
 8007690:	2207      	movs	r2, #7
 8007692:	601a      	str	r2, [r3, #0]
}
 8007694:	bf00      	nop
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	e000e010 	.word	0xe000e010
 80076a4:	e000e018 	.word	0xe000e018
 80076a8:	20000010 	.word	0x20000010
 80076ac:	10624dd3 	.word	0x10624dd3
 80076b0:	e000e014 	.word	0xe000e014

080076b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80076b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80076c4 <vPortEnableVFP+0x10>
 80076b8:	6801      	ldr	r1, [r0, #0]
 80076ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80076be:	6001      	str	r1, [r0, #0]
 80076c0:	4770      	bx	lr
 80076c2:	0000      	.short	0x0000
 80076c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80076c8:	bf00      	nop
 80076ca:	bf00      	nop

080076cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80076d2:	f3ef 8305 	mrs	r3, IPSR
 80076d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b0f      	cmp	r3, #15
 80076dc:	d915      	bls.n	800770a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076de:	4a18      	ldr	r2, [pc, #96]	@ (8007740 <vPortValidateInterruptPriority+0x74>)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4413      	add	r3, r2
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076e8:	4b16      	ldr	r3, [pc, #88]	@ (8007744 <vPortValidateInterruptPriority+0x78>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	7afa      	ldrb	r2, [r7, #11]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d20b      	bcs.n	800770a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	607b      	str	r3, [r7, #4]
    }
 8007704:	bf00      	nop
 8007706:	bf00      	nop
 8007708:	e7fd      	b.n	8007706 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800770a:	4b0f      	ldr	r3, [pc, #60]	@ (8007748 <vPortValidateInterruptPriority+0x7c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007712:	4b0e      	ldr	r3, [pc, #56]	@ (800774c <vPortValidateInterruptPriority+0x80>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d90b      	bls.n	8007732 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	603b      	str	r3, [r7, #0]
    }
 800772c:	bf00      	nop
 800772e:	bf00      	nop
 8007730:	e7fd      	b.n	800772e <vPortValidateInterruptPriority+0x62>
    }
 8007732:	bf00      	nop
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	e000e3f0 	.word	0xe000e3f0
 8007744:	20000380 	.word	0x20000380
 8007748:	e000ed0c 	.word	0xe000ed0c
 800774c:	20000384 	.word	0x20000384

08007750 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08a      	sub	sp, #40	@ 0x28
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007758:	2300      	movs	r3, #0
 800775a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800775c:	f7fe faa4 	bl	8005ca8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007760:	4b66      	ldr	r3, [pc, #408]	@ (80078fc <pvPortMalloc+0x1ac>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007768:	f000 f938 	bl	80079dc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800776c:	4b64      	ldr	r3, [pc, #400]	@ (8007900 <pvPortMalloc+0x1b0>)
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4013      	ands	r3, r2
 8007774:	2b00      	cmp	r3, #0
 8007776:	f040 80a9 	bne.w	80078cc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d02e      	beq.n	80077de <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8007780:	2208      	movs	r2, #8
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	429a      	cmp	r2, r3
 800778a:	d228      	bcs.n	80077de <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800778c:	2208      	movs	r2, #8
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4413      	add	r3, r2
 8007792:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f003 0307 	and.w	r3, r3, #7
 800779a:	2b00      	cmp	r3, #0
 800779c:	d022      	beq.n	80077e4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f023 0307 	bic.w	r3, r3, #7
 80077a4:	3308      	adds	r3, #8
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d215      	bcs.n	80077d8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f023 0307 	bic.w	r3, r3, #7
 80077b2:	3308      	adds	r3, #8
 80077b4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f003 0307 	and.w	r3, r3, #7
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d011      	beq.n	80077e4 <pvPortMalloc+0x94>
        __asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	617b      	str	r3, [r7, #20]
    }
 80077d2:	bf00      	nop
 80077d4:	bf00      	nop
 80077d6:	e7fd      	b.n	80077d4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80077d8:	2300      	movs	r3, #0
 80077da:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077dc:	e002      	b.n	80077e4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	607b      	str	r3, [r7, #4]
 80077e2:	e000      	b.n	80077e6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077e4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d06f      	beq.n	80078cc <pvPortMalloc+0x17c>
 80077ec:	4b45      	ldr	r3, [pc, #276]	@ (8007904 <pvPortMalloc+0x1b4>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d86a      	bhi.n	80078cc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80077f6:	4b44      	ldr	r3, [pc, #272]	@ (8007908 <pvPortMalloc+0x1b8>)
 80077f8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80077fa:	4b43      	ldr	r3, [pc, #268]	@ (8007908 <pvPortMalloc+0x1b8>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007800:	e004      	b.n	800780c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8007802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007804:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800780c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	429a      	cmp	r2, r3
 8007814:	d903      	bls.n	800781e <pvPortMalloc+0xce>
 8007816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1f1      	bne.n	8007802 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800781e:	4b37      	ldr	r3, [pc, #220]	@ (80078fc <pvPortMalloc+0x1ac>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007824:	429a      	cmp	r2, r3
 8007826:	d051      	beq.n	80078cc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2208      	movs	r2, #8
 800782e:	4413      	add	r3, r2
 8007830:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800783a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	1ad2      	subs	r2, r2, r3
 8007842:	2308      	movs	r3, #8
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	429a      	cmp	r2, r3
 8007848:	d920      	bls.n	800788c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800784a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4413      	add	r3, r2
 8007850:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	f003 0307 	and.w	r3, r3, #7
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00b      	beq.n	8007874 <pvPortMalloc+0x124>
        __asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	613b      	str	r3, [r7, #16]
    }
 800786e:	bf00      	nop
 8007870:	bf00      	nop
 8007872:	e7fd      	b.n	8007870 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	1ad2      	subs	r2, r2, r3
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007886:	69b8      	ldr	r0, [r7, #24]
 8007888:	f000 f90a 	bl	8007aa0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800788c:	4b1d      	ldr	r3, [pc, #116]	@ (8007904 <pvPortMalloc+0x1b4>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	4a1b      	ldr	r2, [pc, #108]	@ (8007904 <pvPortMalloc+0x1b4>)
 8007898:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800789a:	4b1a      	ldr	r3, [pc, #104]	@ (8007904 <pvPortMalloc+0x1b4>)
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	4b1b      	ldr	r3, [pc, #108]	@ (800790c <pvPortMalloc+0x1bc>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d203      	bcs.n	80078ae <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078a6:	4b17      	ldr	r3, [pc, #92]	@ (8007904 <pvPortMalloc+0x1b4>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a18      	ldr	r2, [pc, #96]	@ (800790c <pvPortMalloc+0x1bc>)
 80078ac:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	4b13      	ldr	r3, [pc, #76]	@ (8007900 <pvPortMalloc+0x1b0>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	431a      	orrs	r2, r3
 80078b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80078bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078be:	2200      	movs	r2, #0
 80078c0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80078c2:	4b13      	ldr	r3, [pc, #76]	@ (8007910 <pvPortMalloc+0x1c0>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3301      	adds	r3, #1
 80078c8:	4a11      	ldr	r2, [pc, #68]	@ (8007910 <pvPortMalloc+0x1c0>)
 80078ca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80078cc:	f7fe f9fa 	bl	8005cc4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00b      	beq.n	80078f2 <pvPortMalloc+0x1a2>
        __asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	60fb      	str	r3, [r7, #12]
    }
 80078ec:	bf00      	nop
 80078ee:	bf00      	nop
 80078f0:	e7fd      	b.n	80078ee <pvPortMalloc+0x19e>
    return pvReturn;
 80078f2:	69fb      	ldr	r3, [r7, #28]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3728      	adds	r7, #40	@ 0x28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	20012f90 	.word	0x20012f90
 8007900:	20012fa4 	.word	0x20012fa4
 8007904:	20012f94 	.word	0x20012f94
 8007908:	20012f88 	.word	0x20012f88
 800790c:	20012f98 	.word	0x20012f98
 8007910:	20012f9c 	.word	0x20012f9c

08007914 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d04f      	beq.n	80079c6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007926:	2308      	movs	r3, #8
 8007928:	425b      	negs	r3, r3
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	4413      	add	r3, r2
 800792e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	4b25      	ldr	r3, [pc, #148]	@ (80079d0 <vPortFree+0xbc>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4013      	ands	r3, r2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10b      	bne.n	800795a <vPortFree+0x46>
        __asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	60fb      	str	r3, [r7, #12]
    }
 8007954:	bf00      	nop
 8007956:	bf00      	nop
 8007958:	e7fd      	b.n	8007956 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00b      	beq.n	800797a <vPortFree+0x66>
        __asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	60bb      	str	r3, [r7, #8]
    }
 8007974:	bf00      	nop
 8007976:	bf00      	nop
 8007978:	e7fd      	b.n	8007976 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	4b14      	ldr	r3, [pc, #80]	@ (80079d0 <vPortFree+0xbc>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4013      	ands	r3, r2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d01e      	beq.n	80079c6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d11a      	bne.n	80079c6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	4b0e      	ldr	r3, [pc, #56]	@ (80079d0 <vPortFree+0xbc>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	43db      	mvns	r3, r3
 800799a:	401a      	ands	r2, r3
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80079a0:	f7fe f982 	bl	8005ca8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	4b0a      	ldr	r3, [pc, #40]	@ (80079d4 <vPortFree+0xc0>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4413      	add	r3, r2
 80079ae:	4a09      	ldr	r2, [pc, #36]	@ (80079d4 <vPortFree+0xc0>)
 80079b0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079b2:	6938      	ldr	r0, [r7, #16]
 80079b4:	f000 f874 	bl	8007aa0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80079b8:	4b07      	ldr	r3, [pc, #28]	@ (80079d8 <vPortFree+0xc4>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3301      	adds	r3, #1
 80079be:	4a06      	ldr	r2, [pc, #24]	@ (80079d8 <vPortFree+0xc4>)
 80079c0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80079c2:	f7fe f97f 	bl	8005cc4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80079c6:	bf00      	nop
 80079c8:	3718      	adds	r7, #24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20012fa4 	.word	0x20012fa4
 80079d4:	20012f94 	.word	0x20012f94
 80079d8:	20012fa0 	.word	0x20012fa0

080079dc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079e2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80079e6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80079e8:	4b27      	ldr	r3, [pc, #156]	@ (8007a88 <prvHeapInit+0xac>)
 80079ea:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f003 0307 	and.w	r3, r3, #7
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00c      	beq.n	8007a10 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3307      	adds	r3, #7
 80079fa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f023 0307 	bic.w	r3, r3, #7
 8007a02:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8007a88 <prvHeapInit+0xac>)
 8007a0c:	4413      	add	r3, r2
 8007a0e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a14:	4a1d      	ldr	r2, [pc, #116]	@ (8007a8c <prvHeapInit+0xb0>)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8007a8c <prvHeapInit+0xb0>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	4413      	add	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007a28:	2208      	movs	r2, #8
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	1a9b      	subs	r3, r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0307 	bic.w	r3, r3, #7
 8007a36:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4a15      	ldr	r2, [pc, #84]	@ (8007a90 <prvHeapInit+0xb4>)
 8007a3c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007a3e:	4b14      	ldr	r3, [pc, #80]	@ (8007a90 <prvHeapInit+0xb4>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2200      	movs	r2, #0
 8007a44:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007a46:	4b12      	ldr	r3, [pc, #72]	@ (8007a90 <prvHeapInit+0xb4>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	1ad2      	subs	r2, r2, r3
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007a90 <prvHeapInit+0xb4>)
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	4a0a      	ldr	r2, [pc, #40]	@ (8007a94 <prvHeapInit+0xb8>)
 8007a6a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	4a09      	ldr	r2, [pc, #36]	@ (8007a98 <prvHeapInit+0xbc>)
 8007a72:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a74:	4b09      	ldr	r3, [pc, #36]	@ (8007a9c <prvHeapInit+0xc0>)
 8007a76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007a7a:	601a      	str	r2, [r3, #0]
}
 8007a7c:	bf00      	nop
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	20000388 	.word	0x20000388
 8007a8c:	20012f88 	.word	0x20012f88
 8007a90:	20012f90 	.word	0x20012f90
 8007a94:	20012f98 	.word	0x20012f98
 8007a98:	20012f94 	.word	0x20012f94
 8007a9c:	20012fa4 	.word	0x20012fa4

08007aa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007aa8:	4b28      	ldr	r3, [pc, #160]	@ (8007b4c <prvInsertBlockIntoFreeList+0xac>)
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	e002      	b.n	8007ab4 <prvInsertBlockIntoFreeList+0x14>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d8f7      	bhi.n	8007aae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	68ba      	ldr	r2, [r7, #8]
 8007ac8:	4413      	add	r3, r2
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d108      	bne.n	8007ae2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	441a      	add	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	441a      	add	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d118      	bne.n	8007b28 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	4b15      	ldr	r3, [pc, #84]	@ (8007b50 <prvInsertBlockIntoFreeList+0xb0>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d00d      	beq.n	8007b1e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	441a      	add	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	e008      	b.n	8007b30 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007b50 <prvInsertBlockIntoFreeList+0xb0>)
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	e003      	b.n	8007b30 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d002      	beq.n	8007b3e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007b3e:	bf00      	nop
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	20012f88 	.word	0x20012f88
 8007b50:	20012f90 	.word	0x20012f90

08007b54 <std>:
 8007b54:	2300      	movs	r3, #0
 8007b56:	b510      	push	{r4, lr}
 8007b58:	4604      	mov	r4, r0
 8007b5a:	e9c0 3300 	strd	r3, r3, [r0]
 8007b5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b62:	6083      	str	r3, [r0, #8]
 8007b64:	8181      	strh	r1, [r0, #12]
 8007b66:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b68:	81c2      	strh	r2, [r0, #14]
 8007b6a:	6183      	str	r3, [r0, #24]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	2208      	movs	r2, #8
 8007b70:	305c      	adds	r0, #92	@ 0x5c
 8007b72:	f000 f926 	bl	8007dc2 <memset>
 8007b76:	4b0d      	ldr	r3, [pc, #52]	@ (8007bac <std+0x58>)
 8007b78:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb0 <std+0x5c>)
 8007b7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb4 <std+0x60>)
 8007b80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b82:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb8 <std+0x64>)
 8007b84:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b86:	4b0d      	ldr	r3, [pc, #52]	@ (8007bbc <std+0x68>)
 8007b88:	6224      	str	r4, [r4, #32]
 8007b8a:	429c      	cmp	r4, r3
 8007b8c:	d006      	beq.n	8007b9c <std+0x48>
 8007b8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b92:	4294      	cmp	r4, r2
 8007b94:	d002      	beq.n	8007b9c <std+0x48>
 8007b96:	33d0      	adds	r3, #208	@ 0xd0
 8007b98:	429c      	cmp	r4, r3
 8007b9a:	d105      	bne.n	8007ba8 <std+0x54>
 8007b9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ba4:	f000 b986 	b.w	8007eb4 <__retarget_lock_init_recursive>
 8007ba8:	bd10      	pop	{r4, pc}
 8007baa:	bf00      	nop
 8007bac:	08007d3d 	.word	0x08007d3d
 8007bb0:	08007d5f 	.word	0x08007d5f
 8007bb4:	08007d97 	.word	0x08007d97
 8007bb8:	08007dbb 	.word	0x08007dbb
 8007bbc:	20012fa8 	.word	0x20012fa8

08007bc0 <stdio_exit_handler>:
 8007bc0:	4a02      	ldr	r2, [pc, #8]	@ (8007bcc <stdio_exit_handler+0xc>)
 8007bc2:	4903      	ldr	r1, [pc, #12]	@ (8007bd0 <stdio_exit_handler+0x10>)
 8007bc4:	4803      	ldr	r0, [pc, #12]	@ (8007bd4 <stdio_exit_handler+0x14>)
 8007bc6:	f000 b869 	b.w	8007c9c <_fwalk_sglue>
 8007bca:	bf00      	nop
 8007bcc:	20000028 	.word	0x20000028
 8007bd0:	08008a21 	.word	0x08008a21
 8007bd4:	20000038 	.word	0x20000038

08007bd8 <cleanup_stdio>:
 8007bd8:	6841      	ldr	r1, [r0, #4]
 8007bda:	4b0c      	ldr	r3, [pc, #48]	@ (8007c0c <cleanup_stdio+0x34>)
 8007bdc:	4299      	cmp	r1, r3
 8007bde:	b510      	push	{r4, lr}
 8007be0:	4604      	mov	r4, r0
 8007be2:	d001      	beq.n	8007be8 <cleanup_stdio+0x10>
 8007be4:	f000 ff1c 	bl	8008a20 <_fflush_r>
 8007be8:	68a1      	ldr	r1, [r4, #8]
 8007bea:	4b09      	ldr	r3, [pc, #36]	@ (8007c10 <cleanup_stdio+0x38>)
 8007bec:	4299      	cmp	r1, r3
 8007bee:	d002      	beq.n	8007bf6 <cleanup_stdio+0x1e>
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 ff15 	bl	8008a20 <_fflush_r>
 8007bf6:	68e1      	ldr	r1, [r4, #12]
 8007bf8:	4b06      	ldr	r3, [pc, #24]	@ (8007c14 <cleanup_stdio+0x3c>)
 8007bfa:	4299      	cmp	r1, r3
 8007bfc:	d004      	beq.n	8007c08 <cleanup_stdio+0x30>
 8007bfe:	4620      	mov	r0, r4
 8007c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c04:	f000 bf0c 	b.w	8008a20 <_fflush_r>
 8007c08:	bd10      	pop	{r4, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20012fa8 	.word	0x20012fa8
 8007c10:	20013010 	.word	0x20013010
 8007c14:	20013078 	.word	0x20013078

08007c18 <global_stdio_init.part.0>:
 8007c18:	b510      	push	{r4, lr}
 8007c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007c48 <global_stdio_init.part.0+0x30>)
 8007c1c:	4c0b      	ldr	r4, [pc, #44]	@ (8007c4c <global_stdio_init.part.0+0x34>)
 8007c1e:	4a0c      	ldr	r2, [pc, #48]	@ (8007c50 <global_stdio_init.part.0+0x38>)
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	4620      	mov	r0, r4
 8007c24:	2200      	movs	r2, #0
 8007c26:	2104      	movs	r1, #4
 8007c28:	f7ff ff94 	bl	8007b54 <std>
 8007c2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c30:	2201      	movs	r2, #1
 8007c32:	2109      	movs	r1, #9
 8007c34:	f7ff ff8e 	bl	8007b54 <std>
 8007c38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c42:	2112      	movs	r1, #18
 8007c44:	f7ff bf86 	b.w	8007b54 <std>
 8007c48:	200130e0 	.word	0x200130e0
 8007c4c:	20012fa8 	.word	0x20012fa8
 8007c50:	08007bc1 	.word	0x08007bc1

08007c54 <__sfp_lock_acquire>:
 8007c54:	4801      	ldr	r0, [pc, #4]	@ (8007c5c <__sfp_lock_acquire+0x8>)
 8007c56:	f000 b92e 	b.w	8007eb6 <__retarget_lock_acquire_recursive>
 8007c5a:	bf00      	nop
 8007c5c:	200130e9 	.word	0x200130e9

08007c60 <__sfp_lock_release>:
 8007c60:	4801      	ldr	r0, [pc, #4]	@ (8007c68 <__sfp_lock_release+0x8>)
 8007c62:	f000 b929 	b.w	8007eb8 <__retarget_lock_release_recursive>
 8007c66:	bf00      	nop
 8007c68:	200130e9 	.word	0x200130e9

08007c6c <__sinit>:
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	4604      	mov	r4, r0
 8007c70:	f7ff fff0 	bl	8007c54 <__sfp_lock_acquire>
 8007c74:	6a23      	ldr	r3, [r4, #32]
 8007c76:	b11b      	cbz	r3, 8007c80 <__sinit+0x14>
 8007c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c7c:	f7ff bff0 	b.w	8007c60 <__sfp_lock_release>
 8007c80:	4b04      	ldr	r3, [pc, #16]	@ (8007c94 <__sinit+0x28>)
 8007c82:	6223      	str	r3, [r4, #32]
 8007c84:	4b04      	ldr	r3, [pc, #16]	@ (8007c98 <__sinit+0x2c>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1f5      	bne.n	8007c78 <__sinit+0xc>
 8007c8c:	f7ff ffc4 	bl	8007c18 <global_stdio_init.part.0>
 8007c90:	e7f2      	b.n	8007c78 <__sinit+0xc>
 8007c92:	bf00      	nop
 8007c94:	08007bd9 	.word	0x08007bd9
 8007c98:	200130e0 	.word	0x200130e0

08007c9c <_fwalk_sglue>:
 8007c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ca0:	4607      	mov	r7, r0
 8007ca2:	4688      	mov	r8, r1
 8007ca4:	4614      	mov	r4, r2
 8007ca6:	2600      	movs	r6, #0
 8007ca8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cac:	f1b9 0901 	subs.w	r9, r9, #1
 8007cb0:	d505      	bpl.n	8007cbe <_fwalk_sglue+0x22>
 8007cb2:	6824      	ldr	r4, [r4, #0]
 8007cb4:	2c00      	cmp	r4, #0
 8007cb6:	d1f7      	bne.n	8007ca8 <_fwalk_sglue+0xc>
 8007cb8:	4630      	mov	r0, r6
 8007cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cbe:	89ab      	ldrh	r3, [r5, #12]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d907      	bls.n	8007cd4 <_fwalk_sglue+0x38>
 8007cc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	d003      	beq.n	8007cd4 <_fwalk_sglue+0x38>
 8007ccc:	4629      	mov	r1, r5
 8007cce:	4638      	mov	r0, r7
 8007cd0:	47c0      	blx	r8
 8007cd2:	4306      	orrs	r6, r0
 8007cd4:	3568      	adds	r5, #104	@ 0x68
 8007cd6:	e7e9      	b.n	8007cac <_fwalk_sglue+0x10>

08007cd8 <iprintf>:
 8007cd8:	b40f      	push	{r0, r1, r2, r3}
 8007cda:	b507      	push	{r0, r1, r2, lr}
 8007cdc:	4906      	ldr	r1, [pc, #24]	@ (8007cf8 <iprintf+0x20>)
 8007cde:	ab04      	add	r3, sp, #16
 8007ce0:	6808      	ldr	r0, [r1, #0]
 8007ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ce6:	6881      	ldr	r1, [r0, #8]
 8007ce8:	9301      	str	r3, [sp, #4]
 8007cea:	f000 fb6f 	bl	80083cc <_vfiprintf_r>
 8007cee:	b003      	add	sp, #12
 8007cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cf4:	b004      	add	sp, #16
 8007cf6:	4770      	bx	lr
 8007cf8:	20000034 	.word	0x20000034

08007cfc <siprintf>:
 8007cfc:	b40e      	push	{r1, r2, r3}
 8007cfe:	b500      	push	{lr}
 8007d00:	b09c      	sub	sp, #112	@ 0x70
 8007d02:	ab1d      	add	r3, sp, #116	@ 0x74
 8007d04:	9002      	str	r0, [sp, #8]
 8007d06:	9006      	str	r0, [sp, #24]
 8007d08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d0c:	4809      	ldr	r0, [pc, #36]	@ (8007d34 <siprintf+0x38>)
 8007d0e:	9107      	str	r1, [sp, #28]
 8007d10:	9104      	str	r1, [sp, #16]
 8007d12:	4909      	ldr	r1, [pc, #36]	@ (8007d38 <siprintf+0x3c>)
 8007d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d18:	9105      	str	r1, [sp, #20]
 8007d1a:	6800      	ldr	r0, [r0, #0]
 8007d1c:	9301      	str	r3, [sp, #4]
 8007d1e:	a902      	add	r1, sp, #8
 8007d20:	f000 fa2e 	bl	8008180 <_svfiprintf_r>
 8007d24:	9b02      	ldr	r3, [sp, #8]
 8007d26:	2200      	movs	r2, #0
 8007d28:	701a      	strb	r2, [r3, #0]
 8007d2a:	b01c      	add	sp, #112	@ 0x70
 8007d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d30:	b003      	add	sp, #12
 8007d32:	4770      	bx	lr
 8007d34:	20000034 	.word	0x20000034
 8007d38:	ffff0208 	.word	0xffff0208

08007d3c <__sread>:
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	460c      	mov	r4, r1
 8007d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d44:	f000 f868 	bl	8007e18 <_read_r>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	bfab      	itete	ge
 8007d4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d4e:	89a3      	ldrhlt	r3, [r4, #12]
 8007d50:	181b      	addge	r3, r3, r0
 8007d52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d56:	bfac      	ite	ge
 8007d58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d5a:	81a3      	strhlt	r3, [r4, #12]
 8007d5c:	bd10      	pop	{r4, pc}

08007d5e <__swrite>:
 8007d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d62:	461f      	mov	r7, r3
 8007d64:	898b      	ldrh	r3, [r1, #12]
 8007d66:	05db      	lsls	r3, r3, #23
 8007d68:	4605      	mov	r5, r0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	4616      	mov	r6, r2
 8007d6e:	d505      	bpl.n	8007d7c <__swrite+0x1e>
 8007d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d74:	2302      	movs	r3, #2
 8007d76:	2200      	movs	r2, #0
 8007d78:	f000 f83c 	bl	8007df4 <_lseek_r>
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d86:	81a3      	strh	r3, [r4, #12]
 8007d88:	4632      	mov	r2, r6
 8007d8a:	463b      	mov	r3, r7
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d92:	f000 b853 	b.w	8007e3c <_write_r>

08007d96 <__sseek>:
 8007d96:	b510      	push	{r4, lr}
 8007d98:	460c      	mov	r4, r1
 8007d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d9e:	f000 f829 	bl	8007df4 <_lseek_r>
 8007da2:	1c43      	adds	r3, r0, #1
 8007da4:	89a3      	ldrh	r3, [r4, #12]
 8007da6:	bf15      	itete	ne
 8007da8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007daa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007dae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007db2:	81a3      	strheq	r3, [r4, #12]
 8007db4:	bf18      	it	ne
 8007db6:	81a3      	strhne	r3, [r4, #12]
 8007db8:	bd10      	pop	{r4, pc}

08007dba <__sclose>:
 8007dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dbe:	f000 b809 	b.w	8007dd4 <_close_r>

08007dc2 <memset>:
 8007dc2:	4402      	add	r2, r0
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d100      	bne.n	8007dcc <memset+0xa>
 8007dca:	4770      	bx	lr
 8007dcc:	f803 1b01 	strb.w	r1, [r3], #1
 8007dd0:	e7f9      	b.n	8007dc6 <memset+0x4>
	...

08007dd4 <_close_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4d06      	ldr	r5, [pc, #24]	@ (8007df0 <_close_r+0x1c>)
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4604      	mov	r4, r0
 8007ddc:	4608      	mov	r0, r1
 8007dde:	602b      	str	r3, [r5, #0]
 8007de0:	f7f9 fb93 	bl	800150a <_close>
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	d102      	bne.n	8007dee <_close_r+0x1a>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	b103      	cbz	r3, 8007dee <_close_r+0x1a>
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	200130e4 	.word	0x200130e4

08007df4 <_lseek_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4d07      	ldr	r5, [pc, #28]	@ (8007e14 <_lseek_r+0x20>)
 8007df8:	4604      	mov	r4, r0
 8007dfa:	4608      	mov	r0, r1
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	2200      	movs	r2, #0
 8007e00:	602a      	str	r2, [r5, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	f7f9 fba8 	bl	8001558 <_lseek>
 8007e08:	1c43      	adds	r3, r0, #1
 8007e0a:	d102      	bne.n	8007e12 <_lseek_r+0x1e>
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	b103      	cbz	r3, 8007e12 <_lseek_r+0x1e>
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	bd38      	pop	{r3, r4, r5, pc}
 8007e14:	200130e4 	.word	0x200130e4

08007e18 <_read_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4d07      	ldr	r5, [pc, #28]	@ (8007e38 <_read_r+0x20>)
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	4608      	mov	r0, r1
 8007e20:	4611      	mov	r1, r2
 8007e22:	2200      	movs	r2, #0
 8007e24:	602a      	str	r2, [r5, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	f7f9 fb36 	bl	8001498 <_read>
 8007e2c:	1c43      	adds	r3, r0, #1
 8007e2e:	d102      	bne.n	8007e36 <_read_r+0x1e>
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	b103      	cbz	r3, 8007e36 <_read_r+0x1e>
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
 8007e38:	200130e4 	.word	0x200130e4

08007e3c <_write_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	4d07      	ldr	r5, [pc, #28]	@ (8007e5c <_write_r+0x20>)
 8007e40:	4604      	mov	r4, r0
 8007e42:	4608      	mov	r0, r1
 8007e44:	4611      	mov	r1, r2
 8007e46:	2200      	movs	r2, #0
 8007e48:	602a      	str	r2, [r5, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f7f9 fb41 	bl	80014d2 <_write>
 8007e50:	1c43      	adds	r3, r0, #1
 8007e52:	d102      	bne.n	8007e5a <_write_r+0x1e>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	b103      	cbz	r3, 8007e5a <_write_r+0x1e>
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	bd38      	pop	{r3, r4, r5, pc}
 8007e5c:	200130e4 	.word	0x200130e4

08007e60 <__errno>:
 8007e60:	4b01      	ldr	r3, [pc, #4]	@ (8007e68 <__errno+0x8>)
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	20000034 	.word	0x20000034

08007e6c <__libc_init_array>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	4d0d      	ldr	r5, [pc, #52]	@ (8007ea4 <__libc_init_array+0x38>)
 8007e70:	4c0d      	ldr	r4, [pc, #52]	@ (8007ea8 <__libc_init_array+0x3c>)
 8007e72:	1b64      	subs	r4, r4, r5
 8007e74:	10a4      	asrs	r4, r4, #2
 8007e76:	2600      	movs	r6, #0
 8007e78:	42a6      	cmp	r6, r4
 8007e7a:	d109      	bne.n	8007e90 <__libc_init_array+0x24>
 8007e7c:	4d0b      	ldr	r5, [pc, #44]	@ (8007eac <__libc_init_array+0x40>)
 8007e7e:	4c0c      	ldr	r4, [pc, #48]	@ (8007eb0 <__libc_init_array+0x44>)
 8007e80:	f000 ff6e 	bl	8008d60 <_init>
 8007e84:	1b64      	subs	r4, r4, r5
 8007e86:	10a4      	asrs	r4, r4, #2
 8007e88:	2600      	movs	r6, #0
 8007e8a:	42a6      	cmp	r6, r4
 8007e8c:	d105      	bne.n	8007e9a <__libc_init_array+0x2e>
 8007e8e:	bd70      	pop	{r4, r5, r6, pc}
 8007e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e94:	4798      	blx	r3
 8007e96:	3601      	adds	r6, #1
 8007e98:	e7ee      	b.n	8007e78 <__libc_init_array+0xc>
 8007e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e9e:	4798      	blx	r3
 8007ea0:	3601      	adds	r6, #1
 8007ea2:	e7f2      	b.n	8007e8a <__libc_init_array+0x1e>
 8007ea4:	080091a0 	.word	0x080091a0
 8007ea8:	080091a0 	.word	0x080091a0
 8007eac:	080091a0 	.word	0x080091a0
 8007eb0:	080091a4 	.word	0x080091a4

08007eb4 <__retarget_lock_init_recursive>:
 8007eb4:	4770      	bx	lr

08007eb6 <__retarget_lock_acquire_recursive>:
 8007eb6:	4770      	bx	lr

08007eb8 <__retarget_lock_release_recursive>:
 8007eb8:	4770      	bx	lr

08007eba <memcpy>:
 8007eba:	440a      	add	r2, r1
 8007ebc:	4291      	cmp	r1, r2
 8007ebe:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ec2:	d100      	bne.n	8007ec6 <memcpy+0xc>
 8007ec4:	4770      	bx	lr
 8007ec6:	b510      	push	{r4, lr}
 8007ec8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ecc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ed0:	4291      	cmp	r1, r2
 8007ed2:	d1f9      	bne.n	8007ec8 <memcpy+0xe>
 8007ed4:	bd10      	pop	{r4, pc}
	...

08007ed8 <_free_r>:
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	4605      	mov	r5, r0
 8007edc:	2900      	cmp	r1, #0
 8007ede:	d041      	beq.n	8007f64 <_free_r+0x8c>
 8007ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ee4:	1f0c      	subs	r4, r1, #4
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bfb8      	it	lt
 8007eea:	18e4      	addlt	r4, r4, r3
 8007eec:	f000 f8e0 	bl	80080b0 <__malloc_lock>
 8007ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f68 <_free_r+0x90>)
 8007ef2:	6813      	ldr	r3, [r2, #0]
 8007ef4:	b933      	cbnz	r3, 8007f04 <_free_r+0x2c>
 8007ef6:	6063      	str	r3, [r4, #4]
 8007ef8:	6014      	str	r4, [r2, #0]
 8007efa:	4628      	mov	r0, r5
 8007efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f00:	f000 b8dc 	b.w	80080bc <__malloc_unlock>
 8007f04:	42a3      	cmp	r3, r4
 8007f06:	d908      	bls.n	8007f1a <_free_r+0x42>
 8007f08:	6820      	ldr	r0, [r4, #0]
 8007f0a:	1821      	adds	r1, r4, r0
 8007f0c:	428b      	cmp	r3, r1
 8007f0e:	bf01      	itttt	eq
 8007f10:	6819      	ldreq	r1, [r3, #0]
 8007f12:	685b      	ldreq	r3, [r3, #4]
 8007f14:	1809      	addeq	r1, r1, r0
 8007f16:	6021      	streq	r1, [r4, #0]
 8007f18:	e7ed      	b.n	8007ef6 <_free_r+0x1e>
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	b10b      	cbz	r3, 8007f24 <_free_r+0x4c>
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	d9fa      	bls.n	8007f1a <_free_r+0x42>
 8007f24:	6811      	ldr	r1, [r2, #0]
 8007f26:	1850      	adds	r0, r2, r1
 8007f28:	42a0      	cmp	r0, r4
 8007f2a:	d10b      	bne.n	8007f44 <_free_r+0x6c>
 8007f2c:	6820      	ldr	r0, [r4, #0]
 8007f2e:	4401      	add	r1, r0
 8007f30:	1850      	adds	r0, r2, r1
 8007f32:	4283      	cmp	r3, r0
 8007f34:	6011      	str	r1, [r2, #0]
 8007f36:	d1e0      	bne.n	8007efa <_free_r+0x22>
 8007f38:	6818      	ldr	r0, [r3, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	6053      	str	r3, [r2, #4]
 8007f3e:	4408      	add	r0, r1
 8007f40:	6010      	str	r0, [r2, #0]
 8007f42:	e7da      	b.n	8007efa <_free_r+0x22>
 8007f44:	d902      	bls.n	8007f4c <_free_r+0x74>
 8007f46:	230c      	movs	r3, #12
 8007f48:	602b      	str	r3, [r5, #0]
 8007f4a:	e7d6      	b.n	8007efa <_free_r+0x22>
 8007f4c:	6820      	ldr	r0, [r4, #0]
 8007f4e:	1821      	adds	r1, r4, r0
 8007f50:	428b      	cmp	r3, r1
 8007f52:	bf04      	itt	eq
 8007f54:	6819      	ldreq	r1, [r3, #0]
 8007f56:	685b      	ldreq	r3, [r3, #4]
 8007f58:	6063      	str	r3, [r4, #4]
 8007f5a:	bf04      	itt	eq
 8007f5c:	1809      	addeq	r1, r1, r0
 8007f5e:	6021      	streq	r1, [r4, #0]
 8007f60:	6054      	str	r4, [r2, #4]
 8007f62:	e7ca      	b.n	8007efa <_free_r+0x22>
 8007f64:	bd38      	pop	{r3, r4, r5, pc}
 8007f66:	bf00      	nop
 8007f68:	200130f0 	.word	0x200130f0

08007f6c <sbrk_aligned>:
 8007f6c:	b570      	push	{r4, r5, r6, lr}
 8007f6e:	4e0f      	ldr	r6, [pc, #60]	@ (8007fac <sbrk_aligned+0x40>)
 8007f70:	460c      	mov	r4, r1
 8007f72:	6831      	ldr	r1, [r6, #0]
 8007f74:	4605      	mov	r5, r0
 8007f76:	b911      	cbnz	r1, 8007f7e <sbrk_aligned+0x12>
 8007f78:	f000 fe28 	bl	8008bcc <_sbrk_r>
 8007f7c:	6030      	str	r0, [r6, #0]
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4628      	mov	r0, r5
 8007f82:	f000 fe23 	bl	8008bcc <_sbrk_r>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	d103      	bne.n	8007f92 <sbrk_aligned+0x26>
 8007f8a:	f04f 34ff 	mov.w	r4, #4294967295
 8007f8e:	4620      	mov	r0, r4
 8007f90:	bd70      	pop	{r4, r5, r6, pc}
 8007f92:	1cc4      	adds	r4, r0, #3
 8007f94:	f024 0403 	bic.w	r4, r4, #3
 8007f98:	42a0      	cmp	r0, r4
 8007f9a:	d0f8      	beq.n	8007f8e <sbrk_aligned+0x22>
 8007f9c:	1a21      	subs	r1, r4, r0
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f000 fe14 	bl	8008bcc <_sbrk_r>
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d1f2      	bne.n	8007f8e <sbrk_aligned+0x22>
 8007fa8:	e7ef      	b.n	8007f8a <sbrk_aligned+0x1e>
 8007faa:	bf00      	nop
 8007fac:	200130ec 	.word	0x200130ec

08007fb0 <_malloc_r>:
 8007fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb4:	1ccd      	adds	r5, r1, #3
 8007fb6:	f025 0503 	bic.w	r5, r5, #3
 8007fba:	3508      	adds	r5, #8
 8007fbc:	2d0c      	cmp	r5, #12
 8007fbe:	bf38      	it	cc
 8007fc0:	250c      	movcc	r5, #12
 8007fc2:	2d00      	cmp	r5, #0
 8007fc4:	4606      	mov	r6, r0
 8007fc6:	db01      	blt.n	8007fcc <_malloc_r+0x1c>
 8007fc8:	42a9      	cmp	r1, r5
 8007fca:	d904      	bls.n	8007fd6 <_malloc_r+0x26>
 8007fcc:	230c      	movs	r3, #12
 8007fce:	6033      	str	r3, [r6, #0]
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80080ac <_malloc_r+0xfc>
 8007fda:	f000 f869 	bl	80080b0 <__malloc_lock>
 8007fde:	f8d8 3000 	ldr.w	r3, [r8]
 8007fe2:	461c      	mov	r4, r3
 8007fe4:	bb44      	cbnz	r4, 8008038 <_malloc_r+0x88>
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f7ff ffbf 	bl	8007f6c <sbrk_aligned>
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	d158      	bne.n	80080a6 <_malloc_r+0xf6>
 8007ff4:	f8d8 4000 	ldr.w	r4, [r8]
 8007ff8:	4627      	mov	r7, r4
 8007ffa:	2f00      	cmp	r7, #0
 8007ffc:	d143      	bne.n	8008086 <_malloc_r+0xd6>
 8007ffe:	2c00      	cmp	r4, #0
 8008000:	d04b      	beq.n	800809a <_malloc_r+0xea>
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	4639      	mov	r1, r7
 8008006:	4630      	mov	r0, r6
 8008008:	eb04 0903 	add.w	r9, r4, r3
 800800c:	f000 fdde 	bl	8008bcc <_sbrk_r>
 8008010:	4581      	cmp	r9, r0
 8008012:	d142      	bne.n	800809a <_malloc_r+0xea>
 8008014:	6821      	ldr	r1, [r4, #0]
 8008016:	1a6d      	subs	r5, r5, r1
 8008018:	4629      	mov	r1, r5
 800801a:	4630      	mov	r0, r6
 800801c:	f7ff ffa6 	bl	8007f6c <sbrk_aligned>
 8008020:	3001      	adds	r0, #1
 8008022:	d03a      	beq.n	800809a <_malloc_r+0xea>
 8008024:	6823      	ldr	r3, [r4, #0]
 8008026:	442b      	add	r3, r5
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	f8d8 3000 	ldr.w	r3, [r8]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	bb62      	cbnz	r2, 800808c <_malloc_r+0xdc>
 8008032:	f8c8 7000 	str.w	r7, [r8]
 8008036:	e00f      	b.n	8008058 <_malloc_r+0xa8>
 8008038:	6822      	ldr	r2, [r4, #0]
 800803a:	1b52      	subs	r2, r2, r5
 800803c:	d420      	bmi.n	8008080 <_malloc_r+0xd0>
 800803e:	2a0b      	cmp	r2, #11
 8008040:	d917      	bls.n	8008072 <_malloc_r+0xc2>
 8008042:	1961      	adds	r1, r4, r5
 8008044:	42a3      	cmp	r3, r4
 8008046:	6025      	str	r5, [r4, #0]
 8008048:	bf18      	it	ne
 800804a:	6059      	strne	r1, [r3, #4]
 800804c:	6863      	ldr	r3, [r4, #4]
 800804e:	bf08      	it	eq
 8008050:	f8c8 1000 	streq.w	r1, [r8]
 8008054:	5162      	str	r2, [r4, r5]
 8008056:	604b      	str	r3, [r1, #4]
 8008058:	4630      	mov	r0, r6
 800805a:	f000 f82f 	bl	80080bc <__malloc_unlock>
 800805e:	f104 000b 	add.w	r0, r4, #11
 8008062:	1d23      	adds	r3, r4, #4
 8008064:	f020 0007 	bic.w	r0, r0, #7
 8008068:	1ac2      	subs	r2, r0, r3
 800806a:	bf1c      	itt	ne
 800806c:	1a1b      	subne	r3, r3, r0
 800806e:	50a3      	strne	r3, [r4, r2]
 8008070:	e7af      	b.n	8007fd2 <_malloc_r+0x22>
 8008072:	6862      	ldr	r2, [r4, #4]
 8008074:	42a3      	cmp	r3, r4
 8008076:	bf0c      	ite	eq
 8008078:	f8c8 2000 	streq.w	r2, [r8]
 800807c:	605a      	strne	r2, [r3, #4]
 800807e:	e7eb      	b.n	8008058 <_malloc_r+0xa8>
 8008080:	4623      	mov	r3, r4
 8008082:	6864      	ldr	r4, [r4, #4]
 8008084:	e7ae      	b.n	8007fe4 <_malloc_r+0x34>
 8008086:	463c      	mov	r4, r7
 8008088:	687f      	ldr	r7, [r7, #4]
 800808a:	e7b6      	b.n	8007ffa <_malloc_r+0x4a>
 800808c:	461a      	mov	r2, r3
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	42a3      	cmp	r3, r4
 8008092:	d1fb      	bne.n	800808c <_malloc_r+0xdc>
 8008094:	2300      	movs	r3, #0
 8008096:	6053      	str	r3, [r2, #4]
 8008098:	e7de      	b.n	8008058 <_malloc_r+0xa8>
 800809a:	230c      	movs	r3, #12
 800809c:	6033      	str	r3, [r6, #0]
 800809e:	4630      	mov	r0, r6
 80080a0:	f000 f80c 	bl	80080bc <__malloc_unlock>
 80080a4:	e794      	b.n	8007fd0 <_malloc_r+0x20>
 80080a6:	6005      	str	r5, [r0, #0]
 80080a8:	e7d6      	b.n	8008058 <_malloc_r+0xa8>
 80080aa:	bf00      	nop
 80080ac:	200130f0 	.word	0x200130f0

080080b0 <__malloc_lock>:
 80080b0:	4801      	ldr	r0, [pc, #4]	@ (80080b8 <__malloc_lock+0x8>)
 80080b2:	f7ff bf00 	b.w	8007eb6 <__retarget_lock_acquire_recursive>
 80080b6:	bf00      	nop
 80080b8:	200130e8 	.word	0x200130e8

080080bc <__malloc_unlock>:
 80080bc:	4801      	ldr	r0, [pc, #4]	@ (80080c4 <__malloc_unlock+0x8>)
 80080be:	f7ff befb 	b.w	8007eb8 <__retarget_lock_release_recursive>
 80080c2:	bf00      	nop
 80080c4:	200130e8 	.word	0x200130e8

080080c8 <__ssputs_r>:
 80080c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080cc:	688e      	ldr	r6, [r1, #8]
 80080ce:	461f      	mov	r7, r3
 80080d0:	42be      	cmp	r6, r7
 80080d2:	680b      	ldr	r3, [r1, #0]
 80080d4:	4682      	mov	sl, r0
 80080d6:	460c      	mov	r4, r1
 80080d8:	4690      	mov	r8, r2
 80080da:	d82d      	bhi.n	8008138 <__ssputs_r+0x70>
 80080dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080e4:	d026      	beq.n	8008134 <__ssputs_r+0x6c>
 80080e6:	6965      	ldr	r5, [r4, #20]
 80080e8:	6909      	ldr	r1, [r1, #16]
 80080ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080ee:	eba3 0901 	sub.w	r9, r3, r1
 80080f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080f6:	1c7b      	adds	r3, r7, #1
 80080f8:	444b      	add	r3, r9
 80080fa:	106d      	asrs	r5, r5, #1
 80080fc:	429d      	cmp	r5, r3
 80080fe:	bf38      	it	cc
 8008100:	461d      	movcc	r5, r3
 8008102:	0553      	lsls	r3, r2, #21
 8008104:	d527      	bpl.n	8008156 <__ssputs_r+0x8e>
 8008106:	4629      	mov	r1, r5
 8008108:	f7ff ff52 	bl	8007fb0 <_malloc_r>
 800810c:	4606      	mov	r6, r0
 800810e:	b360      	cbz	r0, 800816a <__ssputs_r+0xa2>
 8008110:	6921      	ldr	r1, [r4, #16]
 8008112:	464a      	mov	r2, r9
 8008114:	f7ff fed1 	bl	8007eba <memcpy>
 8008118:	89a3      	ldrh	r3, [r4, #12]
 800811a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800811e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008122:	81a3      	strh	r3, [r4, #12]
 8008124:	6126      	str	r6, [r4, #16]
 8008126:	6165      	str	r5, [r4, #20]
 8008128:	444e      	add	r6, r9
 800812a:	eba5 0509 	sub.w	r5, r5, r9
 800812e:	6026      	str	r6, [r4, #0]
 8008130:	60a5      	str	r5, [r4, #8]
 8008132:	463e      	mov	r6, r7
 8008134:	42be      	cmp	r6, r7
 8008136:	d900      	bls.n	800813a <__ssputs_r+0x72>
 8008138:	463e      	mov	r6, r7
 800813a:	6820      	ldr	r0, [r4, #0]
 800813c:	4632      	mov	r2, r6
 800813e:	4641      	mov	r1, r8
 8008140:	f000 fd2a 	bl	8008b98 <memmove>
 8008144:	68a3      	ldr	r3, [r4, #8]
 8008146:	1b9b      	subs	r3, r3, r6
 8008148:	60a3      	str	r3, [r4, #8]
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	4433      	add	r3, r6
 800814e:	6023      	str	r3, [r4, #0]
 8008150:	2000      	movs	r0, #0
 8008152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008156:	462a      	mov	r2, r5
 8008158:	f000 fd48 	bl	8008bec <_realloc_r>
 800815c:	4606      	mov	r6, r0
 800815e:	2800      	cmp	r0, #0
 8008160:	d1e0      	bne.n	8008124 <__ssputs_r+0x5c>
 8008162:	6921      	ldr	r1, [r4, #16]
 8008164:	4650      	mov	r0, sl
 8008166:	f7ff feb7 	bl	8007ed8 <_free_r>
 800816a:	230c      	movs	r3, #12
 800816c:	f8ca 3000 	str.w	r3, [sl]
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008176:	81a3      	strh	r3, [r4, #12]
 8008178:	f04f 30ff 	mov.w	r0, #4294967295
 800817c:	e7e9      	b.n	8008152 <__ssputs_r+0x8a>
	...

08008180 <_svfiprintf_r>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	4698      	mov	r8, r3
 8008186:	898b      	ldrh	r3, [r1, #12]
 8008188:	061b      	lsls	r3, r3, #24
 800818a:	b09d      	sub	sp, #116	@ 0x74
 800818c:	4607      	mov	r7, r0
 800818e:	460d      	mov	r5, r1
 8008190:	4614      	mov	r4, r2
 8008192:	d510      	bpl.n	80081b6 <_svfiprintf_r+0x36>
 8008194:	690b      	ldr	r3, [r1, #16]
 8008196:	b973      	cbnz	r3, 80081b6 <_svfiprintf_r+0x36>
 8008198:	2140      	movs	r1, #64	@ 0x40
 800819a:	f7ff ff09 	bl	8007fb0 <_malloc_r>
 800819e:	6028      	str	r0, [r5, #0]
 80081a0:	6128      	str	r0, [r5, #16]
 80081a2:	b930      	cbnz	r0, 80081b2 <_svfiprintf_r+0x32>
 80081a4:	230c      	movs	r3, #12
 80081a6:	603b      	str	r3, [r7, #0]
 80081a8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ac:	b01d      	add	sp, #116	@ 0x74
 80081ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b2:	2340      	movs	r3, #64	@ 0x40
 80081b4:	616b      	str	r3, [r5, #20]
 80081b6:	2300      	movs	r3, #0
 80081b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ba:	2320      	movs	r3, #32
 80081bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80081c4:	2330      	movs	r3, #48	@ 0x30
 80081c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008364 <_svfiprintf_r+0x1e4>
 80081ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081ce:	f04f 0901 	mov.w	r9, #1
 80081d2:	4623      	mov	r3, r4
 80081d4:	469a      	mov	sl, r3
 80081d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081da:	b10a      	cbz	r2, 80081e0 <_svfiprintf_r+0x60>
 80081dc:	2a25      	cmp	r2, #37	@ 0x25
 80081de:	d1f9      	bne.n	80081d4 <_svfiprintf_r+0x54>
 80081e0:	ebba 0b04 	subs.w	fp, sl, r4
 80081e4:	d00b      	beq.n	80081fe <_svfiprintf_r+0x7e>
 80081e6:	465b      	mov	r3, fp
 80081e8:	4622      	mov	r2, r4
 80081ea:	4629      	mov	r1, r5
 80081ec:	4638      	mov	r0, r7
 80081ee:	f7ff ff6b 	bl	80080c8 <__ssputs_r>
 80081f2:	3001      	adds	r0, #1
 80081f4:	f000 80a7 	beq.w	8008346 <_svfiprintf_r+0x1c6>
 80081f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081fa:	445a      	add	r2, fp
 80081fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80081fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008202:	2b00      	cmp	r3, #0
 8008204:	f000 809f 	beq.w	8008346 <_svfiprintf_r+0x1c6>
 8008208:	2300      	movs	r3, #0
 800820a:	f04f 32ff 	mov.w	r2, #4294967295
 800820e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008212:	f10a 0a01 	add.w	sl, sl, #1
 8008216:	9304      	str	r3, [sp, #16]
 8008218:	9307      	str	r3, [sp, #28]
 800821a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800821e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008220:	4654      	mov	r4, sl
 8008222:	2205      	movs	r2, #5
 8008224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008228:	484e      	ldr	r0, [pc, #312]	@ (8008364 <_svfiprintf_r+0x1e4>)
 800822a:	f7f7 ffe9 	bl	8000200 <memchr>
 800822e:	9a04      	ldr	r2, [sp, #16]
 8008230:	b9d8      	cbnz	r0, 800826a <_svfiprintf_r+0xea>
 8008232:	06d0      	lsls	r0, r2, #27
 8008234:	bf44      	itt	mi
 8008236:	2320      	movmi	r3, #32
 8008238:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800823c:	0711      	lsls	r1, r2, #28
 800823e:	bf44      	itt	mi
 8008240:	232b      	movmi	r3, #43	@ 0x2b
 8008242:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008246:	f89a 3000 	ldrb.w	r3, [sl]
 800824a:	2b2a      	cmp	r3, #42	@ 0x2a
 800824c:	d015      	beq.n	800827a <_svfiprintf_r+0xfa>
 800824e:	9a07      	ldr	r2, [sp, #28]
 8008250:	4654      	mov	r4, sl
 8008252:	2000      	movs	r0, #0
 8008254:	f04f 0c0a 	mov.w	ip, #10
 8008258:	4621      	mov	r1, r4
 800825a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800825e:	3b30      	subs	r3, #48	@ 0x30
 8008260:	2b09      	cmp	r3, #9
 8008262:	d94b      	bls.n	80082fc <_svfiprintf_r+0x17c>
 8008264:	b1b0      	cbz	r0, 8008294 <_svfiprintf_r+0x114>
 8008266:	9207      	str	r2, [sp, #28]
 8008268:	e014      	b.n	8008294 <_svfiprintf_r+0x114>
 800826a:	eba0 0308 	sub.w	r3, r0, r8
 800826e:	fa09 f303 	lsl.w	r3, r9, r3
 8008272:	4313      	orrs	r3, r2
 8008274:	9304      	str	r3, [sp, #16]
 8008276:	46a2      	mov	sl, r4
 8008278:	e7d2      	b.n	8008220 <_svfiprintf_r+0xa0>
 800827a:	9b03      	ldr	r3, [sp, #12]
 800827c:	1d19      	adds	r1, r3, #4
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	9103      	str	r1, [sp, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	bfbb      	ittet	lt
 8008286:	425b      	neglt	r3, r3
 8008288:	f042 0202 	orrlt.w	r2, r2, #2
 800828c:	9307      	strge	r3, [sp, #28]
 800828e:	9307      	strlt	r3, [sp, #28]
 8008290:	bfb8      	it	lt
 8008292:	9204      	strlt	r2, [sp, #16]
 8008294:	7823      	ldrb	r3, [r4, #0]
 8008296:	2b2e      	cmp	r3, #46	@ 0x2e
 8008298:	d10a      	bne.n	80082b0 <_svfiprintf_r+0x130>
 800829a:	7863      	ldrb	r3, [r4, #1]
 800829c:	2b2a      	cmp	r3, #42	@ 0x2a
 800829e:	d132      	bne.n	8008306 <_svfiprintf_r+0x186>
 80082a0:	9b03      	ldr	r3, [sp, #12]
 80082a2:	1d1a      	adds	r2, r3, #4
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	9203      	str	r2, [sp, #12]
 80082a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082ac:	3402      	adds	r4, #2
 80082ae:	9305      	str	r3, [sp, #20]
 80082b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008374 <_svfiprintf_r+0x1f4>
 80082b4:	7821      	ldrb	r1, [r4, #0]
 80082b6:	2203      	movs	r2, #3
 80082b8:	4650      	mov	r0, sl
 80082ba:	f7f7 ffa1 	bl	8000200 <memchr>
 80082be:	b138      	cbz	r0, 80082d0 <_svfiprintf_r+0x150>
 80082c0:	9b04      	ldr	r3, [sp, #16]
 80082c2:	eba0 000a 	sub.w	r0, r0, sl
 80082c6:	2240      	movs	r2, #64	@ 0x40
 80082c8:	4082      	lsls	r2, r0
 80082ca:	4313      	orrs	r3, r2
 80082cc:	3401      	adds	r4, #1
 80082ce:	9304      	str	r3, [sp, #16]
 80082d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d4:	4824      	ldr	r0, [pc, #144]	@ (8008368 <_svfiprintf_r+0x1e8>)
 80082d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082da:	2206      	movs	r2, #6
 80082dc:	f7f7 ff90 	bl	8000200 <memchr>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d036      	beq.n	8008352 <_svfiprintf_r+0x1d2>
 80082e4:	4b21      	ldr	r3, [pc, #132]	@ (800836c <_svfiprintf_r+0x1ec>)
 80082e6:	bb1b      	cbnz	r3, 8008330 <_svfiprintf_r+0x1b0>
 80082e8:	9b03      	ldr	r3, [sp, #12]
 80082ea:	3307      	adds	r3, #7
 80082ec:	f023 0307 	bic.w	r3, r3, #7
 80082f0:	3308      	adds	r3, #8
 80082f2:	9303      	str	r3, [sp, #12]
 80082f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082f6:	4433      	add	r3, r6
 80082f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80082fa:	e76a      	b.n	80081d2 <_svfiprintf_r+0x52>
 80082fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008300:	460c      	mov	r4, r1
 8008302:	2001      	movs	r0, #1
 8008304:	e7a8      	b.n	8008258 <_svfiprintf_r+0xd8>
 8008306:	2300      	movs	r3, #0
 8008308:	3401      	adds	r4, #1
 800830a:	9305      	str	r3, [sp, #20]
 800830c:	4619      	mov	r1, r3
 800830e:	f04f 0c0a 	mov.w	ip, #10
 8008312:	4620      	mov	r0, r4
 8008314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008318:	3a30      	subs	r2, #48	@ 0x30
 800831a:	2a09      	cmp	r2, #9
 800831c:	d903      	bls.n	8008326 <_svfiprintf_r+0x1a6>
 800831e:	2b00      	cmp	r3, #0
 8008320:	d0c6      	beq.n	80082b0 <_svfiprintf_r+0x130>
 8008322:	9105      	str	r1, [sp, #20]
 8008324:	e7c4      	b.n	80082b0 <_svfiprintf_r+0x130>
 8008326:	fb0c 2101 	mla	r1, ip, r1, r2
 800832a:	4604      	mov	r4, r0
 800832c:	2301      	movs	r3, #1
 800832e:	e7f0      	b.n	8008312 <_svfiprintf_r+0x192>
 8008330:	ab03      	add	r3, sp, #12
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	462a      	mov	r2, r5
 8008336:	4b0e      	ldr	r3, [pc, #56]	@ (8008370 <_svfiprintf_r+0x1f0>)
 8008338:	a904      	add	r1, sp, #16
 800833a:	4638      	mov	r0, r7
 800833c:	f3af 8000 	nop.w
 8008340:	1c42      	adds	r2, r0, #1
 8008342:	4606      	mov	r6, r0
 8008344:	d1d6      	bne.n	80082f4 <_svfiprintf_r+0x174>
 8008346:	89ab      	ldrh	r3, [r5, #12]
 8008348:	065b      	lsls	r3, r3, #25
 800834a:	f53f af2d 	bmi.w	80081a8 <_svfiprintf_r+0x28>
 800834e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008350:	e72c      	b.n	80081ac <_svfiprintf_r+0x2c>
 8008352:	ab03      	add	r3, sp, #12
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	462a      	mov	r2, r5
 8008358:	4b05      	ldr	r3, [pc, #20]	@ (8008370 <_svfiprintf_r+0x1f0>)
 800835a:	a904      	add	r1, sp, #16
 800835c:	4638      	mov	r0, r7
 800835e:	f000 f9bb 	bl	80086d8 <_printf_i>
 8008362:	e7ed      	b.n	8008340 <_svfiprintf_r+0x1c0>
 8008364:	08009164 	.word	0x08009164
 8008368:	0800916e 	.word	0x0800916e
 800836c:	00000000 	.word	0x00000000
 8008370:	080080c9 	.word	0x080080c9
 8008374:	0800916a 	.word	0x0800916a

08008378 <__sfputc_r>:
 8008378:	6893      	ldr	r3, [r2, #8]
 800837a:	3b01      	subs	r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	b410      	push	{r4}
 8008380:	6093      	str	r3, [r2, #8]
 8008382:	da08      	bge.n	8008396 <__sfputc_r+0x1e>
 8008384:	6994      	ldr	r4, [r2, #24]
 8008386:	42a3      	cmp	r3, r4
 8008388:	db01      	blt.n	800838e <__sfputc_r+0x16>
 800838a:	290a      	cmp	r1, #10
 800838c:	d103      	bne.n	8008396 <__sfputc_r+0x1e>
 800838e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008392:	f000 bb6d 	b.w	8008a70 <__swbuf_r>
 8008396:	6813      	ldr	r3, [r2, #0]
 8008398:	1c58      	adds	r0, r3, #1
 800839a:	6010      	str	r0, [r2, #0]
 800839c:	7019      	strb	r1, [r3, #0]
 800839e:	4608      	mov	r0, r1
 80083a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <__sfputs_r>:
 80083a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a8:	4606      	mov	r6, r0
 80083aa:	460f      	mov	r7, r1
 80083ac:	4614      	mov	r4, r2
 80083ae:	18d5      	adds	r5, r2, r3
 80083b0:	42ac      	cmp	r4, r5
 80083b2:	d101      	bne.n	80083b8 <__sfputs_r+0x12>
 80083b4:	2000      	movs	r0, #0
 80083b6:	e007      	b.n	80083c8 <__sfputs_r+0x22>
 80083b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083bc:	463a      	mov	r2, r7
 80083be:	4630      	mov	r0, r6
 80083c0:	f7ff ffda 	bl	8008378 <__sfputc_r>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d1f3      	bne.n	80083b0 <__sfputs_r+0xa>
 80083c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083cc <_vfiprintf_r>:
 80083cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d0:	460d      	mov	r5, r1
 80083d2:	b09d      	sub	sp, #116	@ 0x74
 80083d4:	4614      	mov	r4, r2
 80083d6:	4698      	mov	r8, r3
 80083d8:	4606      	mov	r6, r0
 80083da:	b118      	cbz	r0, 80083e4 <_vfiprintf_r+0x18>
 80083dc:	6a03      	ldr	r3, [r0, #32]
 80083de:	b90b      	cbnz	r3, 80083e4 <_vfiprintf_r+0x18>
 80083e0:	f7ff fc44 	bl	8007c6c <__sinit>
 80083e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083e6:	07d9      	lsls	r1, r3, #31
 80083e8:	d405      	bmi.n	80083f6 <_vfiprintf_r+0x2a>
 80083ea:	89ab      	ldrh	r3, [r5, #12]
 80083ec:	059a      	lsls	r2, r3, #22
 80083ee:	d402      	bmi.n	80083f6 <_vfiprintf_r+0x2a>
 80083f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083f2:	f7ff fd60 	bl	8007eb6 <__retarget_lock_acquire_recursive>
 80083f6:	89ab      	ldrh	r3, [r5, #12]
 80083f8:	071b      	lsls	r3, r3, #28
 80083fa:	d501      	bpl.n	8008400 <_vfiprintf_r+0x34>
 80083fc:	692b      	ldr	r3, [r5, #16]
 80083fe:	b99b      	cbnz	r3, 8008428 <_vfiprintf_r+0x5c>
 8008400:	4629      	mov	r1, r5
 8008402:	4630      	mov	r0, r6
 8008404:	f000 fb72 	bl	8008aec <__swsetup_r>
 8008408:	b170      	cbz	r0, 8008428 <_vfiprintf_r+0x5c>
 800840a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800840c:	07dc      	lsls	r4, r3, #31
 800840e:	d504      	bpl.n	800841a <_vfiprintf_r+0x4e>
 8008410:	f04f 30ff 	mov.w	r0, #4294967295
 8008414:	b01d      	add	sp, #116	@ 0x74
 8008416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841a:	89ab      	ldrh	r3, [r5, #12]
 800841c:	0598      	lsls	r0, r3, #22
 800841e:	d4f7      	bmi.n	8008410 <_vfiprintf_r+0x44>
 8008420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008422:	f7ff fd49 	bl	8007eb8 <__retarget_lock_release_recursive>
 8008426:	e7f3      	b.n	8008410 <_vfiprintf_r+0x44>
 8008428:	2300      	movs	r3, #0
 800842a:	9309      	str	r3, [sp, #36]	@ 0x24
 800842c:	2320      	movs	r3, #32
 800842e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008432:	f8cd 800c 	str.w	r8, [sp, #12]
 8008436:	2330      	movs	r3, #48	@ 0x30
 8008438:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80085e8 <_vfiprintf_r+0x21c>
 800843c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008440:	f04f 0901 	mov.w	r9, #1
 8008444:	4623      	mov	r3, r4
 8008446:	469a      	mov	sl, r3
 8008448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800844c:	b10a      	cbz	r2, 8008452 <_vfiprintf_r+0x86>
 800844e:	2a25      	cmp	r2, #37	@ 0x25
 8008450:	d1f9      	bne.n	8008446 <_vfiprintf_r+0x7a>
 8008452:	ebba 0b04 	subs.w	fp, sl, r4
 8008456:	d00b      	beq.n	8008470 <_vfiprintf_r+0xa4>
 8008458:	465b      	mov	r3, fp
 800845a:	4622      	mov	r2, r4
 800845c:	4629      	mov	r1, r5
 800845e:	4630      	mov	r0, r6
 8008460:	f7ff ffa1 	bl	80083a6 <__sfputs_r>
 8008464:	3001      	adds	r0, #1
 8008466:	f000 80a7 	beq.w	80085b8 <_vfiprintf_r+0x1ec>
 800846a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800846c:	445a      	add	r2, fp
 800846e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008470:	f89a 3000 	ldrb.w	r3, [sl]
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 809f 	beq.w	80085b8 <_vfiprintf_r+0x1ec>
 800847a:	2300      	movs	r3, #0
 800847c:	f04f 32ff 	mov.w	r2, #4294967295
 8008480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008484:	f10a 0a01 	add.w	sl, sl, #1
 8008488:	9304      	str	r3, [sp, #16]
 800848a:	9307      	str	r3, [sp, #28]
 800848c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008490:	931a      	str	r3, [sp, #104]	@ 0x68
 8008492:	4654      	mov	r4, sl
 8008494:	2205      	movs	r2, #5
 8008496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800849a:	4853      	ldr	r0, [pc, #332]	@ (80085e8 <_vfiprintf_r+0x21c>)
 800849c:	f7f7 feb0 	bl	8000200 <memchr>
 80084a0:	9a04      	ldr	r2, [sp, #16]
 80084a2:	b9d8      	cbnz	r0, 80084dc <_vfiprintf_r+0x110>
 80084a4:	06d1      	lsls	r1, r2, #27
 80084a6:	bf44      	itt	mi
 80084a8:	2320      	movmi	r3, #32
 80084aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084ae:	0713      	lsls	r3, r2, #28
 80084b0:	bf44      	itt	mi
 80084b2:	232b      	movmi	r3, #43	@ 0x2b
 80084b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084b8:	f89a 3000 	ldrb.w	r3, [sl]
 80084bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80084be:	d015      	beq.n	80084ec <_vfiprintf_r+0x120>
 80084c0:	9a07      	ldr	r2, [sp, #28]
 80084c2:	4654      	mov	r4, sl
 80084c4:	2000      	movs	r0, #0
 80084c6:	f04f 0c0a 	mov.w	ip, #10
 80084ca:	4621      	mov	r1, r4
 80084cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084d0:	3b30      	subs	r3, #48	@ 0x30
 80084d2:	2b09      	cmp	r3, #9
 80084d4:	d94b      	bls.n	800856e <_vfiprintf_r+0x1a2>
 80084d6:	b1b0      	cbz	r0, 8008506 <_vfiprintf_r+0x13a>
 80084d8:	9207      	str	r2, [sp, #28]
 80084da:	e014      	b.n	8008506 <_vfiprintf_r+0x13a>
 80084dc:	eba0 0308 	sub.w	r3, r0, r8
 80084e0:	fa09 f303 	lsl.w	r3, r9, r3
 80084e4:	4313      	orrs	r3, r2
 80084e6:	9304      	str	r3, [sp, #16]
 80084e8:	46a2      	mov	sl, r4
 80084ea:	e7d2      	b.n	8008492 <_vfiprintf_r+0xc6>
 80084ec:	9b03      	ldr	r3, [sp, #12]
 80084ee:	1d19      	adds	r1, r3, #4
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	9103      	str	r1, [sp, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	bfbb      	ittet	lt
 80084f8:	425b      	neglt	r3, r3
 80084fa:	f042 0202 	orrlt.w	r2, r2, #2
 80084fe:	9307      	strge	r3, [sp, #28]
 8008500:	9307      	strlt	r3, [sp, #28]
 8008502:	bfb8      	it	lt
 8008504:	9204      	strlt	r2, [sp, #16]
 8008506:	7823      	ldrb	r3, [r4, #0]
 8008508:	2b2e      	cmp	r3, #46	@ 0x2e
 800850a:	d10a      	bne.n	8008522 <_vfiprintf_r+0x156>
 800850c:	7863      	ldrb	r3, [r4, #1]
 800850e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008510:	d132      	bne.n	8008578 <_vfiprintf_r+0x1ac>
 8008512:	9b03      	ldr	r3, [sp, #12]
 8008514:	1d1a      	adds	r2, r3, #4
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	9203      	str	r2, [sp, #12]
 800851a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800851e:	3402      	adds	r4, #2
 8008520:	9305      	str	r3, [sp, #20]
 8008522:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80085f8 <_vfiprintf_r+0x22c>
 8008526:	7821      	ldrb	r1, [r4, #0]
 8008528:	2203      	movs	r2, #3
 800852a:	4650      	mov	r0, sl
 800852c:	f7f7 fe68 	bl	8000200 <memchr>
 8008530:	b138      	cbz	r0, 8008542 <_vfiprintf_r+0x176>
 8008532:	9b04      	ldr	r3, [sp, #16]
 8008534:	eba0 000a 	sub.w	r0, r0, sl
 8008538:	2240      	movs	r2, #64	@ 0x40
 800853a:	4082      	lsls	r2, r0
 800853c:	4313      	orrs	r3, r2
 800853e:	3401      	adds	r4, #1
 8008540:	9304      	str	r3, [sp, #16]
 8008542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008546:	4829      	ldr	r0, [pc, #164]	@ (80085ec <_vfiprintf_r+0x220>)
 8008548:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800854c:	2206      	movs	r2, #6
 800854e:	f7f7 fe57 	bl	8000200 <memchr>
 8008552:	2800      	cmp	r0, #0
 8008554:	d03f      	beq.n	80085d6 <_vfiprintf_r+0x20a>
 8008556:	4b26      	ldr	r3, [pc, #152]	@ (80085f0 <_vfiprintf_r+0x224>)
 8008558:	bb1b      	cbnz	r3, 80085a2 <_vfiprintf_r+0x1d6>
 800855a:	9b03      	ldr	r3, [sp, #12]
 800855c:	3307      	adds	r3, #7
 800855e:	f023 0307 	bic.w	r3, r3, #7
 8008562:	3308      	adds	r3, #8
 8008564:	9303      	str	r3, [sp, #12]
 8008566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008568:	443b      	add	r3, r7
 800856a:	9309      	str	r3, [sp, #36]	@ 0x24
 800856c:	e76a      	b.n	8008444 <_vfiprintf_r+0x78>
 800856e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008572:	460c      	mov	r4, r1
 8008574:	2001      	movs	r0, #1
 8008576:	e7a8      	b.n	80084ca <_vfiprintf_r+0xfe>
 8008578:	2300      	movs	r3, #0
 800857a:	3401      	adds	r4, #1
 800857c:	9305      	str	r3, [sp, #20]
 800857e:	4619      	mov	r1, r3
 8008580:	f04f 0c0a 	mov.w	ip, #10
 8008584:	4620      	mov	r0, r4
 8008586:	f810 2b01 	ldrb.w	r2, [r0], #1
 800858a:	3a30      	subs	r2, #48	@ 0x30
 800858c:	2a09      	cmp	r2, #9
 800858e:	d903      	bls.n	8008598 <_vfiprintf_r+0x1cc>
 8008590:	2b00      	cmp	r3, #0
 8008592:	d0c6      	beq.n	8008522 <_vfiprintf_r+0x156>
 8008594:	9105      	str	r1, [sp, #20]
 8008596:	e7c4      	b.n	8008522 <_vfiprintf_r+0x156>
 8008598:	fb0c 2101 	mla	r1, ip, r1, r2
 800859c:	4604      	mov	r4, r0
 800859e:	2301      	movs	r3, #1
 80085a0:	e7f0      	b.n	8008584 <_vfiprintf_r+0x1b8>
 80085a2:	ab03      	add	r3, sp, #12
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	462a      	mov	r2, r5
 80085a8:	4b12      	ldr	r3, [pc, #72]	@ (80085f4 <_vfiprintf_r+0x228>)
 80085aa:	a904      	add	r1, sp, #16
 80085ac:	4630      	mov	r0, r6
 80085ae:	f3af 8000 	nop.w
 80085b2:	4607      	mov	r7, r0
 80085b4:	1c78      	adds	r0, r7, #1
 80085b6:	d1d6      	bne.n	8008566 <_vfiprintf_r+0x19a>
 80085b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085ba:	07d9      	lsls	r1, r3, #31
 80085bc:	d405      	bmi.n	80085ca <_vfiprintf_r+0x1fe>
 80085be:	89ab      	ldrh	r3, [r5, #12]
 80085c0:	059a      	lsls	r2, r3, #22
 80085c2:	d402      	bmi.n	80085ca <_vfiprintf_r+0x1fe>
 80085c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085c6:	f7ff fc77 	bl	8007eb8 <__retarget_lock_release_recursive>
 80085ca:	89ab      	ldrh	r3, [r5, #12]
 80085cc:	065b      	lsls	r3, r3, #25
 80085ce:	f53f af1f 	bmi.w	8008410 <_vfiprintf_r+0x44>
 80085d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085d4:	e71e      	b.n	8008414 <_vfiprintf_r+0x48>
 80085d6:	ab03      	add	r3, sp, #12
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	462a      	mov	r2, r5
 80085dc:	4b05      	ldr	r3, [pc, #20]	@ (80085f4 <_vfiprintf_r+0x228>)
 80085de:	a904      	add	r1, sp, #16
 80085e0:	4630      	mov	r0, r6
 80085e2:	f000 f879 	bl	80086d8 <_printf_i>
 80085e6:	e7e4      	b.n	80085b2 <_vfiprintf_r+0x1e6>
 80085e8:	08009164 	.word	0x08009164
 80085ec:	0800916e 	.word	0x0800916e
 80085f0:	00000000 	.word	0x00000000
 80085f4:	080083a7 	.word	0x080083a7
 80085f8:	0800916a 	.word	0x0800916a

080085fc <_printf_common>:
 80085fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008600:	4616      	mov	r6, r2
 8008602:	4698      	mov	r8, r3
 8008604:	688a      	ldr	r2, [r1, #8]
 8008606:	690b      	ldr	r3, [r1, #16]
 8008608:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800860c:	4293      	cmp	r3, r2
 800860e:	bfb8      	it	lt
 8008610:	4613      	movlt	r3, r2
 8008612:	6033      	str	r3, [r6, #0]
 8008614:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008618:	4607      	mov	r7, r0
 800861a:	460c      	mov	r4, r1
 800861c:	b10a      	cbz	r2, 8008622 <_printf_common+0x26>
 800861e:	3301      	adds	r3, #1
 8008620:	6033      	str	r3, [r6, #0]
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	0699      	lsls	r1, r3, #26
 8008626:	bf42      	ittt	mi
 8008628:	6833      	ldrmi	r3, [r6, #0]
 800862a:	3302      	addmi	r3, #2
 800862c:	6033      	strmi	r3, [r6, #0]
 800862e:	6825      	ldr	r5, [r4, #0]
 8008630:	f015 0506 	ands.w	r5, r5, #6
 8008634:	d106      	bne.n	8008644 <_printf_common+0x48>
 8008636:	f104 0a19 	add.w	sl, r4, #25
 800863a:	68e3      	ldr	r3, [r4, #12]
 800863c:	6832      	ldr	r2, [r6, #0]
 800863e:	1a9b      	subs	r3, r3, r2
 8008640:	42ab      	cmp	r3, r5
 8008642:	dc26      	bgt.n	8008692 <_printf_common+0x96>
 8008644:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008648:	6822      	ldr	r2, [r4, #0]
 800864a:	3b00      	subs	r3, #0
 800864c:	bf18      	it	ne
 800864e:	2301      	movne	r3, #1
 8008650:	0692      	lsls	r2, r2, #26
 8008652:	d42b      	bmi.n	80086ac <_printf_common+0xb0>
 8008654:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008658:	4641      	mov	r1, r8
 800865a:	4638      	mov	r0, r7
 800865c:	47c8      	blx	r9
 800865e:	3001      	adds	r0, #1
 8008660:	d01e      	beq.n	80086a0 <_printf_common+0xa4>
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	6922      	ldr	r2, [r4, #16]
 8008666:	f003 0306 	and.w	r3, r3, #6
 800866a:	2b04      	cmp	r3, #4
 800866c:	bf02      	ittt	eq
 800866e:	68e5      	ldreq	r5, [r4, #12]
 8008670:	6833      	ldreq	r3, [r6, #0]
 8008672:	1aed      	subeq	r5, r5, r3
 8008674:	68a3      	ldr	r3, [r4, #8]
 8008676:	bf0c      	ite	eq
 8008678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800867c:	2500      	movne	r5, #0
 800867e:	4293      	cmp	r3, r2
 8008680:	bfc4      	itt	gt
 8008682:	1a9b      	subgt	r3, r3, r2
 8008684:	18ed      	addgt	r5, r5, r3
 8008686:	2600      	movs	r6, #0
 8008688:	341a      	adds	r4, #26
 800868a:	42b5      	cmp	r5, r6
 800868c:	d11a      	bne.n	80086c4 <_printf_common+0xc8>
 800868e:	2000      	movs	r0, #0
 8008690:	e008      	b.n	80086a4 <_printf_common+0xa8>
 8008692:	2301      	movs	r3, #1
 8008694:	4652      	mov	r2, sl
 8008696:	4641      	mov	r1, r8
 8008698:	4638      	mov	r0, r7
 800869a:	47c8      	blx	r9
 800869c:	3001      	adds	r0, #1
 800869e:	d103      	bne.n	80086a8 <_printf_common+0xac>
 80086a0:	f04f 30ff 	mov.w	r0, #4294967295
 80086a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a8:	3501      	adds	r5, #1
 80086aa:	e7c6      	b.n	800863a <_printf_common+0x3e>
 80086ac:	18e1      	adds	r1, r4, r3
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	2030      	movs	r0, #48	@ 0x30
 80086b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80086b6:	4422      	add	r2, r4
 80086b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80086bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80086c0:	3302      	adds	r3, #2
 80086c2:	e7c7      	b.n	8008654 <_printf_common+0x58>
 80086c4:	2301      	movs	r3, #1
 80086c6:	4622      	mov	r2, r4
 80086c8:	4641      	mov	r1, r8
 80086ca:	4638      	mov	r0, r7
 80086cc:	47c8      	blx	r9
 80086ce:	3001      	adds	r0, #1
 80086d0:	d0e6      	beq.n	80086a0 <_printf_common+0xa4>
 80086d2:	3601      	adds	r6, #1
 80086d4:	e7d9      	b.n	800868a <_printf_common+0x8e>
	...

080086d8 <_printf_i>:
 80086d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086dc:	7e0f      	ldrb	r7, [r1, #24]
 80086de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80086e0:	2f78      	cmp	r7, #120	@ 0x78
 80086e2:	4691      	mov	r9, r2
 80086e4:	4680      	mov	r8, r0
 80086e6:	460c      	mov	r4, r1
 80086e8:	469a      	mov	sl, r3
 80086ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80086ee:	d807      	bhi.n	8008700 <_printf_i+0x28>
 80086f0:	2f62      	cmp	r7, #98	@ 0x62
 80086f2:	d80a      	bhi.n	800870a <_printf_i+0x32>
 80086f4:	2f00      	cmp	r7, #0
 80086f6:	f000 80d2 	beq.w	800889e <_printf_i+0x1c6>
 80086fa:	2f58      	cmp	r7, #88	@ 0x58
 80086fc:	f000 80b9 	beq.w	8008872 <_printf_i+0x19a>
 8008700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008704:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008708:	e03a      	b.n	8008780 <_printf_i+0xa8>
 800870a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800870e:	2b15      	cmp	r3, #21
 8008710:	d8f6      	bhi.n	8008700 <_printf_i+0x28>
 8008712:	a101      	add	r1, pc, #4	@ (adr r1, 8008718 <_printf_i+0x40>)
 8008714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008718:	08008771 	.word	0x08008771
 800871c:	08008785 	.word	0x08008785
 8008720:	08008701 	.word	0x08008701
 8008724:	08008701 	.word	0x08008701
 8008728:	08008701 	.word	0x08008701
 800872c:	08008701 	.word	0x08008701
 8008730:	08008785 	.word	0x08008785
 8008734:	08008701 	.word	0x08008701
 8008738:	08008701 	.word	0x08008701
 800873c:	08008701 	.word	0x08008701
 8008740:	08008701 	.word	0x08008701
 8008744:	08008885 	.word	0x08008885
 8008748:	080087af 	.word	0x080087af
 800874c:	0800883f 	.word	0x0800883f
 8008750:	08008701 	.word	0x08008701
 8008754:	08008701 	.word	0x08008701
 8008758:	080088a7 	.word	0x080088a7
 800875c:	08008701 	.word	0x08008701
 8008760:	080087af 	.word	0x080087af
 8008764:	08008701 	.word	0x08008701
 8008768:	08008701 	.word	0x08008701
 800876c:	08008847 	.word	0x08008847
 8008770:	6833      	ldr	r3, [r6, #0]
 8008772:	1d1a      	adds	r2, r3, #4
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6032      	str	r2, [r6, #0]
 8008778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800877c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008780:	2301      	movs	r3, #1
 8008782:	e09d      	b.n	80088c0 <_printf_i+0x1e8>
 8008784:	6833      	ldr	r3, [r6, #0]
 8008786:	6820      	ldr	r0, [r4, #0]
 8008788:	1d19      	adds	r1, r3, #4
 800878a:	6031      	str	r1, [r6, #0]
 800878c:	0606      	lsls	r6, r0, #24
 800878e:	d501      	bpl.n	8008794 <_printf_i+0xbc>
 8008790:	681d      	ldr	r5, [r3, #0]
 8008792:	e003      	b.n	800879c <_printf_i+0xc4>
 8008794:	0645      	lsls	r5, r0, #25
 8008796:	d5fb      	bpl.n	8008790 <_printf_i+0xb8>
 8008798:	f9b3 5000 	ldrsh.w	r5, [r3]
 800879c:	2d00      	cmp	r5, #0
 800879e:	da03      	bge.n	80087a8 <_printf_i+0xd0>
 80087a0:	232d      	movs	r3, #45	@ 0x2d
 80087a2:	426d      	negs	r5, r5
 80087a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087a8:	4859      	ldr	r0, [pc, #356]	@ (8008910 <_printf_i+0x238>)
 80087aa:	230a      	movs	r3, #10
 80087ac:	e011      	b.n	80087d2 <_printf_i+0xfa>
 80087ae:	6821      	ldr	r1, [r4, #0]
 80087b0:	6833      	ldr	r3, [r6, #0]
 80087b2:	0608      	lsls	r0, r1, #24
 80087b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80087b8:	d402      	bmi.n	80087c0 <_printf_i+0xe8>
 80087ba:	0649      	lsls	r1, r1, #25
 80087bc:	bf48      	it	mi
 80087be:	b2ad      	uxthmi	r5, r5
 80087c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80087c2:	4853      	ldr	r0, [pc, #332]	@ (8008910 <_printf_i+0x238>)
 80087c4:	6033      	str	r3, [r6, #0]
 80087c6:	bf14      	ite	ne
 80087c8:	230a      	movne	r3, #10
 80087ca:	2308      	moveq	r3, #8
 80087cc:	2100      	movs	r1, #0
 80087ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80087d2:	6866      	ldr	r6, [r4, #4]
 80087d4:	60a6      	str	r6, [r4, #8]
 80087d6:	2e00      	cmp	r6, #0
 80087d8:	bfa2      	ittt	ge
 80087da:	6821      	ldrge	r1, [r4, #0]
 80087dc:	f021 0104 	bicge.w	r1, r1, #4
 80087e0:	6021      	strge	r1, [r4, #0]
 80087e2:	b90d      	cbnz	r5, 80087e8 <_printf_i+0x110>
 80087e4:	2e00      	cmp	r6, #0
 80087e6:	d04b      	beq.n	8008880 <_printf_i+0x1a8>
 80087e8:	4616      	mov	r6, r2
 80087ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80087ee:	fb03 5711 	mls	r7, r3, r1, r5
 80087f2:	5dc7      	ldrb	r7, [r0, r7]
 80087f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087f8:	462f      	mov	r7, r5
 80087fa:	42bb      	cmp	r3, r7
 80087fc:	460d      	mov	r5, r1
 80087fe:	d9f4      	bls.n	80087ea <_printf_i+0x112>
 8008800:	2b08      	cmp	r3, #8
 8008802:	d10b      	bne.n	800881c <_printf_i+0x144>
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	07df      	lsls	r7, r3, #31
 8008808:	d508      	bpl.n	800881c <_printf_i+0x144>
 800880a:	6923      	ldr	r3, [r4, #16]
 800880c:	6861      	ldr	r1, [r4, #4]
 800880e:	4299      	cmp	r1, r3
 8008810:	bfde      	ittt	le
 8008812:	2330      	movle	r3, #48	@ 0x30
 8008814:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008818:	f106 36ff 	addle.w	r6, r6, #4294967295
 800881c:	1b92      	subs	r2, r2, r6
 800881e:	6122      	str	r2, [r4, #16]
 8008820:	f8cd a000 	str.w	sl, [sp]
 8008824:	464b      	mov	r3, r9
 8008826:	aa03      	add	r2, sp, #12
 8008828:	4621      	mov	r1, r4
 800882a:	4640      	mov	r0, r8
 800882c:	f7ff fee6 	bl	80085fc <_printf_common>
 8008830:	3001      	adds	r0, #1
 8008832:	d14a      	bne.n	80088ca <_printf_i+0x1f2>
 8008834:	f04f 30ff 	mov.w	r0, #4294967295
 8008838:	b004      	add	sp, #16
 800883a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	f043 0320 	orr.w	r3, r3, #32
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	4833      	ldr	r0, [pc, #204]	@ (8008914 <_printf_i+0x23c>)
 8008848:	2778      	movs	r7, #120	@ 0x78
 800884a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	6831      	ldr	r1, [r6, #0]
 8008852:	061f      	lsls	r7, r3, #24
 8008854:	f851 5b04 	ldr.w	r5, [r1], #4
 8008858:	d402      	bmi.n	8008860 <_printf_i+0x188>
 800885a:	065f      	lsls	r7, r3, #25
 800885c:	bf48      	it	mi
 800885e:	b2ad      	uxthmi	r5, r5
 8008860:	6031      	str	r1, [r6, #0]
 8008862:	07d9      	lsls	r1, r3, #31
 8008864:	bf44      	itt	mi
 8008866:	f043 0320 	orrmi.w	r3, r3, #32
 800886a:	6023      	strmi	r3, [r4, #0]
 800886c:	b11d      	cbz	r5, 8008876 <_printf_i+0x19e>
 800886e:	2310      	movs	r3, #16
 8008870:	e7ac      	b.n	80087cc <_printf_i+0xf4>
 8008872:	4827      	ldr	r0, [pc, #156]	@ (8008910 <_printf_i+0x238>)
 8008874:	e7e9      	b.n	800884a <_printf_i+0x172>
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	f023 0320 	bic.w	r3, r3, #32
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	e7f6      	b.n	800886e <_printf_i+0x196>
 8008880:	4616      	mov	r6, r2
 8008882:	e7bd      	b.n	8008800 <_printf_i+0x128>
 8008884:	6833      	ldr	r3, [r6, #0]
 8008886:	6825      	ldr	r5, [r4, #0]
 8008888:	6961      	ldr	r1, [r4, #20]
 800888a:	1d18      	adds	r0, r3, #4
 800888c:	6030      	str	r0, [r6, #0]
 800888e:	062e      	lsls	r6, r5, #24
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	d501      	bpl.n	8008898 <_printf_i+0x1c0>
 8008894:	6019      	str	r1, [r3, #0]
 8008896:	e002      	b.n	800889e <_printf_i+0x1c6>
 8008898:	0668      	lsls	r0, r5, #25
 800889a:	d5fb      	bpl.n	8008894 <_printf_i+0x1bc>
 800889c:	8019      	strh	r1, [r3, #0]
 800889e:	2300      	movs	r3, #0
 80088a0:	6123      	str	r3, [r4, #16]
 80088a2:	4616      	mov	r6, r2
 80088a4:	e7bc      	b.n	8008820 <_printf_i+0x148>
 80088a6:	6833      	ldr	r3, [r6, #0]
 80088a8:	1d1a      	adds	r2, r3, #4
 80088aa:	6032      	str	r2, [r6, #0]
 80088ac:	681e      	ldr	r6, [r3, #0]
 80088ae:	6862      	ldr	r2, [r4, #4]
 80088b0:	2100      	movs	r1, #0
 80088b2:	4630      	mov	r0, r6
 80088b4:	f7f7 fca4 	bl	8000200 <memchr>
 80088b8:	b108      	cbz	r0, 80088be <_printf_i+0x1e6>
 80088ba:	1b80      	subs	r0, r0, r6
 80088bc:	6060      	str	r0, [r4, #4]
 80088be:	6863      	ldr	r3, [r4, #4]
 80088c0:	6123      	str	r3, [r4, #16]
 80088c2:	2300      	movs	r3, #0
 80088c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088c8:	e7aa      	b.n	8008820 <_printf_i+0x148>
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	4632      	mov	r2, r6
 80088ce:	4649      	mov	r1, r9
 80088d0:	4640      	mov	r0, r8
 80088d2:	47d0      	blx	sl
 80088d4:	3001      	adds	r0, #1
 80088d6:	d0ad      	beq.n	8008834 <_printf_i+0x15c>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	079b      	lsls	r3, r3, #30
 80088dc:	d413      	bmi.n	8008906 <_printf_i+0x22e>
 80088de:	68e0      	ldr	r0, [r4, #12]
 80088e0:	9b03      	ldr	r3, [sp, #12]
 80088e2:	4298      	cmp	r0, r3
 80088e4:	bfb8      	it	lt
 80088e6:	4618      	movlt	r0, r3
 80088e8:	e7a6      	b.n	8008838 <_printf_i+0x160>
 80088ea:	2301      	movs	r3, #1
 80088ec:	4632      	mov	r2, r6
 80088ee:	4649      	mov	r1, r9
 80088f0:	4640      	mov	r0, r8
 80088f2:	47d0      	blx	sl
 80088f4:	3001      	adds	r0, #1
 80088f6:	d09d      	beq.n	8008834 <_printf_i+0x15c>
 80088f8:	3501      	adds	r5, #1
 80088fa:	68e3      	ldr	r3, [r4, #12]
 80088fc:	9903      	ldr	r1, [sp, #12]
 80088fe:	1a5b      	subs	r3, r3, r1
 8008900:	42ab      	cmp	r3, r5
 8008902:	dcf2      	bgt.n	80088ea <_printf_i+0x212>
 8008904:	e7eb      	b.n	80088de <_printf_i+0x206>
 8008906:	2500      	movs	r5, #0
 8008908:	f104 0619 	add.w	r6, r4, #25
 800890c:	e7f5      	b.n	80088fa <_printf_i+0x222>
 800890e:	bf00      	nop
 8008910:	08009175 	.word	0x08009175
 8008914:	08009186 	.word	0x08009186

08008918 <__sflush_r>:
 8008918:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800891c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008920:	0716      	lsls	r6, r2, #28
 8008922:	4605      	mov	r5, r0
 8008924:	460c      	mov	r4, r1
 8008926:	d454      	bmi.n	80089d2 <__sflush_r+0xba>
 8008928:	684b      	ldr	r3, [r1, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	dc02      	bgt.n	8008934 <__sflush_r+0x1c>
 800892e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008930:	2b00      	cmp	r3, #0
 8008932:	dd48      	ble.n	80089c6 <__sflush_r+0xae>
 8008934:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008936:	2e00      	cmp	r6, #0
 8008938:	d045      	beq.n	80089c6 <__sflush_r+0xae>
 800893a:	2300      	movs	r3, #0
 800893c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008940:	682f      	ldr	r7, [r5, #0]
 8008942:	6a21      	ldr	r1, [r4, #32]
 8008944:	602b      	str	r3, [r5, #0]
 8008946:	d030      	beq.n	80089aa <__sflush_r+0x92>
 8008948:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800894a:	89a3      	ldrh	r3, [r4, #12]
 800894c:	0759      	lsls	r1, r3, #29
 800894e:	d505      	bpl.n	800895c <__sflush_r+0x44>
 8008950:	6863      	ldr	r3, [r4, #4]
 8008952:	1ad2      	subs	r2, r2, r3
 8008954:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008956:	b10b      	cbz	r3, 800895c <__sflush_r+0x44>
 8008958:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800895a:	1ad2      	subs	r2, r2, r3
 800895c:	2300      	movs	r3, #0
 800895e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008960:	6a21      	ldr	r1, [r4, #32]
 8008962:	4628      	mov	r0, r5
 8008964:	47b0      	blx	r6
 8008966:	1c43      	adds	r3, r0, #1
 8008968:	89a3      	ldrh	r3, [r4, #12]
 800896a:	d106      	bne.n	800897a <__sflush_r+0x62>
 800896c:	6829      	ldr	r1, [r5, #0]
 800896e:	291d      	cmp	r1, #29
 8008970:	d82b      	bhi.n	80089ca <__sflush_r+0xb2>
 8008972:	4a2a      	ldr	r2, [pc, #168]	@ (8008a1c <__sflush_r+0x104>)
 8008974:	410a      	asrs	r2, r1
 8008976:	07d6      	lsls	r6, r2, #31
 8008978:	d427      	bmi.n	80089ca <__sflush_r+0xb2>
 800897a:	2200      	movs	r2, #0
 800897c:	6062      	str	r2, [r4, #4]
 800897e:	04d9      	lsls	r1, r3, #19
 8008980:	6922      	ldr	r2, [r4, #16]
 8008982:	6022      	str	r2, [r4, #0]
 8008984:	d504      	bpl.n	8008990 <__sflush_r+0x78>
 8008986:	1c42      	adds	r2, r0, #1
 8008988:	d101      	bne.n	800898e <__sflush_r+0x76>
 800898a:	682b      	ldr	r3, [r5, #0]
 800898c:	b903      	cbnz	r3, 8008990 <__sflush_r+0x78>
 800898e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008990:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008992:	602f      	str	r7, [r5, #0]
 8008994:	b1b9      	cbz	r1, 80089c6 <__sflush_r+0xae>
 8008996:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800899a:	4299      	cmp	r1, r3
 800899c:	d002      	beq.n	80089a4 <__sflush_r+0x8c>
 800899e:	4628      	mov	r0, r5
 80089a0:	f7ff fa9a 	bl	8007ed8 <_free_r>
 80089a4:	2300      	movs	r3, #0
 80089a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80089a8:	e00d      	b.n	80089c6 <__sflush_r+0xae>
 80089aa:	2301      	movs	r3, #1
 80089ac:	4628      	mov	r0, r5
 80089ae:	47b0      	blx	r6
 80089b0:	4602      	mov	r2, r0
 80089b2:	1c50      	adds	r0, r2, #1
 80089b4:	d1c9      	bne.n	800894a <__sflush_r+0x32>
 80089b6:	682b      	ldr	r3, [r5, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d0c6      	beq.n	800894a <__sflush_r+0x32>
 80089bc:	2b1d      	cmp	r3, #29
 80089be:	d001      	beq.n	80089c4 <__sflush_r+0xac>
 80089c0:	2b16      	cmp	r3, #22
 80089c2:	d11e      	bne.n	8008a02 <__sflush_r+0xea>
 80089c4:	602f      	str	r7, [r5, #0]
 80089c6:	2000      	movs	r0, #0
 80089c8:	e022      	b.n	8008a10 <__sflush_r+0xf8>
 80089ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089ce:	b21b      	sxth	r3, r3
 80089d0:	e01b      	b.n	8008a0a <__sflush_r+0xf2>
 80089d2:	690f      	ldr	r7, [r1, #16]
 80089d4:	2f00      	cmp	r7, #0
 80089d6:	d0f6      	beq.n	80089c6 <__sflush_r+0xae>
 80089d8:	0793      	lsls	r3, r2, #30
 80089da:	680e      	ldr	r6, [r1, #0]
 80089dc:	bf08      	it	eq
 80089de:	694b      	ldreq	r3, [r1, #20]
 80089e0:	600f      	str	r7, [r1, #0]
 80089e2:	bf18      	it	ne
 80089e4:	2300      	movne	r3, #0
 80089e6:	eba6 0807 	sub.w	r8, r6, r7
 80089ea:	608b      	str	r3, [r1, #8]
 80089ec:	f1b8 0f00 	cmp.w	r8, #0
 80089f0:	dde9      	ble.n	80089c6 <__sflush_r+0xae>
 80089f2:	6a21      	ldr	r1, [r4, #32]
 80089f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80089f6:	4643      	mov	r3, r8
 80089f8:	463a      	mov	r2, r7
 80089fa:	4628      	mov	r0, r5
 80089fc:	47b0      	blx	r6
 80089fe:	2800      	cmp	r0, #0
 8008a00:	dc08      	bgt.n	8008a14 <__sflush_r+0xfc>
 8008a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a0a:	81a3      	strh	r3, [r4, #12]
 8008a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a14:	4407      	add	r7, r0
 8008a16:	eba8 0800 	sub.w	r8, r8, r0
 8008a1a:	e7e7      	b.n	80089ec <__sflush_r+0xd4>
 8008a1c:	dfbffffe 	.word	0xdfbffffe

08008a20 <_fflush_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	690b      	ldr	r3, [r1, #16]
 8008a24:	4605      	mov	r5, r0
 8008a26:	460c      	mov	r4, r1
 8008a28:	b913      	cbnz	r3, 8008a30 <_fflush_r+0x10>
 8008a2a:	2500      	movs	r5, #0
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	bd38      	pop	{r3, r4, r5, pc}
 8008a30:	b118      	cbz	r0, 8008a3a <_fflush_r+0x1a>
 8008a32:	6a03      	ldr	r3, [r0, #32]
 8008a34:	b90b      	cbnz	r3, 8008a3a <_fflush_r+0x1a>
 8008a36:	f7ff f919 	bl	8007c6c <__sinit>
 8008a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0f3      	beq.n	8008a2a <_fflush_r+0xa>
 8008a42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a44:	07d0      	lsls	r0, r2, #31
 8008a46:	d404      	bmi.n	8008a52 <_fflush_r+0x32>
 8008a48:	0599      	lsls	r1, r3, #22
 8008a4a:	d402      	bmi.n	8008a52 <_fflush_r+0x32>
 8008a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a4e:	f7ff fa32 	bl	8007eb6 <__retarget_lock_acquire_recursive>
 8008a52:	4628      	mov	r0, r5
 8008a54:	4621      	mov	r1, r4
 8008a56:	f7ff ff5f 	bl	8008918 <__sflush_r>
 8008a5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a5c:	07da      	lsls	r2, r3, #31
 8008a5e:	4605      	mov	r5, r0
 8008a60:	d4e4      	bmi.n	8008a2c <_fflush_r+0xc>
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	059b      	lsls	r3, r3, #22
 8008a66:	d4e1      	bmi.n	8008a2c <_fflush_r+0xc>
 8008a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a6a:	f7ff fa25 	bl	8007eb8 <__retarget_lock_release_recursive>
 8008a6e:	e7dd      	b.n	8008a2c <_fflush_r+0xc>

08008a70 <__swbuf_r>:
 8008a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a72:	460e      	mov	r6, r1
 8008a74:	4614      	mov	r4, r2
 8008a76:	4605      	mov	r5, r0
 8008a78:	b118      	cbz	r0, 8008a82 <__swbuf_r+0x12>
 8008a7a:	6a03      	ldr	r3, [r0, #32]
 8008a7c:	b90b      	cbnz	r3, 8008a82 <__swbuf_r+0x12>
 8008a7e:	f7ff f8f5 	bl	8007c6c <__sinit>
 8008a82:	69a3      	ldr	r3, [r4, #24]
 8008a84:	60a3      	str	r3, [r4, #8]
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	071a      	lsls	r2, r3, #28
 8008a8a:	d501      	bpl.n	8008a90 <__swbuf_r+0x20>
 8008a8c:	6923      	ldr	r3, [r4, #16]
 8008a8e:	b943      	cbnz	r3, 8008aa2 <__swbuf_r+0x32>
 8008a90:	4621      	mov	r1, r4
 8008a92:	4628      	mov	r0, r5
 8008a94:	f000 f82a 	bl	8008aec <__swsetup_r>
 8008a98:	b118      	cbz	r0, 8008aa2 <__swbuf_r+0x32>
 8008a9a:	f04f 37ff 	mov.w	r7, #4294967295
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	6922      	ldr	r2, [r4, #16]
 8008aa6:	1a98      	subs	r0, r3, r2
 8008aa8:	6963      	ldr	r3, [r4, #20]
 8008aaa:	b2f6      	uxtb	r6, r6
 8008aac:	4283      	cmp	r3, r0
 8008aae:	4637      	mov	r7, r6
 8008ab0:	dc05      	bgt.n	8008abe <__swbuf_r+0x4e>
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	f7ff ffb3 	bl	8008a20 <_fflush_r>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d1ed      	bne.n	8008a9a <__swbuf_r+0x2a>
 8008abe:	68a3      	ldr	r3, [r4, #8]
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	60a3      	str	r3, [r4, #8]
 8008ac4:	6823      	ldr	r3, [r4, #0]
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	6022      	str	r2, [r4, #0]
 8008aca:	701e      	strb	r6, [r3, #0]
 8008acc:	6962      	ldr	r2, [r4, #20]
 8008ace:	1c43      	adds	r3, r0, #1
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d004      	beq.n	8008ade <__swbuf_r+0x6e>
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	07db      	lsls	r3, r3, #31
 8008ad8:	d5e1      	bpl.n	8008a9e <__swbuf_r+0x2e>
 8008ada:	2e0a      	cmp	r6, #10
 8008adc:	d1df      	bne.n	8008a9e <__swbuf_r+0x2e>
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	f7ff ff9d 	bl	8008a20 <_fflush_r>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d0d9      	beq.n	8008a9e <__swbuf_r+0x2e>
 8008aea:	e7d6      	b.n	8008a9a <__swbuf_r+0x2a>

08008aec <__swsetup_r>:
 8008aec:	b538      	push	{r3, r4, r5, lr}
 8008aee:	4b29      	ldr	r3, [pc, #164]	@ (8008b94 <__swsetup_r+0xa8>)
 8008af0:	4605      	mov	r5, r0
 8008af2:	6818      	ldr	r0, [r3, #0]
 8008af4:	460c      	mov	r4, r1
 8008af6:	b118      	cbz	r0, 8008b00 <__swsetup_r+0x14>
 8008af8:	6a03      	ldr	r3, [r0, #32]
 8008afa:	b90b      	cbnz	r3, 8008b00 <__swsetup_r+0x14>
 8008afc:	f7ff f8b6 	bl	8007c6c <__sinit>
 8008b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b04:	0719      	lsls	r1, r3, #28
 8008b06:	d422      	bmi.n	8008b4e <__swsetup_r+0x62>
 8008b08:	06da      	lsls	r2, r3, #27
 8008b0a:	d407      	bmi.n	8008b1c <__swsetup_r+0x30>
 8008b0c:	2209      	movs	r2, #9
 8008b0e:	602a      	str	r2, [r5, #0]
 8008b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b14:	81a3      	strh	r3, [r4, #12]
 8008b16:	f04f 30ff 	mov.w	r0, #4294967295
 8008b1a:	e033      	b.n	8008b84 <__swsetup_r+0x98>
 8008b1c:	0758      	lsls	r0, r3, #29
 8008b1e:	d512      	bpl.n	8008b46 <__swsetup_r+0x5a>
 8008b20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b22:	b141      	cbz	r1, 8008b36 <__swsetup_r+0x4a>
 8008b24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b28:	4299      	cmp	r1, r3
 8008b2a:	d002      	beq.n	8008b32 <__swsetup_r+0x46>
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f7ff f9d3 	bl	8007ed8 <_free_r>
 8008b32:	2300      	movs	r3, #0
 8008b34:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b3c:	81a3      	strh	r3, [r4, #12]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	6063      	str	r3, [r4, #4]
 8008b42:	6923      	ldr	r3, [r4, #16]
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	89a3      	ldrh	r3, [r4, #12]
 8008b48:	f043 0308 	orr.w	r3, r3, #8
 8008b4c:	81a3      	strh	r3, [r4, #12]
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	b94b      	cbnz	r3, 8008b66 <__swsetup_r+0x7a>
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b5c:	d003      	beq.n	8008b66 <__swsetup_r+0x7a>
 8008b5e:	4621      	mov	r1, r4
 8008b60:	4628      	mov	r0, r5
 8008b62:	f000 f897 	bl	8008c94 <__smakebuf_r>
 8008b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b6a:	f013 0201 	ands.w	r2, r3, #1
 8008b6e:	d00a      	beq.n	8008b86 <__swsetup_r+0x9a>
 8008b70:	2200      	movs	r2, #0
 8008b72:	60a2      	str	r2, [r4, #8]
 8008b74:	6962      	ldr	r2, [r4, #20]
 8008b76:	4252      	negs	r2, r2
 8008b78:	61a2      	str	r2, [r4, #24]
 8008b7a:	6922      	ldr	r2, [r4, #16]
 8008b7c:	b942      	cbnz	r2, 8008b90 <__swsetup_r+0xa4>
 8008b7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b82:	d1c5      	bne.n	8008b10 <__swsetup_r+0x24>
 8008b84:	bd38      	pop	{r3, r4, r5, pc}
 8008b86:	0799      	lsls	r1, r3, #30
 8008b88:	bf58      	it	pl
 8008b8a:	6962      	ldrpl	r2, [r4, #20]
 8008b8c:	60a2      	str	r2, [r4, #8]
 8008b8e:	e7f4      	b.n	8008b7a <__swsetup_r+0x8e>
 8008b90:	2000      	movs	r0, #0
 8008b92:	e7f7      	b.n	8008b84 <__swsetup_r+0x98>
 8008b94:	20000034 	.word	0x20000034

08008b98 <memmove>:
 8008b98:	4288      	cmp	r0, r1
 8008b9a:	b510      	push	{r4, lr}
 8008b9c:	eb01 0402 	add.w	r4, r1, r2
 8008ba0:	d902      	bls.n	8008ba8 <memmove+0x10>
 8008ba2:	4284      	cmp	r4, r0
 8008ba4:	4623      	mov	r3, r4
 8008ba6:	d807      	bhi.n	8008bb8 <memmove+0x20>
 8008ba8:	1e43      	subs	r3, r0, #1
 8008baa:	42a1      	cmp	r1, r4
 8008bac:	d008      	beq.n	8008bc0 <memmove+0x28>
 8008bae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bb6:	e7f8      	b.n	8008baa <memmove+0x12>
 8008bb8:	4402      	add	r2, r0
 8008bba:	4601      	mov	r1, r0
 8008bbc:	428a      	cmp	r2, r1
 8008bbe:	d100      	bne.n	8008bc2 <memmove+0x2a>
 8008bc0:	bd10      	pop	{r4, pc}
 8008bc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bca:	e7f7      	b.n	8008bbc <memmove+0x24>

08008bcc <_sbrk_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	4d06      	ldr	r5, [pc, #24]	@ (8008be8 <_sbrk_r+0x1c>)
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	4608      	mov	r0, r1
 8008bd6:	602b      	str	r3, [r5, #0]
 8008bd8:	f7f8 fccc 	bl	8001574 <_sbrk>
 8008bdc:	1c43      	adds	r3, r0, #1
 8008bde:	d102      	bne.n	8008be6 <_sbrk_r+0x1a>
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	b103      	cbz	r3, 8008be6 <_sbrk_r+0x1a>
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	bd38      	pop	{r3, r4, r5, pc}
 8008be8:	200130e4 	.word	0x200130e4

08008bec <_realloc_r>:
 8008bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf0:	4680      	mov	r8, r0
 8008bf2:	4615      	mov	r5, r2
 8008bf4:	460c      	mov	r4, r1
 8008bf6:	b921      	cbnz	r1, 8008c02 <_realloc_r+0x16>
 8008bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	f7ff b9d7 	b.w	8007fb0 <_malloc_r>
 8008c02:	b92a      	cbnz	r2, 8008c10 <_realloc_r+0x24>
 8008c04:	f7ff f968 	bl	8007ed8 <_free_r>
 8008c08:	2400      	movs	r4, #0
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c10:	f000 f89e 	bl	8008d50 <_malloc_usable_size_r>
 8008c14:	4285      	cmp	r5, r0
 8008c16:	4606      	mov	r6, r0
 8008c18:	d802      	bhi.n	8008c20 <_realloc_r+0x34>
 8008c1a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c1e:	d8f4      	bhi.n	8008c0a <_realloc_r+0x1e>
 8008c20:	4629      	mov	r1, r5
 8008c22:	4640      	mov	r0, r8
 8008c24:	f7ff f9c4 	bl	8007fb0 <_malloc_r>
 8008c28:	4607      	mov	r7, r0
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d0ec      	beq.n	8008c08 <_realloc_r+0x1c>
 8008c2e:	42b5      	cmp	r5, r6
 8008c30:	462a      	mov	r2, r5
 8008c32:	4621      	mov	r1, r4
 8008c34:	bf28      	it	cs
 8008c36:	4632      	movcs	r2, r6
 8008c38:	f7ff f93f 	bl	8007eba <memcpy>
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	4640      	mov	r0, r8
 8008c40:	f7ff f94a 	bl	8007ed8 <_free_r>
 8008c44:	463c      	mov	r4, r7
 8008c46:	e7e0      	b.n	8008c0a <_realloc_r+0x1e>

08008c48 <__swhatbuf_r>:
 8008c48:	b570      	push	{r4, r5, r6, lr}
 8008c4a:	460c      	mov	r4, r1
 8008c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c50:	2900      	cmp	r1, #0
 8008c52:	b096      	sub	sp, #88	@ 0x58
 8008c54:	4615      	mov	r5, r2
 8008c56:	461e      	mov	r6, r3
 8008c58:	da0d      	bge.n	8008c76 <__swhatbuf_r+0x2e>
 8008c5a:	89a3      	ldrh	r3, [r4, #12]
 8008c5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c60:	f04f 0100 	mov.w	r1, #0
 8008c64:	bf14      	ite	ne
 8008c66:	2340      	movne	r3, #64	@ 0x40
 8008c68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	6031      	str	r1, [r6, #0]
 8008c70:	602b      	str	r3, [r5, #0]
 8008c72:	b016      	add	sp, #88	@ 0x58
 8008c74:	bd70      	pop	{r4, r5, r6, pc}
 8008c76:	466a      	mov	r2, sp
 8008c78:	f000 f848 	bl	8008d0c <_fstat_r>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	dbec      	blt.n	8008c5a <__swhatbuf_r+0x12>
 8008c80:	9901      	ldr	r1, [sp, #4]
 8008c82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c8a:	4259      	negs	r1, r3
 8008c8c:	4159      	adcs	r1, r3
 8008c8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c92:	e7eb      	b.n	8008c6c <__swhatbuf_r+0x24>

08008c94 <__smakebuf_r>:
 8008c94:	898b      	ldrh	r3, [r1, #12]
 8008c96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c98:	079d      	lsls	r5, r3, #30
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	d507      	bpl.n	8008cb0 <__smakebuf_r+0x1c>
 8008ca0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	6123      	str	r3, [r4, #16]
 8008ca8:	2301      	movs	r3, #1
 8008caa:	6163      	str	r3, [r4, #20]
 8008cac:	b003      	add	sp, #12
 8008cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cb0:	ab01      	add	r3, sp, #4
 8008cb2:	466a      	mov	r2, sp
 8008cb4:	f7ff ffc8 	bl	8008c48 <__swhatbuf_r>
 8008cb8:	9f00      	ldr	r7, [sp, #0]
 8008cba:	4605      	mov	r5, r0
 8008cbc:	4639      	mov	r1, r7
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f7ff f976 	bl	8007fb0 <_malloc_r>
 8008cc4:	b948      	cbnz	r0, 8008cda <__smakebuf_r+0x46>
 8008cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cca:	059a      	lsls	r2, r3, #22
 8008ccc:	d4ee      	bmi.n	8008cac <__smakebuf_r+0x18>
 8008cce:	f023 0303 	bic.w	r3, r3, #3
 8008cd2:	f043 0302 	orr.w	r3, r3, #2
 8008cd6:	81a3      	strh	r3, [r4, #12]
 8008cd8:	e7e2      	b.n	8008ca0 <__smakebuf_r+0xc>
 8008cda:	89a3      	ldrh	r3, [r4, #12]
 8008cdc:	6020      	str	r0, [r4, #0]
 8008cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ce2:	81a3      	strh	r3, [r4, #12]
 8008ce4:	9b01      	ldr	r3, [sp, #4]
 8008ce6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008cea:	b15b      	cbz	r3, 8008d04 <__smakebuf_r+0x70>
 8008cec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f000 f81d 	bl	8008d30 <_isatty_r>
 8008cf6:	b128      	cbz	r0, 8008d04 <__smakebuf_r+0x70>
 8008cf8:	89a3      	ldrh	r3, [r4, #12]
 8008cfa:	f023 0303 	bic.w	r3, r3, #3
 8008cfe:	f043 0301 	orr.w	r3, r3, #1
 8008d02:	81a3      	strh	r3, [r4, #12]
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	431d      	orrs	r5, r3
 8008d08:	81a5      	strh	r5, [r4, #12]
 8008d0a:	e7cf      	b.n	8008cac <__smakebuf_r+0x18>

08008d0c <_fstat_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4d07      	ldr	r5, [pc, #28]	@ (8008d2c <_fstat_r+0x20>)
 8008d10:	2300      	movs	r3, #0
 8008d12:	4604      	mov	r4, r0
 8008d14:	4608      	mov	r0, r1
 8008d16:	4611      	mov	r1, r2
 8008d18:	602b      	str	r3, [r5, #0]
 8008d1a:	f7f8 fc02 	bl	8001522 <_fstat>
 8008d1e:	1c43      	adds	r3, r0, #1
 8008d20:	d102      	bne.n	8008d28 <_fstat_r+0x1c>
 8008d22:	682b      	ldr	r3, [r5, #0]
 8008d24:	b103      	cbz	r3, 8008d28 <_fstat_r+0x1c>
 8008d26:	6023      	str	r3, [r4, #0]
 8008d28:	bd38      	pop	{r3, r4, r5, pc}
 8008d2a:	bf00      	nop
 8008d2c:	200130e4 	.word	0x200130e4

08008d30 <_isatty_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4d06      	ldr	r5, [pc, #24]	@ (8008d4c <_isatty_r+0x1c>)
 8008d34:	2300      	movs	r3, #0
 8008d36:	4604      	mov	r4, r0
 8008d38:	4608      	mov	r0, r1
 8008d3a:	602b      	str	r3, [r5, #0]
 8008d3c:	f7f8 fc01 	bl	8001542 <_isatty>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d102      	bne.n	8008d4a <_isatty_r+0x1a>
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	b103      	cbz	r3, 8008d4a <_isatty_r+0x1a>
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	200130e4 	.word	0x200130e4

08008d50 <_malloc_usable_size_r>:
 8008d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d54:	1f18      	subs	r0, r3, #4
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	bfbc      	itt	lt
 8008d5a:	580b      	ldrlt	r3, [r1, r0]
 8008d5c:	18c0      	addlt	r0, r0, r3
 8008d5e:	4770      	bx	lr

08008d60 <_init>:
 8008d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d62:	bf00      	nop
 8008d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d66:	bc08      	pop	{r3}
 8008d68:	469e      	mov	lr, r3
 8008d6a:	4770      	bx	lr

08008d6c <_fini>:
 8008d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6e:	bf00      	nop
 8008d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d72:	bc08      	pop	{r3}
 8008d74:	469e      	mov	lr, r3
 8008d76:	4770      	bx	lr
