
007_Task_priority_exchange.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dc0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08007f50  08007f50  00008f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080b0  080080b0  0000a01c  2**0
                  CONTENTS
  4 .ARM          00000008  080080b0  080080b0  000090b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080b8  080080b8  0000a01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080b8  080080b8  000090b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080bc  080080bc  000090bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080080c0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a01c  2**0
                  CONTENTS
 10 .bss          000144dc  2000001c  2000001c  0000a01c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144f8  200144f8  0000a01c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a01c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001786e  00000000  00000000  0000a04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035c0  00000000  00000000  000218ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  00024e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c9  00000000  00000000  00026420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fc9  00000000  00000000  000274e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e87  00000000  00000000  0004b4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da881  00000000  00000000  00064339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ebba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b28  00000000  00000000  0013ec00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d7  00000000  00000000  00144728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f38 	.word	0x08007f38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08007f38 	.word	0x08007f38

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f24 	.word	0x20012f24

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96a 	b.w	8000560 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	460c      	mov	r4, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14e      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b0:	4694      	mov	ip, r2
 80002b2:	458c      	cmp	ip, r1
 80002b4:	4686      	mov	lr, r0
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0xde>
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0320 	rsb	r3, r2, #32
 80002c2:	4091      	lsls	r1, r2
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	4319      	orrs	r1, r3
 80002ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d6:	fa1f f68c 	uxth.w	r6, ip
 80002da:	fbb1 f4f7 	udiv	r4, r1, r7
 80002de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e2:	fb07 1114 	mls	r1, r7, r4, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb04 f106 	mul.w	r1, r4, r6
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fa:	f080 8112 	bcs.w	8000522 <__udivmoddi4+0x27e>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 810f 	bls.w	8000522 <__udivmoddi4+0x27e>
 8000304:	3c02      	subs	r4, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a59      	subs	r1, r3, r1
 800030a:	fa1f f38e 	uxth.w	r3, lr
 800030e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000312:	fb07 1110 	mls	r1, r7, r0, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb00 f606 	mul.w	r6, r0, r6
 800031e:	429e      	cmp	r6, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x94>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 31ff 	add.w	r1, r0, #4294967295
 800032a:	f080 80fc 	bcs.w	8000526 <__udivmoddi4+0x282>
 800032e:	429e      	cmp	r6, r3
 8000330:	f240 80f9 	bls.w	8000526 <__udivmoddi4+0x282>
 8000334:	4463      	add	r3, ip
 8000336:	3802      	subs	r0, #2
 8000338:	1b9b      	subs	r3, r3, r6
 800033a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa6>
 8000342:	40d3      	lsrs	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	e9c5 3200 	strd	r3, r2, [r5]
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xba>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb4>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa6>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d146      	bne.n	80003f4 <__udivmoddi4+0x150>
 8000366:	42a3      	cmp	r3, r4
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xcc>
 800036a:	4290      	cmp	r0, r2
 800036c:	f0c0 80f0 	bcc.w	8000550 <__udivmoddi4+0x2ac>
 8000370:	1a86      	subs	r6, r0, r2
 8000372:	eb64 0303 	sbc.w	r3, r4, r3
 8000376:	2001      	movs	r0, #1
 8000378:	2d00      	cmp	r5, #0
 800037a:	d0e6      	beq.n	800034a <__udivmoddi4+0xa6>
 800037c:	e9c5 6300 	strd	r6, r3, [r5]
 8000380:	e7e3      	b.n	800034a <__udivmoddi4+0xa6>
 8000382:	2a00      	cmp	r2, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x204>
 8000388:	eba1 040c 	sub.w	r4, r1, ip
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb4 f6f8 	udiv	r6, r4, r8
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb08 4416 	mls	r4, r8, r6, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb07 f006 	mul.w	r0, r7, r6
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x11c>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x11a>
 80003b8:	4298      	cmp	r0, r3
 80003ba:	f200 80cd 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 80003be:	4626      	mov	r6, r4
 80003c0:	1a1c      	subs	r4, r3, r0
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ca:	fb08 4410 	mls	r4, r8, r0, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb00 f707 	mul.w	r7, r0, r7
 80003d6:	429f      	cmp	r7, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x148>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x146>
 80003e4:	429f      	cmp	r7, r3
 80003e6:	f200 80b0 	bhi.w	800054a <__udivmoddi4+0x2a6>
 80003ea:	4620      	mov	r0, r4
 80003ec:	1bdb      	subs	r3, r3, r7
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0x9c>
 80003f4:	f1c1 0620 	rsb	r6, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 f706 	lsr.w	r7, r2, r6
 80003fe:	431f      	orrs	r7, r3
 8000400:	fa20 fc06 	lsr.w	ip, r0, r6
 8000404:	fa04 f301 	lsl.w	r3, r4, r1
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	40f4      	lsrs	r4, r6
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	0c38      	lsrs	r0, r7, #16
 8000414:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000418:	fbb4 fef0 	udiv	lr, r4, r0
 800041c:	fa1f fc87 	uxth.w	ip, r7
 8000420:	fb00 441e 	mls	r4, r0, lr, r4
 8000424:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000428:	fb0e f90c 	mul.w	r9, lr, ip
 800042c:	45a1      	cmp	r9, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	d90a      	bls.n	800044a <__udivmoddi4+0x1a6>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043a:	f080 8084 	bcs.w	8000546 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8081 	bls.w	8000546 <__udivmoddi4+0x2a2>
 8000444:	f1ae 0e02 	sub.w	lr, lr, #2
 8000448:	443c      	add	r4, r7
 800044a:	eba4 0409 	sub.w	r4, r4, r9
 800044e:	fa1f f983 	uxth.w	r9, r3
 8000452:	fbb4 f3f0 	udiv	r3, r4, r0
 8000456:	fb00 4413 	mls	r4, r0, r3, r4
 800045a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000462:	45a4      	cmp	ip, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x1d2>
 8000466:	193c      	adds	r4, r7, r4
 8000468:	f103 30ff 	add.w	r0, r3, #4294967295
 800046c:	d267      	bcs.n	800053e <__udivmoddi4+0x29a>
 800046e:	45a4      	cmp	ip, r4
 8000470:	d965      	bls.n	800053e <__udivmoddi4+0x29a>
 8000472:	3b02      	subs	r3, #2
 8000474:	443c      	add	r4, r7
 8000476:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047a:	fba0 9302 	umull	r9, r3, r0, r2
 800047e:	eba4 040c 	sub.w	r4, r4, ip
 8000482:	429c      	cmp	r4, r3
 8000484:	46ce      	mov	lr, r9
 8000486:	469c      	mov	ip, r3
 8000488:	d351      	bcc.n	800052e <__udivmoddi4+0x28a>
 800048a:	d04e      	beq.n	800052a <__udivmoddi4+0x286>
 800048c:	b155      	cbz	r5, 80004a4 <__udivmoddi4+0x200>
 800048e:	ebb8 030e 	subs.w	r3, r8, lr
 8000492:	eb64 040c 	sbc.w	r4, r4, ip
 8000496:	fa04 f606 	lsl.w	r6, r4, r6
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e750      	b.n	800034a <__udivmoddi4+0xa6>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f103 	lsr.w	r1, r0, r3
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	fa24 f303 	lsr.w	r3, r4, r3
 80004b8:	4094      	lsls	r4, r2
 80004ba:	430c      	orrs	r4, r1
 80004bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3110 	mls	r1, r8, r0, r3
 80004d0:	0c23      	lsrs	r3, r4, #16
 80004d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d6:	fb00 f107 	mul.w	r1, r0, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x24c>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e6:	d22c      	bcs.n	8000542 <__udivmoddi4+0x29e>
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d92a      	bls.n	8000542 <__udivmoddi4+0x29e>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f8:	fb08 3311 	mls	r3, r8, r1, r3
 80004fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000500:	fb01 f307 	mul.w	r3, r1, r7
 8000504:	42a3      	cmp	r3, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x276>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000510:	d213      	bcs.n	800053a <__udivmoddi4+0x296>
 8000512:	42a3      	cmp	r3, r4
 8000514:	d911      	bls.n	800053a <__udivmoddi4+0x296>
 8000516:	3902      	subs	r1, #2
 8000518:	4464      	add	r4, ip
 800051a:	1ae4      	subs	r4, r4, r3
 800051c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000520:	e739      	b.n	8000396 <__udivmoddi4+0xf2>
 8000522:	4604      	mov	r4, r0
 8000524:	e6f0      	b.n	8000308 <__udivmoddi4+0x64>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0x94>
 800052a:	45c8      	cmp	r8, r9
 800052c:	d2ae      	bcs.n	800048c <__udivmoddi4+0x1e8>
 800052e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000532:	eb63 0c07 	sbc.w	ip, r3, r7
 8000536:	3801      	subs	r0, #1
 8000538:	e7a8      	b.n	800048c <__udivmoddi4+0x1e8>
 800053a:	4631      	mov	r1, r6
 800053c:	e7ed      	b.n	800051a <__udivmoddi4+0x276>
 800053e:	4603      	mov	r3, r0
 8000540:	e799      	b.n	8000476 <__udivmoddi4+0x1d2>
 8000542:	4630      	mov	r0, r6
 8000544:	e7d4      	b.n	80004f0 <__udivmoddi4+0x24c>
 8000546:	46d6      	mov	lr, sl
 8000548:	e77f      	b.n	800044a <__udivmoddi4+0x1a6>
 800054a:	4463      	add	r3, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e74d      	b.n	80003ec <__udivmoddi4+0x148>
 8000550:	4606      	mov	r6, r0
 8000552:	4623      	mov	r3, r4
 8000554:	4608      	mov	r0, r1
 8000556:	e70f      	b.n	8000378 <__udivmoddi4+0xd4>
 8000558:	3e02      	subs	r6, #2
 800055a:	4463      	add	r3, ip
 800055c:	e730      	b.n	80003c0 <__udivmoddi4+0x11c>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fc45 	bl	8000df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f855 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f8e7 	bl	8000744 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000576:	f000 f8bb 	bl	80006f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800057a:	4822      	ldr	r0, [pc, #136]	@ (8000604 <main+0xa0>)
 800057c:	f005 fa36 	bl	80059ec <SEGGER_UART_init>

  //Enable the CYCCNT counter
     DWT_CTRL |= (1<<0);
 8000580:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <main+0xa4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a20      	ldr	r2, [pc, #128]	@ (8000608 <main+0xa4>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6013      	str	r3, [r2, #0]

    SEGGER_SYSVIEW_Conf();
 800058c:	f004 ffe8 	bl	8005560 <SEGGER_SYSVIEW_Conf>

   // SEGGER_SYSVIEW_Start();

  	status=xTaskCreate(led_green_handler,"LED-Green",200,NULL,2,&ledg_task_handle);
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2302      	movs	r3, #2
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	22c8      	movs	r2, #200	@ 0xc8
 800059e:	491b      	ldr	r1, [pc, #108]	@ (800060c <main+0xa8>)
 80005a0:	481b      	ldr	r0, [pc, #108]	@ (8000610 <main+0xac>)
 80005a2:	f002 ffb5 	bl	8003510 <xTaskCreate>
 80005a6:	6178      	str	r0, [r7, #20]
  	configASSERT(status == pdPASS);
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d00b      	beq.n	80005c6 <main+0x62>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005b2:	f383 8811 	msr	BASEPRI, r3
 80005b6:	f3bf 8f6f 	isb	sy
 80005ba:	f3bf 8f4f 	dsb	sy
 80005be:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	e7fd      	b.n	80005c2 <main+0x5e>
  	

  	status=xTaskCreate(led_orange_handler,"LED-Orng",200,NULL,3,&ledo_task_handle);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2303      	movs	r3, #3
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	@ 0xc8
 80005d2:	4910      	ldr	r1, [pc, #64]	@ (8000614 <main+0xb0>)
 80005d4:	4810      	ldr	r0, [pc, #64]	@ (8000618 <main+0xb4>)
 80005d6:	f002 ff9b 	bl	8003510 <xTaskCreate>
 80005da:	6178      	str	r0, [r7, #20]
  	configASSERT(status == pdPASS);
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00b      	beq.n	80005fa <main+0x96>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	60fb      	str	r3, [r7, #12]
    }
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	e7fd      	b.n	80005f6 <main+0x92>

  	//start the freeRTOS scheduler
  	vTaskStartScheduler();
 80005fa:	f003 f9c9 	bl	8003990 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fe:	bf00      	nop
 8000600:	e7fd      	b.n	80005fe <main+0x9a>
 8000602:	bf00      	nop
 8000604:	0007a120 	.word	0x0007a120
 8000608:	e0001000 	.word	0xe0001000
 800060c:	08007f50 	.word	0x08007f50
 8000610:	08000a2d 	.word	0x08000a2d
 8000614:	08007f5c 	.word	0x08007f5c
 8000618:	08000a5d 	.word	0x08000a5d

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	@ 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	@ 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f007 fc4a 	bl	8007ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	@ (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	@ (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	@ (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	@ (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000690:	23a8      	movs	r3, #168	@ 0xa8
 8000692:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000698:	2307      	movs	r3, #7
 800069a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fee5 	bl	8001470 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 fa48 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2105      	movs	r1, #5
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f946 	bl	8001960 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006da:	f000 fa31 	bl	8000b40 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	@ 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <MX_USART2_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 8000728:	f001 fe0e 	bl	8002348 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000732:	f000 fa05 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000038 	.word	0x20000038
 8000740:	40004400 	.word	0x40004400

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	@ 0x30
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	4ba6      	ldr	r3, [pc, #664]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4aa5      	ldr	r2, [pc, #660]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 8000764:	f043 0310 	orr.w	r3, r3, #16
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4ba3      	ldr	r3, [pc, #652]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0310 	and.w	r3, r3, #16
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	4b9f      	ldr	r3, [pc, #636]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a9e      	ldr	r2, [pc, #632]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b9c      	ldr	r3, [pc, #624]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b98      	ldr	r3, [pc, #608]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a97      	ldr	r2, [pc, #604]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b95      	ldr	r3, [pc, #596]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b91      	ldr	r3, [pc, #580]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a90      	ldr	r2, [pc, #576]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b8e      	ldr	r3, [pc, #568]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b8a      	ldr	r3, [pc, #552]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a89      	ldr	r2, [pc, #548]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b87      	ldr	r3, [pc, #540]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b83      	ldr	r3, [pc, #524]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a82      	ldr	r2, [pc, #520]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b80      	ldr	r3, [pc, #512]	@ (80009f8 <MX_GPIO_Init+0x2b4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2108      	movs	r1, #8
 8000806:	487d      	ldr	r0, [pc, #500]	@ (80009fc <MX_GPIO_Init+0x2b8>)
 8000808:	f000 fdda 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2101      	movs	r1, #1
 8000810:	487b      	ldr	r0, [pc, #492]	@ (8000a00 <MX_GPIO_Init+0x2bc>)
 8000812:	f000 fdd5 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000816:	2200      	movs	r2, #0
 8000818:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800081c:	4879      	ldr	r0, [pc, #484]	@ (8000a04 <MX_GPIO_Init+0x2c0>)
 800081e:	f000 fdcf 	bl	80013c0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000822:	2308      	movs	r3, #8
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4870      	ldr	r0, [pc, #448]	@ (80009fc <MX_GPIO_Init+0x2b8>)
 800083a:	f000 fc25 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800083e:	2301      	movs	r3, #1
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	486a      	ldr	r0, [pc, #424]	@ (8000a00 <MX_GPIO_Init+0x2bc>)
 8000856:	f000 fc17 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800085a:	2308      	movs	r3, #8
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800086a:	2305      	movs	r3, #5
 800086c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	4862      	ldr	r0, [pc, #392]	@ (8000a00 <MX_GPIO_Init+0x2bc>)
 8000876:	f000 fc07 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087a:	2301      	movs	r3, #1
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	485e      	ldr	r0, [pc, #376]	@ (8000a08 <MX_GPIO_Init+0x2c4>)
 8000890:	f000 fbfa 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000894:	2310      	movs	r3, #16
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008a4:	2306      	movs	r3, #6
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4856      	ldr	r0, [pc, #344]	@ (8000a08 <MX_GPIO_Init+0x2c4>)
 80008b0:	f000 fbea 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008b4:	23e0      	movs	r3, #224	@ 0xe0
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008c4:	2305      	movs	r3, #5
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	484e      	ldr	r0, [pc, #312]	@ (8000a08 <MX_GPIO_Init+0x2c4>)
 80008d0:	f000 fbda 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008d4:	2304      	movs	r3, #4
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4849      	ldr	r0, [pc, #292]	@ (8000a0c <MX_GPIO_Init+0x2c8>)
 80008e8:	f000 fbce 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008fe:	2305      	movs	r3, #5
 8000900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4840      	ldr	r0, [pc, #256]	@ (8000a0c <MX_GPIO_Init+0x2c8>)
 800090a:	f000 fbbd 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800090e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000912:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4837      	ldr	r0, [pc, #220]	@ (8000a04 <MX_GPIO_Init+0x2c0>)
 8000928:	f000 fbae 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800092c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800093e:	2306      	movs	r3, #6
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	482d      	ldr	r0, [pc, #180]	@ (8000a00 <MX_GPIO_Init+0x2bc>)
 800094a:	f000 fb9d 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800094e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4829      	ldr	r0, [pc, #164]	@ (8000a08 <MX_GPIO_Init+0x2c4>)
 8000964:	f000 fb90 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000968:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800097a:	230a      	movs	r3, #10
 800097c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4820      	ldr	r0, [pc, #128]	@ (8000a08 <MX_GPIO_Init+0x2c4>)
 8000986:	f000 fb7f 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800098a:	2320      	movs	r3, #32
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4819      	ldr	r0, [pc, #100]	@ (8000a04 <MX_GPIO_Init+0x2c0>)
 800099e:	f000 fb73 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009a2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a8:	2312      	movs	r3, #18
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b4:	2304      	movs	r3, #4
 80009b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4813      	ldr	r0, [pc, #76]	@ (8000a0c <MX_GPIO_Init+0x2c8>)
 80009c0:	f000 fb62 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4808      	ldr	r0, [pc, #32]	@ (80009fc <MX_GPIO_Init+0x2b8>)
 80009da:	f000 fb55 	bl	8001088 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2106      	movs	r1, #6
 80009e2:	2006      	movs	r0, #6
 80009e4:	f000 fb26 	bl	8001034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009e8:	2006      	movs	r0, #6
 80009ea:	f000 fb3f 	bl	800106c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	@ 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40020400 	.word	0x40020400

08000a10 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */

void button_interrupt_handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 8000a14:	f006 ff00 	bl	8007818 <SEGGER_SYSVIEW_RecordEnterISR>
	status_button = 1;
 8000a18:	4b03      	ldr	r3, [pc, #12]	@ (8000a28 <button_interrupt_handler+0x18>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	601a      	str	r2, [r3, #0]

	traceISR_EXIT();
 8000a1e:	f006 ff3d 	bl	800789c <SEGGER_SYSVIEW_RecordExitISR>
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000080 	.word	0x20000080

08000a2c <led_green_handler>:



static void led_green_handler(void* parameters)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]


	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 8000a34:	4807      	ldr	r0, [pc, #28]	@ (8000a54 <led_green_handler+0x28>)
 8000a36:	f007 f997 	bl	8007d68 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a3e:	4806      	ldr	r0, [pc, #24]	@ (8000a58 <led_green_handler+0x2c>)
 8000a40:	f000 fcd7 	bl	80013f2 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000a44:	2064      	movs	r0, #100	@ 0x64
 8000a46:	f000 fa19 	bl	8000e7c <HAL_Delay>
		switch_priority();
 8000a4a:	f000 f81f 	bl	8000a8c <switch_priority>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 8000a4e:	bf00      	nop
 8000a50:	e7f0      	b.n	8000a34 <led_green_handler+0x8>
 8000a52:	bf00      	nop
 8000a54:	08007f68 	.word	0x08007f68
 8000a58:	40020c00 	.word	0x40020c00

08000a5c <led_orange_handler>:
}



static void led_orange_handler(void* parameters)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]


	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led");
 8000a64:	4807      	ldr	r0, [pc, #28]	@ (8000a84 <led_orange_handler+0x28>)
 8000a66:	f007 f97f 	bl	8007d68 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a6e:	4806      	ldr	r0, [pc, #24]	@ (8000a88 <led_orange_handler+0x2c>)
 8000a70:	f000 fcbf 	bl	80013f2 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000a74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a78:	f000 fa00 	bl	8000e7c <HAL_Delay>
		switch_priority();
 8000a7c:	f000 f806 	bl	8000a8c <switch_priority>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led");
 8000a80:	bf00      	nop
 8000a82:	e7ef      	b.n	8000a64 <led_orange_handler+0x8>
 8000a84:	08007f7c 	.word	0x08007f7c
 8000a88:	40020c00 	.word	0x40020c00

08000a8c <switch_priority>:
}



void switch_priority(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
	UBaseType_t p1,p2;
	xTaskHandle t1,t2,curr;


	BaseType_t switch_priority = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 8000a96:	f004 fa21 	bl	8004edc <vPortEnterCritical>

	if(status_button)
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <switch_priority+0x84>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d004      	beq.n	8000aac <switch_priority+0x20>
	{
		status_button = 0;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b10 <switch_priority+0x84>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]

	}

	portEXIT_CRITICAL();
 8000aac:	f004 fa48 	bl	8004f40 <vPortExitCritical>


	if(switch_priority)
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d027      	beq.n	8000b06 <switch_priority+0x7a>
	{


		t1 = xTaskGetHandle("LED-Green");
 8000ab6:	4817      	ldr	r0, [pc, #92]	@ (8000b14 <switch_priority+0x88>)
 8000ab8:	f003 f90c 	bl	8003cd4 <xTaskGetHandle>
 8000abc:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("LED-Orng");
 8000abe:	4816      	ldr	r0, [pc, #88]	@ (8000b18 <switch_priority+0x8c>)
 8000ac0:	f003 f908 	bl	8003cd4 <xTaskGetHandle>
 8000ac4:	60f8      	str	r0, [r7, #12]


		p1 = uxTaskPriorityGet(t1);
 8000ac6:	6938      	ldr	r0, [r7, #16]
 8000ac8:	f002 fe86 	bl	80037d8 <uxTaskPriorityGet>
 8000acc:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f002 fe82 	bl	80037d8 <uxTaskPriorityGet>
 8000ad4:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 8000ad6:	f003 fc85 	bl	80043e4 <xTaskGetCurrentTaskHandle>
 8000ada:	6038      	str	r0, [r7, #0]

		if(curr == t1)
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d108      	bne.n	8000af6 <switch_priority+0x6a>
		{
			vTaskPrioritySet(t1,p2);
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	6938      	ldr	r0, [r7, #16]
 8000ae8:	f002 fe90 	bl	800380c <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
 8000aec:	68b9      	ldr	r1, [r7, #8]
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	f002 fe8c 	bl	800380c <vTaskPrioritySet>
		{
			vTaskPrioritySet(t2,p1);
			vTaskPrioritySet(t1,p2);
		}
	}
}
 8000af4:	e007      	b.n	8000b06 <switch_priority+0x7a>
			vTaskPrioritySet(t2,p1);
 8000af6:	68b9      	ldr	r1, [r7, #8]
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f002 fe87 	bl	800380c <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	6938      	ldr	r0, [r7, #16]
 8000b02:	f002 fe83 	bl	800380c <vTaskPrioritySet>
}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000080 	.word	0x20000080
 8000b14:	08007f50 	.word	0x08007f50
 8000b18:	08007f5c 	.word	0x08007f5c

08000b1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d101      	bne.n	8000b32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b2e:	f000 f985 	bl	8000e3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40001000 	.word	0x40001000

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <Error_Handler+0x8>

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b62:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	4a08      	ldr	r2, [pc, #32]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	@ 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a19      	ldr	r2, [pc, #100]	@ (8000c20 <HAL_UART_MspInit+0x84>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d12b      	bne.n	8000c16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <HAL_UART_MspInit+0x88>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	4a17      	ldr	r2, [pc, #92]	@ (8000c24 <HAL_UART_MspInit+0x88>)
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <HAL_UART_MspInit+0x88>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <HAL_UART_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a10      	ldr	r2, [pc, #64]	@ (8000c24 <HAL_UART_MspInit+0x88>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <HAL_UART_MspInit+0x88>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c06:	2307      	movs	r3, #7
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <HAL_UART_MspInit+0x8c>)
 8000c12:	f000 fa39 	bl	8001088 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	@ 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40004400 	.word	0x40004400
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000

08000c2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08e      	sub	sp, #56	@ 0x38
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	4b33      	ldr	r3, [pc, #204]	@ (8000d10 <HAL_InitTick+0xe4>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	4a32      	ldr	r2, [pc, #200]	@ (8000d10 <HAL_InitTick+0xe4>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4c:	4b30      	ldr	r3, [pc, #192]	@ (8000d10 <HAL_InitTick+0xe4>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c58:	f107 0210 	add.w	r2, r7, #16
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4611      	mov	r1, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 f89c 	bl	8001da0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c68:	6a3b      	ldr	r3, [r7, #32]
 8000c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d103      	bne.n	8000c7a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c72:	f001 f86d 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8000c76:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c78:	e004      	b.n	8000c84 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c7a:	f001 f869 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c86:	4a23      	ldr	r2, [pc, #140]	@ (8000d14 <HAL_InitTick+0xe8>)
 8000c88:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8c:	0c9b      	lsrs	r3, r3, #18
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c92:	4b21      	ldr	r3, [pc, #132]	@ (8000d18 <HAL_InitTick+0xec>)
 8000c94:	4a21      	ldr	r2, [pc, #132]	@ (8000d1c <HAL_InitTick+0xf0>)
 8000c96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c98:	4b1f      	ldr	r3, [pc, #124]	@ (8000d18 <HAL_InitTick+0xec>)
 8000c9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d18 <HAL_InitTick+0xec>)
 8000ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ca4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d18 <HAL_InitTick+0xec>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	@ (8000d18 <HAL_InitTick+0xec>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <HAL_InitTick+0xec>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cb8:	4817      	ldr	r0, [pc, #92]	@ (8000d18 <HAL_InitTick+0xec>)
 8000cba:	f001 f8a3 	bl	8001e04 <HAL_TIM_Base_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000cc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d11b      	bne.n	8000d04 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ccc:	4812      	ldr	r0, [pc, #72]	@ (8000d18 <HAL_InitTick+0xec>)
 8000cce:	f001 f8f3 	bl	8001eb8 <HAL_TIM_Base_Start_IT>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000cd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d111      	bne.n	8000d04 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ce0:	2036      	movs	r0, #54	@ 0x36
 8000ce2:	f000 f9c3 	bl	800106c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d808      	bhi.n	8000cfe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	2036      	movs	r0, #54	@ 0x36
 8000cf2:	f000 f99f 	bl	8001034 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <HAL_InitTick+0xf4>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	e002      	b.n	8000d04 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3738      	adds	r7, #56	@ 0x38
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40023800 	.word	0x40023800
 8000d14:	431bde83 	.word	0x431bde83
 8000d18:	20000084 	.word	0x20000084
 8000d1c:	40001000 	.word	0x40001000
 8000d20:	20000004 	.word	0x20000004

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <NMI_Handler+0x4>

08000d2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
    button_interrupt_handler();
 8000d5e:	f7ff fe57 	bl	8000a10 <button_interrupt_handler>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d62:	2001      	movs	r0, #1
 8000d64:	f000 fb60 	bl	8001428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d70:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <TIM6_DAC_IRQHandler+0x10>)
 8000d72:	f001 f911 	bl	8001f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000084 	.word	0x20000084

08000d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <SystemInit+0x20>)
 8000d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d8a:	4a05      	ldr	r2, [pc, #20]	@ (8000da0 <SystemInit+0x20>)
 8000d8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ddc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000da8:	f7ff ffea 	bl	8000d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dac:	480c      	ldr	r0, [pc, #48]	@ (8000de0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dae:	490d      	ldr	r1, [pc, #52]	@ (8000de4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db0:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000df0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f007 f87f 	bl	8007ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd6:	f7ff fbc5 	bl	8000564 <main>
  bx  lr    
 8000dda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000de8:	080080c0 	.word	0x080080c0
  ldr r2, =_sbss
 8000dec:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000df0:	200144f8 	.word	0x200144f8

08000df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <HAL_Init+0x40>)
 8000e02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <HAL_Init+0x40>)
 8000e0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a07      	ldr	r2, [pc, #28]	@ (8000e38 <HAL_Init+0x40>)
 8000e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f8fc 	bl	800101e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	200f      	movs	r0, #15
 8000e28:	f7ff ff00 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff fe8e 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023c00 	.word	0x40023c00

08000e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_IncTick+0x20>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a04      	ldr	r2, [pc, #16]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	200000cc 	.word	0x200000cc

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <HAL_GetTick+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	200000cc 	.word	0x200000cc

08000e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e84:	f7ff ffee 	bl	8000e64 <HAL_GetTick>
 8000e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e94:	d005      	beq.n	8000ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <HAL_Delay+0x44>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea2:	bf00      	nop
 8000ea4:	f7ff ffde 	bl	8000e64 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8f7      	bhi.n	8000ea4 <HAL_Delay+0x28>
  {
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db0b      	blt.n	8000f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	4907      	ldr	r1, [pc, #28]	@ (8000f60 <__NVIC_EnableIRQ+0x38>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	@ (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	@ (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	@ 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
         );
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	@ 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ff4c 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001046:	f7ff ff61 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 800104a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	6978      	ldr	r0, [r7, #20]
 8001052:	f7ff ffb1 	bl	8000fb8 <NVIC_EncodePriority>
 8001056:	4602      	mov	r2, r0
 8001058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff80 	bl	8000f64 <__NVIC_SetPriority>
}
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff54 	bl	8000f28 <__NVIC_EnableIRQ>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	@ 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	e16b      	b.n	800137c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a4:	2201      	movs	r2, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	429a      	cmp	r2, r3
 80010be:	f040 815a 	bne.w	8001376 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d005      	beq.n	80010da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d130      	bne.n	800113c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68da      	ldr	r2, [r3, #12]
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	091b      	lsrs	r3, r3, #4
 8001126:	f003 0201 	and.w	r2, r3, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b03      	cmp	r3, #3
 8001146:	d017      	beq.n	8001178 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d123      	bne.n	80011cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	08da      	lsrs	r2, r3, #3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3208      	adds	r2, #8
 800118c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	220f      	movs	r2, #15
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	08da      	lsrs	r2, r3, #3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3208      	adds	r2, #8
 80011c6:	69b9      	ldr	r1, [r7, #24]
 80011c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0203 	and.w	r2, r3, #3
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 80b4 	beq.w	8001376 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b60      	ldr	r3, [pc, #384]	@ (8001394 <HAL_GPIO_Init+0x30c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	4a5f      	ldr	r2, [pc, #380]	@ (8001394 <HAL_GPIO_Init+0x30c>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121c:	6453      	str	r3, [r2, #68]	@ 0x44
 800121e:	4b5d      	ldr	r3, [pc, #372]	@ (8001394 <HAL_GPIO_Init+0x30c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800122a:	4a5b      	ldr	r2, [pc, #364]	@ (8001398 <HAL_GPIO_Init+0x310>)
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a52      	ldr	r2, [pc, #328]	@ (800139c <HAL_GPIO_Init+0x314>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d02b      	beq.n	80012ae <HAL_GPIO_Init+0x226>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a51      	ldr	r2, [pc, #324]	@ (80013a0 <HAL_GPIO_Init+0x318>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d025      	beq.n	80012aa <HAL_GPIO_Init+0x222>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a50      	ldr	r2, [pc, #320]	@ (80013a4 <HAL_GPIO_Init+0x31c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d01f      	beq.n	80012a6 <HAL_GPIO_Init+0x21e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4f      	ldr	r2, [pc, #316]	@ (80013a8 <HAL_GPIO_Init+0x320>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d019      	beq.n	80012a2 <HAL_GPIO_Init+0x21a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4e      	ldr	r2, [pc, #312]	@ (80013ac <HAL_GPIO_Init+0x324>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <HAL_GPIO_Init+0x216>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4d      	ldr	r2, [pc, #308]	@ (80013b0 <HAL_GPIO_Init+0x328>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d00d      	beq.n	800129a <HAL_GPIO_Init+0x212>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4c      	ldr	r2, [pc, #304]	@ (80013b4 <HAL_GPIO_Init+0x32c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d007      	beq.n	8001296 <HAL_GPIO_Init+0x20e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4b      	ldr	r2, [pc, #300]	@ (80013b8 <HAL_GPIO_Init+0x330>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d101      	bne.n	8001292 <HAL_GPIO_Init+0x20a>
 800128e:	2307      	movs	r3, #7
 8001290:	e00e      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 8001292:	2308      	movs	r3, #8
 8001294:	e00c      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 8001296:	2306      	movs	r3, #6
 8001298:	e00a      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 800129a:	2305      	movs	r3, #5
 800129c:	e008      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 800129e:	2304      	movs	r3, #4
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012a2:	2303      	movs	r3, #3
 80012a4:	e004      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012ae:	2300      	movs	r3, #0
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	f002 0203 	and.w	r2, r2, #3
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4093      	lsls	r3, r2
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c0:	4935      	ldr	r1, [pc, #212]	@ (8001398 <HAL_GPIO_Init+0x310>)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ce:	4b3b      	ldr	r3, [pc, #236]	@ (80013bc <HAL_GPIO_Init+0x334>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f2:	4a32      	ldr	r2, [pc, #200]	@ (80013bc <HAL_GPIO_Init+0x334>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f8:	4b30      	ldr	r3, [pc, #192]	@ (80013bc <HAL_GPIO_Init+0x334>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800131c:	4a27      	ldr	r2, [pc, #156]	@ (80013bc <HAL_GPIO_Init+0x334>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001322:	4b26      	ldr	r3, [pc, #152]	@ (80013bc <HAL_GPIO_Init+0x334>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001346:	4a1d      	ldr	r2, [pc, #116]	@ (80013bc <HAL_GPIO_Init+0x334>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134c:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <HAL_GPIO_Init+0x334>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001370:	4a12      	ldr	r2, [pc, #72]	@ (80013bc <HAL_GPIO_Init+0x334>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	f67f ae90 	bls.w	80010a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3724      	adds	r7, #36	@ 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40013800 	.word	0x40013800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40021400 	.word	0x40021400
 80013b4:	40021800 	.word	0x40021800
 80013b8:	40021c00 	.word	0x40021c00
 80013bc:	40013c00 	.word	0x40013c00

080013c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
 80013cc:	4613      	mov	r3, r2
 80013ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013dc:	e003      	b.n	80013e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	619a      	str	r2, [r3, #24]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b085      	sub	sp, #20
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001404:	887a      	ldrh	r2, [r7, #2]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	041a      	lsls	r2, r3, #16
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43d9      	mvns	r1, r3
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	400b      	ands	r3, r1
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	619a      	str	r2, [r3, #24]
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001432:	4b08      	ldr	r3, [pc, #32]	@ (8001454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	4013      	ands	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800143e:	4a05      	ldr	r2, [pc, #20]	@ (8001454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	4618      	mov	r0, r3
 8001448:	f000 f806 	bl	8001458 <HAL_GPIO_EXTI_Callback>
  }
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40013c00 	.word	0x40013c00

08001458 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e267      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d075      	beq.n	800157a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800148e:	4b88      	ldr	r3, [pc, #544]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b04      	cmp	r3, #4
 8001498:	d00c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149a:	4b85      	ldr	r3, [pc, #532]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d112      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a6:	4b82      	ldr	r3, [pc, #520]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014b2:	d10b      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	4b7e      	ldr	r3, [pc, #504]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d05b      	beq.n	8001578 <HAL_RCC_OscConfig+0x108>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d157      	bne.n	8001578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e242      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d4:	d106      	bne.n	80014e4 <HAL_RCC_OscConfig+0x74>
 80014d6:	4b76      	ldr	r3, [pc, #472]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a75      	ldr	r2, [pc, #468]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e01d      	b.n	8001520 <HAL_RCC_OscConfig+0xb0>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x98>
 80014ee:	4b70      	ldr	r3, [pc, #448]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a6f      	ldr	r2, [pc, #444]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b6d      	ldr	r3, [pc, #436]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a6c      	ldr	r2, [pc, #432]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0xb0>
 8001508:	4b69      	ldr	r3, [pc, #420]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a68      	ldr	r2, [pc, #416]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800150e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b66      	ldr	r3, [pc, #408]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a65      	ldr	r2, [pc, #404]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800151a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800151e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fc9c 	bl	8000e64 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fc98 	bl	8000e64 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	@ 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e207      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4b5b      	ldr	r3, [pc, #364]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0xc0>
 800154e:	e014      	b.n	800157a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fc88 	bl	8000e64 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fc84 	bl	8000e64 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	@ 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1f3      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	4b51      	ldr	r3, [pc, #324]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0xe8>
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d063      	beq.n	800164e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001586:	4b4a      	ldr	r3, [pc, #296]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001592:	4b47      	ldr	r3, [pc, #284]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800159a:	2b08      	cmp	r3, #8
 800159c:	d11c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159e:	4b44      	ldr	r3, [pc, #272]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d116      	bne.n	80015d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015aa:	4b41      	ldr	r3, [pc, #260]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_RCC_OscConfig+0x152>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e1c7      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	4b3b      	ldr	r3, [pc, #236]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4937      	ldr	r1, [pc, #220]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d6:	e03a      	b.n	800164e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e0:	4b34      	ldr	r3, [pc, #208]	@ (80016b4 <HAL_RCC_OscConfig+0x244>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7ff fc3d 	bl	8000e64 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ee:	f7ff fc39 	bl	8000e64 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e1a8      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	4b2b      	ldr	r3, [pc, #172]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b28      	ldr	r3, [pc, #160]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4925      	ldr	r1, [pc, #148]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
 8001620:	e015      	b.n	800164e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001622:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <HAL_RCC_OscConfig+0x244>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fc1c 	bl	8000e64 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff fc18 	bl	8000e64 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e187      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	4b1b      	ldr	r3, [pc, #108]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d036      	beq.n	80016c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d016      	beq.n	8001690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HAL_RCC_OscConfig+0x248>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff fbfc 	bl	8000e64 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001670:	f7ff fbf8 	bl	8000e64 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e167      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x200>
 800168e:	e01b      	b.n	80016c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001690:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <HAL_RCC_OscConfig+0x248>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff fbe5 	bl	8000e64 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169c:	e00e      	b.n	80016bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169e:	f7ff fbe1 	bl	8000e64 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d907      	bls.n	80016bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e150      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
 80016b0:	40023800 	.word	0x40023800
 80016b4:	42470000 	.word	0x42470000
 80016b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	4b88      	ldr	r3, [pc, #544]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ea      	bne.n	800169e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8097 	beq.w	8001804 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016da:	4b81      	ldr	r3, [pc, #516]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10f      	bne.n	8001706 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b7d      	ldr	r3, [pc, #500]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	4a7c      	ldr	r2, [pc, #496]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f6:	4b7a      	ldr	r3, [pc, #488]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001702:	2301      	movs	r3, #1
 8001704:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	4b77      	ldr	r3, [pc, #476]	@ (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d118      	bne.n	8001744 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001712:	4b74      	ldr	r3, [pc, #464]	@ (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a73      	ldr	r2, [pc, #460]	@ (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171e:	f7ff fba1 	bl	8000e64 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001726:	f7ff fb9d 	bl	8000e64 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e10c      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001738:	4b6a      	ldr	r3, [pc, #424]	@ (80018e4 <HAL_RCC_OscConfig+0x474>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d106      	bne.n	800175a <HAL_RCC_OscConfig+0x2ea>
 800174c:	4b64      	ldr	r3, [pc, #400]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001750:	4a63      	ldr	r2, [pc, #396]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6713      	str	r3, [r2, #112]	@ 0x70
 8001758:	e01c      	b.n	8001794 <HAL_RCC_OscConfig+0x324>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x30c>
 8001762:	4b5f      	ldr	r3, [pc, #380]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001766:	4a5e      	ldr	r2, [pc, #376]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6713      	str	r3, [r2, #112]	@ 0x70
 800176e:	4b5c      	ldr	r3, [pc, #368]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001772:	4a5b      	ldr	r2, [pc, #364]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6713      	str	r3, [r2, #112]	@ 0x70
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0x324>
 800177c:	4b58      	ldr	r3, [pc, #352]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001780:	4a57      	ldr	r2, [pc, #348]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	6713      	str	r3, [r2, #112]	@ 0x70
 8001788:	4b55      	ldr	r3, [pc, #340]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800178c:	4a54      	ldr	r2, [pc, #336]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 800178e:	f023 0304 	bic.w	r3, r3, #4
 8001792:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d015      	beq.n	80017c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fb62 	bl	8000e64 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a4:	f7ff fb5e 	bl	8000e64 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e0cb      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ba:	4b49      	ldr	r3, [pc, #292]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0ee      	beq.n	80017a4 <HAL_RCC_OscConfig+0x334>
 80017c6:	e014      	b.n	80017f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c8:	f7ff fb4c 	bl	8000e64 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d0:	f7ff fb48 	bl	8000e64 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0b5      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e6:	4b3e      	ldr	r3, [pc, #248]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ee      	bne.n	80017d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f8:	4b39      	ldr	r3, [pc, #228]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	4a38      	ldr	r2, [pc, #224]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001802:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a1 	beq.w	8001950 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800180e:	4b34      	ldr	r3, [pc, #208]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b08      	cmp	r3, #8
 8001818:	d05c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d141      	bne.n	80018a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	4b31      	ldr	r3, [pc, #196]	@ (80018e8 <HAL_RCC_OscConfig+0x478>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fb1c 	bl	8000e64 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff fb18 	bl	8000e64 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e087      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001842:	4b27      	ldr	r3, [pc, #156]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69da      	ldr	r2, [r3, #28]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185c:	019b      	lsls	r3, r3, #6
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001864:	085b      	lsrs	r3, r3, #1
 8001866:	3b01      	subs	r3, #1
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	061b      	lsls	r3, r3, #24
 8001872:	491b      	ldr	r1, [pc, #108]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001878:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <HAL_RCC_OscConfig+0x478>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7ff faf1 	bl	8000e64 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001886:	f7ff faed 	bl	8000e64 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e05c      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001898:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x416>
 80018a4:	e054      	b.n	8001950 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <HAL_RCC_OscConfig+0x478>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fada 	bl	8000e64 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff fad6 	bl	8000e64 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e045      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c6:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x444>
 80018d2:	e03d      	b.n	8001950 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d107      	bne.n	80018ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e038      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40007000 	.word	0x40007000
 80018e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <HAL_RCC_OscConfig+0x4ec>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d028      	beq.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d121      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d11a      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800191c:	4013      	ands	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001924:	4293      	cmp	r3, r2
 8001926:	d111      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001932:	085b      	lsrs	r3, r3, #1
 8001934:	3b01      	subs	r3, #1
 8001936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d107      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800

08001960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0cc      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001974:	4b68      	ldr	r3, [pc, #416]	@ (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d90c      	bls.n	800199c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b65      	ldr	r3, [pc, #404]	@ (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b63      	ldr	r3, [pc, #396]	@ (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0b8      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d020      	beq.n	80019ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b4:	4b59      	ldr	r3, [pc, #356]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	4a58      	ldr	r2, [pc, #352]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019cc:	4b53      	ldr	r3, [pc, #332]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4a52      	ldr	r2, [pc, #328]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d8:	4b50      	ldr	r3, [pc, #320]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	494d      	ldr	r1, [pc, #308]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d044      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	4b47      	ldr	r3, [pc, #284]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d119      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e07f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d003      	beq.n	8001a1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e06f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e067      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3e:	4b37      	ldr	r3, [pc, #220]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f023 0203 	bic.w	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4934      	ldr	r1, [pc, #208]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a50:	f7ff fa08 	bl	8000e64 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	f7ff fa04 	bl	8000e64 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e04f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 020c 	and.w	r2, r3, #12
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d1eb      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a80:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d20c      	bcs.n	8001aa8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b22      	ldr	r3, [pc, #136]	@ (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b20      	ldr	r3, [pc, #128]	@ (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e032      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab4:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4916      	ldr	r1, [pc, #88]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d009      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad2:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	490e      	ldr	r1, [pc, #56]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ae6:	f000 f821 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001aea:	4602      	mov	r2, r0
 8001aec:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	490a      	ldr	r1, [pc, #40]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001af8:	5ccb      	ldrb	r3, [r1, r3]
 8001afa:	fa22 f303 	lsr.w	r3, r2, r3
 8001afe:	4a09      	ldr	r2, [pc, #36]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b02:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f890 	bl	8000c2c <HAL_InitTick>

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023c00 	.word	0x40023c00
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	08008070 	.word	0x08008070
 8001b24:	20000000 	.word	0x20000000
 8001b28:	20000004 	.word	0x20000004

08001b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b30:	b094      	sub	sp, #80	@ 0x50
 8001b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b44:	4b79      	ldr	r3, [pc, #484]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d00d      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x40>
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	f200 80e1 	bhi.w	8001d18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x34>
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d003      	beq.n	8001b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b5e:	e0db      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b60:	4b73      	ldr	r3, [pc, #460]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b64:	e0db      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b66:	4b73      	ldr	r3, [pc, #460]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b6a:	e0d8      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b76:	4b6d      	ldr	r3, [pc, #436]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d063      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b82:	4b6a      	ldr	r3, [pc, #424]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	099b      	lsrs	r3, r3, #6
 8001b88:	2200      	movs	r2, #0
 8001b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b94:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b96:	2300      	movs	r3, #0
 8001b98:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	462b      	mov	r3, r5
 8001ba2:	f04f 0000 	mov.w	r0, #0
 8001ba6:	f04f 0100 	mov.w	r1, #0
 8001baa:	0159      	lsls	r1, r3, #5
 8001bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bb0:	0150      	lsls	r0, r2, #5
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	1a51      	subs	r1, r2, r1
 8001bba:	6139      	str	r1, [r7, #16]
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bd0:	4659      	mov	r1, fp
 8001bd2:	018b      	lsls	r3, r1, #6
 8001bd4:	4651      	mov	r1, sl
 8001bd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bda:	4651      	mov	r1, sl
 8001bdc:	018a      	lsls	r2, r1, #6
 8001bde:	4651      	mov	r1, sl
 8001be0:	ebb2 0801 	subs.w	r8, r2, r1
 8001be4:	4659      	mov	r1, fp
 8001be6:	eb63 0901 	sbc.w	r9, r3, r1
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bfe:	4690      	mov	r8, r2
 8001c00:	4699      	mov	r9, r3
 8001c02:	4623      	mov	r3, r4
 8001c04:	eb18 0303 	adds.w	r3, r8, r3
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	462b      	mov	r3, r5
 8001c0c:	eb49 0303 	adc.w	r3, r9, r3
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c1e:	4629      	mov	r1, r5
 8001c20:	024b      	lsls	r3, r1, #9
 8001c22:	4621      	mov	r1, r4
 8001c24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c28:	4621      	mov	r1, r4
 8001c2a:	024a      	lsls	r2, r1, #9
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c32:	2200      	movs	r2, #0
 8001c34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c3c:	f7fe fb1a 	bl	8000274 <__aeabi_uldivmod>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4613      	mov	r3, r2
 8001c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c48:	e058      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4a:	4b38      	ldr	r3, [pc, #224]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	099b      	lsrs	r3, r3, #6
 8001c50:	2200      	movs	r2, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	4611      	mov	r1, r2
 8001c56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c5a:	623b      	str	r3, [r7, #32]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c64:	4642      	mov	r2, r8
 8001c66:	464b      	mov	r3, r9
 8001c68:	f04f 0000 	mov.w	r0, #0
 8001c6c:	f04f 0100 	mov.w	r1, #0
 8001c70:	0159      	lsls	r1, r3, #5
 8001c72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c76:	0150      	lsls	r0, r2, #5
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4641      	mov	r1, r8
 8001c7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c82:	4649      	mov	r1, r9
 8001c84:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c9c:	ebb2 040a 	subs.w	r4, r2, sl
 8001ca0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	00eb      	lsls	r3, r5, #3
 8001cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cb2:	00e2      	lsls	r2, r4, #3
 8001cb4:	4614      	mov	r4, r2
 8001cb6:	461d      	mov	r5, r3
 8001cb8:	4643      	mov	r3, r8
 8001cba:	18e3      	adds	r3, r4, r3
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	464b      	mov	r3, r9
 8001cc0:	eb45 0303 	adc.w	r3, r5, r3
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	028b      	lsls	r3, r1, #10
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cdc:	4621      	mov	r1, r4
 8001cde:	028a      	lsls	r2, r1, #10
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	61fa      	str	r2, [r7, #28]
 8001cec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cf0:	f7fe fac0 	bl	8000274 <__aeabi_uldivmod>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	0c1b      	lsrs	r3, r3, #16
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	3301      	adds	r3, #1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d16:	e002      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3750      	adds	r7, #80	@ 0x50
 8001d24:	46bd      	mov	sp, r7
 8001d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	00f42400 	.word	0x00f42400
 8001d34:	007a1200 	.word	0x007a1200

08001d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	@ (8001d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000000 	.word	0x20000000

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d54:	f7ff fff0 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0a9b      	lsrs	r3, r3, #10
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	@ (8001d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	08008080 	.word	0x08008080

08001d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d7c:	f7ff ffdc 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0b5b      	lsrs	r3, r3, #13
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	@ (8001d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	08008080 	.word	0x08008080

08001da0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	220f      	movs	r2, #15
 8001dae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001db0:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <HAL_RCC_GetClockConfig+0x5c>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <HAL_RCC_GetClockConfig+0x5c>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <HAL_RCC_GetClockConfig+0x5c>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001dd4:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <HAL_RCC_GetClockConfig+0x5c>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	08db      	lsrs	r3, r3, #3
 8001dda:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001de2:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <HAL_RCC_GetClockConfig+0x60>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0207 	and.w	r2, r3, #7
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	601a      	str	r2, [r3, #0]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e041      	b.n	8001e9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f839 	bl	8001ea2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3304      	adds	r3, #4
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f000 f9c0 	bl	80021c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d001      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e04e      	b.n	8001f6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a23      	ldr	r2, [pc, #140]	@ (8001f7c <HAL_TIM_Base_Start_IT+0xc4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d022      	beq.n	8001f38 <HAL_TIM_Base_Start_IT+0x80>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001efa:	d01d      	beq.n	8001f38 <HAL_TIM_Base_Start_IT+0x80>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1f      	ldr	r2, [pc, #124]	@ (8001f80 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d018      	beq.n	8001f38 <HAL_TIM_Base_Start_IT+0x80>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001f84 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d013      	beq.n	8001f38 <HAL_TIM_Base_Start_IT+0x80>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a1c      	ldr	r2, [pc, #112]	@ (8001f88 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d00e      	beq.n	8001f38 <HAL_TIM_Base_Start_IT+0x80>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001f8c <HAL_TIM_Base_Start_IT+0xd4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d009      	beq.n	8001f38 <HAL_TIM_Base_Start_IT+0x80>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a19      	ldr	r2, [pc, #100]	@ (8001f90 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d004      	beq.n	8001f38 <HAL_TIM_Base_Start_IT+0x80>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a18      	ldr	r2, [pc, #96]	@ (8001f94 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d111      	bne.n	8001f5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d010      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f5a:	e007      	b.n	8001f6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	40000400 	.word	0x40000400
 8001f84:	40000800 	.word	0x40000800
 8001f88:	40000c00 	.word	0x40000c00
 8001f8c:	40010400 	.word	0x40010400
 8001f90:	40014000 	.word	0x40014000
 8001f94:	40001800 	.word	0x40001800

08001f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d020      	beq.n	8001ffc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01b      	beq.n	8001ffc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0202 	mvn.w	r2, #2
 8001fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f8d2 	bl	800218c <HAL_TIM_IC_CaptureCallback>
 8001fe8:	e005      	b.n	8001ff6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f8c4 	bl	8002178 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f8d5 	bl	80021a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	d020      	beq.n	8002048 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01b      	beq.n	8002048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0204 	mvn.w	r2, #4
 8002018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2202      	movs	r2, #2
 800201e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f8ac 	bl	800218c <HAL_TIM_IC_CaptureCallback>
 8002034:	e005      	b.n	8002042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f89e 	bl	8002178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f8af 	bl	80021a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d020      	beq.n	8002094 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01b      	beq.n	8002094 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0208 	mvn.w	r2, #8
 8002064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2204      	movs	r2, #4
 800206a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f886 	bl	800218c <HAL_TIM_IC_CaptureCallback>
 8002080:	e005      	b.n	800208e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f878 	bl	8002178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f889 	bl	80021a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b00      	cmp	r3, #0
 800209c:	d020      	beq.n	80020e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01b      	beq.n	80020e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0210 	mvn.w	r2, #16
 80020b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2208      	movs	r2, #8
 80020b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f860 	bl	800218c <HAL_TIM_IC_CaptureCallback>
 80020cc:	e005      	b.n	80020da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f852 	bl	8002178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f863 	bl	80021a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00c      	beq.n	8002104 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d007      	beq.n	8002104 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0201 	mvn.w	r2, #1
 80020fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7fe fd0c 	bl	8000b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00c      	beq.n	8002128 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002114:	2b00      	cmp	r3, #0
 8002116:	d007      	beq.n	8002128 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f906 	bl	8002334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00c      	beq.n	800214c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002138:	2b00      	cmp	r3, #0
 800213a:	d007      	beq.n	800214c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f834 	bl	80021b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00c      	beq.n	8002170 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0220 	mvn.w	r2, #32
 8002168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f8d8 	bl	8002320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a46      	ldr	r2, [pc, #280]	@ (80022f4 <TIM_Base_SetConfig+0x12c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d013      	beq.n	8002208 <TIM_Base_SetConfig+0x40>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021e6:	d00f      	beq.n	8002208 <TIM_Base_SetConfig+0x40>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a43      	ldr	r2, [pc, #268]	@ (80022f8 <TIM_Base_SetConfig+0x130>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d00b      	beq.n	8002208 <TIM_Base_SetConfig+0x40>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a42      	ldr	r2, [pc, #264]	@ (80022fc <TIM_Base_SetConfig+0x134>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d007      	beq.n	8002208 <TIM_Base_SetConfig+0x40>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a41      	ldr	r2, [pc, #260]	@ (8002300 <TIM_Base_SetConfig+0x138>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d003      	beq.n	8002208 <TIM_Base_SetConfig+0x40>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a40      	ldr	r2, [pc, #256]	@ (8002304 <TIM_Base_SetConfig+0x13c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d108      	bne.n	800221a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800220e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a35      	ldr	r2, [pc, #212]	@ (80022f4 <TIM_Base_SetConfig+0x12c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d02b      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002228:	d027      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a32      	ldr	r2, [pc, #200]	@ (80022f8 <TIM_Base_SetConfig+0x130>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d023      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a31      	ldr	r2, [pc, #196]	@ (80022fc <TIM_Base_SetConfig+0x134>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01f      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a30      	ldr	r2, [pc, #192]	@ (8002300 <TIM_Base_SetConfig+0x138>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d01b      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a2f      	ldr	r2, [pc, #188]	@ (8002304 <TIM_Base_SetConfig+0x13c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d017      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a2e      	ldr	r2, [pc, #184]	@ (8002308 <TIM_Base_SetConfig+0x140>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a2d      	ldr	r2, [pc, #180]	@ (800230c <TIM_Base_SetConfig+0x144>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00f      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a2c      	ldr	r2, [pc, #176]	@ (8002310 <TIM_Base_SetConfig+0x148>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00b      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a2b      	ldr	r2, [pc, #172]	@ (8002314 <TIM_Base_SetConfig+0x14c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d007      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a2a      	ldr	r2, [pc, #168]	@ (8002318 <TIM_Base_SetConfig+0x150>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d003      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a29      	ldr	r2, [pc, #164]	@ (800231c <TIM_Base_SetConfig+0x154>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d108      	bne.n	800228c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a10      	ldr	r2, [pc, #64]	@ (80022f4 <TIM_Base_SetConfig+0x12c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d003      	beq.n	80022c0 <TIM_Base_SetConfig+0xf8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a12      	ldr	r2, [pc, #72]	@ (8002304 <TIM_Base_SetConfig+0x13c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d103      	bne.n	80022c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d105      	bne.n	80022e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f023 0201 	bic.w	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	611a      	str	r2, [r3, #16]
  }
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40010000 	.word	0x40010000
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40000800 	.word	0x40000800
 8002300:	40000c00 	.word	0x40000c00
 8002304:	40010400 	.word	0x40010400
 8002308:	40014000 	.word	0x40014000
 800230c:	40014400 	.word	0x40014400
 8002310:	40014800 	.word	0x40014800
 8002314:	40001800 	.word	0x40001800
 8002318:	40001c00 	.word	0x40001c00
 800231c:	40002000 	.word	0x40002000

08002320 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e042      	b.n	80023e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fc14 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2224      	movs	r2, #36	@ 0x24
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800238a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f82b 	bl	80023e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023ec:	b0c0      	sub	sp, #256	@ 0x100
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002404:	68d9      	ldr	r1, [r3, #12]
 8002406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	ea40 0301 	orr.w	r3, r0, r1
 8002410:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	431a      	orrs	r2, r3
 8002420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	431a      	orrs	r2, r3
 8002428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002440:	f021 010c 	bic.w	r1, r1, #12
 8002444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800244e:	430b      	orrs	r3, r1
 8002450:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800245e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002462:	6999      	ldr	r1, [r3, #24]
 8002464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	ea40 0301 	orr.w	r3, r0, r1
 800246e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4b8f      	ldr	r3, [pc, #572]	@ (80026b4 <UART_SetConfig+0x2cc>)
 8002478:	429a      	cmp	r2, r3
 800247a:	d005      	beq.n	8002488 <UART_SetConfig+0xa0>
 800247c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4b8d      	ldr	r3, [pc, #564]	@ (80026b8 <UART_SetConfig+0x2d0>)
 8002484:	429a      	cmp	r2, r3
 8002486:	d104      	bne.n	8002492 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002488:	f7ff fc76 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 800248c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002490:	e003      	b.n	800249a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002492:	f7ff fc5d 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8002496:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800249a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024a4:	f040 810c 	bne.w	80026c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024ac:	2200      	movs	r2, #0
 80024ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80024b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80024b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80024ba:	4622      	mov	r2, r4
 80024bc:	462b      	mov	r3, r5
 80024be:	1891      	adds	r1, r2, r2
 80024c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80024c2:	415b      	adcs	r3, r3
 80024c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80024ca:	4621      	mov	r1, r4
 80024cc:	eb12 0801 	adds.w	r8, r2, r1
 80024d0:	4629      	mov	r1, r5
 80024d2:	eb43 0901 	adc.w	r9, r3, r1
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ea:	4690      	mov	r8, r2
 80024ec:	4699      	mov	r9, r3
 80024ee:	4623      	mov	r3, r4
 80024f0:	eb18 0303 	adds.w	r3, r8, r3
 80024f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80024f8:	462b      	mov	r3, r5
 80024fa:	eb49 0303 	adc.w	r3, r9, r3
 80024fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800250e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002512:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002516:	460b      	mov	r3, r1
 8002518:	18db      	adds	r3, r3, r3
 800251a:	653b      	str	r3, [r7, #80]	@ 0x50
 800251c:	4613      	mov	r3, r2
 800251e:	eb42 0303 	adc.w	r3, r2, r3
 8002522:	657b      	str	r3, [r7, #84]	@ 0x54
 8002524:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002528:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800252c:	f7fd fea2 	bl	8000274 <__aeabi_uldivmod>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4b61      	ldr	r3, [pc, #388]	@ (80026bc <UART_SetConfig+0x2d4>)
 8002536:	fba3 2302 	umull	r2, r3, r3, r2
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	011c      	lsls	r4, r3, #4
 800253e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002542:	2200      	movs	r2, #0
 8002544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002548:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800254c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002550:	4642      	mov	r2, r8
 8002552:	464b      	mov	r3, r9
 8002554:	1891      	adds	r1, r2, r2
 8002556:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002558:	415b      	adcs	r3, r3
 800255a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800255c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002560:	4641      	mov	r1, r8
 8002562:	eb12 0a01 	adds.w	sl, r2, r1
 8002566:	4649      	mov	r1, r9
 8002568:	eb43 0b01 	adc.w	fp, r3, r1
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002578:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800257c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002580:	4692      	mov	sl, r2
 8002582:	469b      	mov	fp, r3
 8002584:	4643      	mov	r3, r8
 8002586:	eb1a 0303 	adds.w	r3, sl, r3
 800258a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800258e:	464b      	mov	r3, r9
 8002590:	eb4b 0303 	adc.w	r3, fp, r3
 8002594:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80025a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80025ac:	460b      	mov	r3, r1
 80025ae:	18db      	adds	r3, r3, r3
 80025b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80025b2:	4613      	mov	r3, r2
 80025b4:	eb42 0303 	adc.w	r3, r2, r3
 80025b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80025ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80025be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80025c2:	f7fd fe57 	bl	8000274 <__aeabi_uldivmod>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4611      	mov	r1, r2
 80025cc:	4b3b      	ldr	r3, [pc, #236]	@ (80026bc <UART_SetConfig+0x2d4>)
 80025ce:	fba3 2301 	umull	r2, r3, r3, r1
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2264      	movs	r2, #100	@ 0x64
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	1acb      	subs	r3, r1, r3
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80025e2:	4b36      	ldr	r3, [pc, #216]	@ (80026bc <UART_SetConfig+0x2d4>)
 80025e4:	fba3 2302 	umull	r2, r3, r3, r2
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80025f0:	441c      	add	r4, r3
 80025f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025f6:	2200      	movs	r2, #0
 80025f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80025fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002600:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002604:	4642      	mov	r2, r8
 8002606:	464b      	mov	r3, r9
 8002608:	1891      	adds	r1, r2, r2
 800260a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800260c:	415b      	adcs	r3, r3
 800260e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002610:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002614:	4641      	mov	r1, r8
 8002616:	1851      	adds	r1, r2, r1
 8002618:	6339      	str	r1, [r7, #48]	@ 0x30
 800261a:	4649      	mov	r1, r9
 800261c:	414b      	adcs	r3, r1
 800261e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800262c:	4659      	mov	r1, fp
 800262e:	00cb      	lsls	r3, r1, #3
 8002630:	4651      	mov	r1, sl
 8002632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002636:	4651      	mov	r1, sl
 8002638:	00ca      	lsls	r2, r1, #3
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	4603      	mov	r3, r0
 8002640:	4642      	mov	r2, r8
 8002642:	189b      	adds	r3, r3, r2
 8002644:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002648:	464b      	mov	r3, r9
 800264a:	460a      	mov	r2, r1
 800264c:	eb42 0303 	adc.w	r3, r2, r3
 8002650:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002660:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002664:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002668:	460b      	mov	r3, r1
 800266a:	18db      	adds	r3, r3, r3
 800266c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800266e:	4613      	mov	r3, r2
 8002670:	eb42 0303 	adc.w	r3, r2, r3
 8002674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002676:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800267a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800267e:	f7fd fdf9 	bl	8000274 <__aeabi_uldivmod>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4b0d      	ldr	r3, [pc, #52]	@ (80026bc <UART_SetConfig+0x2d4>)
 8002688:	fba3 1302 	umull	r1, r3, r3, r2
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	2164      	movs	r1, #100	@ 0x64
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	3332      	adds	r3, #50	@ 0x32
 800269a:	4a08      	ldr	r2, [pc, #32]	@ (80026bc <UART_SetConfig+0x2d4>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	f003 0207 	and.w	r2, r3, #7
 80026a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4422      	add	r2, r4
 80026ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026b0:	e106      	b.n	80028c0 <UART_SetConfig+0x4d8>
 80026b2:	bf00      	nop
 80026b4:	40011000 	.word	0x40011000
 80026b8:	40011400 	.word	0x40011400
 80026bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026c4:	2200      	movs	r2, #0
 80026c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80026ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80026ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80026d2:	4642      	mov	r2, r8
 80026d4:	464b      	mov	r3, r9
 80026d6:	1891      	adds	r1, r2, r2
 80026d8:	6239      	str	r1, [r7, #32]
 80026da:	415b      	adcs	r3, r3
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80026de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026e2:	4641      	mov	r1, r8
 80026e4:	1854      	adds	r4, r2, r1
 80026e6:	4649      	mov	r1, r9
 80026e8:	eb43 0501 	adc.w	r5, r3, r1
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	00eb      	lsls	r3, r5, #3
 80026f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026fa:	00e2      	lsls	r2, r4, #3
 80026fc:	4614      	mov	r4, r2
 80026fe:	461d      	mov	r5, r3
 8002700:	4643      	mov	r3, r8
 8002702:	18e3      	adds	r3, r4, r3
 8002704:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002708:	464b      	mov	r3, r9
 800270a:	eb45 0303 	adc.w	r3, r5, r3
 800270e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800271e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800272e:	4629      	mov	r1, r5
 8002730:	008b      	lsls	r3, r1, #2
 8002732:	4621      	mov	r1, r4
 8002734:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002738:	4621      	mov	r1, r4
 800273a:	008a      	lsls	r2, r1, #2
 800273c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002740:	f7fd fd98 	bl	8000274 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4b60      	ldr	r3, [pc, #384]	@ (80028cc <UART_SetConfig+0x4e4>)
 800274a:	fba3 2302 	umull	r2, r3, r3, r2
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	011c      	lsls	r4, r3, #4
 8002752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002756:	2200      	movs	r2, #0
 8002758:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800275c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002760:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002764:	4642      	mov	r2, r8
 8002766:	464b      	mov	r3, r9
 8002768:	1891      	adds	r1, r2, r2
 800276a:	61b9      	str	r1, [r7, #24]
 800276c:	415b      	adcs	r3, r3
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002774:	4641      	mov	r1, r8
 8002776:	1851      	adds	r1, r2, r1
 8002778:	6139      	str	r1, [r7, #16]
 800277a:	4649      	mov	r1, r9
 800277c:	414b      	adcs	r3, r1
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800278c:	4659      	mov	r1, fp
 800278e:	00cb      	lsls	r3, r1, #3
 8002790:	4651      	mov	r1, sl
 8002792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002796:	4651      	mov	r1, sl
 8002798:	00ca      	lsls	r2, r1, #3
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	4642      	mov	r2, r8
 80027a2:	189b      	adds	r3, r3, r2
 80027a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80027a8:	464b      	mov	r3, r9
 80027aa:	460a      	mov	r2, r1
 80027ac:	eb42 0303 	adc.w	r3, r2, r3
 80027b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80027cc:	4649      	mov	r1, r9
 80027ce:	008b      	lsls	r3, r1, #2
 80027d0:	4641      	mov	r1, r8
 80027d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027d6:	4641      	mov	r1, r8
 80027d8:	008a      	lsls	r2, r1, #2
 80027da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80027de:	f7fd fd49 	bl	8000274 <__aeabi_uldivmod>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	4b38      	ldr	r3, [pc, #224]	@ (80028cc <UART_SetConfig+0x4e4>)
 80027ea:	fba3 2301 	umull	r2, r3, r3, r1
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	2264      	movs	r2, #100	@ 0x64
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	1acb      	subs	r3, r1, r3
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	3332      	adds	r3, #50	@ 0x32
 80027fc:	4a33      	ldr	r2, [pc, #204]	@ (80028cc <UART_SetConfig+0x4e4>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002808:	441c      	add	r4, r3
 800280a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800280e:	2200      	movs	r2, #0
 8002810:	673b      	str	r3, [r7, #112]	@ 0x70
 8002812:	677a      	str	r2, [r7, #116]	@ 0x74
 8002814:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002818:	4642      	mov	r2, r8
 800281a:	464b      	mov	r3, r9
 800281c:	1891      	adds	r1, r2, r2
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	415b      	adcs	r3, r3
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002828:	4641      	mov	r1, r8
 800282a:	1851      	adds	r1, r2, r1
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	4649      	mov	r1, r9
 8002830:	414b      	adcs	r3, r1
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002840:	4659      	mov	r1, fp
 8002842:	00cb      	lsls	r3, r1, #3
 8002844:	4651      	mov	r1, sl
 8002846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800284a:	4651      	mov	r1, sl
 800284c:	00ca      	lsls	r2, r1, #3
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	4603      	mov	r3, r0
 8002854:	4642      	mov	r2, r8
 8002856:	189b      	adds	r3, r3, r2
 8002858:	66bb      	str	r3, [r7, #104]	@ 0x68
 800285a:	464b      	mov	r3, r9
 800285c:	460a      	mov	r2, r1
 800285e:	eb42 0303 	adc.w	r3, r2, r3
 8002862:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	663b      	str	r3, [r7, #96]	@ 0x60
 800286e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800287c:	4649      	mov	r1, r9
 800287e:	008b      	lsls	r3, r1, #2
 8002880:	4641      	mov	r1, r8
 8002882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002886:	4641      	mov	r1, r8
 8002888:	008a      	lsls	r2, r1, #2
 800288a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800288e:	f7fd fcf1 	bl	8000274 <__aeabi_uldivmod>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <UART_SetConfig+0x4e4>)
 8002898:	fba3 1302 	umull	r1, r3, r3, r2
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	2164      	movs	r1, #100	@ 0x64
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	3332      	adds	r3, #50	@ 0x32
 80028aa:	4a08      	ldr	r2, [pc, #32]	@ (80028cc <UART_SetConfig+0x4e4>)
 80028ac:	fba2 2303 	umull	r2, r3, r2, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	f003 020f 	and.w	r2, r3, #15
 80028b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4422      	add	r2, r4
 80028be:	609a      	str	r2, [r3, #8]
}
 80028c0:	bf00      	nop
 80028c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80028c6:	46bd      	mov	sp, r7
 80028c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028cc:	51eb851f 	.word	0x51eb851f

080028d0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f103 0208 	add.w	r2, r3, #8
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f04f 32ff 	mov.w	r2, #4294967295
 80028e8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f103 0208 	add.w	r2, r3, #8
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f103 0208 	add.w	r2, r3, #8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800292a:	b480      	push	{r7}
 800292c:	b085      	sub	sp, #20
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	601a      	str	r2, [r3, #0]
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d103      	bne.n	8002992 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	e00c      	b.n	80029ac <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3308      	adds	r3, #8
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	e002      	b.n	80029a0 <vListInsert+0x2e>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d2f6      	bcs.n	800299a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	601a      	str	r2, [r3, #0]
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6892      	ldr	r2, [r2, #8]
 80029fa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6852      	ldr	r2, [r2, #4]
 8002a04:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d103      	bne.n	8002a18 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	1e5a      	subs	r2, r3, #1
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10b      	bne.n	8002a64 <xQueueGenericReset+0x2c>
        __asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	60bb      	str	r3, [r7, #8]
    }
 8002a5e:	bf00      	nop
 8002a60:	bf00      	nop
 8002a62:	e7fd      	b.n	8002a60 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002a64:	f002 fa3a 	bl	8004edc <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a70:	68f9      	ldr	r1, [r7, #12]
 8002a72:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	441a      	add	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a94:	3b01      	subs	r3, #1
 8002a96:	68f9      	ldr	r1, [r7, #12]
 8002a98:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	441a      	add	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	22ff      	movs	r2, #255	@ 0xff
 8002aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	22ff      	movs	r2, #255	@ 0xff
 8002ab0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d114      	bne.n	8002ae4 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d01a      	beq.n	8002af8 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3310      	adds	r3, #16
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f001 fae8 	bl	800409c <xTaskRemoveFromEventList>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d012      	beq.n	8002af8 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <xQueueGenericReset+0xd0>)
 8002ad4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	f3bf 8f4f 	dsb	sy
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	e009      	b.n	8002af8 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3310      	adds	r3, #16
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fef1 	bl	80028d0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3324      	adds	r3, #36	@ 0x24
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff feec 	bl	80028d0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002af8:	f002 fa22 	bl	8004f40 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002afc:	2301      	movs	r3, #1
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	e000ed04 	.word	0xe000ed04

08002b0c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08c      	sub	sp, #48	@ 0x30
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	4613      	mov	r3, r2
 8002b18:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10b      	bne.n	8002b38 <xQueueGenericCreate+0x2c>
        __asm volatile
 8002b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	61bb      	str	r3, [r7, #24]
    }
 8002b32:	bf00      	nop
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	fb02 f303 	mul.w	r3, r2, r3
 8002b40:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d006      	beq.n	8002b56 <xQueueGenericCreate+0x4a>
 8002b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d101      	bne.n	8002b5a <xQueueGenericCreate+0x4e>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <xQueueGenericCreate+0x50>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10b      	bne.n	8002b78 <xQueueGenericCreate+0x6c>
        __asm volatile
 8002b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	617b      	str	r3, [r7, #20]
    }
 8002b72:	bf00      	nop
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002b7e:	d90b      	bls.n	8002b98 <xQueueGenericCreate+0x8c>
        __asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	613b      	str	r3, [r7, #16]
    }
 8002b92:	bf00      	nop
 8002b94:	bf00      	nop
 8002b96:	e7fd      	b.n	8002b94 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	3350      	adds	r3, #80	@ 0x50
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 facf 	bl	8005140 <pvPortMalloc>
 8002ba2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00d      	beq.n	8002bc6 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3350      	adds	r3, #80	@ 0x50
 8002bb2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bb4:	79fa      	ldrb	r2, [r7, #7]
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f805 	bl	8002bd0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
    }
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3728      	adds	r7, #40	@ 0x28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d103      	bne.n	8002bec <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e002      	b.n	8002bf2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bfe:	2101      	movs	r1, #1
 8002c00:	69b8      	ldr	r0, [r7, #24]
 8002c02:	f7ff ff19 	bl	8002a38 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	68f9      	ldr	r1, [r7, #12]
 8002c14:	2073      	movs	r0, #115	@ 0x73
 8002c16:	f004 fa2d 	bl	8007074 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b090      	sub	sp, #64	@ 0x40
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c32:	2300      	movs	r3, #0
 8002c34:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10b      	bne.n	8002c58 <xQueueGenericSend+0x34>
        __asm volatile
 8002c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002c52:	bf00      	nop
 8002c54:	bf00      	nop
 8002c56:	e7fd      	b.n	8002c54 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <xQueueGenericSend+0x42>
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <xQueueGenericSend+0x46>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <xQueueGenericSend+0x48>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10b      	bne.n	8002c88 <xQueueGenericSend+0x64>
        __asm volatile
 8002c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002c82:	bf00      	nop
 8002c84:	bf00      	nop
 8002c86:	e7fd      	b.n	8002c84 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d103      	bne.n	8002c96 <xQueueGenericSend+0x72>
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <xQueueGenericSend+0x76>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <xQueueGenericSend+0x78>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10b      	bne.n	8002cb8 <xQueueGenericSend+0x94>
        __asm volatile
 8002ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	623b      	str	r3, [r7, #32]
    }
 8002cb2:	bf00      	nop
 8002cb4:	bf00      	nop
 8002cb6:	e7fd      	b.n	8002cb4 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cb8:	f001 fba4 	bl	8004404 <xTaskGetSchedulerState>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d102      	bne.n	8002cc8 <xQueueGenericSend+0xa4>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <xQueueGenericSend+0xa8>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <xQueueGenericSend+0xaa>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10b      	bne.n	8002cea <xQueueGenericSend+0xc6>
        __asm volatile
 8002cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd6:	f383 8811 	msr	BASEPRI, r3
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	f3bf 8f4f 	dsb	sy
 8002ce2:	61fb      	str	r3, [r7, #28]
    }
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	e7fd      	b.n	8002ce6 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002cea:	f002 f8f7 	bl	8004edc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d302      	bcc.n	8002d00 <xQueueGenericSend+0xdc>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d136      	bne.n	8002d6e <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 8002d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d02:	4618      	mov	r0, r3
 8002d04:	f004 ff44 	bl	8007b90 <SEGGER_SYSVIEW_ShrinkId>
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	460b      	mov	r3, r1
 8002d12:	4601      	mov	r1, r0
 8002d14:	205a      	movs	r0, #90	@ 0x5a
 8002d16:	f004 fa23 	bl	8007160 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d20:	f000 fa80 	bl	8003224 <prvCopyDataToQueue>
 8002d24:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d010      	beq.n	8002d50 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d30:	3324      	adds	r3, #36	@ 0x24
 8002d32:	4618      	mov	r0, r3
 8002d34:	f001 f9b2 	bl	800409c <xTaskRemoveFromEventList>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d013      	beq.n	8002d66 <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002d3e:	4b4d      	ldr	r3, [pc, #308]	@ (8002e74 <xQueueGenericSend+0x250>)
 8002d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	e00a      	b.n	8002d66 <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002d56:	4b47      	ldr	r3, [pc, #284]	@ (8002e74 <xQueueGenericSend+0x250>)
 8002d58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	f3bf 8f4f 	dsb	sy
 8002d62:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002d66:	f002 f8eb 	bl	8004f40 <vPortExitCritical>
                return pdPASS;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e07d      	b.n	8002e6a <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d110      	bne.n	8002d96 <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002d74:	f002 f8e4 	bl	8004f40 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f004 ff08 	bl	8007b90 <SEGGER_SYSVIEW_ShrinkId>
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	205a      	movs	r0, #90	@ 0x5a
 8002d8e:	f004 f9e7 	bl	8007160 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e069      	b.n	8002e6a <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d106      	bne.n	8002daa <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	4618      	mov	r0, r3
 8002da2:	f001 f9e3 	bl	800416c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002da6:	2301      	movs	r3, #1
 8002da8:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002daa:	f002 f8c9 	bl	8004f40 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002dae:	f000 fe51 	bl	8003a54 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002db2:	f002 f893 	bl	8004edc <vPortEnterCritical>
 8002db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002dbc:	b25b      	sxtb	r3, r3
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc2:	d103      	bne.n	8002dcc <xQueueGenericSend+0x1a8>
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002dd2:	b25b      	sxtb	r3, r3
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d103      	bne.n	8002de2 <xQueueGenericSend+0x1be>
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002de2:	f002 f8ad 	bl	8004f40 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002de6:	1d3a      	adds	r2, r7, #4
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 f9d2 	bl	8004198 <xTaskCheckForTimeOut>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d124      	bne.n	8002e44 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dfa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dfc:	f000 fb0a 	bl	8003414 <prvIsQueueFull>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d018      	beq.n	8002e38 <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e08:	3310      	adds	r3, #16
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 f8ee 	bl	8003ff0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002e14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e16:	f000 fa95 	bl	8003344 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002e1a:	f000 fe29 	bl	8003a70 <xTaskResumeAll>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f47f af62 	bne.w	8002cea <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8002e26:	4b13      	ldr	r3, [pc, #76]	@ (8002e74 <xQueueGenericSend+0x250>)
 8002e28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	e758      	b.n	8002cea <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002e38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e3a:	f000 fa83 	bl	8003344 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002e3e:	f000 fe17 	bl	8003a70 <xTaskResumeAll>
 8002e42:	e752      	b.n	8002cea <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002e44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e46:	f000 fa7d 	bl	8003344 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002e4a:	f000 fe11 	bl	8003a70 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e50:	4618      	mov	r0, r3
 8002e52:	f004 fe9d 	bl	8007b90 <SEGGER_SYSVIEW_ShrinkId>
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4601      	mov	r1, r0
 8002e62:	205a      	movs	r0, #90	@ 0x5a
 8002e64:	f004 f97c 	bl	8007160 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002e68:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3738      	adds	r7, #56	@ 0x38
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	e000ed04 	.word	0xe000ed04

08002e78 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b090      	sub	sp, #64	@ 0x40
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10b      	bne.n	8002ea8 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
 8002ea6:	e7fd      	b.n	8002ea4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d103      	bne.n	8002eb6 <xQueueGenericSendFromISR+0x3e>
 8002eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <xQueueGenericSendFromISR+0x42>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <xQueueGenericSendFromISR+0x44>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10b      	bne.n	8002ed8 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8002ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002ed2:	bf00      	nop
 8002ed4:	bf00      	nop
 8002ed6:	e7fd      	b.n	8002ed4 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d103      	bne.n	8002ee6 <xQueueGenericSendFromISR+0x6e>
 8002ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <xQueueGenericSendFromISR+0x72>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <xQueueGenericSendFromISR+0x74>
 8002eea:	2300      	movs	r3, #0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	623b      	str	r3, [r7, #32]
    }
 8002f02:	bf00      	nop
 8002f04:	bf00      	nop
 8002f06:	e7fd      	b.n	8002f04 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f08:	f002 f8d8 	bl	80050bc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002f0c:	f3ef 8211 	mrs	r2, BASEPRI
 8002f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	61fa      	str	r2, [r7, #28]
 8002f22:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002f24:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f26:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d302      	bcc.n	8002f3a <xQueueGenericSendFromISR+0xc2>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d149      	bne.n	8002fce <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f48:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f004 fe1f 	bl	8007b90 <SEGGER_SYSVIEW_ShrinkId>
 8002f52:	4601      	mov	r1, r0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	461a      	mov	r2, r3
 8002f58:	2060      	movs	r0, #96	@ 0x60
 8002f5a:	f004 f831 	bl	8006fc0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002f64:	f000 f95e 	bl	8003224 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002f68:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d112      	bne.n	8002f98 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d026      	beq.n	8002fc8 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f7c:	3324      	adds	r3, #36	@ 0x24
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f001 f88c 	bl	800409c <xTaskRemoveFromEventList>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d01e      	beq.n	8002fc8 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01b      	beq.n	8002fc8 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e017      	b.n	8002fc8 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002f98:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002f9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f9e:	d10b      	bne.n	8002fb8 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8002fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	617b      	str	r3, [r7, #20]
    }
 8002fb2:	bf00      	nop
 8002fb4:	bf00      	nop
 8002fb6:	e7fd      	b.n	8002fb4 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	b25a      	sxtb	r2, r3
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8002fcc:	e00b      	b.n	8002fe6 <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f004 fddd 	bl	8007b90 <SEGGER_SYSVIEW_ShrinkId>
 8002fd6:	4601      	mov	r1, r0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2060      	movs	r0, #96	@ 0x60
 8002fde:	f003 ffef 	bl	8006fc0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002ff0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3740      	adds	r7, #64	@ 0x40
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002ffc:	b590      	push	{r4, r7, lr}
 8002ffe:	b08f      	sub	sp, #60	@ 0x3c
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003008:	2300      	movs	r3, #0
 800300a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10b      	bne.n	800302e <xQueueReceive+0x32>
        __asm volatile
 8003016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301a:	f383 8811 	msr	BASEPRI, r3
 800301e:	f3bf 8f6f 	isb	sy
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	623b      	str	r3, [r7, #32]
    }
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	e7fd      	b.n	800302a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d103      	bne.n	800303c <xQueueReceive+0x40>
 8003034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <xQueueReceive+0x44>
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <xQueueReceive+0x46>
 8003040:	2300      	movs	r3, #0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10b      	bne.n	800305e <xQueueReceive+0x62>
        __asm volatile
 8003046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304a:	f383 8811 	msr	BASEPRI, r3
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	f3bf 8f4f 	dsb	sy
 8003056:	61fb      	str	r3, [r7, #28]
    }
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	e7fd      	b.n	800305a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800305e:	f001 f9d1 	bl	8004404 <xTaskGetSchedulerState>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d102      	bne.n	800306e <xQueueReceive+0x72>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <xQueueReceive+0x76>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <xQueueReceive+0x78>
 8003072:	2300      	movs	r3, #0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10b      	bne.n	8003090 <xQueueReceive+0x94>
        __asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	61bb      	str	r3, [r7, #24]
    }
 800308a:	bf00      	nop
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003090:	f001 ff24 	bl	8004edc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003098:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	2b00      	cmp	r3, #0
 800309e:	d02f      	beq.n	8003100 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030a4:	f000 f928 	bl	80032f8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80030a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030aa:	4618      	mov	r0, r3
 80030ac:	f004 fd70 	bl	8007b90 <SEGGER_SYSVIEW_ShrinkId>
 80030b0:	4604      	mov	r4, r0
 80030b2:	2000      	movs	r0, #0
 80030b4:	f004 fd6c 	bl	8007b90 <SEGGER_SYSVIEW_ShrinkId>
 80030b8:	4602      	mov	r2, r0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2101      	movs	r1, #1
 80030be:	9100      	str	r1, [sp, #0]
 80030c0:	4621      	mov	r1, r4
 80030c2:	205c      	movs	r0, #92	@ 0x5c
 80030c4:	f004 f84c 	bl	8007160 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ca:	1e5a      	subs	r2, r3, #1
 80030cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ce:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00f      	beq.n	80030f8 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030da:	3310      	adds	r3, #16
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 ffdd 	bl	800409c <xTaskRemoveFromEventList>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d007      	beq.n	80030f8 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80030e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003220 <xQueueReceive+0x224>)
 80030ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80030f8:	f001 ff22 	bl	8004f40 <vPortExitCritical>
                return pdPASS;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e08a      	b.n	8003216 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d113      	bne.n	800312e <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003106:	f001 ff1b 	bl	8004f40 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800310a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310c:	4618      	mov	r0, r3
 800310e:	f004 fd3f 	bl	8007b90 <SEGGER_SYSVIEW_ShrinkId>
 8003112:	4604      	mov	r4, r0
 8003114:	2000      	movs	r0, #0
 8003116:	f004 fd3b 	bl	8007b90 <SEGGER_SYSVIEW_ShrinkId>
 800311a:	4602      	mov	r2, r0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2101      	movs	r1, #1
 8003120:	9100      	str	r1, [sp, #0]
 8003122:	4621      	mov	r1, r4
 8003124:	205c      	movs	r0, #92	@ 0x5c
 8003126:	f004 f81b 	bl	8007160 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800312a:	2300      	movs	r3, #0
 800312c:	e073      	b.n	8003216 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800312e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003134:	f107 0310 	add.w	r3, r7, #16
 8003138:	4618      	mov	r0, r3
 800313a:	f001 f817 	bl	800416c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800313e:	2301      	movs	r3, #1
 8003140:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003142:	f001 fefd 	bl	8004f40 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003146:	f000 fc85 	bl	8003a54 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800314a:	f001 fec7 	bl	8004edc <vPortEnterCritical>
 800314e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003150:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003154:	b25b      	sxtb	r3, r3
 8003156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315a:	d103      	bne.n	8003164 <xQueueReceive+0x168>
 800315c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003166:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800316a:	b25b      	sxtb	r3, r3
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d103      	bne.n	800317a <xQueueReceive+0x17e>
 8003172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800317a:	f001 fee1 	bl	8004f40 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800317e:	1d3a      	adds	r2, r7, #4
 8003180:	f107 0310 	add.w	r3, r7, #16
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f001 f806 	bl	8004198 <xTaskCheckForTimeOut>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d124      	bne.n	80031dc <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003192:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003194:	f000 f928 	bl	80033e8 <prvIsQueueEmpty>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d018      	beq.n	80031d0 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800319e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a0:	3324      	adds	r3, #36	@ 0x24
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 ff22 	bl	8003ff0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80031ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031ae:	f000 f8c9 	bl	8003344 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80031b2:	f000 fc5d 	bl	8003a70 <xTaskResumeAll>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f47f af69 	bne.w	8003090 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80031be:	4b18      	ldr	r3, [pc, #96]	@ (8003220 <xQueueReceive+0x224>)
 80031c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	e75f      	b.n	8003090 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80031d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031d2:	f000 f8b7 	bl	8003344 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80031d6:	f000 fc4b 	bl	8003a70 <xTaskResumeAll>
 80031da:	e759      	b.n	8003090 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80031dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031de:	f000 f8b1 	bl	8003344 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80031e2:	f000 fc45 	bl	8003a70 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031e8:	f000 f8fe 	bl	80033e8 <prvIsQueueEmpty>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f43f af4e 	beq.w	8003090 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80031f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f6:	4618      	mov	r0, r3
 80031f8:	f004 fcca 	bl	8007b90 <SEGGER_SYSVIEW_ShrinkId>
 80031fc:	4604      	mov	r4, r0
 80031fe:	2000      	movs	r0, #0
 8003200:	f004 fcc6 	bl	8007b90 <SEGGER_SYSVIEW_ShrinkId>
 8003204:	4602      	mov	r2, r0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2101      	movs	r1, #1
 800320a:	9100      	str	r1, [sp, #0]
 800320c:	4621      	mov	r1, r4
 800320e:	205c      	movs	r0, #92	@ 0x5c
 8003210:	f003 ffa6 	bl	8007160 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003214:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003216:	4618      	mov	r0, r3
 8003218:	3734      	adds	r7, #52	@ 0x34
 800321a:	46bd      	mov	sp, r7
 800321c:	bd90      	pop	{r4, r7, pc}
 800321e:	bf00      	nop
 8003220:	e000ed04 	.word	0xe000ed04

08003224 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003238:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10d      	bne.n	800325e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d14d      	bne.n	80032e6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	4618      	mov	r0, r3
 8003250:	f001 f8f6 	bl	8004440 <xTaskPriorityDisinherit>
 8003254:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	e043      	b.n	80032e6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d119      	bne.n	8003298 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6858      	ldr	r0, [r3, #4]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326c:	461a      	mov	r2, r3
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	f004 fe54 	bl	8007f1c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	441a      	add	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	429a      	cmp	r2, r3
 800328c:	d32b      	bcc.n	80032e6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	e026      	b.n	80032e6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	68d8      	ldr	r0, [r3, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a0:	461a      	mov	r2, r3
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	f004 fe3a 	bl	8007f1c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	425b      	negs	r3, r3
 80032b2:	441a      	add	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d207      	bcs.n	80032d4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032cc:	425b      	negs	r3, r3
 80032ce:	441a      	add	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d105      	bne.n	80032e6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80032ee:	697b      	ldr	r3, [r7, #20]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d018      	beq.n	800333c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	441a      	add	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	429a      	cmp	r2, r3
 8003322:	d303      	bcc.n	800332c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68d9      	ldr	r1, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003334:	461a      	mov	r2, r3
 8003336:	6838      	ldr	r0, [r7, #0]
 8003338:	f004 fdf0 	bl	8007f1c <memcpy>
    }
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800334c:	f001 fdc6 	bl	8004edc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003356:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003358:	e011      	b.n	800337e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	2b00      	cmp	r3, #0
 8003360:	d012      	beq.n	8003388 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3324      	adds	r3, #36	@ 0x24
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fe98 	bl	800409c <xTaskRemoveFromEventList>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003372:	f000 ff79 	bl	8004268 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	3b01      	subs	r3, #1
 800337a:	b2db      	uxtb	r3, r3
 800337c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800337e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003382:	2b00      	cmp	r3, #0
 8003384:	dce9      	bgt.n	800335a <prvUnlockQueue+0x16>
 8003386:	e000      	b.n	800338a <prvUnlockQueue+0x46>
                        break;
 8003388:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	22ff      	movs	r2, #255	@ 0xff
 800338e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003392:	f001 fdd5 	bl	8004f40 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003396:	f001 fda1 	bl	8004edc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033a0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80033a2:	e011      	b.n	80033c8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d012      	beq.n	80033d2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3310      	adds	r3, #16
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fe73 	bl	800409c <xTaskRemoveFromEventList>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80033bc:	f000 ff54 	bl	8004268 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80033c0:	7bbb      	ldrb	r3, [r7, #14]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80033c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	dce9      	bgt.n	80033a4 <prvUnlockQueue+0x60>
 80033d0:	e000      	b.n	80033d4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80033d2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	22ff      	movs	r2, #255	@ 0xff
 80033d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80033dc:	f001 fdb0 	bl	8004f40 <vPortExitCritical>
}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80033f0:	f001 fd74 	bl	8004edc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d102      	bne.n	8003402 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80033fc:	2301      	movs	r3, #1
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	e001      	b.n	8003406 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003406:	f001 fd9b 	bl	8004f40 <vPortExitCritical>

    return xReturn;
 800340a:	68fb      	ldr	r3, [r7, #12]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800341c:	f001 fd5e 	bl	8004edc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003428:	429a      	cmp	r2, r3
 800342a:	d102      	bne.n	8003432 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800342c:	2301      	movs	r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	e001      	b.n	8003436 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003436:	f001 fd83 	bl	8004f40 <vPortExitCritical>

    return xReturn;
 800343a:	68fb      	ldr	r3, [r7, #12]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	e01e      	b.n	8003492 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003454:	4a13      	ldr	r2, [pc, #76]	@ (80034a4 <vQueueAddToRegistry+0x60>)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d115      	bne.n	800348c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003460:	4910      	ldr	r1, [pc, #64]	@ (80034a4 <vQueueAddToRegistry+0x60>)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800346a:	4a0e      	ldr	r2, [pc, #56]	@ (80034a4 <vQueueAddToRegistry+0x60>)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4618      	mov	r0, r3
 800347a:	f004 fb89 	bl	8007b90 <SEGGER_SYSVIEW_ShrinkId>
 800347e:	4601      	mov	r1, r0
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	2071      	movs	r0, #113	@ 0x71
 8003486:	f003 fd9b 	bl	8006fc0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800348a:	e006      	b.n	800349a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3301      	adds	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b07      	cmp	r3, #7
 8003496:	d9dd      	bls.n	8003454 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200000d0 	.word	0x200000d0

080034a8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80034b8:	f001 fd10 	bl	8004edc <vPortEnterCritical>
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c8:	d103      	bne.n	80034d2 <vQueueWaitForMessageRestricted+0x2a>
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034d8:	b25b      	sxtb	r3, r3
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034de:	d103      	bne.n	80034e8 <vQueueWaitForMessageRestricted+0x40>
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034e8:	f001 fd2a 	bl	8004f40 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d106      	bne.n	8003502 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	3324      	adds	r3, #36	@ 0x24
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fd9d 	bl	800403c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003502:	6978      	ldr	r0, [r7, #20]
 8003504:	f7ff ff1e 	bl	8003344 <prvUnlockQueue>
    }
 8003508:	bf00      	nop
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003510:	b580      	push	{r7, lr}
 8003512:	b08c      	sub	sp, #48	@ 0x30
 8003514:	af04      	add	r7, sp, #16
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4618      	mov	r0, r3
 8003526:	f001 fe0b 	bl	8005140 <pvPortMalloc>
 800352a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00e      	beq.n	8003550 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003532:	2058      	movs	r0, #88	@ 0x58
 8003534:	f001 fe04 	bl	8005140 <pvPortMalloc>
 8003538:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	631a      	str	r2, [r3, #48]	@ 0x30
 8003546:	e005      	b.n	8003554 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003548:	6978      	ldr	r0, [r7, #20]
 800354a:	f001 fedb 	bl	8005304 <vPortFree>
 800354e:	e001      	b.n	8003554 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003550:	2300      	movs	r3, #0
 8003552:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d013      	beq.n	8003582 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800355a:	88fa      	ldrh	r2, [r7, #6]
 800355c:	2300      	movs	r3, #0
 800355e:	9303      	str	r3, [sp, #12]
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	9302      	str	r3, [sp, #8]
 8003564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003566:	9301      	str	r3, [sp, #4]
 8003568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68b9      	ldr	r1, [r7, #8]
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f80e 	bl	8003592 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003576:	69f8      	ldr	r0, [r7, #28]
 8003578:	f000 f8a2 	bl	80036c0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800357c:	2301      	movs	r3, #1
 800357e:	61bb      	str	r3, [r7, #24]
 8003580:	e002      	b.n	8003588 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003588:	69bb      	ldr	r3, [r7, #24]
    }
 800358a:	4618      	mov	r0, r3
 800358c:	3720      	adds	r7, #32
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b088      	sub	sp, #32
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	461a      	mov	r2, r3
 80035aa:	21a5      	movs	r1, #165	@ 0xa5
 80035ac:	f004 fc8a 	bl	8007ec4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035ba:	3b01      	subs	r3, #1
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	f023 0307 	bic.w	r3, r3, #7
 80035c8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00b      	beq.n	80035ec <prvInitialiseNewTask+0x5a>
        __asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	617b      	str	r3, [r7, #20]
    }
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d01f      	beq.n	8003632 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
 80035f6:	e012      	b.n	800361e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	4413      	add	r3, r2
 80035fe:	7819      	ldrb	r1, [r3, #0]
 8003600:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	3334      	adds	r3, #52	@ 0x34
 8003608:	460a      	mov	r2, r1
 800360a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	4413      	add	r3, r2
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d006      	beq.n	8003626 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	3301      	adds	r3, #1
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	2b09      	cmp	r3, #9
 8003622:	d9e9      	bls.n	80035f8 <prvInitialiseNewTask+0x66>
 8003624:	e000      	b.n	8003628 <prvInitialiseNewTask+0x96>
            {
                break;
 8003626:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003630:	e003      	b.n	800363a <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800363a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363c:	2b04      	cmp	r3, #4
 800363e:	d901      	bls.n	8003644 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003640:	2304      	movs	r3, #4
 8003642:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003646:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003648:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800364a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800364e:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003652:	2200      	movs	r2, #0
 8003654:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003658:	3304      	adds	r3, #4
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff f958 	bl	8002910 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003662:	3318      	adds	r3, #24
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff f953 	bl	8002910 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800366a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800366e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003672:	f1c3 0205 	rsb	r2, r3, #5
 8003676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003678:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800367a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800367e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003682:	3350      	adds	r3, #80	@ 0x50
 8003684:	2204      	movs	r2, #4
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f004 fc1b 	bl	8007ec4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800368e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003690:	3354      	adds	r3, #84	@ 0x54
 8003692:	2201      	movs	r2, #1
 8003694:	2100      	movs	r1, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f004 fc14 	bl	8007ec4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	68f9      	ldr	r1, [r7, #12]
 80036a0:	69b8      	ldr	r0, [r7, #24]
 80036a2:	f001 fae5 	bl	8004c70 <pxPortInitialiseStack>
 80036a6:	4602      	mov	r2, r0
 80036a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036aa:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80036ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036b6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80036b8:	bf00      	nop
 80036ba:	3720      	adds	r7, #32
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80036c0:	b5b0      	push	{r4, r5, r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80036c8:	f001 fc08 	bl	8004edc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80036cc:	4b3b      	ldr	r3, [pc, #236]	@ (80037bc <prvAddNewTaskToReadyList+0xfc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3301      	adds	r3, #1
 80036d2:	4a3a      	ldr	r2, [pc, #232]	@ (80037bc <prvAddNewTaskToReadyList+0xfc>)
 80036d4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80036d6:	4b3a      	ldr	r3, [pc, #232]	@ (80037c0 <prvAddNewTaskToReadyList+0x100>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80036de:	4a38      	ldr	r2, [pc, #224]	@ (80037c0 <prvAddNewTaskToReadyList+0x100>)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036e4:	4b35      	ldr	r3, [pc, #212]	@ (80037bc <prvAddNewTaskToReadyList+0xfc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d110      	bne.n	800370e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80036ec:	f000 fde0 	bl	80042b0 <prvInitialiseTaskLists>
 80036f0:	e00d      	b.n	800370e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80036f2:	4b34      	ldr	r3, [pc, #208]	@ (80037c4 <prvAddNewTaskToReadyList+0x104>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036fa:	4b31      	ldr	r3, [pc, #196]	@ (80037c0 <prvAddNewTaskToReadyList+0x100>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003704:	429a      	cmp	r2, r3
 8003706:	d802      	bhi.n	800370e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003708:	4a2d      	ldr	r2, [pc, #180]	@ (80037c0 <prvAddNewTaskToReadyList+0x100>)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800370e:	4b2e      	ldr	r3, [pc, #184]	@ (80037c8 <prvAddNewTaskToReadyList+0x108>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3301      	adds	r3, #1
 8003714:	4a2c      	ldr	r2, [pc, #176]	@ (80037c8 <prvAddNewTaskToReadyList+0x108>)
 8003716:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003718:	4b2b      	ldr	r3, [pc, #172]	@ (80037c8 <prvAddNewTaskToReadyList+0x108>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d016      	beq.n	8003754 <prvAddNewTaskToReadyList+0x94>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4618      	mov	r0, r3
 800372a:	f004 f90b 	bl	8007944 <SEGGER_SYSVIEW_OnTaskCreate>
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373e:	461d      	mov	r5, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	461c      	mov	r4, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	1ae3      	subs	r3, r4, r3
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	462b      	mov	r3, r5
 8003750:	f001 ffa8 	bl	80056a4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4618      	mov	r0, r3
 8003758:	f004 f978 	bl	8007a4c <SEGGER_SYSVIEW_OnTaskStartReady>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003760:	2201      	movs	r2, #1
 8003762:	409a      	lsls	r2, r3
 8003764:	4b19      	ldr	r3, [pc, #100]	@ (80037cc <prvAddNewTaskToReadyList+0x10c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4313      	orrs	r3, r2
 800376a:	4a18      	ldr	r2, [pc, #96]	@ (80037cc <prvAddNewTaskToReadyList+0x10c>)
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4a15      	ldr	r2, [pc, #84]	@ (80037d0 <prvAddNewTaskToReadyList+0x110>)
 800377c:	441a      	add	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3304      	adds	r3, #4
 8003782:	4619      	mov	r1, r3
 8003784:	4610      	mov	r0, r2
 8003786:	f7ff f8d0 	bl	800292a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800378a:	f001 fbd9 	bl	8004f40 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800378e:	4b0d      	ldr	r3, [pc, #52]	@ (80037c4 <prvAddNewTaskToReadyList+0x104>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00e      	beq.n	80037b4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003796:	4b0a      	ldr	r3, [pc, #40]	@ (80037c0 <prvAddNewTaskToReadyList+0x100>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d207      	bcs.n	80037b4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80037a4:	4b0b      	ldr	r3, [pc, #44]	@ (80037d4 <prvAddNewTaskToReadyList+0x114>)
 80037a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bdb0      	pop	{r4, r5, r7, pc}
 80037bc:	200001e8 	.word	0x200001e8
 80037c0:	20000110 	.word	0x20000110
 80037c4:	200001f4 	.word	0x200001f4
 80037c8:	20000204 	.word	0x20000204
 80037cc:	200001f0 	.word	0x200001f0
 80037d0:	20000114 	.word	0x20000114
 80037d4:	e000ed04 	.word	0xe000ed04

080037d8 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 80037e0:	f001 fb7c 	bl	8004edc <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d102      	bne.n	80037f0 <uxTaskPriorityGet+0x18>
 80037ea:	4b07      	ldr	r3, [pc, #28]	@ (8003808 <uxTaskPriorityGet+0x30>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	e000      	b.n	80037f2 <uxTaskPriorityGet+0x1a>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 80037fa:	f001 fba1 	bl	8004f40 <vPortExitCritical>

        return uxReturn;
 80037fe:	68bb      	ldr	r3, [r7, #8]
    }
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	20000110 	.word	0x20000110

0800380c <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	@ 0x28
 8003810:	af02      	add	r7, sp, #8
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b04      	cmp	r3, #4
 800381e:	d90b      	bls.n	8003838 <vTaskPrioritySet+0x2c>
        __asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	60fb      	str	r3, [r7, #12]
    }
 8003832:	bf00      	nop
 8003834:	bf00      	nop
 8003836:	e7fd      	b.n	8003834 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b04      	cmp	r3, #4
 800383c:	d901      	bls.n	8003842 <vTaskPrioritySet+0x36>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800383e:	2304      	movs	r3, #4
 8003840:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8003842:	f001 fb4b 	bl	8004edc <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d102      	bne.n	8003852 <vTaskPrioritySet+0x46>
 800384c:	4b4c      	ldr	r3, [pc, #304]	@ (8003980 <vTaskPrioritySet+0x174>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	e000      	b.n	8003854 <vTaskPrioritySet+0x48>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	4618      	mov	r0, r3
 800385a:	f004 f999 	bl	8007b90 <SEGGER_SYSVIEW_ShrinkId>
 800385e:	4603      	mov	r3, r0
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	4619      	mov	r1, r3
 8003864:	2028      	movs	r0, #40	@ 0x28
 8003866:	f003 fbab 	bl	8006fc0 <SEGGER_SYSVIEW_RecordU32x2>
 800386a:	69b8      	ldr	r0, [r7, #24]
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003876:	461a      	mov	r2, r3
 8003878:	2300      	movs	r3, #0
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	f001 ff78 	bl	8005774 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003888:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d06f      	beq.n	8003972 <vTaskPrioritySet+0x166>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	429a      	cmp	r2, r3
 8003898:	d90d      	bls.n	80038b6 <vTaskPrioritySet+0xaa>
                {
                    if( pxTCB != pxCurrentTCB )
 800389a:	4b39      	ldr	r3, [pc, #228]	@ (8003980 <vTaskPrioritySet+0x174>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d00f      	beq.n	80038c4 <vTaskPrioritySet+0xb8>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80038a4:	4b36      	ldr	r3, [pc, #216]	@ (8003980 <vTaskPrioritySet+0x174>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d309      	bcc.n	80038c4 <vTaskPrioritySet+0xb8>
                        {
                            xYieldRequired = pdTRUE;
 80038b0:	2301      	movs	r3, #1
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	e006      	b.n	80038c4 <vTaskPrioritySet+0xb8>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 80038b6:	4b32      	ldr	r3, [pc, #200]	@ (8003980 <vTaskPrioritySet+0x174>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d101      	bne.n	80038c4 <vTaskPrioritySet+0xb8>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 80038c0:	2301      	movs	r3, #1
 80038c2:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c8:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d102      	bne.n	80038dc <vTaskPrioritySet+0xd0>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	62da      	str	r2, [r3, #44]	@ 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	649a      	str	r2, [r3, #72]	@ 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	db04      	blt.n	80038f4 <vTaskPrioritySet+0xe8>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	f1c3 0205 	rsb	r2, r3, #5
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	6959      	ldr	r1, [r3, #20]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4a20      	ldr	r2, [pc, #128]	@ (8003984 <vTaskPrioritySet+0x178>)
 8003904:	4413      	add	r3, r2
 8003906:	4299      	cmp	r1, r3
 8003908:	d128      	bne.n	800395c <vTaskPrioritySet+0x150>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	3304      	adds	r3, #4
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff f868 	bl	80029e4 <uxListRemove>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <vTaskPrioritySet+0x122>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800391a:	2201      	movs	r2, #1
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43da      	mvns	r2, r3
 8003924:	4b18      	ldr	r3, [pc, #96]	@ (8003988 <vTaskPrioritySet+0x17c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4013      	ands	r3, r2
 800392a:	4a17      	ldr	r2, [pc, #92]	@ (8003988 <vTaskPrioritySet+0x17c>)
 800392c:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003932:	2201      	movs	r2, #1
 8003934:	409a      	lsls	r2, r3
 8003936:	4b14      	ldr	r3, [pc, #80]	@ (8003988 <vTaskPrioritySet+0x17c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	4a12      	ldr	r2, [pc, #72]	@ (8003988 <vTaskPrioritySet+0x17c>)
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4a0d      	ldr	r2, [pc, #52]	@ (8003984 <vTaskPrioritySet+0x178>)
 800394e:	441a      	add	r2, r3
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	3304      	adds	r3, #4
 8003954:	4619      	mov	r1, r3
 8003956:	4610      	mov	r0, r2
 8003958:	f7fe ffe7 	bl	800292a <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <vTaskPrioritySet+0x166>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8003962:	4b0a      	ldr	r3, [pc, #40]	@ (800398c <vTaskPrioritySet+0x180>)
 8003964:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8003972:	f001 fae5 	bl	8004f40 <vPortExitCritical>
    }
 8003976:	bf00      	nop
 8003978:	3720      	adds	r7, #32
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000110 	.word	0x20000110
 8003984:	20000114 	.word	0x20000114
 8003988:	200001f0 	.word	0x200001f0
 800398c:	e000ed04 	.word	0xe000ed04

08003990 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003996:	4b27      	ldr	r3, [pc, #156]	@ (8003a34 <vTaskStartScheduler+0xa4>)
 8003998:	9301      	str	r3, [sp, #4]
 800399a:	2300      	movs	r3, #0
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	2300      	movs	r3, #0
 80039a0:	2282      	movs	r2, #130	@ 0x82
 80039a2:	4925      	ldr	r1, [pc, #148]	@ (8003a38 <vTaskStartScheduler+0xa8>)
 80039a4:	4825      	ldr	r0, [pc, #148]	@ (8003a3c <vTaskStartScheduler+0xac>)
 80039a6:	f7ff fdb3 	bl	8003510 <xTaskCreate>
 80039aa:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d102      	bne.n	80039b8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80039b2:	f000 fe3f 	bl	8004634 <xTimerCreateTimerTask>
 80039b6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d124      	bne.n	8003a08 <vTaskStartScheduler+0x78>
        __asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	60bb      	str	r3, [r7, #8]
    }
 80039d0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80039d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a40 <vTaskStartScheduler+0xb0>)
 80039d4:	f04f 32ff 	mov.w	r2, #4294967295
 80039d8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80039da:	4b1a      	ldr	r3, [pc, #104]	@ (8003a44 <vTaskStartScheduler+0xb4>)
 80039dc:	2201      	movs	r2, #1
 80039de:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039e0:	4b19      	ldr	r3, [pc, #100]	@ (8003a48 <vTaskStartScheduler+0xb8>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80039e6:	4b19      	ldr	r3, [pc, #100]	@ (8003a4c <vTaskStartScheduler+0xbc>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4b12      	ldr	r3, [pc, #72]	@ (8003a34 <vTaskStartScheduler+0xa4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d102      	bne.n	80039f8 <vTaskStartScheduler+0x68>
 80039f2:	f003 ff8b 	bl	800790c <SEGGER_SYSVIEW_OnIdle>
 80039f6:	e004      	b.n	8003a02 <vTaskStartScheduler+0x72>
 80039f8:	4b14      	ldr	r3, [pc, #80]	@ (8003a4c <vTaskStartScheduler+0xbc>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f003 ffe3 	bl	80079c8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003a02:	f001 f9c7 	bl	8004d94 <xPortStartScheduler>
 8003a06:	e00f      	b.n	8003a28 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d10b      	bne.n	8003a28 <vTaskStartScheduler+0x98>
        __asm volatile
 8003a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	607b      	str	r3, [r7, #4]
    }
 8003a22:	bf00      	nop
 8003a24:	bf00      	nop
 8003a26:	e7fd      	b.n	8003a24 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003a28:	4b09      	ldr	r3, [pc, #36]	@ (8003a50 <vTaskStartScheduler+0xc0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	2000020c 	.word	0x2000020c
 8003a38:	08007f90 	.word	0x08007f90
 8003a3c:	08004281 	.word	0x08004281
 8003a40:	20000208 	.word	0x20000208
 8003a44:	200001f4 	.word	0x200001f4
 8003a48:	200001ec 	.word	0x200001ec
 8003a4c:	20000110 	.word	0x20000110
 8003a50:	2000000c 	.word	0x2000000c

08003a54 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003a58:	4b04      	ldr	r3, [pc, #16]	@ (8003a6c <vTaskSuspendAll+0x18>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	4a03      	ldr	r2, [pc, #12]	@ (8003a6c <vTaskSuspendAll+0x18>)
 8003a60:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003a62:	bf00      	nop
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	20000210 	.word	0x20000210

08003a70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003a7e:	4b44      	ldr	r3, [pc, #272]	@ (8003b90 <xTaskResumeAll+0x120>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10b      	bne.n	8003a9e <xTaskResumeAll+0x2e>
        __asm volatile
 8003a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	603b      	str	r3, [r7, #0]
    }
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	e7fd      	b.n	8003a9a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003a9e:	f001 fa1d 	bl	8004edc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8003b90 <xTaskResumeAll+0x120>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	4a39      	ldr	r2, [pc, #228]	@ (8003b90 <xTaskResumeAll+0x120>)
 8003aaa:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aac:	4b38      	ldr	r3, [pc, #224]	@ (8003b90 <xTaskResumeAll+0x120>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d165      	bne.n	8003b80 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ab4:	4b37      	ldr	r3, [pc, #220]	@ (8003b94 <xTaskResumeAll+0x124>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d061      	beq.n	8003b80 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003abc:	e032      	b.n	8003b24 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003abe:	4b36      	ldr	r3, [pc, #216]	@ (8003b98 <xTaskResumeAll+0x128>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3318      	adds	r3, #24
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe ff8a 	bl	80029e4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe ff85 	bl	80029e4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f003 ffb5 	bl	8007a4c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	4b2c      	ldr	r3, [pc, #176]	@ (8003b9c <xTaskResumeAll+0x12c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	4a2a      	ldr	r2, [pc, #168]	@ (8003b9c <xTaskResumeAll+0x12c>)
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4a27      	ldr	r2, [pc, #156]	@ (8003ba0 <xTaskResumeAll+0x130>)
 8003b02:	441a      	add	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	f7fe ff0d 	bl	800292a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b14:	4b23      	ldr	r3, [pc, #140]	@ (8003ba4 <xTaskResumeAll+0x134>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8003b1e:	4b22      	ldr	r3, [pc, #136]	@ (8003ba8 <xTaskResumeAll+0x138>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b24:	4b1c      	ldr	r3, [pc, #112]	@ (8003b98 <xTaskResumeAll+0x128>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1c8      	bne.n	8003abe <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003b32:	f000 fc3b 	bl	80043ac <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b36:	4b1d      	ldr	r3, [pc, #116]	@ (8003bac <xTaskResumeAll+0x13c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d010      	beq.n	8003b64 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003b42:	f000 f92d 	bl	8003da0 <xTaskIncrementTick>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8003b4c:	4b16      	ldr	r3, [pc, #88]	@ (8003ba8 <xTaskResumeAll+0x138>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f1      	bne.n	8003b42 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8003b5e:	4b13      	ldr	r3, [pc, #76]	@ (8003bac <xTaskResumeAll+0x13c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003b64:	4b10      	ldr	r3, [pc, #64]	@ (8003ba8 <xTaskResumeAll+0x138>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d009      	beq.n	8003b80 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003b70:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb0 <xTaskResumeAll+0x140>)
 8003b72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003b80:	f001 f9de 	bl	8004f40 <vPortExitCritical>

    return xAlreadyYielded;
 8003b84:	68bb      	ldr	r3, [r7, #8]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000210 	.word	0x20000210
 8003b94:	200001e8 	.word	0x200001e8
 8003b98:	200001a8 	.word	0x200001a8
 8003b9c:	200001f0 	.word	0x200001f0
 8003ba0:	20000114 	.word	0x20000114
 8003ba4:	20000110 	.word	0x20000110
 8003ba8:	200001fc 	.word	0x200001fc
 8003bac:	200001f8 	.word	0x200001f8
 8003bb0:	e000ed04 	.word	0xe000ed04

08003bb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003bba:	4b05      	ldr	r3, [pc, #20]	@ (8003bd0 <xTaskGetTickCount+0x1c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003bc0:	687b      	ldr	r3, [r7, #4]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	200001ec 	.word	0x200001ec

08003bd4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bda:	f001 fa6f 	bl	80050bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003bde:	2300      	movs	r3, #0
 8003be0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003be2:	4b04      	ldr	r3, [pc, #16]	@ (8003bf4 <xTaskGetTickCountFromISR+0x20>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003be8:	683b      	ldr	r3, [r7, #0]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	200001ec 	.word	0x200001ec

08003bf8 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 8003bf8:	b480      	push	{r7}
 8003bfa:	b08b      	sub	sp, #44	@ 0x2c
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d05b      	beq.n	8003cc6 <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	605a      	str	r2, [r3, #4]
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	3308      	adds	r3, #8
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d104      	bne.n	8003c32 <prvSearchForNameWithinSingleList+0x3a>
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	3308      	adds	r3, #8
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d104      	bne.n	8003c5e <prvSearchForNameWithinSingleList+0x66>
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	605a      	str	r2, [r3, #4]
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	623b      	str	r3, [r7, #32]
 8003c6e:	e01c      	b.n	8003caa <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	4413      	add	r3, r2
 8003c76:	3334      	adds	r3, #52	@ 0x34
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	4413      	add	r3, r2
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	7afa      	ldrb	r2, [r7, #11]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d002      	beq.n	8003c90 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	e006      	b.n	8003c9e <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 8003c90:	7afb      	ldrb	r3, [r7, #11]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d103      	bne.n	8003c9e <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
                        xBreakLoop = pdTRUE;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	623b      	str	r3, [r7, #32]
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	2b09      	cmp	r3, #9
 8003cae:	d9df      	bls.n	8003c70 <prvSearchForNameWithinSingleList+0x78>
 8003cb0:	e000      	b.n	8003cb4 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 8003cb2:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d104      	bne.n	8003cc4 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d1bb      	bne.n	8003c3a <prvSearchForNameWithinSingleList+0x42>
 8003cc2:	e000      	b.n	8003cc6 <prvSearchForNameWithinSingleList+0xce>
                    break;
 8003cc4:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003cc8:	4618      	mov	r0, r3
 8003cca:	372c      	adds	r7, #44	@ 0x2c
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8003cdc:	2305      	movs	r3, #5
 8003cde:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7fc fabf 	bl	8000264 <strlen>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b09      	cmp	r3, #9
 8003cea:	d90b      	bls.n	8003d04 <xTaskGetHandle+0x30>
        __asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	60fb      	str	r3, [r7, #12]
    }
 8003cfe:	bf00      	nop
 8003d00:	bf00      	nop
 8003d02:	e7fd      	b.n	8003d00 <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 8003d04:	f7ff fea6 	bl	8003a54 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4a1c      	ldr	r2, [pc, #112]	@ (8003d8c <xTaskGetHandle+0xb8>)
 8003d1a:	4413      	add	r3, r2
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff ff6a 	bl	8003bf8 <prvSearchForNameWithinSingleList>
 8003d24:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d103      	bne.n	8003d34 <xTaskGetHandle+0x60>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1ea      	bne.n	8003d08 <xTaskGetHandle+0x34>
 8003d32:	e000      	b.n	8003d36 <xTaskGetHandle+0x62>
                    break;
 8003d34:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d106      	bne.n	8003d4a <xTaskGetHandle+0x76>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8003d3c:	4b14      	ldr	r3, [pc, #80]	@ (8003d90 <xTaskGetHandle+0xbc>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff ff58 	bl	8003bf8 <prvSearchForNameWithinSingleList>
 8003d48:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d106      	bne.n	8003d5e <xTaskGetHandle+0x8a>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8003d50:	4b10      	ldr	r3, [pc, #64]	@ (8003d94 <xTaskGetHandle+0xc0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff ff4e 	bl	8003bf8 <prvSearchForNameWithinSingleList>
 8003d5c:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    if( pxTCB == NULL )
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d104      	bne.n	8003d6e <xTaskGetHandle+0x9a>
                    {
                        /* Search the suspended list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	480c      	ldr	r0, [pc, #48]	@ (8003d98 <xTaskGetHandle+0xc4>)
 8003d68:	f7ff ff46 	bl	8003bf8 <prvSearchForNameWithinSingleList>
 8003d6c:	6138      	str	r0, [r7, #16]
                }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
                {
                    if( pxTCB == NULL )
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d104      	bne.n	8003d7e <xTaskGetHandle+0xaa>
                    {
                        /* Search the deleted list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4809      	ldr	r0, [pc, #36]	@ (8003d9c <xTaskGetHandle+0xc8>)
 8003d78:	f7ff ff3e 	bl	8003bf8 <prvSearchForNameWithinSingleList>
 8003d7c:	6138      	str	r0, [r7, #16]
                    }
                }
            #endif
        }
        ( void ) xTaskResumeAll();
 8003d7e:	f7ff fe77 	bl	8003a70 <xTaskResumeAll>

        return pxTCB;
 8003d82:	693b      	ldr	r3, [r7, #16]
    }
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20000114 	.word	0x20000114
 8003d90:	200001a0 	.word	0x200001a0
 8003d94:	200001a4 	.word	0x200001a4
 8003d98:	200001d4 	.word	0x200001d4
 8003d9c:	200001bc 	.word	0x200001bc

08003da0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003daa:	4b51      	ldr	r3, [pc, #324]	@ (8003ef0 <xTaskIncrementTick+0x150>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f040 8093 	bne.w	8003eda <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003db4:	4b4f      	ldr	r3, [pc, #316]	@ (8003ef4 <xTaskIncrementTick+0x154>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003dbc:	4a4d      	ldr	r2, [pc, #308]	@ (8003ef4 <xTaskIncrementTick+0x154>)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d121      	bne.n	8003e0c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003dc8:	4b4b      	ldr	r3, [pc, #300]	@ (8003ef8 <xTaskIncrementTick+0x158>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <xTaskIncrementTick+0x4a>
        __asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	603b      	str	r3, [r7, #0]
    }
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	e7fd      	b.n	8003de6 <xTaskIncrementTick+0x46>
 8003dea:	4b43      	ldr	r3, [pc, #268]	@ (8003ef8 <xTaskIncrementTick+0x158>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	4b42      	ldr	r3, [pc, #264]	@ (8003efc <xTaskIncrementTick+0x15c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a40      	ldr	r2, [pc, #256]	@ (8003ef8 <xTaskIncrementTick+0x158>)
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	4a40      	ldr	r2, [pc, #256]	@ (8003efc <xTaskIncrementTick+0x15c>)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	4b40      	ldr	r3, [pc, #256]	@ (8003f00 <xTaskIncrementTick+0x160>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3301      	adds	r3, #1
 8003e04:	4a3e      	ldr	r2, [pc, #248]	@ (8003f00 <xTaskIncrementTick+0x160>)
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	f000 fad0 	bl	80043ac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f04 <xTaskIncrementTick+0x164>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d34c      	bcc.n	8003eb0 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e16:	4b38      	ldr	r3, [pc, #224]	@ (8003ef8 <xTaskIncrementTick+0x158>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e20:	4b38      	ldr	r3, [pc, #224]	@ (8003f04 <xTaskIncrementTick+0x164>)
 8003e22:	f04f 32ff 	mov.w	r2, #4294967295
 8003e26:	601a      	str	r2, [r3, #0]
                    break;
 8003e28:	e042      	b.n	8003eb0 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e2a:	4b33      	ldr	r3, [pc, #204]	@ (8003ef8 <xTaskIncrementTick+0x158>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d203      	bcs.n	8003e4a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003e42:	4a30      	ldr	r2, [pc, #192]	@ (8003f04 <xTaskIncrementTick+0x164>)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e48:	e032      	b.n	8003eb0 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe fdc8 	bl	80029e4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	3318      	adds	r3, #24
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fe fdbf 	bl	80029e4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f003 fdef 	bl	8007a4c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e72:	2201      	movs	r2, #1
 8003e74:	409a      	lsls	r2, r3
 8003e76:	4b24      	ldr	r3, [pc, #144]	@ (8003f08 <xTaskIncrementTick+0x168>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	4a22      	ldr	r2, [pc, #136]	@ (8003f08 <xTaskIncrementTick+0x168>)
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8003f0c <xTaskIncrementTick+0x16c>)
 8003e8e:	441a      	add	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4619      	mov	r1, r3
 8003e96:	4610      	mov	r0, r2
 8003e98:	f7fe fd47 	bl	800292a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f10 <xTaskIncrementTick+0x170>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d3b5      	bcc.n	8003e16 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eae:	e7b2      	b.n	8003e16 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003eb0:	4b17      	ldr	r3, [pc, #92]	@ (8003f10 <xTaskIncrementTick+0x170>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eb6:	4915      	ldr	r1, [pc, #84]	@ (8003f0c <xTaskIncrementTick+0x16c>)
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d901      	bls.n	8003ecc <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003ecc:	4b11      	ldr	r3, [pc, #68]	@ (8003f14 <xTaskIncrementTick+0x174>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	e004      	b.n	8003ee4 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003eda:	4b0f      	ldr	r3, [pc, #60]	@ (8003f18 <xTaskIncrementTick+0x178>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8003f18 <xTaskIncrementTick+0x178>)
 8003ee2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003ee4:	697b      	ldr	r3, [r7, #20]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000210 	.word	0x20000210
 8003ef4:	200001ec 	.word	0x200001ec
 8003ef8:	200001a0 	.word	0x200001a0
 8003efc:	200001a4 	.word	0x200001a4
 8003f00:	20000200 	.word	0x20000200
 8003f04:	20000208 	.word	0x20000208
 8003f08:	200001f0 	.word	0x200001f0
 8003f0c:	20000114 	.word	0x20000114
 8003f10:	20000110 	.word	0x20000110
 8003f14:	200001fc 	.word	0x200001fc
 8003f18:	200001f8 	.word	0x200001f8

08003f1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f22:	4b2d      	ldr	r3, [pc, #180]	@ (8003fd8 <vTaskSwitchContext+0xbc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8003fdc <vTaskSwitchContext+0xc0>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003f30:	e04e      	b.n	8003fd0 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8003f32:	4b2a      	ldr	r3, [pc, #168]	@ (8003fdc <vTaskSwitchContext+0xc0>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f38:	4b29      	ldr	r3, [pc, #164]	@ (8003fe0 <vTaskSwitchContext+0xc4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	fab3 f383 	clz	r3, r3
 8003f44:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003f46:	7afb      	ldrb	r3, [r7, #11]
 8003f48:	f1c3 031f 	rsb	r3, r3, #31
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	4925      	ldr	r1, [pc, #148]	@ (8003fe4 <vTaskSwitchContext+0xc8>)
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10b      	bne.n	8003f7a <vTaskSwitchContext+0x5e>
        __asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	607b      	str	r3, [r7, #4]
    }
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	e7fd      	b.n	8003f76 <vTaskSwitchContext+0x5a>
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4a17      	ldr	r2, [pc, #92]	@ (8003fe4 <vTaskSwitchContext+0xc8>)
 8003f86:	4413      	add	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	605a      	str	r2, [r3, #4]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d104      	bne.n	8003faa <vTaskSwitchContext+0x8e>
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe8 <vTaskSwitchContext+0xcc>)
 8003fb2:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <vTaskSwitchContext+0xcc>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003fec <vTaskSwitchContext+0xd0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d102      	bne.n	8003fc6 <vTaskSwitchContext+0xaa>
 8003fc0:	f003 fca4 	bl	800790c <SEGGER_SYSVIEW_OnIdle>
}
 8003fc4:	e004      	b.n	8003fd0 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003fc6:	4b08      	ldr	r3, [pc, #32]	@ (8003fe8 <vTaskSwitchContext+0xcc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f003 fcfc 	bl	80079c8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003fd0:	bf00      	nop
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000210 	.word	0x20000210
 8003fdc:	200001fc 	.word	0x200001fc
 8003fe0:	200001f0 	.word	0x200001f0
 8003fe4:	20000114 	.word	0x20000114
 8003fe8:	20000110 	.word	0x20000110
 8003fec:	2000020c 	.word	0x2000020c

08003ff0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10b      	bne.n	8004018 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	60fb      	str	r3, [r7, #12]
    }
 8004012:	bf00      	nop
 8004014:	bf00      	nop
 8004016:	e7fd      	b.n	8004014 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004018:	4b07      	ldr	r3, [pc, #28]	@ (8004038 <vTaskPlaceOnEventList+0x48>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3318      	adds	r3, #24
 800401e:	4619      	mov	r1, r3
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7fe fca6 	bl	8002972 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004026:	2101      	movs	r1, #1
 8004028:	6838      	ldr	r0, [r7, #0]
 800402a:	f000 fa8b 	bl	8004544 <prvAddCurrentTaskToDelayedList>
}
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000110 	.word	0x20000110

0800403c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10b      	bne.n	8004066 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	617b      	str	r3, [r7, #20]
    }
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	e7fd      	b.n	8004062 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004066:	4b0c      	ldr	r3, [pc, #48]	@ (8004098 <vTaskPlaceOnEventListRestricted+0x5c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3318      	adds	r3, #24
 800406c:	4619      	mov	r1, r3
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f7fe fc5b 	bl	800292a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 800407a:	f04f 33ff 	mov.w	r3, #4294967295
 800407e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004080:	2024      	movs	r0, #36	@ 0x24
 8004082:	f002 ff43 	bl	8006f0c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	68b8      	ldr	r0, [r7, #8]
 800408a:	f000 fa5b 	bl	8004544 <prvAddCurrentTaskToDelayedList>
    }
 800408e:	bf00      	nop
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000110 	.word	0x20000110

0800409c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10b      	bne.n	80040ca <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	60fb      	str	r3, [r7, #12]
    }
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	e7fd      	b.n	80040c6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	3318      	adds	r3, #24
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fe fc88 	bl	80029e4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004154 <xTaskRemoveFromEventList+0xb8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d120      	bne.n	800411e <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	3304      	adds	r3, #4
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fe fc7f 	bl	80029e4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f003 fcaf 	bl	8007a4c <SEGGER_SYSVIEW_OnTaskStartReady>
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f2:	2201      	movs	r2, #1
 80040f4:	409a      	lsls	r2, r3
 80040f6:	4b18      	ldr	r3, [pc, #96]	@ (8004158 <xTaskRemoveFromEventList+0xbc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	4a16      	ldr	r2, [pc, #88]	@ (8004158 <xTaskRemoveFromEventList+0xbc>)
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4a13      	ldr	r2, [pc, #76]	@ (800415c <xTaskRemoveFromEventList+0xc0>)
 800410e:	441a      	add	r2, r3
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	3304      	adds	r3, #4
 8004114:	4619      	mov	r1, r3
 8004116:	4610      	mov	r0, r2
 8004118:	f7fe fc07 	bl	800292a <vListInsertEnd>
 800411c:	e005      	b.n	800412a <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	3318      	adds	r3, #24
 8004122:	4619      	mov	r1, r3
 8004124:	480e      	ldr	r0, [pc, #56]	@ (8004160 <xTaskRemoveFromEventList+0xc4>)
 8004126:	f7fe fc00 	bl	800292a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800412e:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <xTaskRemoveFromEventList+0xc8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004134:	429a      	cmp	r2, r3
 8004136:	d905      	bls.n	8004144 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004138:	2301      	movs	r3, #1
 800413a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800413c:	4b0a      	ldr	r3, [pc, #40]	@ (8004168 <xTaskRemoveFromEventList+0xcc>)
 800413e:	2201      	movs	r2, #1
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e001      	b.n	8004148 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004148:	697b      	ldr	r3, [r7, #20]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000210 	.word	0x20000210
 8004158:	200001f0 	.word	0x200001f0
 800415c:	20000114 	.word	0x20000114
 8004160:	200001a8 	.word	0x200001a8
 8004164:	20000110 	.word	0x20000110
 8004168:	200001fc 	.word	0x200001fc

0800416c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004174:	4b06      	ldr	r3, [pc, #24]	@ (8004190 <vTaskInternalSetTimeOutState+0x24>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800417c:	4b05      	ldr	r3, [pc, #20]	@ (8004194 <vTaskInternalSetTimeOutState+0x28>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	605a      	str	r2, [r3, #4]
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	20000200 	.word	0x20000200
 8004194:	200001ec 	.word	0x200001ec

08004198 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10b      	bne.n	80041c0 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	613b      	str	r3, [r7, #16]
    }
 80041ba:	bf00      	nop
 80041bc:	bf00      	nop
 80041be:	e7fd      	b.n	80041bc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10b      	bne.n	80041de <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	60fb      	str	r3, [r7, #12]
    }
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	e7fd      	b.n	80041da <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80041de:	f000 fe7d 	bl	8004edc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80041e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004260 <xTaskCheckForTimeOut+0xc8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fa:	d102      	bne.n	8004202 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	e026      	b.n	8004250 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b17      	ldr	r3, [pc, #92]	@ (8004264 <xTaskCheckForTimeOut+0xcc>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d00a      	beq.n	8004224 <xTaskCheckForTimeOut+0x8c>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	429a      	cmp	r2, r3
 8004216:	d305      	bcc.n	8004224 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004218:	2301      	movs	r3, #1
 800421a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	e015      	b.n	8004250 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	429a      	cmp	r2, r3
 800422c:	d20b      	bcs.n	8004246 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	1ad2      	subs	r2, r2, r3
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff ff96 	bl	800416c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
 8004244:	e004      	b.n	8004250 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800424c:	2301      	movs	r3, #1
 800424e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004250:	f000 fe76 	bl	8004f40 <vPortExitCritical>

    return xReturn;
 8004254:	69fb      	ldr	r3, [r7, #28]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3720      	adds	r7, #32
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	200001ec 	.word	0x200001ec
 8004264:	20000200 	.word	0x20000200

08004268 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800426c:	4b03      	ldr	r3, [pc, #12]	@ (800427c <vTaskMissedYield+0x14>)
 800426e:	2201      	movs	r2, #1
 8004270:	601a      	str	r2, [r3, #0]
}
 8004272:	bf00      	nop
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	200001fc 	.word	0x200001fc

08004280 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004288:	f000 f852 	bl	8004330 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800428c:	4b06      	ldr	r3, [pc, #24]	@ (80042a8 <prvIdleTask+0x28>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d9f9      	bls.n	8004288 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004294:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <prvIdleTask+0x2c>)
 8004296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80042a4:	e7f0      	b.n	8004288 <prvIdleTask+0x8>
 80042a6:	bf00      	nop
 80042a8:	20000114 	.word	0x20000114
 80042ac:	e000ed04 	.word	0xe000ed04

080042b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042b6:	2300      	movs	r3, #0
 80042b8:	607b      	str	r3, [r7, #4]
 80042ba:	e00c      	b.n	80042d6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4a12      	ldr	r2, [pc, #72]	@ (8004310 <prvInitialiseTaskLists+0x60>)
 80042c8:	4413      	add	r3, r2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe fb00 	bl	80028d0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3301      	adds	r3, #1
 80042d4:	607b      	str	r3, [r7, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d9ef      	bls.n	80042bc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80042dc:	480d      	ldr	r0, [pc, #52]	@ (8004314 <prvInitialiseTaskLists+0x64>)
 80042de:	f7fe faf7 	bl	80028d0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80042e2:	480d      	ldr	r0, [pc, #52]	@ (8004318 <prvInitialiseTaskLists+0x68>)
 80042e4:	f7fe faf4 	bl	80028d0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80042e8:	480c      	ldr	r0, [pc, #48]	@ (800431c <prvInitialiseTaskLists+0x6c>)
 80042ea:	f7fe faf1 	bl	80028d0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80042ee:	480c      	ldr	r0, [pc, #48]	@ (8004320 <prvInitialiseTaskLists+0x70>)
 80042f0:	f7fe faee 	bl	80028d0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80042f4:	480b      	ldr	r0, [pc, #44]	@ (8004324 <prvInitialiseTaskLists+0x74>)
 80042f6:	f7fe faeb 	bl	80028d0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80042fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <prvInitialiseTaskLists+0x78>)
 80042fc:	4a05      	ldr	r2, [pc, #20]	@ (8004314 <prvInitialiseTaskLists+0x64>)
 80042fe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004300:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <prvInitialiseTaskLists+0x7c>)
 8004302:	4a05      	ldr	r2, [pc, #20]	@ (8004318 <prvInitialiseTaskLists+0x68>)
 8004304:	601a      	str	r2, [r3, #0]
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000114 	.word	0x20000114
 8004314:	20000178 	.word	0x20000178
 8004318:	2000018c 	.word	0x2000018c
 800431c:	200001a8 	.word	0x200001a8
 8004320:	200001bc 	.word	0x200001bc
 8004324:	200001d4 	.word	0x200001d4
 8004328:	200001a0 	.word	0x200001a0
 800432c:	200001a4 	.word	0x200001a4

08004330 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004336:	e019      	b.n	800436c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004338:	f000 fdd0 	bl	8004edc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800433c:	4b10      	ldr	r3, [pc, #64]	@ (8004380 <prvCheckTasksWaitingTermination+0x50>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3304      	adds	r3, #4
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe fb4b 	bl	80029e4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800434e:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <prvCheckTasksWaitingTermination+0x54>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3b01      	subs	r3, #1
 8004354:	4a0b      	ldr	r2, [pc, #44]	@ (8004384 <prvCheckTasksWaitingTermination+0x54>)
 8004356:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004358:	4b0b      	ldr	r3, [pc, #44]	@ (8004388 <prvCheckTasksWaitingTermination+0x58>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3b01      	subs	r3, #1
 800435e:	4a0a      	ldr	r2, [pc, #40]	@ (8004388 <prvCheckTasksWaitingTermination+0x58>)
 8004360:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004362:	f000 fded 	bl	8004f40 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f810 	bl	800438c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800436c:	4b06      	ldr	r3, [pc, #24]	@ (8004388 <prvCheckTasksWaitingTermination+0x58>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e1      	bne.n	8004338 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	200001bc 	.word	0x200001bc
 8004384:	200001e8 	.word	0x200001e8
 8004388:	200001d0 	.word	0x200001d0

0800438c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004398:	4618      	mov	r0, r3
 800439a:	f000 ffb3 	bl	8005304 <vPortFree>
                vPortFree( pxTCB );
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 ffb0 	bl	8005304 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043b0:	4b0a      	ldr	r3, [pc, #40]	@ (80043dc <prvResetNextTaskUnblockTime+0x30>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d104      	bne.n	80043c4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80043ba:	4b09      	ldr	r3, [pc, #36]	@ (80043e0 <prvResetNextTaskUnblockTime+0x34>)
 80043bc:	f04f 32ff 	mov.w	r2, #4294967295
 80043c0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80043c2:	e005      	b.n	80043d0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043c4:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <prvResetNextTaskUnblockTime+0x30>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a04      	ldr	r2, [pc, #16]	@ (80043e0 <prvResetNextTaskUnblockTime+0x34>)
 80043ce:	6013      	str	r3, [r2, #0]
}
 80043d0:	bf00      	nop
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	200001a0 	.word	0x200001a0
 80043e0:	20000208 	.word	0x20000208

080043e4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 80043ea:	4b05      	ldr	r3, [pc, #20]	@ (8004400 <xTaskGetCurrentTaskHandle+0x1c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	607b      	str	r3, [r7, #4]

        return xReturn;
 80043f0:	687b      	ldr	r3, [r7, #4]
    }
 80043f2:	4618      	mov	r0, r3
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000110 	.word	0x20000110

08004404 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800440a:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <xTaskGetSchedulerState+0x34>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d102      	bne.n	8004418 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004412:	2301      	movs	r3, #1
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	e008      	b.n	800442a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004418:	4b08      	ldr	r3, [pc, #32]	@ (800443c <xTaskGetSchedulerState+0x38>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004420:	2302      	movs	r3, #2
 8004422:	607b      	str	r3, [r7, #4]
 8004424:	e001      	b.n	800442a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004426:	2300      	movs	r3, #0
 8004428:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800442a:	687b      	ldr	r3, [r7, #4]
    }
 800442c:	4618      	mov	r0, r3
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	200001f4 	.word	0x200001f4
 800443c:	20000210 	.word	0x20000210

08004440 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d06a      	beq.n	800452c <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004456:	4b38      	ldr	r3, [pc, #224]	@ (8004538 <xTaskPriorityDisinherit+0xf8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	429a      	cmp	r2, r3
 800445e:	d00b      	beq.n	8004478 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	60fb      	str	r3, [r7, #12]
    }
 8004472:	bf00      	nop
 8004474:	bf00      	nop
 8004476:	e7fd      	b.n	8004474 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10b      	bne.n	8004498 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	60bb      	str	r3, [r7, #8]
    }
 8004492:	bf00      	nop
 8004494:	bf00      	nop
 8004496:	e7fd      	b.n	8004494 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449c:	1e5a      	subs	r2, r3, #1
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d03e      	beq.n	800452c <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d13a      	bne.n	800452c <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	3304      	adds	r3, #4
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe fa92 	bl	80029e4 <uxListRemove>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	2201      	movs	r2, #1
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	43da      	mvns	r2, r3
 80044d2:	4b1a      	ldr	r3, [pc, #104]	@ (800453c <xTaskPriorityDisinherit+0xfc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4013      	ands	r3, r2
 80044d8:	4a18      	ldr	r2, [pc, #96]	@ (800453c <xTaskPriorityDisinherit+0xfc>)
 80044da:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4619      	mov	r1, r3
 80044e0:	204a      	movs	r0, #74	@ 0x4a
 80044e2:	f002 fd31 	bl	8006f48 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f2:	f1c3 0205 	rsb	r2, r3, #5
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fe:	2201      	movs	r2, #1
 8004500:	409a      	lsls	r2, r3
 8004502:	4b0e      	ldr	r3, [pc, #56]	@ (800453c <xTaskPriorityDisinherit+0xfc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4313      	orrs	r3, r2
 8004508:	4a0c      	ldr	r2, [pc, #48]	@ (800453c <xTaskPriorityDisinherit+0xfc>)
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4a09      	ldr	r2, [pc, #36]	@ (8004540 <xTaskPriorityDisinherit+0x100>)
 800451a:	441a      	add	r2, r3
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	3304      	adds	r3, #4
 8004520:	4619      	mov	r1, r3
 8004522:	4610      	mov	r0, r2
 8004524:	f7fe fa01 	bl	800292a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004528:	2301      	movs	r3, #1
 800452a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800452c:	697b      	ldr	r3, [r7, #20]
    }
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000110 	.word	0x20000110
 800453c:	200001f0 	.word	0x200001f0
 8004540:	20000114 	.word	0x20000114

08004544 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800454e:	4b32      	ldr	r3, [pc, #200]	@ (8004618 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004554:	4b31      	ldr	r3, [pc, #196]	@ (800461c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3304      	adds	r3, #4
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe fa42 	bl	80029e4 <uxListRemove>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10b      	bne.n	800457e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004566:	4b2d      	ldr	r3, [pc, #180]	@ (800461c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456c:	2201      	movs	r2, #1
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43da      	mvns	r2, r3
 8004574:	4b2a      	ldr	r3, [pc, #168]	@ (8004620 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4013      	ands	r3, r2
 800457a:	4a29      	ldr	r2, [pc, #164]	@ (8004620 <prvAddCurrentTaskToDelayedList+0xdc>)
 800457c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004584:	d110      	bne.n	80045a8 <prvAddCurrentTaskToDelayedList+0x64>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00d      	beq.n	80045a8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800458c:	4b23      	ldr	r3, [pc, #140]	@ (800461c <prvAddCurrentTaskToDelayedList+0xd8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	211b      	movs	r1, #27
 8004592:	4618      	mov	r0, r3
 8004594:	f003 fa9c 	bl	8007ad0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004598:	4b20      	ldr	r3, [pc, #128]	@ (800461c <prvAddCurrentTaskToDelayedList+0xd8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3304      	adds	r3, #4
 800459e:	4619      	mov	r1, r3
 80045a0:	4820      	ldr	r0, [pc, #128]	@ (8004624 <prvAddCurrentTaskToDelayedList+0xe0>)
 80045a2:	f7fe f9c2 	bl	800292a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80045a6:	e032      	b.n	800460e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4413      	add	r3, r2
 80045ae:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045b0:	4b1a      	ldr	r3, [pc, #104]	@ (800461c <prvAddCurrentTaskToDelayedList+0xd8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d20f      	bcs.n	80045e0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80045c0:	4b16      	ldr	r3, [pc, #88]	@ (800461c <prvAddCurrentTaskToDelayedList+0xd8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2104      	movs	r1, #4
 80045c6:	4618      	mov	r0, r3
 80045c8:	f003 fa82 	bl	8007ad0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045cc:	4b16      	ldr	r3, [pc, #88]	@ (8004628 <prvAddCurrentTaskToDelayedList+0xe4>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b12      	ldr	r3, [pc, #72]	@ (800461c <prvAddCurrentTaskToDelayedList+0xd8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4619      	mov	r1, r3
 80045d8:	4610      	mov	r0, r2
 80045da:	f7fe f9ca 	bl	8002972 <vListInsert>
}
 80045de:	e016      	b.n	800460e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80045e0:	4b0e      	ldr	r3, [pc, #56]	@ (800461c <prvAddCurrentTaskToDelayedList+0xd8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2104      	movs	r1, #4
 80045e6:	4618      	mov	r0, r3
 80045e8:	f003 fa72 	bl	8007ad0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ec:	4b0f      	ldr	r3, [pc, #60]	@ (800462c <prvAddCurrentTaskToDelayedList+0xe8>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	4b0a      	ldr	r3, [pc, #40]	@ (800461c <prvAddCurrentTaskToDelayedList+0xd8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3304      	adds	r3, #4
 80045f6:	4619      	mov	r1, r3
 80045f8:	4610      	mov	r0, r2
 80045fa:	f7fe f9ba 	bl	8002972 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80045fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004630 <prvAddCurrentTaskToDelayedList+0xec>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	429a      	cmp	r2, r3
 8004606:	d202      	bcs.n	800460e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8004608:	4a09      	ldr	r2, [pc, #36]	@ (8004630 <prvAddCurrentTaskToDelayedList+0xec>)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	6013      	str	r3, [r2, #0]
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	200001ec 	.word	0x200001ec
 800461c:	20000110 	.word	0x20000110
 8004620:	200001f0 	.word	0x200001f0
 8004624:	200001d4 	.word	0x200001d4
 8004628:	200001a4 	.word	0x200001a4
 800462c:	200001a0 	.word	0x200001a0
 8004630:	20000208 	.word	0x20000208

08004634 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800463e:	f000 fae1 	bl	8004c04 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004642:	4b12      	ldr	r3, [pc, #72]	@ (800468c <xTimerCreateTimerTask+0x58>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800464a:	4b11      	ldr	r3, [pc, #68]	@ (8004690 <xTimerCreateTimerTask+0x5c>)
 800464c:	9301      	str	r3, [sp, #4]
 800464e:	2302      	movs	r3, #2
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	2300      	movs	r3, #0
 8004654:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004658:	490e      	ldr	r1, [pc, #56]	@ (8004694 <xTimerCreateTimerTask+0x60>)
 800465a:	480f      	ldr	r0, [pc, #60]	@ (8004698 <xTimerCreateTimerTask+0x64>)
 800465c:	f7fe ff58 	bl	8003510 <xTaskCreate>
 8004660:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10b      	bne.n	8004680 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	603b      	str	r3, [r7, #0]
    }
 800467a:	bf00      	nop
 800467c:	bf00      	nop
 800467e:	e7fd      	b.n	800467c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004680:	687b      	ldr	r3, [r7, #4]
    }
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000244 	.word	0x20000244
 8004690:	20000248 	.word	0x20000248
 8004694:	08007f98 	.word	0x08007f98
 8004698:	080047d5 	.word	0x080047d5

0800469c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800469c:	b580      	push	{r7, lr}
 800469e:	b08a      	sub	sp, #40	@ 0x28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10b      	bne.n	80046cc <xTimerGenericCommand+0x30>
        __asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	623b      	str	r3, [r7, #32]
    }
 80046c6:	bf00      	nop
 80046c8:	bf00      	nop
 80046ca:	e7fd      	b.n	80046c8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80046cc:	4b19      	ldr	r3, [pc, #100]	@ (8004734 <xTimerGenericCommand+0x98>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d02a      	beq.n	800472a <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b05      	cmp	r3, #5
 80046e4:	dc18      	bgt.n	8004718 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046e6:	f7ff fe8d 	bl	8004404 <xTaskGetSchedulerState>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d109      	bne.n	8004704 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046f0:	4b10      	ldr	r3, [pc, #64]	@ (8004734 <xTimerGenericCommand+0x98>)
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	f107 0114 	add.w	r1, r7, #20
 80046f8:	2300      	movs	r3, #0
 80046fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046fc:	f7fe fa92 	bl	8002c24 <xQueueGenericSend>
 8004700:	6278      	str	r0, [r7, #36]	@ 0x24
 8004702:	e012      	b.n	800472a <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004704:	4b0b      	ldr	r3, [pc, #44]	@ (8004734 <xTimerGenericCommand+0x98>)
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	f107 0114 	add.w	r1, r7, #20
 800470c:	2300      	movs	r3, #0
 800470e:	2200      	movs	r2, #0
 8004710:	f7fe fa88 	bl	8002c24 <xQueueGenericSend>
 8004714:	6278      	str	r0, [r7, #36]	@ 0x24
 8004716:	e008      	b.n	800472a <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004718:	4b06      	ldr	r3, [pc, #24]	@ (8004734 <xTimerGenericCommand+0x98>)
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	f107 0114 	add.w	r1, r7, #20
 8004720:	2300      	movs	r3, #0
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	f7fe fba8 	bl	8002e78 <xQueueGenericSendFromISR>
 8004728:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800472c:	4618      	mov	r0, r3
 800472e:	3728      	adds	r7, #40	@ 0x28
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20000244 	.word	0x20000244

08004738 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af02      	add	r7, sp, #8
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004742:	4b23      	ldr	r3, [pc, #140]	@ (80047d0 <prvProcessExpiredTimer+0x98>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	3304      	adds	r3, #4
 8004750:	4618      	mov	r0, r3
 8004752:	f7fe f947 	bl	80029e4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d023      	beq.n	80047ac <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	699a      	ldr	r2, [r3, #24]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	18d1      	adds	r1, r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	6978      	ldr	r0, [r7, #20]
 8004772:	f000 f8d5 	bl	8004920 <prvInsertTimerInActiveList>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d020      	beq.n	80047be <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800477c:	2300      	movs	r3, #0
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	2300      	movs	r3, #0
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	2100      	movs	r1, #0
 8004786:	6978      	ldr	r0, [r7, #20]
 8004788:	f7ff ff88 	bl	800469c <xTimerGenericCommand>
 800478c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d114      	bne.n	80047be <prvProcessExpiredTimer+0x86>
        __asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	60fb      	str	r3, [r7, #12]
    }
 80047a6:	bf00      	nop
 80047a8:	bf00      	nop
 80047aa:	e7fd      	b.n	80047a8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047b2:	f023 0301 	bic.w	r3, r3, #1
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	6978      	ldr	r0, [r7, #20]
 80047c4:	4798      	blx	r3
    }
 80047c6:	bf00      	nop
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	2000023c 	.word	0x2000023c

080047d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047dc:	f107 0308 	add.w	r3, r7, #8
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 f859 	bl	8004898 <prvGetNextExpireTime>
 80047e6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4619      	mov	r1, r3
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f805 	bl	80047fc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80047f2:	f000 f8d7 	bl	80049a4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047f6:	bf00      	nop
 80047f8:	e7f0      	b.n	80047dc <prvTimerTask+0x8>
	...

080047fc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004806:	f7ff f925 	bl	8003a54 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800480a:	f107 0308 	add.w	r3, r7, #8
 800480e:	4618      	mov	r0, r3
 8004810:	f000 f866 	bl	80048e0 <prvSampleTimeNow>
 8004814:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d130      	bne.n	800487e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10a      	bne.n	8004838 <prvProcessTimerOrBlockTask+0x3c>
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	429a      	cmp	r2, r3
 8004828:	d806      	bhi.n	8004838 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800482a:	f7ff f921 	bl	8003a70 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800482e:	68f9      	ldr	r1, [r7, #12]
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff ff81 	bl	8004738 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004836:	e024      	b.n	8004882 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d008      	beq.n	8004850 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800483e:	4b13      	ldr	r3, [pc, #76]	@ (800488c <prvProcessTimerOrBlockTask+0x90>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <prvProcessTimerOrBlockTask+0x50>
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <prvProcessTimerOrBlockTask+0x52>
 800484c:	2300      	movs	r3, #0
 800484e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004850:	4b0f      	ldr	r3, [pc, #60]	@ (8004890 <prvProcessTimerOrBlockTask+0x94>)
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	4619      	mov	r1, r3
 800485e:	f7fe fe23 	bl	80034a8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004862:	f7ff f905 	bl	8003a70 <xTaskResumeAll>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10a      	bne.n	8004882 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800486c:	4b09      	ldr	r3, [pc, #36]	@ (8004894 <prvProcessTimerOrBlockTask+0x98>)
 800486e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	f3bf 8f6f 	isb	sy
    }
 800487c:	e001      	b.n	8004882 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800487e:	f7ff f8f7 	bl	8003a70 <xTaskResumeAll>
    }
 8004882:	bf00      	nop
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000240 	.word	0x20000240
 8004890:	20000244 	.word	0x20000244
 8004894:	e000ed04 	.word	0xe000ed04

08004898 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80048a0:	4b0e      	ldr	r3, [pc, #56]	@ (80048dc <prvGetNextExpireTime+0x44>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <prvGetNextExpireTime+0x16>
 80048aa:	2201      	movs	r2, #1
 80048ac:	e000      	b.n	80048b0 <prvGetNextExpireTime+0x18>
 80048ae:	2200      	movs	r2, #0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d105      	bne.n	80048c8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048bc:	4b07      	ldr	r3, [pc, #28]	@ (80048dc <prvGetNextExpireTime+0x44>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	e001      	b.n	80048cc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80048cc:	68fb      	ldr	r3, [r7, #12]
    }
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	2000023c 	.word	0x2000023c

080048e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80048e8:	f7ff f964 	bl	8003bb4 <xTaskGetTickCount>
 80048ec:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80048ee:	4b0b      	ldr	r3, [pc, #44]	@ (800491c <prvSampleTimeNow+0x3c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d205      	bcs.n	8004904 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80048f8:	f000 f91e 	bl	8004b38 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	e002      	b.n	800490a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800490a:	4a04      	ldr	r2, [pc, #16]	@ (800491c <prvSampleTimeNow+0x3c>)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004910:	68fb      	ldr	r3, [r7, #12]
    }
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	2000024c 	.word	0x2000024c

08004920 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	429a      	cmp	r2, r3
 8004944:	d812      	bhi.n	800496c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	1ad2      	subs	r2, r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	429a      	cmp	r2, r3
 8004952:	d302      	bcc.n	800495a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004954:	2301      	movs	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	e01b      	b.n	8004992 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800495a:	4b10      	ldr	r3, [pc, #64]	@ (800499c <prvInsertTimerInActiveList+0x7c>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3304      	adds	r3, #4
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f7fe f804 	bl	8002972 <vListInsert>
 800496a:	e012      	b.n	8004992 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d206      	bcs.n	8004982 <prvInsertTimerInActiveList+0x62>
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d302      	bcc.n	8004982 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800497c:	2301      	movs	r3, #1
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	e007      	b.n	8004992 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004982:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <prvInsertTimerInActiveList+0x80>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3304      	adds	r3, #4
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f7fd fff0 	bl	8002972 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004992:	697b      	ldr	r3, [r7, #20]
    }
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000240 	.word	0x20000240
 80049a0:	2000023c 	.word	0x2000023c

080049a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08c      	sub	sp, #48	@ 0x30
 80049a8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049aa:	e0b2      	b.n	8004b12 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f2c0 80af 	blt.w	8004b12 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d004      	beq.n	80049ca <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c2:	3304      	adds	r3, #4
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fe f80d 	bl	80029e4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049ca:	1d3b      	adds	r3, r7, #4
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff ff87 	bl	80048e0 <prvSampleTimeNow>
 80049d2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b09      	cmp	r3, #9
 80049d8:	f200 8098 	bhi.w	8004b0c <prvProcessReceivedCommands+0x168>
 80049dc:	a201      	add	r2, pc, #4	@ (adr r2, 80049e4 <prvProcessReceivedCommands+0x40>)
 80049de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e2:	bf00      	nop
 80049e4:	08004a0d 	.word	0x08004a0d
 80049e8:	08004a0d 	.word	0x08004a0d
 80049ec:	08004a0d 	.word	0x08004a0d
 80049f0:	08004a83 	.word	0x08004a83
 80049f4:	08004a97 	.word	0x08004a97
 80049f8:	08004ae3 	.word	0x08004ae3
 80049fc:	08004a0d 	.word	0x08004a0d
 8004a00:	08004a0d 	.word	0x08004a0d
 8004a04:	08004a83 	.word	0x08004a83
 8004a08:	08004a97 	.word	0x08004a97
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	18d1      	adds	r1, r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a3a      	ldr	r2, [r7, #32]
 8004a2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a2c:	f7ff ff78 	bl	8004920 <prvInsertTimerInActiveList>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d06c      	beq.n	8004b10 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a3c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d061      	beq.n	8004b10 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	441a      	add	r2, r3
 8004a54:	2300      	movs	r3, #0
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a5e:	f7ff fe1d 	bl	800469c <xTimerGenericCommand>
 8004a62:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d152      	bne.n	8004b10 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	61bb      	str	r3, [r7, #24]
    }
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	e7fd      	b.n	8004a7e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004a94:	e03d      	b.n	8004b12 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10b      	bne.n	8004ace <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	617b      	str	r3, [r7, #20]
    }
 8004ac8:	bf00      	nop
 8004aca:	bf00      	nop
 8004acc:	e7fd      	b.n	8004aca <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	18d1      	adds	r1, r2, r3
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	6a3a      	ldr	r2, [r7, #32]
 8004ada:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004adc:	f7ff ff20 	bl	8004920 <prvInsertTimerInActiveList>
                        break;
 8004ae0:	e017      	b.n	8004b12 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d103      	bne.n	8004af8 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8004af0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004af2:	f000 fc07 	bl	8005304 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004af6:	e00c      	b.n	8004b12 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004b0a:	e002      	b.n	8004b12 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004b0c:	bf00      	nop
 8004b0e:	e000      	b.n	8004b12 <prvProcessReceivedCommands+0x16e>
                        break;
 8004b10:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b12:	4b08      	ldr	r3, [pc, #32]	@ (8004b34 <prvProcessReceivedCommands+0x190>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f107 0108 	add.w	r1, r7, #8
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fe fa6d 	bl	8002ffc <xQueueReceive>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f47f af41 	bne.w	80049ac <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004b2a:	bf00      	nop
 8004b2c:	bf00      	nop
 8004b2e:	3728      	adds	r7, #40	@ 0x28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	20000244 	.word	0x20000244

08004b38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b3e:	e049      	b.n	8004bd4 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b40:	4b2e      	ldr	r3, [pc, #184]	@ (8004bfc <prvSwitchTimerLists+0xc4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8004bfc <prvSwitchTimerLists+0xc4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3304      	adds	r3, #4
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fd ff43 	bl	80029e4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d02f      	beq.n	8004bd4 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d90e      	bls.n	8004ba4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b92:	4b1a      	ldr	r3, [pc, #104]	@ (8004bfc <prvSwitchTimerLists+0xc4>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	f7fd fee8 	bl	8002972 <vListInsert>
 8004ba2:	e017      	b.n	8004bd4 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	2100      	movs	r1, #0
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f7ff fd74 	bl	800469c <xTimerGenericCommand>
 8004bb4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10b      	bne.n	8004bd4 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	603b      	str	r3, [r7, #0]
    }
 8004bce:	bf00      	nop
 8004bd0:	bf00      	nop
 8004bd2:	e7fd      	b.n	8004bd0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bd4:	4b09      	ldr	r3, [pc, #36]	@ (8004bfc <prvSwitchTimerLists+0xc4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1b0      	bne.n	8004b40 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004bde:	4b07      	ldr	r3, [pc, #28]	@ (8004bfc <prvSwitchTimerLists+0xc4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004be4:	4b06      	ldr	r3, [pc, #24]	@ (8004c00 <prvSwitchTimerLists+0xc8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a04      	ldr	r2, [pc, #16]	@ (8004bfc <prvSwitchTimerLists+0xc4>)
 8004bea:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004bec:	4a04      	ldr	r2, [pc, #16]	@ (8004c00 <prvSwitchTimerLists+0xc8>)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	6013      	str	r3, [r2, #0]
    }
 8004bf2:	bf00      	nop
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	2000023c 	.word	0x2000023c
 8004c00:	20000240 	.word	0x20000240

08004c04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004c08:	f000 f968 	bl	8004edc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004c0c:	4b12      	ldr	r3, [pc, #72]	@ (8004c58 <prvCheckForValidListAndQueue+0x54>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d11d      	bne.n	8004c50 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004c14:	4811      	ldr	r0, [pc, #68]	@ (8004c5c <prvCheckForValidListAndQueue+0x58>)
 8004c16:	f7fd fe5b 	bl	80028d0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004c1a:	4811      	ldr	r0, [pc, #68]	@ (8004c60 <prvCheckForValidListAndQueue+0x5c>)
 8004c1c:	f7fd fe58 	bl	80028d0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004c20:	4b10      	ldr	r3, [pc, #64]	@ (8004c64 <prvCheckForValidListAndQueue+0x60>)
 8004c22:	4a0e      	ldr	r2, [pc, #56]	@ (8004c5c <prvCheckForValidListAndQueue+0x58>)
 8004c24:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004c26:	4b10      	ldr	r3, [pc, #64]	@ (8004c68 <prvCheckForValidListAndQueue+0x64>)
 8004c28:	4a0d      	ldr	r2, [pc, #52]	@ (8004c60 <prvCheckForValidListAndQueue+0x5c>)
 8004c2a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	210c      	movs	r1, #12
 8004c30:	200a      	movs	r0, #10
 8004c32:	f7fd ff6b 	bl	8002b0c <xQueueGenericCreate>
 8004c36:	4603      	mov	r3, r0
 8004c38:	4a07      	ldr	r2, [pc, #28]	@ (8004c58 <prvCheckForValidListAndQueue+0x54>)
 8004c3a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004c3c:	4b06      	ldr	r3, [pc, #24]	@ (8004c58 <prvCheckForValidListAndQueue+0x54>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c44:	4b04      	ldr	r3, [pc, #16]	@ (8004c58 <prvCheckForValidListAndQueue+0x54>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4908      	ldr	r1, [pc, #32]	@ (8004c6c <prvCheckForValidListAndQueue+0x68>)
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe fbfa 	bl	8003444 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004c50:	f000 f976 	bl	8004f40 <vPortExitCritical>
    }
 8004c54:	bf00      	nop
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20000244 	.word	0x20000244
 8004c5c:	20000214 	.word	0x20000214
 8004c60:	20000228 	.word	0x20000228
 8004c64:	2000023c 	.word	0x2000023c
 8004c68:	20000240 	.word	0x20000240
 8004c6c:	08007fa0 	.word	0x08007fa0

08004c70 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3b04      	subs	r3, #4
 8004c80:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c88:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3b04      	subs	r3, #4
 8004c8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f023 0201 	bic.w	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3b04      	subs	r3, #4
 8004c9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8004cd4 <pxPortInitialiseStack+0x64>)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3b14      	subs	r3, #20
 8004caa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3b04      	subs	r3, #4
 8004cb6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f06f 0202 	mvn.w	r2, #2
 8004cbe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3b20      	subs	r3, #32
 8004cc4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	08004cd9 	.word	0x08004cd9

08004cd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004ce2:	4b13      	ldr	r3, [pc, #76]	@ (8004d30 <prvTaskExitError+0x58>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cea:	d00b      	beq.n	8004d04 <prvTaskExitError+0x2c>
        __asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	60fb      	str	r3, [r7, #12]
    }
 8004cfe:	bf00      	nop
 8004d00:	bf00      	nop
 8004d02:	e7fd      	b.n	8004d00 <prvTaskExitError+0x28>
        __asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	60bb      	str	r3, [r7, #8]
    }
 8004d16:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004d18:	bf00      	nop
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0fc      	beq.n	8004d1a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000010 	.word	0x20000010
	...

08004d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004d40:	4b07      	ldr	r3, [pc, #28]	@ (8004d60 <pxCurrentTCBConst2>)
 8004d42:	6819      	ldr	r1, [r3, #0]
 8004d44:	6808      	ldr	r0, [r1, #0]
 8004d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4a:	f380 8809 	msr	PSP, r0
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f380 8811 	msr	BASEPRI, r0
 8004d5a:	4770      	bx	lr
 8004d5c:	f3af 8000 	nop.w

08004d60 <pxCurrentTCBConst2>:
 8004d60:	20000110 	.word	0x20000110
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop

08004d68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004d68:	4808      	ldr	r0, [pc, #32]	@ (8004d8c <prvPortStartFirstTask+0x24>)
 8004d6a:	6800      	ldr	r0, [r0, #0]
 8004d6c:	6800      	ldr	r0, [r0, #0]
 8004d6e:	f380 8808 	msr	MSP, r0
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f380 8814 	msr	CONTROL, r0
 8004d7a:	b662      	cpsie	i
 8004d7c:	b661      	cpsie	f
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	df00      	svc	0
 8004d88:	bf00      	nop
 8004d8a:	0000      	.short	0x0000
 8004d8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop

08004d94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d9a:	4b47      	ldr	r3, [pc, #284]	@ (8004eb8 <xPortStartScheduler+0x124>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a47      	ldr	r2, [pc, #284]	@ (8004ebc <xPortStartScheduler+0x128>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d10b      	bne.n	8004dbc <xPortStartScheduler+0x28>
        __asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	613b      	str	r3, [r7, #16]
    }
 8004db6:	bf00      	nop
 8004db8:	bf00      	nop
 8004dba:	e7fd      	b.n	8004db8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004dbc:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb8 <xPortStartScheduler+0x124>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ec0 <xPortStartScheduler+0x12c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d10b      	bne.n	8004dde <xPortStartScheduler+0x4a>
        __asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	60fb      	str	r3, [r7, #12]
    }
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop
 8004ddc:	e7fd      	b.n	8004dda <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dde:	4b39      	ldr	r3, [pc, #228]	@ (8004ec4 <xPortStartScheduler+0x130>)
 8004de0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	22ff      	movs	r2, #255	@ 0xff
 8004dee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	4b31      	ldr	r3, [pc, #196]	@ (8004ec8 <xPortStartScheduler+0x134>)
 8004e04:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e06:	4b31      	ldr	r3, [pc, #196]	@ (8004ecc <xPortStartScheduler+0x138>)
 8004e08:	2207      	movs	r2, #7
 8004e0a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e0c:	e009      	b.n	8004e22 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004ecc <xPortStartScheduler+0x138>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	4a2d      	ldr	r2, [pc, #180]	@ (8004ecc <xPortStartScheduler+0x138>)
 8004e16:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e18:	78fb      	ldrb	r3, [r7, #3]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e2a:	2b80      	cmp	r3, #128	@ 0x80
 8004e2c:	d0ef      	beq.n	8004e0e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e2e:	4b27      	ldr	r3, [pc, #156]	@ (8004ecc <xPortStartScheduler+0x138>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f1c3 0307 	rsb	r3, r3, #7
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d00b      	beq.n	8004e52 <xPortStartScheduler+0xbe>
        __asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	60bb      	str	r3, [r7, #8]
    }
 8004e4c:	bf00      	nop
 8004e4e:	bf00      	nop
 8004e50:	e7fd      	b.n	8004e4e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e52:	4b1e      	ldr	r3, [pc, #120]	@ (8004ecc <xPortStartScheduler+0x138>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	021b      	lsls	r3, r3, #8
 8004e58:	4a1c      	ldr	r2, [pc, #112]	@ (8004ecc <xPortStartScheduler+0x138>)
 8004e5a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ecc <xPortStartScheduler+0x138>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e64:	4a19      	ldr	r2, [pc, #100]	@ (8004ecc <xPortStartScheduler+0x138>)
 8004e66:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004e70:	4b17      	ldr	r3, [pc, #92]	@ (8004ed0 <xPortStartScheduler+0x13c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a16      	ldr	r2, [pc, #88]	@ (8004ed0 <xPortStartScheduler+0x13c>)
 8004e76:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e7a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004e7c:	4b14      	ldr	r3, [pc, #80]	@ (8004ed0 <xPortStartScheduler+0x13c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a13      	ldr	r2, [pc, #76]	@ (8004ed0 <xPortStartScheduler+0x13c>)
 8004e82:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004e86:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004e88:	f000 f8e8 	bl	800505c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004e8c:	4b11      	ldr	r3, [pc, #68]	@ (8004ed4 <xPortStartScheduler+0x140>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004e92:	f000 f907 	bl	80050a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e96:	4b10      	ldr	r3, [pc, #64]	@ (8004ed8 <xPortStartScheduler+0x144>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a0f      	ldr	r2, [pc, #60]	@ (8004ed8 <xPortStartScheduler+0x144>)
 8004e9c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004ea0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004ea2:	f7ff ff61 	bl	8004d68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004ea6:	f7ff f839 	bl	8003f1c <vTaskSwitchContext>
    prvTaskExitError();
 8004eaa:	f7ff ff15 	bl	8004cd8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	e000ed00 	.word	0xe000ed00
 8004ebc:	410fc271 	.word	0x410fc271
 8004ec0:	410fc270 	.word	0x410fc270
 8004ec4:	e000e400 	.word	0xe000e400
 8004ec8:	20000250 	.word	0x20000250
 8004ecc:	20000254 	.word	0x20000254
 8004ed0:	e000ed20 	.word	0xe000ed20
 8004ed4:	20000010 	.word	0x20000010
 8004ed8:	e000ef34 	.word	0xe000ef34

08004edc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
        __asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	607b      	str	r3, [r7, #4]
    }
 8004ef4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004ef6:	4b10      	ldr	r3, [pc, #64]	@ (8004f38 <vPortEnterCritical+0x5c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3301      	adds	r3, #1
 8004efc:	4a0e      	ldr	r2, [pc, #56]	@ (8004f38 <vPortEnterCritical+0x5c>)
 8004efe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004f00:	4b0d      	ldr	r3, [pc, #52]	@ (8004f38 <vPortEnterCritical+0x5c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d110      	bne.n	8004f2a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f08:	4b0c      	ldr	r3, [pc, #48]	@ (8004f3c <vPortEnterCritical+0x60>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00b      	beq.n	8004f2a <vPortEnterCritical+0x4e>
        __asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	603b      	str	r3, [r7, #0]
    }
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop
 8004f28:	e7fd      	b.n	8004f26 <vPortEnterCritical+0x4a>
    }
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	20000010 	.word	0x20000010
 8004f3c:	e000ed04 	.word	0xe000ed04

08004f40 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004f46:	4b12      	ldr	r3, [pc, #72]	@ (8004f90 <vPortExitCritical+0x50>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10b      	bne.n	8004f66 <vPortExitCritical+0x26>
        __asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	607b      	str	r3, [r7, #4]
    }
 8004f60:	bf00      	nop
 8004f62:	bf00      	nop
 8004f64:	e7fd      	b.n	8004f62 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004f66:	4b0a      	ldr	r3, [pc, #40]	@ (8004f90 <vPortExitCritical+0x50>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	4a08      	ldr	r2, [pc, #32]	@ (8004f90 <vPortExitCritical+0x50>)
 8004f6e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004f70:	4b07      	ldr	r3, [pc, #28]	@ (8004f90 <vPortExitCritical+0x50>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d105      	bne.n	8004f84 <vPortExitCritical+0x44>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	f383 8811 	msr	BASEPRI, r3
    }
 8004f82:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	20000010 	.word	0x20000010
	...

08004fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004fa0:	f3ef 8009 	mrs	r0, PSP
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	4b15      	ldr	r3, [pc, #84]	@ (8005000 <pxCurrentTCBConst>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	f01e 0f10 	tst.w	lr, #16
 8004fb0:	bf08      	it	eq
 8004fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fba:	6010      	str	r0, [r2, #0]
 8004fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004fc4:	f380 8811 	msr	BASEPRI, r0
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f7fe ffa4 	bl	8003f1c <vTaskSwitchContext>
 8004fd4:	f04f 0000 	mov.w	r0, #0
 8004fd8:	f380 8811 	msr	BASEPRI, r0
 8004fdc:	bc09      	pop	{r0, r3}
 8004fde:	6819      	ldr	r1, [r3, #0]
 8004fe0:	6808      	ldr	r0, [r1, #0]
 8004fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe6:	f01e 0f10 	tst.w	lr, #16
 8004fea:	bf08      	it	eq
 8004fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ff0:	f380 8809 	msr	PSP, r0
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	f3af 8000 	nop.w

08005000 <pxCurrentTCBConst>:
 8005000:	20000110 	.word	0x20000110
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop

08005008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
        __asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	607b      	str	r3, [r7, #4]
    }
 8005020:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005022:	f002 fbf9 	bl	8007818 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005026:	f7fe febb 	bl	8003da0 <xTaskIncrementTick>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d006      	beq.n	800503e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8005030:	f002 fc50 	bl	80078d4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005034:	4b08      	ldr	r3, [pc, #32]	@ (8005058 <SysTick_Handler+0x50>)
 8005036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	e001      	b.n	8005042 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800503e:	f002 fc2d 	bl	800789c <SEGGER_SYSVIEW_RecordExitISR>
 8005042:	2300      	movs	r3, #0
 8005044:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	f383 8811 	msr	BASEPRI, r3
    }
 800504c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800504e:	bf00      	nop
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	e000ed04 	.word	0xe000ed04

0800505c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005060:	4b0b      	ldr	r3, [pc, #44]	@ (8005090 <vPortSetupTimerInterrupt+0x34>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005066:	4b0b      	ldr	r3, [pc, #44]	@ (8005094 <vPortSetupTimerInterrupt+0x38>)
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800506c:	4b0a      	ldr	r3, [pc, #40]	@ (8005098 <vPortSetupTimerInterrupt+0x3c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0a      	ldr	r2, [pc, #40]	@ (800509c <vPortSetupTimerInterrupt+0x40>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	099b      	lsrs	r3, r3, #6
 8005078:	4a09      	ldr	r2, [pc, #36]	@ (80050a0 <vPortSetupTimerInterrupt+0x44>)
 800507a:	3b01      	subs	r3, #1
 800507c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800507e:	4b04      	ldr	r3, [pc, #16]	@ (8005090 <vPortSetupTimerInterrupt+0x34>)
 8005080:	2207      	movs	r2, #7
 8005082:	601a      	str	r2, [r3, #0]
}
 8005084:	bf00      	nop
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	e000e010 	.word	0xe000e010
 8005094:	e000e018 	.word	0xe000e018
 8005098:	20000000 	.word	0x20000000
 800509c:	10624dd3 	.word	0x10624dd3
 80050a0:	e000e014 	.word	0xe000e014

080050a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80050a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80050b4 <vPortEnableVFP+0x10>
 80050a8:	6801      	ldr	r1, [r0, #0]
 80050aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80050ae:	6001      	str	r1, [r0, #0]
 80050b0:	4770      	bx	lr
 80050b2:	0000      	.short	0x0000
 80050b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80050b8:	bf00      	nop
 80050ba:	bf00      	nop

080050bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80050c2:	f3ef 8305 	mrs	r3, IPSR
 80050c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	d915      	bls.n	80050fa <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050ce:	4a18      	ldr	r2, [pc, #96]	@ (8005130 <vPortValidateInterruptPriority+0x74>)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4413      	add	r3, r2
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050d8:	4b16      	ldr	r3, [pc, #88]	@ (8005134 <vPortValidateInterruptPriority+0x78>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	7afa      	ldrb	r2, [r7, #11]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d20b      	bcs.n	80050fa <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	607b      	str	r3, [r7, #4]
    }
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	e7fd      	b.n	80050f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005138 <vPortValidateInterruptPriority+0x7c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005102:	4b0e      	ldr	r3, [pc, #56]	@ (800513c <vPortValidateInterruptPriority+0x80>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d90b      	bls.n	8005122 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	603b      	str	r3, [r7, #0]
    }
 800511c:	bf00      	nop
 800511e:	bf00      	nop
 8005120:	e7fd      	b.n	800511e <vPortValidateInterruptPriority+0x62>
    }
 8005122:	bf00      	nop
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	e000e3f0 	.word	0xe000e3f0
 8005134:	20000250 	.word	0x20000250
 8005138:	e000ed0c 	.word	0xe000ed0c
 800513c:	20000254 	.word	0x20000254

08005140 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08a      	sub	sp, #40	@ 0x28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005148:	2300      	movs	r3, #0
 800514a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800514c:	f7fe fc82 	bl	8003a54 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005150:	4b66      	ldr	r3, [pc, #408]	@ (80052ec <pvPortMalloc+0x1ac>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005158:	f000 f938 	bl	80053cc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800515c:	4b64      	ldr	r3, [pc, #400]	@ (80052f0 <pvPortMalloc+0x1b0>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4013      	ands	r3, r2
 8005164:	2b00      	cmp	r3, #0
 8005166:	f040 80a9 	bne.w	80052bc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d02e      	beq.n	80051ce <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005170:	2208      	movs	r2, #8
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	429a      	cmp	r2, r3
 800517a:	d228      	bcs.n	80051ce <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800517c:	2208      	movs	r2, #8
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4413      	add	r3, r2
 8005182:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	2b00      	cmp	r3, #0
 800518c:	d022      	beq.n	80051d4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f023 0307 	bic.w	r3, r3, #7
 8005194:	3308      	adds	r3, #8
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	429a      	cmp	r2, r3
 800519a:	d215      	bcs.n	80051c8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f023 0307 	bic.w	r3, r3, #7
 80051a2:	3308      	adds	r3, #8
 80051a4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d011      	beq.n	80051d4 <pvPortMalloc+0x94>
        __asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	617b      	str	r3, [r7, #20]
    }
 80051c2:	bf00      	nop
 80051c4:	bf00      	nop
 80051c6:	e7fd      	b.n	80051c4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051cc:	e002      	b.n	80051d4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80051ce:	2300      	movs	r3, #0
 80051d0:	607b      	str	r3, [r7, #4]
 80051d2:	e000      	b.n	80051d6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051d4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d06f      	beq.n	80052bc <pvPortMalloc+0x17c>
 80051dc:	4b45      	ldr	r3, [pc, #276]	@ (80052f4 <pvPortMalloc+0x1b4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d86a      	bhi.n	80052bc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80051e6:	4b44      	ldr	r3, [pc, #272]	@ (80052f8 <pvPortMalloc+0x1b8>)
 80051e8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80051ea:	4b43      	ldr	r3, [pc, #268]	@ (80052f8 <pvPortMalloc+0x1b8>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051f0:	e004      	b.n	80051fc <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	429a      	cmp	r2, r3
 8005204:	d903      	bls.n	800520e <pvPortMalloc+0xce>
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f1      	bne.n	80051f2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800520e:	4b37      	ldr	r3, [pc, #220]	@ (80052ec <pvPortMalloc+0x1ac>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005214:	429a      	cmp	r2, r3
 8005216:	d051      	beq.n	80052bc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2208      	movs	r2, #8
 800521e:	4413      	add	r3, r2
 8005220:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	1ad2      	subs	r2, r2, r3
 8005232:	2308      	movs	r3, #8
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	429a      	cmp	r2, r3
 8005238:	d920      	bls.n	800527c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800523a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4413      	add	r3, r2
 8005240:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00b      	beq.n	8005264 <pvPortMalloc+0x124>
        __asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	613b      	str	r3, [r7, #16]
    }
 800525e:	bf00      	nop
 8005260:	bf00      	nop
 8005262:	e7fd      	b.n	8005260 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	1ad2      	subs	r2, r2, r3
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005276:	69b8      	ldr	r0, [r7, #24]
 8005278:	f000 f90a 	bl	8005490 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800527c:	4b1d      	ldr	r3, [pc, #116]	@ (80052f4 <pvPortMalloc+0x1b4>)
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	4a1b      	ldr	r2, [pc, #108]	@ (80052f4 <pvPortMalloc+0x1b4>)
 8005288:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800528a:	4b1a      	ldr	r3, [pc, #104]	@ (80052f4 <pvPortMalloc+0x1b4>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b1b      	ldr	r3, [pc, #108]	@ (80052fc <pvPortMalloc+0x1bc>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d203      	bcs.n	800529e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005296:	4b17      	ldr	r3, [pc, #92]	@ (80052f4 <pvPortMalloc+0x1b4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a18      	ldr	r2, [pc, #96]	@ (80052fc <pvPortMalloc+0x1bc>)
 800529c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	4b13      	ldr	r3, [pc, #76]	@ (80052f0 <pvPortMalloc+0x1b0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	431a      	orrs	r2, r3
 80052a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052aa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80052b2:	4b13      	ldr	r3, [pc, #76]	@ (8005300 <pvPortMalloc+0x1c0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3301      	adds	r3, #1
 80052b8:	4a11      	ldr	r2, [pc, #68]	@ (8005300 <pvPortMalloc+0x1c0>)
 80052ba:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80052bc:	f7fe fbd8 	bl	8003a70 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00b      	beq.n	80052e2 <pvPortMalloc+0x1a2>
        __asm volatile
 80052ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	60fb      	str	r3, [r7, #12]
    }
 80052dc:	bf00      	nop
 80052de:	bf00      	nop
 80052e0:	e7fd      	b.n	80052de <pvPortMalloc+0x19e>
    return pvReturn;
 80052e2:	69fb      	ldr	r3, [r7, #28]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3728      	adds	r7, #40	@ 0x28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	20012e60 	.word	0x20012e60
 80052f0:	20012e74 	.word	0x20012e74
 80052f4:	20012e64 	.word	0x20012e64
 80052f8:	20012e58 	.word	0x20012e58
 80052fc:	20012e68 	.word	0x20012e68
 8005300:	20012e6c 	.word	0x20012e6c

08005304 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d04f      	beq.n	80053b6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005316:	2308      	movs	r3, #8
 8005318:	425b      	negs	r3, r3
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4413      	add	r3, r2
 800531e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	4b25      	ldr	r3, [pc, #148]	@ (80053c0 <vPortFree+0xbc>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4013      	ands	r3, r2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10b      	bne.n	800534a <vPortFree+0x46>
        __asm volatile
 8005332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	60fb      	str	r3, [r7, #12]
    }
 8005344:	bf00      	nop
 8005346:	bf00      	nop
 8005348:	e7fd      	b.n	8005346 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <vPortFree+0x66>
        __asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	60bb      	str	r3, [r7, #8]
    }
 8005364:	bf00      	nop
 8005366:	bf00      	nop
 8005368:	e7fd      	b.n	8005366 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	4b14      	ldr	r3, [pc, #80]	@ (80053c0 <vPortFree+0xbc>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4013      	ands	r3, r2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01e      	beq.n	80053b6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d11a      	bne.n	80053b6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	4b0e      	ldr	r3, [pc, #56]	@ (80053c0 <vPortFree+0xbc>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	43db      	mvns	r3, r3
 800538a:	401a      	ands	r2, r3
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005390:	f7fe fb60 	bl	8003a54 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	4b0a      	ldr	r3, [pc, #40]	@ (80053c4 <vPortFree+0xc0>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4413      	add	r3, r2
 800539e:	4a09      	ldr	r2, [pc, #36]	@ (80053c4 <vPortFree+0xc0>)
 80053a0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053a2:	6938      	ldr	r0, [r7, #16]
 80053a4:	f000 f874 	bl	8005490 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80053a8:	4b07      	ldr	r3, [pc, #28]	@ (80053c8 <vPortFree+0xc4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3301      	adds	r3, #1
 80053ae:	4a06      	ldr	r2, [pc, #24]	@ (80053c8 <vPortFree+0xc4>)
 80053b0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80053b2:	f7fe fb5d 	bl	8003a70 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80053b6:	bf00      	nop
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20012e74 	.word	0x20012e74
 80053c4:	20012e64 	.word	0x20012e64
 80053c8:	20012e70 	.word	0x20012e70

080053cc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053d2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80053d6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80053d8:	4b27      	ldr	r3, [pc, #156]	@ (8005478 <prvHeapInit+0xac>)
 80053da:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00c      	beq.n	8005400 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3307      	adds	r3, #7
 80053ea:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0307 	bic.w	r3, r3, #7
 80053f2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005478 <prvHeapInit+0xac>)
 80053fc:	4413      	add	r3, r2
 80053fe:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005404:	4a1d      	ldr	r2, [pc, #116]	@ (800547c <prvHeapInit+0xb0>)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800540a:	4b1c      	ldr	r3, [pc, #112]	@ (800547c <prvHeapInit+0xb0>)
 800540c:	2200      	movs	r2, #0
 800540e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	4413      	add	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005418:	2208      	movs	r2, #8
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	1a9b      	subs	r3, r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0307 	bic.w	r3, r3, #7
 8005426:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4a15      	ldr	r2, [pc, #84]	@ (8005480 <prvHeapInit+0xb4>)
 800542c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800542e:	4b14      	ldr	r3, [pc, #80]	@ (8005480 <prvHeapInit+0xb4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2200      	movs	r2, #0
 8005434:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005436:	4b12      	ldr	r3, [pc, #72]	@ (8005480 <prvHeapInit+0xb4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	1ad2      	subs	r2, r2, r3
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800544c:	4b0c      	ldr	r3, [pc, #48]	@ (8005480 <prvHeapInit+0xb4>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4a0a      	ldr	r2, [pc, #40]	@ (8005484 <prvHeapInit+0xb8>)
 800545a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	4a09      	ldr	r2, [pc, #36]	@ (8005488 <prvHeapInit+0xbc>)
 8005462:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005464:	4b09      	ldr	r3, [pc, #36]	@ (800548c <prvHeapInit+0xc0>)
 8005466:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800546a:	601a      	str	r2, [r3, #0]
}
 800546c:	bf00      	nop
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	20000258 	.word	0x20000258
 800547c:	20012e58 	.word	0x20012e58
 8005480:	20012e60 	.word	0x20012e60
 8005484:	20012e68 	.word	0x20012e68
 8005488:	20012e64 	.word	0x20012e64
 800548c:	20012e74 	.word	0x20012e74

08005490 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005498:	4b28      	ldr	r3, [pc, #160]	@ (800553c <prvInsertBlockIntoFreeList+0xac>)
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	e002      	b.n	80054a4 <prvInsertBlockIntoFreeList+0x14>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d8f7      	bhi.n	800549e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	4413      	add	r3, r2
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d108      	bne.n	80054d2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	441a      	add	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	441a      	add	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d118      	bne.n	8005518 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	4b15      	ldr	r3, [pc, #84]	@ (8005540 <prvInsertBlockIntoFreeList+0xb0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d00d      	beq.n	800550e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	441a      	add	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	e008      	b.n	8005520 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800550e:	4b0c      	ldr	r3, [pc, #48]	@ (8005540 <prvInsertBlockIntoFreeList+0xb0>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	e003      	b.n	8005520 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	429a      	cmp	r2, r3
 8005526:	d002      	beq.n	800552e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800552e:	bf00      	nop
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	20012e58 	.word	0x20012e58
 8005540:	20012e60 	.word	0x20012e60

08005544 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005548:	4803      	ldr	r0, [pc, #12]	@ (8005558 <_cbSendSystemDesc+0x14>)
 800554a:	f002 f90f 	bl	800776c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800554e:	4803      	ldr	r0, [pc, #12]	@ (800555c <_cbSendSystemDesc+0x18>)
 8005550:	f002 f90c 	bl	800776c <SEGGER_SYSVIEW_SendSysDesc>
}
 8005554:	bf00      	nop
 8005556:	bd80      	pop	{r7, pc}
 8005558:	08007fa8 	.word	0x08007fa8
 800555c:	08007fe8 	.word	0x08007fe8

08005560 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005564:	4b06      	ldr	r3, [pc, #24]	@ (8005580 <SEGGER_SYSVIEW_Conf+0x20>)
 8005566:	6818      	ldr	r0, [r3, #0]
 8005568:	4b05      	ldr	r3, [pc, #20]	@ (8005580 <SEGGER_SYSVIEW_Conf+0x20>)
 800556a:	6819      	ldr	r1, [r3, #0]
 800556c:	4b05      	ldr	r3, [pc, #20]	@ (8005584 <SEGGER_SYSVIEW_Conf+0x24>)
 800556e:	4a06      	ldr	r2, [pc, #24]	@ (8005588 <SEGGER_SYSVIEW_Conf+0x28>)
 8005570:	f001 fc78 	bl	8006e64 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005574:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8005578:	f001 fcb8 	bl	8006eec <SEGGER_SYSVIEW_SetRAMBase>
}
 800557c:	bf00      	nop
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20000000 	.word	0x20000000
 8005584:	08005545 	.word	0x08005545
 8005588:	08008088 	.word	0x08008088

0800558c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800558c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800558e:	b085      	sub	sp, #20
 8005590:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005592:	2300      	movs	r3, #0
 8005594:	607b      	str	r3, [r7, #4]
 8005596:	e033      	b.n	8005600 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005598:	491e      	ldr	r1, [pc, #120]	@ (8005614 <_cbSendTaskList+0x88>)
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	6818      	ldr	r0, [r3, #0]
 80055a8:	491a      	ldr	r1, [pc, #104]	@ (8005614 <_cbSendTaskList+0x88>)
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	4613      	mov	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	3304      	adds	r3, #4
 80055b8:	6819      	ldr	r1, [r3, #0]
 80055ba:	4c16      	ldr	r4, [pc, #88]	@ (8005614 <_cbSendTaskList+0x88>)
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4423      	add	r3, r4
 80055c8:	3308      	adds	r3, #8
 80055ca:	681c      	ldr	r4, [r3, #0]
 80055cc:	4d11      	ldr	r5, [pc, #68]	@ (8005614 <_cbSendTaskList+0x88>)
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	442b      	add	r3, r5
 80055da:	330c      	adds	r3, #12
 80055dc:	681d      	ldr	r5, [r3, #0]
 80055de:	4e0d      	ldr	r6, [pc, #52]	@ (8005614 <_cbSendTaskList+0x88>)
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4433      	add	r3, r6
 80055ec:	3310      	adds	r3, #16
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	462b      	mov	r3, r5
 80055f4:	4622      	mov	r2, r4
 80055f6:	f000 f92d 	bl	8005854 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	3301      	adds	r3, #1
 80055fe:	607b      	str	r3, [r7, #4]
 8005600:	4b05      	ldr	r3, [pc, #20]	@ (8005618 <_cbSendTaskList+0x8c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	429a      	cmp	r2, r3
 8005608:	d3c6      	bcc.n	8005598 <_cbSendTaskList+0xc>
  }
}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005614:	20012e78 	.word	0x20012e78
 8005618:	20012f18 	.word	0x20012f18

0800561c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800561c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005624:	f7fe fad6 	bl	8003bd4 <xTaskGetTickCountFromISR>
 8005628:	4603      	mov	r3, r0
 800562a:	2200      	movs	r2, #0
 800562c:	469a      	mov	sl, r3
 800562e:	4693      	mov	fp, r2
 8005630:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005634:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	f04f 0a00 	mov.w	sl, #0
 8005640:	f04f 0b00 	mov.w	fp, #0
 8005644:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005648:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800564c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005650:	4652      	mov	r2, sl
 8005652:	465b      	mov	r3, fp
 8005654:	1a14      	subs	r4, r2, r0
 8005656:	eb63 0501 	sbc.w	r5, r3, r1
 800565a:	f04f 0200 	mov.w	r2, #0
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	00ab      	lsls	r3, r5, #2
 8005664:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005668:	00a2      	lsls	r2, r4, #2
 800566a:	4614      	mov	r4, r2
 800566c:	461d      	mov	r5, r3
 800566e:	eb14 0800 	adds.w	r8, r4, r0
 8005672:	eb45 0901 	adc.w	r9, r5, r1
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005682:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005686:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800568a:	4690      	mov	r8, r2
 800568c:	4699      	mov	r9, r3
 800568e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005692:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005696:	4610      	mov	r0, r2
 8005698:	4619      	mov	r1, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080056a4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af02      	add	r7, sp, #8
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80056b2:	2205      	movs	r2, #5
 80056b4:	492b      	ldr	r1, [pc, #172]	@ (8005764 <SYSVIEW_AddTask+0xc0>)
 80056b6:	68b8      	ldr	r0, [r7, #8]
 80056b8:	f002 fbf4 	bl	8007ea4 <memcmp>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d04b      	beq.n	800575a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80056c2:	4b29      	ldr	r3, [pc, #164]	@ (8005768 <SYSVIEW_AddTask+0xc4>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b07      	cmp	r3, #7
 80056c8:	d903      	bls.n	80056d2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80056ca:	4828      	ldr	r0, [pc, #160]	@ (800576c <SYSVIEW_AddTask+0xc8>)
 80056cc:	f002 fb60 	bl	8007d90 <SEGGER_SYSVIEW_Warn>
    return;
 80056d0:	e044      	b.n	800575c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80056d2:	4b25      	ldr	r3, [pc, #148]	@ (8005768 <SYSVIEW_AddTask+0xc4>)
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	4926      	ldr	r1, [pc, #152]	@ (8005770 <SYSVIEW_AddTask+0xcc>)
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80056e6:	4b20      	ldr	r3, [pc, #128]	@ (8005768 <SYSVIEW_AddTask+0xc4>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4921      	ldr	r1, [pc, #132]	@ (8005770 <SYSVIEW_AddTask+0xcc>)
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	3304      	adds	r3, #4
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80056fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005768 <SYSVIEW_AddTask+0xc4>)
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	491b      	ldr	r1, [pc, #108]	@ (8005770 <SYSVIEW_AddTask+0xcc>)
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	3308      	adds	r3, #8
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005712:	4b15      	ldr	r3, [pc, #84]	@ (8005768 <SYSVIEW_AddTask+0xc4>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	4916      	ldr	r1, [pc, #88]	@ (8005770 <SYSVIEW_AddTask+0xcc>)
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	330c      	adds	r3, #12
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005728:	4b0f      	ldr	r3, [pc, #60]	@ (8005768 <SYSVIEW_AddTask+0xc4>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4910      	ldr	r1, [pc, #64]	@ (8005770 <SYSVIEW_AddTask+0xcc>)
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	3310      	adds	r3, #16
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800573e:	4b0a      	ldr	r3, [pc, #40]	@ (8005768 <SYSVIEW_AddTask+0xc4>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3301      	adds	r3, #1
 8005744:	4a08      	ldr	r2, [pc, #32]	@ (8005768 <SYSVIEW_AddTask+0xc4>)
 8005746:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 f87e 	bl	8005854 <SYSVIEW_SendTaskInfo>
 8005758:	e000      	b.n	800575c <SYSVIEW_AddTask+0xb8>
    return;
 800575a:	bf00      	nop

}
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	08007ff8 	.word	0x08007ff8
 8005768:	20012f18 	.word	0x20012f18
 800576c:	08008000 	.word	0x08008000
 8005770:	20012e78 	.word	0x20012e78

08005774 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af02      	add	r7, sp, #8
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005782:	2205      	movs	r2, #5
 8005784:	4930      	ldr	r1, [pc, #192]	@ (8005848 <SYSVIEW_UpdateTask+0xd4>)
 8005786:	68b8      	ldr	r0, [r7, #8]
 8005788:	f002 fb8c 	bl	8007ea4 <memcmp>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d056      	beq.n	8005840 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e00d      	b.n	80057b4 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8005798:	492c      	ldr	r1, [pc, #176]	@ (800584c <SYSVIEW_UpdateTask+0xd8>)
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	440b      	add	r3, r1
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d008      	beq.n	80057c0 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	3301      	adds	r3, #1
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	4b26      	ldr	r3, [pc, #152]	@ (8005850 <SYSVIEW_UpdateTask+0xdc>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d3ec      	bcc.n	8005798 <SYSVIEW_UpdateTask+0x24>
 80057be:	e000      	b.n	80057c2 <SYSVIEW_UpdateTask+0x4e>
      break;
 80057c0:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 80057c2:	4b23      	ldr	r3, [pc, #140]	@ (8005850 <SYSVIEW_UpdateTask+0xdc>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d230      	bcs.n	800582e <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 80057cc:	491f      	ldr	r1, [pc, #124]	@ (800584c <SYSVIEW_UpdateTask+0xd8>)
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	440b      	add	r3, r1
 80057da:	3304      	adds	r3, #4
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 80057e0:	491a      	ldr	r1, [pc, #104]	@ (800584c <SYSVIEW_UpdateTask+0xd8>)
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	3308      	adds	r3, #8
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 80057f4:	4915      	ldr	r1, [pc, #84]	@ (800584c <SYSVIEW_UpdateTask+0xd8>)
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	440b      	add	r3, r1
 8005802:	330c      	adds	r3, #12
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8005808:	4910      	ldr	r1, [pc, #64]	@ (800584c <SYSVIEW_UpdateTask+0xd8>)
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	3310      	adds	r3, #16
 8005818:	6a3a      	ldr	r2, [r7, #32]
 800581a:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	68b9      	ldr	r1, [r7, #8]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f814 	bl	8005854 <SYSVIEW_SendTaskInfo>
 800582c:	e009      	b.n	8005842 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	68b9      	ldr	r1, [r7, #8]
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f7ff ff33 	bl	80056a4 <SYSVIEW_AddTask>
 800583e:	e000      	b.n	8005842 <SYSVIEW_UpdateTask+0xce>
    return;
 8005840:	bf00      	nop
  }
}
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	08007ff8 	.word	0x08007ff8
 800584c:	20012e78 	.word	0x20012e78
 8005850:	20012f18 	.word	0x20012f18

08005854 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b08a      	sub	sp, #40	@ 0x28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005862:	f107 0314 	add.w	r3, r7, #20
 8005866:	2214      	movs	r2, #20
 8005868:	2100      	movs	r1, #0
 800586a:	4618      	mov	r0, r3
 800586c:	f002 fb2a 	bl	8007ec4 <memset>
  TaskInfo.TaskID     = TaskID;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005884:	f107 0314 	add.w	r3, r7, #20
 8005888:	4618      	mov	r0, r3
 800588a:	f001 fe77 	bl	800757c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800588e:	bf00      	nop
 8005890:	3728      	adds	r7, #40	@ 0x28
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <__NVIC_EnableIRQ>:
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	db0b      	blt.n	80058c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	f003 021f 	and.w	r2, r3, #31
 80058b0:	4907      	ldr	r1, [pc, #28]	@ (80058d0 <__NVIC_EnableIRQ+0x38>)
 80058b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	2001      	movs	r0, #1
 80058ba:	fa00 f202 	lsl.w	r2, r0, r2
 80058be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80058c2:	bf00      	nop
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	e000e100 	.word	0xe000e100

080058d4 <__NVIC_SetPriority>:
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	6039      	str	r1, [r7, #0]
 80058de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	db0a      	blt.n	80058fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	490c      	ldr	r1, [pc, #48]	@ (8005920 <__NVIC_SetPriority+0x4c>)
 80058ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f2:	0112      	lsls	r2, r2, #4
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	440b      	add	r3, r1
 80058f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80058fc:	e00a      	b.n	8005914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	b2da      	uxtb	r2, r3
 8005902:	4908      	ldr	r1, [pc, #32]	@ (8005924 <__NVIC_SetPriority+0x50>)
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	3b04      	subs	r3, #4
 800590c:	0112      	lsls	r2, r2, #4
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	440b      	add	r3, r1
 8005912:	761a      	strb	r2, [r3, #24]
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	e000e100 	.word	0xe000e100
 8005924:	e000ed00 	.word	0xe000ed00

08005928 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800592e:	f002 fa8b 	bl	8007e48 <SEGGER_SYSVIEW_IsStarted>
 8005932:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800593a:	f001 fca3 	bl	8007284 <SEGGER_SYSVIEW_Start>
  }
}
 800593e:	bf00      	nop
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	4603      	mov	r3, r0
 8005950:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005952:	4b0c      	ldr	r3, [pc, #48]	@ (8005984 <_cbOnUARTRx+0x3c>)
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	2b03      	cmp	r3, #3
 8005958:	d806      	bhi.n	8005968 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800595a:	4b0a      	ldr	r3, [pc, #40]	@ (8005984 <_cbOnUARTRx+0x3c>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	3301      	adds	r3, #1
 8005960:	b2da      	uxtb	r2, r3
 8005962:	4b08      	ldr	r3, [pc, #32]	@ (8005984 <_cbOnUARTRx+0x3c>)
 8005964:	701a      	strb	r2, [r3, #0]
    goto Done;
 8005966:	e009      	b.n	800597c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005968:	f7ff ffde 	bl	8005928 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800596c:	4b05      	ldr	r3, [pc, #20]	@ (8005984 <_cbOnUARTRx+0x3c>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	4618      	mov	r0, r3
 8005972:	1dfb      	adds	r3, r7, #7
 8005974:	2201      	movs	r2, #1
 8005976:	4619      	mov	r1, r3
 8005978:	f000 fb9a 	bl	80060b0 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800597c:	bf00      	nop
}
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	20000014 	.word	0x20000014

08005988 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005990:	4b14      	ldr	r3, [pc, #80]	@ (80059e4 <_cbOnUARTTx+0x5c>)
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	2b03      	cmp	r3, #3
 8005996:	d80f      	bhi.n	80059b8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005998:	4b12      	ldr	r3, [pc, #72]	@ (80059e4 <_cbOnUARTTx+0x5c>)
 800599a:	785b      	ldrb	r3, [r3, #1]
 800599c:	461a      	mov	r2, r3
 800599e:	4b12      	ldr	r3, [pc, #72]	@ (80059e8 <_cbOnUARTTx+0x60>)
 80059a0:	5c9a      	ldrb	r2, [r3, r2]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80059a6:	4b0f      	ldr	r3, [pc, #60]	@ (80059e4 <_cbOnUARTTx+0x5c>)
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	3301      	adds	r3, #1
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	4b0d      	ldr	r3, [pc, #52]	@ (80059e4 <_cbOnUARTTx+0x5c>)
 80059b0:	705a      	strb	r2, [r3, #1]
    r = 1;
 80059b2:	2301      	movs	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]
    goto Done;
 80059b6:	e00f      	b.n	80059d8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80059b8:	4b0a      	ldr	r3, [pc, #40]	@ (80059e4 <_cbOnUARTTx+0x5c>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fa19 	bl	8005df8 <SEGGER_RTT_ReadUpBufferNoLock>
 80059c6:	4603      	mov	r3, r0
 80059c8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	da02      	bge.n	80059d6 <_cbOnUARTTx+0x4e>
    r = 0;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	e000      	b.n	80059d8 <_cbOnUARTTx+0x50>
  }
Done:
 80059d6:	bf00      	nop
  return r;
 80059d8:	68fb      	ldr	r3, [r7, #12]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20000014 	.word	0x20000014
 80059e8:	08008090 	.word	0x08008090

080059ec <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80059f4:	4a04      	ldr	r2, [pc, #16]	@ (8005a08 <SEGGER_UART_init+0x1c>)
 80059f6:	4905      	ldr	r1, [pc, #20]	@ (8005a0c <SEGGER_UART_init+0x20>)
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f863 	bl	8005ac4 <HIF_UART_Init>
}
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	08005949 	.word	0x08005949
 8005a0c:	08005989 	.word	0x08005989

08005a10 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005a16:	4b1e      	ldr	r3, [pc, #120]	@ (8005a90 <USART2_IRQHandler+0x80>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d011      	beq.n	8005a4a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005a26:	4b1b      	ldr	r3, [pc, #108]	@ (8005a94 <USART2_IRQHandler+0x84>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f003 030b 	and.w	r3, r3, #11
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d108      	bne.n	8005a4a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005a38:	4b17      	ldr	r3, [pc, #92]	@ (8005a98 <USART2_IRQHandler+0x88>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005a40:	4b15      	ldr	r3, [pc, #84]	@ (8005a98 <USART2_IRQHandler+0x88>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	79fa      	ldrb	r2, [r7, #7]
 8005a46:	4610      	mov	r0, r2
 8005a48:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d01a      	beq.n	8005a8a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005a54:	4b11      	ldr	r3, [pc, #68]	@ (8005a9c <USART2_IRQHandler+0x8c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d015      	beq.n	8005a88 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a9c <USART2_IRQHandler+0x8c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	1dfa      	adds	r2, r7, #7
 8005a62:	4610      	mov	r0, r2
 8005a64:	4798      	blx	r3
 8005a66:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d106      	bne.n	8005a7c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa0 <USART2_IRQHandler+0x90>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a0b      	ldr	r2, [pc, #44]	@ (8005aa0 <USART2_IRQHandler+0x90>)
 8005a74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	e006      	b.n	8005a8a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005a7c:	4b04      	ldr	r3, [pc, #16]	@ (8005a90 <USART2_IRQHandler+0x80>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005a80:	79fa      	ldrb	r2, [r7, #7]
 8005a82:	4b04      	ldr	r3, [pc, #16]	@ (8005a94 <USART2_IRQHandler+0x84>)
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	e000      	b.n	8005a8a <USART2_IRQHandler+0x7a>
      return;
 8005a88:	bf00      	nop
    }
  }
}
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40004400 	.word	0x40004400
 8005a94:	40004404 	.word	0x40004404
 8005a98:	20012f1c 	.word	0x20012f1c
 8005a9c:	20012f20 	.word	0x20012f20
 8005aa0:	4000440c 	.word	0x4000440c

08005aa4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005aa8:	4b05      	ldr	r3, [pc, #20]	@ (8005ac0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a04      	ldr	r2, [pc, #16]	@ (8005ac0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ab2:	6013      	str	r3, [r2, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	4000440c 	.word	0x4000440c

08005ac4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8005b8c <HIF_UART_Init+0xc8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8005b8c <HIF_UART_Init+0xc8>)
 8005ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ada:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005adc:	4b2c      	ldr	r3, [pc, #176]	@ (8005b90 <HIF_UART_Init+0xcc>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8005b90 <HIF_UART_Init+0xcc>)
 8005ae2:	f043 0301 	orr.w	r3, r3, #1
 8005ae6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8005b94 <HIF_UART_Init+0xd0>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005af4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8005afc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005afe:	4a25      	ldr	r2, [pc, #148]	@ (8005b94 <HIF_UART_Init+0xd0>)
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005b04:	4b24      	ldr	r3, [pc, #144]	@ (8005b98 <HIF_UART_Init+0xd4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b10:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005b18:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8005b98 <HIF_UART_Init+0xd4>)
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005b20:	4b1e      	ldr	r3, [pc, #120]	@ (8005b9c <HIF_UART_Init+0xd8>)
 8005b22:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8005b26:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005b28:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba0 <HIF_UART_Init+0xdc>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba4 <HIF_UART_Init+0xe0>)
 8005b30:	2280      	movs	r2, #128	@ 0x80
 8005b32:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ba8 <HIF_UART_Init+0xe4>)
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b42:	3301      	adds	r3, #1
 8005b44:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	085b      	lsrs	r3, r3, #1
 8005b4a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b52:	d302      	bcc.n	8005b5a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005b54:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005b58:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d004      	beq.n	8005b6a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	4a11      	ldr	r2, [pc, #68]	@ (8005bac <HIF_UART_Init+0xe8>)
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005b6a:	4a11      	ldr	r2, [pc, #68]	@ (8005bb0 <HIF_UART_Init+0xec>)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005b70:	4a10      	ldr	r2, [pc, #64]	@ (8005bb4 <HIF_UART_Init+0xf0>)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005b76:	2106      	movs	r1, #6
 8005b78:	2026      	movs	r0, #38	@ 0x26
 8005b7a:	f7ff feab 	bl	80058d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005b7e:	2026      	movs	r0, #38	@ 0x26
 8005b80:	f7ff fe8a 	bl	8005898 <__NVIC_EnableIRQ>
}
 8005b84:	bf00      	nop
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40023840 	.word	0x40023840
 8005b90:	40023830 	.word	0x40023830
 8005b94:	40020020 	.word	0x40020020
 8005b98:	40020000 	.word	0x40020000
 8005b9c:	4000440c 	.word	0x4000440c
 8005ba0:	40004410 	.word	0x40004410
 8005ba4:	40004414 	.word	0x40004414
 8005ba8:	0501bd00 	.word	0x0501bd00
 8005bac:	40004408 	.word	0x40004408
 8005bb0:	20012f1c 	.word	0x20012f1c
 8005bb4:	20012f20 	.word	0x20012f20

08005bb8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005bbe:	4b24      	ldr	r3, [pc, #144]	@ (8005c50 <_DoInit+0x98>)
 8005bc0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2203      	movs	r2, #3
 8005bc6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2203      	movs	r2, #3
 8005bcc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a20      	ldr	r2, [pc, #128]	@ (8005c54 <_DoInit+0x9c>)
 8005bd2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a20      	ldr	r2, [pc, #128]	@ (8005c58 <_DoInit+0xa0>)
 8005bd8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005be0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a17      	ldr	r2, [pc, #92]	@ (8005c54 <_DoInit+0x9c>)
 8005bf8:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a17      	ldr	r2, [pc, #92]	@ (8005c5c <_DoInit+0xa4>)
 8005bfe:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2210      	movs	r2, #16
 8005c04:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	3307      	adds	r3, #7
 8005c1c:	4a10      	ldr	r2, [pc, #64]	@ (8005c60 <_DoInit+0xa8>)
 8005c1e:	6810      	ldr	r0, [r2, #0]
 8005c20:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005c22:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a0e      	ldr	r2, [pc, #56]	@ (8005c64 <_DoInit+0xac>)
 8005c2a:	6810      	ldr	r0, [r2, #0]
 8005c2c:	6018      	str	r0, [r3, #0]
 8005c2e:	8891      	ldrh	r1, [r2, #4]
 8005c30:	7992      	ldrb	r2, [r2, #6]
 8005c32:	8099      	strh	r1, [r3, #4]
 8005c34:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005c36:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005c40:	f3bf 8f5f 	dmb	sy
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	20012f24 	.word	0x20012f24
 8005c54:	08008050 	.word	0x08008050
 8005c58:	20012fcc 	.word	0x20012fcc
 8005c5c:	200133cc 	.word	0x200133cc
 8005c60:	0800805c 	.word	0x0800805c
 8005c64:	08008060 	.word	0x08008060

08005c68 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	@ 0x28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005c74:	2300      	movs	r3, #0
 8005c76:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d905      	bls.n	8005c98 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c96:	e007      	b.n	8005ca8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	69b9      	ldr	r1, [r7, #24]
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	1acb      	subs	r3, r1, r3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	bf28      	it	cs
 8005cb6:	4613      	movcs	r3, r2
 8005cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	bf28      	it	cs
 8005cc2:	4613      	movcs	r3, r2
 8005cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	4413      	add	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd2:	68b9      	ldr	r1, [r7, #8]
 8005cd4:	6978      	ldr	r0, [r7, #20]
 8005cd6:	f002 f921 	bl	8007f1c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005cda:	6a3a      	ldr	r2, [r7, #32]
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cde:	4413      	add	r3, r2
 8005ce0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce6:	4413      	add	r3, r2
 8005ce8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	4413      	add	r3, r2
 8005cf8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d101      	bne.n	8005d08 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005d04:	2300      	movs	r3, #0
 8005d06:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005d08:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1b2      	bne.n	8005c7e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005d18:	6a3b      	ldr	r3, [r7, #32]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3728      	adds	r7, #40	@ 0x28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b088      	sub	sp, #32
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	60f8      	str	r0, [r7, #12]
 8005d2a:	60b9      	str	r1, [r7, #8]
 8005d2c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d911      	bls.n	8005d6a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	68b9      	ldr	r1, [r7, #8]
 8005d54:	6938      	ldr	r0, [r7, #16]
 8005d56:	f002 f8e1 	bl	8007f1c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005d5a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	441a      	add	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005d68:	e01f      	b.n	8005daa <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	4413      	add	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	6938      	ldr	r0, [r7, #16]
 8005d7e:	f002 f8cd 	bl	8007f1c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	4413      	add	r3, r2
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6938      	ldr	r0, [r7, #16]
 8005d9c:	f002 f8be 	bl	8007f1c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005da0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	60da      	str	r2, [r3, #12]
}
 8005daa:	bf00      	nop
 8005dac:	3720      	adds	r7, #32
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005db2:	b480      	push	{r7}
 8005db4:	b087      	sub	sp, #28
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d808      	bhi.n	8005de0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1ad2      	subs	r2, r2, r3
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	4413      	add	r3, r2
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	e004      	b.n	8005dea <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	3b01      	subs	r3, #1
 8005de8:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005dea:	697b      	ldr	r3, [r7, #20]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	371c      	adds	r7, #28
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08c      	sub	sp, #48	@ 0x30
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005e04:	4b3e      	ldr	r3, [pc, #248]	@ (8005f00 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005e06:	623b      	str	r3, [r7, #32]
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005e12:	f7ff fed1 	bl	8005bb8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	4413      	add	r3, r2
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	4a37      	ldr	r2, [pc, #220]	@ (8005f00 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005e24:	4413      	add	r3, r2
 8005e26:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005e3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d92b      	bls.n	8005e9c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4293      	cmp	r3, r2
 8005e54:	bf28      	it	cs
 8005e56:	4613      	movcs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e60:	4413      	add	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	6939      	ldr	r1, [r7, #16]
 8005e68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e6a:	f002 f857 	bl	8007f1c <memcpy>
    NumBytesRead += NumBytesRem;
 8005e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	4413      	add	r3, r2
 8005e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005e86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d101      	bne.n	8005e9c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	bf28      	it	cs
 8005eac:	4613      	movcs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d019      	beq.n	8005eea <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebc:	4413      	add	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	6939      	ldr	r1, [r7, #16]
 8005ec4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ec6:	f002 f829 	bl	8007f1c <memcpy>
    NumBytesRead += NumBytesRem;
 8005eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	4413      	add	r3, r2
 8005ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005ee2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ef4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3730      	adds	r7, #48	@ 0x30
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	20012f24 	.word	0x20012f24

08005f04 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08c      	sub	sp, #48	@ 0x30
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005f10:	4b3e      	ldr	r3, [pc, #248]	@ (800600c <SEGGER_RTT_ReadNoLock+0x108>)
 8005f12:	623b      	str	r3, [r7, #32]
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <SEGGER_RTT_ReadNoLock+0x1e>
 8005f1e:	f7ff fe4b 	bl	8005bb8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4613      	mov	r3, r2
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	4413      	add	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	3360      	adds	r3, #96	@ 0x60
 8005f2e:	4a37      	ldr	r2, [pc, #220]	@ (800600c <SEGGER_RTT_ReadNoLock+0x108>)
 8005f30:	4413      	add	r3, r2
 8005f32:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005f44:	2300      	movs	r3, #0
 8005f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005f48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d92b      	bls.n	8005fa8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	bf28      	it	cs
 8005f62:	4613      	movcs	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6c:	4413      	add	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	6939      	ldr	r1, [r7, #16]
 8005f74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f76:	f001 ffd1 	bl	8007f1c <memcpy>
    NumBytesRead += NumBytesRem;
 8005f7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	4413      	add	r3, r2
 8005f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	4413      	add	r3, r2
 8005f88:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005f92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	4413      	add	r3, r2
 8005f98:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d101      	bne.n	8005fa8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	bf28      	it	cs
 8005fb8:	4613      	movcs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d019      	beq.n	8005ff6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc8:	4413      	add	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	6939      	ldr	r1, [r7, #16]
 8005fd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005fd2:	f001 ffa3 	bl	8007f1c <memcpy>
    NumBytesRead += NumBytesRem;
 8005fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	4413      	add	r3, r2
 8005fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005fee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006000:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006004:	4618      	mov	r0, r3
 8006006:	3730      	adds	r7, #48	@ 0x30
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	20012f24 	.word	0x20012f24

08006010 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4613      	mov	r3, r2
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	4413      	add	r3, r2
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	3360      	adds	r3, #96	@ 0x60
 800602c:	4a1f      	ldr	r2, [pc, #124]	@ (80060ac <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800602e:	4413      	add	r3, r2
 8006030:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d029      	beq.n	800608e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800603a:	2b02      	cmp	r3, #2
 800603c:	d82e      	bhi.n	800609c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8006042:	2b01      	cmp	r3, #1
 8006044:	d013      	beq.n	800606e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8006046:	e029      	b.n	800609c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006048:	6978      	ldr	r0, [r7, #20]
 800604a:	f7ff feb2 	bl	8005db2 <_GetAvailWriteSpace>
 800604e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	429a      	cmp	r2, r3
 8006056:	d202      	bcs.n	800605e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8006058:	2300      	movs	r3, #0
 800605a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800605c:	e021      	b.n	80060a2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	69b9      	ldr	r1, [r7, #24]
 8006066:	6978      	ldr	r0, [r7, #20]
 8006068:	f7ff fe5b 	bl	8005d22 <_WriteNoCheck>
    break;
 800606c:	e019      	b.n	80060a2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800606e:	6978      	ldr	r0, [r7, #20]
 8006070:	f7ff fe9f 	bl	8005db2 <_GetAvailWriteSpace>
 8006074:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	4293      	cmp	r3, r2
 800607c:	bf28      	it	cs
 800607e:	4613      	movcs	r3, r2
 8006080:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	69b9      	ldr	r1, [r7, #24]
 8006086:	6978      	ldr	r0, [r7, #20]
 8006088:	f7ff fe4b 	bl	8005d22 <_WriteNoCheck>
    break;
 800608c:	e009      	b.n	80060a2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	69b9      	ldr	r1, [r7, #24]
 8006092:	6978      	ldr	r0, [r7, #20]
 8006094:	f7ff fde8 	bl	8005c68 <_WriteBlocking>
 8006098:	61f8      	str	r0, [r7, #28]
    break;
 800609a:	e002      	b.n	80060a2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800609c:	2300      	movs	r3, #0
 800609e:	61fb      	str	r3, [r7, #28]
    break;
 80060a0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80060a2:	69fb      	ldr	r3, [r7, #28]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3720      	adds	r7, #32
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20012f24 	.word	0x20012f24

080060b0 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80060bc:	4b0e      	ldr	r3, [pc, #56]	@ (80060f8 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80060be:	61fb      	str	r3, [r7, #28]
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <SEGGER_RTT_WriteDownBuffer+0x1e>
 80060ca:	f7ff fd75 	bl	8005bb8 <_DoInit>
  SEGGER_RTT_LOCK();
 80060ce:	f3ef 8311 	mrs	r3, BASEPRI
 80060d2:	f04f 0120 	mov.w	r1, #32
 80060d6:	f381 8811 	msr	BASEPRI, r1
 80060da:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	68b9      	ldr	r1, [r7, #8]
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f7ff ff95 	bl	8006010 <SEGGER_RTT_WriteDownBufferNoLock>
 80060e6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80060ee:	697b      	ldr	r3, [r7, #20]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3720      	adds	r7, #32
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	20012f24 	.word	0x20012f24

080060fc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
 8006108:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800610a:	4b3d      	ldr	r3, [pc, #244]	@ (8006200 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800610c:	61bb      	str	r3, [r7, #24]
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <SEGGER_RTT_AllocUpBuffer+0x20>
 8006118:	f7ff fd4e 	bl	8005bb8 <_DoInit>
  SEGGER_RTT_LOCK();
 800611c:	f3ef 8311 	mrs	r3, BASEPRI
 8006120:	f04f 0120 	mov.w	r1, #32
 8006124:	f381 8811 	msr	BASEPRI, r1
 8006128:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800612a:	4b35      	ldr	r3, [pc, #212]	@ (8006200 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800612c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8006132:	6939      	ldr	r1, [r7, #16]
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	4613      	mov	r3, r2
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	4413      	add	r3, r2
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	440b      	add	r3, r1
 8006142:	3304      	adds	r3, #4
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d008      	beq.n	800615c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	3301      	adds	r3, #1
 800614e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	69fa      	ldr	r2, [r7, #28]
 8006156:	429a      	cmp	r2, r3
 8006158:	dbeb      	blt.n	8006132 <SEGGER_RTT_AllocUpBuffer+0x36>
 800615a:	e000      	b.n	800615e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800615c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	429a      	cmp	r2, r3
 8006166:	da3f      	bge.n	80061e8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006168:	6939      	ldr	r1, [r7, #16]
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	4613      	mov	r3, r2
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	4413      	add	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	440b      	add	r3, r1
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800617c:	6939      	ldr	r1, [r7, #16]
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	4613      	mov	r3, r2
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	4413      	add	r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	440b      	add	r3, r1
 800618c:	3304      	adds	r3, #4
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006192:	6939      	ldr	r1, [r7, #16]
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	4613      	mov	r3, r2
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	4413      	add	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	440b      	add	r3, r1
 80061a0:	3320      	adds	r3, #32
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80061a6:	6939      	ldr	r1, [r7, #16]
 80061a8:	69fa      	ldr	r2, [r7, #28]
 80061aa:	4613      	mov	r3, r2
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	4413      	add	r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	440b      	add	r3, r1
 80061b4:	3328      	adds	r3, #40	@ 0x28
 80061b6:	2200      	movs	r2, #0
 80061b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80061ba:	6939      	ldr	r1, [r7, #16]
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	4613      	mov	r3, r2
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	4413      	add	r3, r2
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	440b      	add	r3, r1
 80061c8:	3324      	adds	r3, #36	@ 0x24
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80061ce:	6939      	ldr	r1, [r7, #16]
 80061d0:	69fa      	ldr	r2, [r7, #28]
 80061d2:	4613      	mov	r3, r2
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	4413      	add	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	440b      	add	r3, r1
 80061dc:	332c      	adds	r3, #44	@ 0x2c
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80061e2:	f3bf 8f5f 	dmb	sy
 80061e6:	e002      	b.n	80061ee <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80061e8:	f04f 33ff 	mov.w	r3, #4294967295
 80061ec:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80061f4:	69fb      	ldr	r3, [r7, #28]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3720      	adds	r7, #32
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20012f24 	.word	0x20012f24

08006204 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006212:	4b33      	ldr	r3, [pc, #204]	@ (80062e0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006220:	f7ff fcca 	bl	8005bb8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006224:	4b2e      	ldr	r3, [pc, #184]	@ (80062e0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8006226:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	461a      	mov	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4293      	cmp	r3, r2
 8006232:	d24d      	bcs.n	80062d0 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8006234:	f3ef 8311 	mrs	r3, BASEPRI
 8006238:	f04f 0120 	mov.w	r1, #32
 800623c:	f381 8811 	msr	BASEPRI, r1
 8006240:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d031      	beq.n	80062ac <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8006248:	6979      	ldr	r1, [r7, #20]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4613      	mov	r3, r2
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	4413      	add	r3, r2
 8006252:	00db      	lsls	r3, r3, #3
 8006254:	440b      	add	r3, r1
 8006256:	3360      	adds	r3, #96	@ 0x60
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800625c:	6979      	ldr	r1, [r7, #20]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4613      	mov	r3, r2
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	4413      	add	r3, r2
 8006266:	00db      	lsls	r3, r3, #3
 8006268:	440b      	add	r3, r1
 800626a:	3364      	adds	r3, #100	@ 0x64
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8006270:	6979      	ldr	r1, [r7, #20]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4613      	mov	r3, r2
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	4413      	add	r3, r2
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	440b      	add	r3, r1
 800627e:	3368      	adds	r3, #104	@ 0x68
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8006284:	6979      	ldr	r1, [r7, #20]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4613      	mov	r3, r2
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	4413      	add	r3, r2
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	440b      	add	r3, r1
 8006292:	3370      	adds	r3, #112	@ 0x70
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8006298:	6979      	ldr	r1, [r7, #20]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4613      	mov	r3, r2
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	4413      	add	r3, r2
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	440b      	add	r3, r1
 80062a6:	336c      	adds	r3, #108	@ 0x6c
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80062ac:	6979      	ldr	r1, [r7, #20]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4613      	mov	r3, r2
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	4413      	add	r3, r2
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	440b      	add	r3, r1
 80062ba:	3374      	adds	r3, #116	@ 0x74
 80062bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062be:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80062c0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80062ca:	2300      	movs	r3, #0
 80062cc:	61fb      	str	r3, [r7, #28]
 80062ce:	e002      	b.n	80062d6 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80062d0:	f04f 33ff 	mov.w	r3, #4294967295
 80062d4:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80062d6:	69fb      	ldr	r3, [r7, #28]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3720      	adds	r7, #32
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20012f24 	.word	0x20012f24

080062e4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80062f4:	e002      	b.n	80062fc <_EncodeStr+0x18>
    Len++;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	3301      	adds	r3, #1
 80062fa:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	4413      	add	r3, r2
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1f6      	bne.n	80062f6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	429a      	cmp	r2, r3
 800630e:	d901      	bls.n	8006314 <_EncodeStr+0x30>
    Len = Limit;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	2bfe      	cmp	r3, #254	@ 0xfe
 8006318:	d806      	bhi.n	8006328 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	60fa      	str	r2, [r7, #12]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]
 8006326:	e011      	b.n	800634c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	60fa      	str	r2, [r7, #12]
 800632e:	22ff      	movs	r2, #255	@ 0xff
 8006330:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	60fa      	str	r2, [r7, #12]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	0a19      	lsrs	r1, r3, #8
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	60fa      	str	r2, [r7, #12]
 8006348:	b2ca      	uxtb	r2, r1
 800634a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006350:	e00a      	b.n	8006368 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	1c53      	adds	r3, r2, #1
 8006356:	60bb      	str	r3, [r7, #8]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	1c59      	adds	r1, r3, #1
 800635c:	60f9      	str	r1, [r7, #12]
 800635e:	7812      	ldrb	r2, [r2, #0]
 8006360:	701a      	strb	r2, [r3, #0]
    n++;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	3301      	adds	r3, #1
 8006366:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	429a      	cmp	r2, r3
 800636e:	d3f0      	bcc.n	8006352 <_EncodeStr+0x6e>
  }
  return pPayload;
 8006370:	68fb      	ldr	r3, [r7, #12]
}
 8006372:	4618      	mov	r0, r3
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3304      	adds	r3, #4
}
 800638a:	4618      	mov	r0, r3
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
	...

08006398 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800639e:	4b35      	ldr	r3, [pc, #212]	@ (8006474 <_HandleIncomingPacket+0xdc>)
 80063a0:	7e1b      	ldrb	r3, [r3, #24]
 80063a2:	4618      	mov	r0, r3
 80063a4:	1cfb      	adds	r3, r7, #3
 80063a6:	2201      	movs	r2, #1
 80063a8:	4619      	mov	r1, r3
 80063aa:	f7ff fdab 	bl	8005f04 <SEGGER_RTT_ReadNoLock>
 80063ae:	4603      	mov	r3, r0
 80063b0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	dd59      	ble.n	800646c <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	2b80      	cmp	r3, #128	@ 0x80
 80063bc:	d032      	beq.n	8006424 <_HandleIncomingPacket+0x8c>
 80063be:	2b80      	cmp	r3, #128	@ 0x80
 80063c0:	dc42      	bgt.n	8006448 <_HandleIncomingPacket+0xb0>
 80063c2:	2b07      	cmp	r3, #7
 80063c4:	dc16      	bgt.n	80063f4 <_HandleIncomingPacket+0x5c>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	dd3e      	ble.n	8006448 <_HandleIncomingPacket+0xb0>
 80063ca:	3b01      	subs	r3, #1
 80063cc:	2b06      	cmp	r3, #6
 80063ce:	d83b      	bhi.n	8006448 <_HandleIncomingPacket+0xb0>
 80063d0:	a201      	add	r2, pc, #4	@ (adr r2, 80063d8 <_HandleIncomingPacket+0x40>)
 80063d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d6:	bf00      	nop
 80063d8:	080063fb 	.word	0x080063fb
 80063dc:	08006401 	.word	0x08006401
 80063e0:	08006407 	.word	0x08006407
 80063e4:	0800640d 	.word	0x0800640d
 80063e8:	08006413 	.word	0x08006413
 80063ec:	08006419 	.word	0x08006419
 80063f0:	0800641f 	.word	0x0800641f
 80063f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80063f6:	d034      	beq.n	8006462 <_HandleIncomingPacket+0xca>
 80063f8:	e026      	b.n	8006448 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80063fa:	f000 ff43 	bl	8007284 <SEGGER_SYSVIEW_Start>
      break;
 80063fe:	e035      	b.n	800646c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006400:	f000 fffc 	bl	80073fc <SEGGER_SYSVIEW_Stop>
      break;
 8006404:	e032      	b.n	800646c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006406:	f001 f9d5 	bl	80077b4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800640a:	e02f      	b.n	800646c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800640c:	f001 f99a 	bl	8007744 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006410:	e02c      	b.n	800646c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006412:	f001 f819 	bl	8007448 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006416:	e029      	b.n	800646c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006418:	f001 fc68 	bl	8007cec <SEGGER_SYSVIEW_SendNumModules>
      break;
 800641c:	e026      	b.n	800646c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800641e:	f001 fc47 	bl	8007cb0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006422:	e023      	b.n	800646c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006424:	4b13      	ldr	r3, [pc, #76]	@ (8006474 <_HandleIncomingPacket+0xdc>)
 8006426:	7e1b      	ldrb	r3, [r3, #24]
 8006428:	4618      	mov	r0, r3
 800642a:	1cfb      	adds	r3, r7, #3
 800642c:	2201      	movs	r2, #1
 800642e:	4619      	mov	r1, r3
 8006430:	f7ff fd68 	bl	8005f04 <SEGGER_RTT_ReadNoLock>
 8006434:	4603      	mov	r3, r0
 8006436:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	dd13      	ble.n	8006466 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	4618      	mov	r0, r3
 8006442:	f001 fbb5 	bl	8007bb0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006446:	e00e      	b.n	8006466 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006448:	78fb      	ldrb	r3, [r7, #3]
 800644a:	b25b      	sxtb	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	da0c      	bge.n	800646a <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006450:	4b08      	ldr	r3, [pc, #32]	@ (8006474 <_HandleIncomingPacket+0xdc>)
 8006452:	7e1b      	ldrb	r3, [r3, #24]
 8006454:	4618      	mov	r0, r3
 8006456:	1cfb      	adds	r3, r7, #3
 8006458:	2201      	movs	r2, #1
 800645a:	4619      	mov	r1, r3
 800645c:	f7ff fd52 	bl	8005f04 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006460:	e003      	b.n	800646a <_HandleIncomingPacket+0xd2>
      break;
 8006462:	bf00      	nop
 8006464:	e002      	b.n	800646c <_HandleIncomingPacket+0xd4>
      break;
 8006466:	bf00      	nop
 8006468:	e000      	b.n	800646c <_HandleIncomingPacket+0xd4>
      break;
 800646a:	bf00      	nop
    }
  }
}
 800646c:	bf00      	nop
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	200143e4 	.word	0x200143e4

08006478 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006478:	b580      	push	{r7, lr}
 800647a:	b08c      	sub	sp, #48	@ 0x30
 800647c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800647e:	2301      	movs	r3, #1
 8006480:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006482:	1d3b      	adds	r3, r7, #4
 8006484:	3301      	adds	r3, #1
 8006486:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800648c:	4b32      	ldr	r3, [pc, #200]	@ (8006558 <_TrySendOverflowPacket+0xe0>)
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006492:	e00b      	b.n	80064ac <_TrySendOverflowPacket+0x34>
 8006494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006496:	b2da      	uxtb	r2, r3
 8006498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649a:	1c59      	adds	r1, r3, #1
 800649c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800649e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a8:	09db      	lsrs	r3, r3, #7
 80064aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80064b0:	d8f0      	bhi.n	8006494 <_TrySendOverflowPacket+0x1c>
 80064b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80064c2:	4b26      	ldr	r3, [pc, #152]	@ (800655c <_TrySendOverflowPacket+0xe4>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80064c8:	4b23      	ldr	r3, [pc, #140]	@ (8006558 <_TrySendOverflowPacket+0xe0>)
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	623b      	str	r3, [r7, #32]
 80064da:	e00b      	b.n	80064f4 <_TrySendOverflowPacket+0x7c>
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e2:	1c59      	adds	r1, r3, #1
 80064e4:	6279      	str	r1, [r7, #36]	@ 0x24
 80064e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	09db      	lsrs	r3, r3, #7
 80064f2:	623b      	str	r3, [r7, #32]
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80064f8:	d8f0      	bhi.n	80064dc <_TrySendOverflowPacket+0x64>
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8006500:	6a3a      	ldr	r2, [r7, #32]
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006508:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800650a:	4b13      	ldr	r3, [pc, #76]	@ (8006558 <_TrySendOverflowPacket+0xe0>)
 800650c:	785b      	ldrb	r3, [r3, #1]
 800650e:	4618      	mov	r0, r3
 8006510:	1d3b      	adds	r3, r7, #4
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	461a      	mov	r2, r3
 8006518:	1d3b      	adds	r3, r7, #4
 800651a:	4619      	mov	r1, r3
 800651c:	f7f9 fe58 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006520:	4603      	mov	r3, r0
 8006522:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8006524:	f7ff fabe 	bl	8005aa4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800652e:	4a0a      	ldr	r2, [pc, #40]	@ (8006558 <_TrySendOverflowPacket+0xe0>)
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006534:	4b08      	ldr	r3, [pc, #32]	@ (8006558 <_TrySendOverflowPacket+0xe0>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	3b01      	subs	r3, #1
 800653a:	b2da      	uxtb	r2, r3
 800653c:	4b06      	ldr	r3, [pc, #24]	@ (8006558 <_TrySendOverflowPacket+0xe0>)
 800653e:	701a      	strb	r2, [r3, #0]
 8006540:	e004      	b.n	800654c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006542:	4b05      	ldr	r3, [pc, #20]	@ (8006558 <_TrySendOverflowPacket+0xe0>)
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	3301      	adds	r3, #1
 8006548:	4a03      	ldr	r2, [pc, #12]	@ (8006558 <_TrySendOverflowPacket+0xe0>)
 800654a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800654c:	693b      	ldr	r3, [r7, #16]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3730      	adds	r7, #48	@ 0x30
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	200143e4 	.word	0x200143e4
 800655c:	e0001004 	.word	0xe0001004

08006560 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006560:	b580      	push	{r7, lr}
 8006562:	b08a      	sub	sp, #40	@ 0x28
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800656c:	4b6d      	ldr	r3, [pc, #436]	@ (8006724 <_SendPacket+0x1c4>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d010      	beq.n	8006596 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006574:	4b6b      	ldr	r3, [pc, #428]	@ (8006724 <_SendPacket+0x1c4>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 80a5 	beq.w	80066c8 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800657e:	4b69      	ldr	r3, [pc, #420]	@ (8006724 <_SendPacket+0x1c4>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d109      	bne.n	800659a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006586:	f7ff ff77 	bl	8006478 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800658a:	4b66      	ldr	r3, [pc, #408]	@ (8006724 <_SendPacket+0x1c4>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	2b01      	cmp	r3, #1
 8006590:	f040 809c 	bne.w	80066cc <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8006594:	e001      	b.n	800659a <_SendPacket+0x3a>
    goto Send;
 8006596:	bf00      	nop
 8006598:	e000      	b.n	800659c <_SendPacket+0x3c>
Send:
 800659a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b1f      	cmp	r3, #31
 80065a0:	d809      	bhi.n	80065b6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80065a2:	4b60      	ldr	r3, [pc, #384]	@ (8006724 <_SendPacket+0x1c4>)
 80065a4:	69da      	ldr	r2, [r3, #28]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	fa22 f303 	lsr.w	r3, r2, r3
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f040 808d 	bne.w	80066d0 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b17      	cmp	r3, #23
 80065ba:	d807      	bhi.n	80065cc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3b01      	subs	r3, #1
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	e03d      	b.n	8006648 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80065d8:	d912      	bls.n	8006600 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	09da      	lsrs	r2, r3, #7
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	3a01      	subs	r2, #1
 80065f2:	60fa      	str	r2, [r7, #12]
 80065f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	e006      	b.n	800660e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	3b01      	subs	r3, #1
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	b2da      	uxtb	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b7f      	cmp	r3, #127	@ 0x7f
 8006612:	d912      	bls.n	800663a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	09da      	lsrs	r2, r3, #7
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3b01      	subs	r3, #1
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	b2db      	uxtb	r3, r3
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	3a01      	subs	r2, #1
 800662c:	60fa      	str	r2, [r7, #12]
 800662e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006632:	b2da      	uxtb	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	e006      	b.n	8006648 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3b01      	subs	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	b2da      	uxtb	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006648:	4b37      	ldr	r3, [pc, #220]	@ (8006728 <_SendPacket+0x1c8>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800664e:	4b35      	ldr	r3, [pc, #212]	@ (8006724 <_SendPacket+0x1c4>)
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	627b      	str	r3, [r7, #36]	@ 0x24
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	623b      	str	r3, [r7, #32]
 8006660:	e00b      	b.n	800667a <_SendPacket+0x11a>
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	b2da      	uxtb	r2, r3
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	1c59      	adds	r1, r3, #1
 800666a:	6279      	str	r1, [r7, #36]	@ 0x24
 800666c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	09db      	lsrs	r3, r3, #7
 8006678:	623b      	str	r3, [r7, #32]
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	2b7f      	cmp	r3, #127	@ 0x7f
 800667e:	d8f0      	bhi.n	8006662 <_SendPacket+0x102>
 8006680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	627a      	str	r2, [r7, #36]	@ 0x24
 8006686:	6a3a      	ldr	r2, [r7, #32]
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	701a      	strb	r2, [r3, #0]
 800668c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006690:	4b24      	ldr	r3, [pc, #144]	@ (8006724 <_SendPacket+0x1c4>)
 8006692:	785b      	ldrb	r3, [r3, #1]
 8006694:	4618      	mov	r0, r3
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	461a      	mov	r2, r3
 800669e:	68f9      	ldr	r1, [r7, #12]
 80066a0:	f7f9 fd96 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80066a4:	4603      	mov	r3, r0
 80066a6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80066a8:	f7ff f9fc 	bl	8005aa4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80066b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006724 <_SendPacket+0x1c4>)
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	60d3      	str	r3, [r2, #12]
 80066b8:	e00b      	b.n	80066d2 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80066ba:	4b1a      	ldr	r3, [pc, #104]	@ (8006724 <_SendPacket+0x1c4>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	3301      	adds	r3, #1
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	4b18      	ldr	r3, [pc, #96]	@ (8006724 <_SendPacket+0x1c4>)
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	e004      	b.n	80066d2 <_SendPacket+0x172>
    goto SendDone;
 80066c8:	bf00      	nop
 80066ca:	e002      	b.n	80066d2 <_SendPacket+0x172>
      goto SendDone;
 80066cc:	bf00      	nop
 80066ce:	e000      	b.n	80066d2 <_SendPacket+0x172>
      goto SendDone;
 80066d0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80066d2:	4b14      	ldr	r3, [pc, #80]	@ (8006724 <_SendPacket+0x1c4>)
 80066d4:	7e1b      	ldrb	r3, [r3, #24]
 80066d6:	4619      	mov	r1, r3
 80066d8:	4a14      	ldr	r2, [pc, #80]	@ (800672c <_SendPacket+0x1cc>)
 80066da:	460b      	mov	r3, r1
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	440b      	add	r3, r1
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	4413      	add	r3, r2
 80066e4:	336c      	adds	r3, #108	@ 0x6c
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006724 <_SendPacket+0x1c4>)
 80066ea:	7e1b      	ldrb	r3, [r3, #24]
 80066ec:	4618      	mov	r0, r3
 80066ee:	490f      	ldr	r1, [pc, #60]	@ (800672c <_SendPacket+0x1cc>)
 80066f0:	4603      	mov	r3, r0
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	4403      	add	r3, r0
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	440b      	add	r3, r1
 80066fa:	3370      	adds	r3, #112	@ 0x70
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d00b      	beq.n	800671a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006702:	4b08      	ldr	r3, [pc, #32]	@ (8006724 <_SendPacket+0x1c4>)
 8006704:	789b      	ldrb	r3, [r3, #2]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d107      	bne.n	800671a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800670a:	4b06      	ldr	r3, [pc, #24]	@ (8006724 <_SendPacket+0x1c4>)
 800670c:	2201      	movs	r2, #1
 800670e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006710:	f7ff fe42 	bl	8006398 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006714:	4b03      	ldr	r3, [pc, #12]	@ (8006724 <_SendPacket+0x1c4>)
 8006716:	2200      	movs	r2, #0
 8006718:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800671a:	bf00      	nop
 800671c:	3728      	adds	r7, #40	@ 0x28
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	200143e4 	.word	0x200143e4
 8006728:	e0001004 	.word	0xe0001004
 800672c:	20012f24 	.word	0x20012f24

08006730 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006730:	b580      	push	{r7, lr}
 8006732:	b08a      	sub	sp, #40	@ 0x28
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	3301      	adds	r3, #1
 8006746:	2b80      	cmp	r3, #128	@ 0x80
 8006748:	d80a      	bhi.n	8006760 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	1c59      	adds	r1, r3, #1
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	6051      	str	r1, [r2, #4]
 8006754:	78fa      	ldrb	r2, [r7, #3]
 8006756:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b80      	cmp	r3, #128	@ 0x80
 8006766:	d15a      	bne.n	800681e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	627b      	str	r3, [r7, #36]	@ 0x24
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	623b      	str	r3, [r7, #32]
 8006788:	e00b      	b.n	80067a2 <_StoreChar+0x72>
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	b2da      	uxtb	r2, r3
 800678e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006790:	1c59      	adds	r1, r3, #1
 8006792:	6279      	str	r1, [r7, #36]	@ 0x24
 8006794:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006798:	b2d2      	uxtb	r2, r2
 800679a:	701a      	strb	r2, [r3, #0]
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	09db      	lsrs	r3, r3, #7
 80067a0:	623b      	str	r3, [r7, #32]
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80067a6:	d8f0      	bhi.n	800678a <_StoreChar+0x5a>
 80067a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80067ae:	6a3a      	ldr	r2, [r7, #32]
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	61fb      	str	r3, [r7, #28]
 80067bc:	2300      	movs	r3, #0
 80067be:	61bb      	str	r3, [r7, #24]
 80067c0:	e00b      	b.n	80067da <_StoreChar+0xaa>
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	1c59      	adds	r1, r3, #1
 80067ca:	61f9      	str	r1, [r7, #28]
 80067cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	701a      	strb	r2, [r3, #0]
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	09db      	lsrs	r3, r3, #7
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80067de:	d8f0      	bhi.n	80067c2 <_StoreChar+0x92>
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	61fa      	str	r2, [r7, #28]
 80067e6:	69ba      	ldr	r2, [r7, #24]
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	221a      	movs	r2, #26
 80067f6:	6939      	ldr	r1, [r7, #16]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff feb1 	bl	8006560 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff fdbb 	bl	800637e <_PreparePacket>
 8006808:	4602      	mov	r2, r0
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	611a      	str	r2, [r3, #16]
  }
}
 800681e:	bf00      	nop
 8006820:	3728      	adds	r7, #40	@ 0x28
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	@ 0x28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800683a:	2301      	movs	r3, #1
 800683c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800683e:	2301      	movs	r3, #1
 8006840:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006842:	e007      	b.n	8006854 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006844:	6a3a      	ldr	r2, [r7, #32]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	fbb2 f3f3 	udiv	r3, r2, r3
 800684c:	623b      	str	r3, [r7, #32]
    Width++;
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	3301      	adds	r3, #1
 8006852:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006854:	6a3a      	ldr	r2, [r7, #32]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	429a      	cmp	r2, r3
 800685a:	d2f3      	bcs.n	8006844 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	429a      	cmp	r2, r3
 8006862:	d901      	bls.n	8006868 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d000      	beq.n	8006874 <_PrintUnsigned+0x4c>
 8006872:	e01f      	b.n	80068b4 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8006874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006876:	2b00      	cmp	r3, #0
 8006878:	d01c      	beq.n	80068b4 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800687a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <_PrintUnsigned+0x68>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d102      	bne.n	8006890 <_PrintUnsigned+0x68>
        c = '0';
 800688a:	2330      	movs	r3, #48	@ 0x30
 800688c:	76fb      	strb	r3, [r7, #27]
 800688e:	e001      	b.n	8006894 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8006890:	2320      	movs	r3, #32
 8006892:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006894:	e007      	b.n	80068a6 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8006896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006898:	3b01      	subs	r3, #1
 800689a:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 800689c:	7efb      	ldrb	r3, [r7, #27]
 800689e:	4619      	mov	r1, r3
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7ff ff45 	bl	8006730 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <_PrintUnsigned+0x8c>
 80068ac:	69fa      	ldr	r2, [r7, #28]
 80068ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d3f0      	bcc.n	8006896 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d903      	bls.n	80068c2 <_PrintUnsigned+0x9a>
      NumDigits--;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	3b01      	subs	r3, #1
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	e009      	b.n	80068d6 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ca:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d200      	bcs.n	80068d6 <_PrintUnsigned+0xae>
        break;
 80068d4:	e005      	b.n	80068e2 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	fb02 f303 	mul.w	r3, r2, r3
 80068de:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80068e0:	e7e8      	b.n	80068b4 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ea:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068f0:	fb02 f303 	mul.w	r3, r2, r3
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80068fa:	4a15      	ldr	r2, [pc, #84]	@ (8006950 <_PrintUnsigned+0x128>)
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	4413      	add	r3, r2
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	4619      	mov	r1, r3
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f7ff ff13 	bl	8006730 <_StoreChar>
    Digit /= Base;
 800690a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006912:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8006914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e3      	bne.n	80068e2 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800691a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d011      	beq.n	8006948 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8006924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00e      	beq.n	8006948 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800692a:	e006      	b.n	800693a <_PrintUnsigned+0x112>
        FieldWidth--;
 800692c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692e:	3b01      	subs	r3, #1
 8006930:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8006932:	2120      	movs	r1, #32
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f7ff fefb 	bl	8006730 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800693a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <_PrintUnsigned+0x120>
 8006940:	69fa      	ldr	r2, [r7, #28]
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	429a      	cmp	r2, r3
 8006946:	d3f1      	bcc.n	800692c <_PrintUnsigned+0x104>
      }
    }
  }
}
 8006948:	bf00      	nop
 800694a:	3728      	adds	r7, #40	@ 0x28
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	080080a0 	.word	0x080080a0

08006954 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af02      	add	r7, sp, #8
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	bfb8      	it	lt
 8006968:	425b      	neglt	r3, r3
 800696a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800696c:	2301      	movs	r3, #1
 800696e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006970:	e007      	b.n	8006982 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	fb92 f3f3 	sdiv	r3, r2, r3
 800697a:	613b      	str	r3, [r7, #16]
    Width++;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	3301      	adds	r3, #1
 8006980:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	429a      	cmp	r2, r3
 8006988:	daf3      	bge.n	8006972 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	429a      	cmp	r2, r3
 8006990:	d901      	bls.n	8006996 <_PrintInt+0x42>
    Width = NumDigits;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <_PrintInt+0x5e>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	db04      	blt.n	80069ac <_PrintInt+0x58>
 80069a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <_PrintInt+0x5e>
    FieldWidth--;
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <_PrintInt+0x6e>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d016      	beq.n	80069f0 <_PrintInt+0x9c>
 80069c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d111      	bne.n	80069f0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00e      	beq.n	80069f0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80069d2:	e006      	b.n	80069e2 <_PrintInt+0x8e>
        FieldWidth--;
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80069da:	2120      	movs	r1, #32
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f7ff fea7 	bl	8006730 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d003      	beq.n	80069f0 <_PrintInt+0x9c>
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d3f1      	bcc.n	80069d4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	da07      	bge.n	8006a06 <_PrintInt+0xb2>
    v = -v;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	425b      	negs	r3, r3
 80069fa:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80069fc:	212d      	movs	r1, #45	@ 0x2d
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f7ff fe96 	bl	8006730 <_StoreChar>
 8006a04:	e008      	b.n	8006a18 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d003      	beq.n	8006a18 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006a10:	212b      	movs	r1, #43	@ 0x2b
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f7ff fe8c 	bl	8006730 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d019      	beq.n	8006a56 <_PrintInt+0x102>
 8006a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d114      	bne.n	8006a56 <_PrintInt+0x102>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d111      	bne.n	8006a56 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00e      	beq.n	8006a56 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006a38:	e006      	b.n	8006a48 <_PrintInt+0xf4>
        FieldWidth--;
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006a40:	2130      	movs	r1, #48	@ 0x30
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f7ff fe74 	bl	8006730 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <_PrintInt+0x102>
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d3f1      	bcc.n	8006a3a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006a56:	68b9      	ldr	r1, [r7, #8]
 8006a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5a:	9301      	str	r3, [sp, #4]
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f7ff fedf 	bl	8006828 <_PrintUnsigned>
}
 8006a6a:	bf00      	nop
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
	...

08006a74 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b098      	sub	sp, #96	@ 0x60
 8006a78:	af02      	add	r7, sp, #8
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a80:	f3ef 8311 	mrs	r3, BASEPRI
 8006a84:	f04f 0120 	mov.w	r1, #32
 8006a88:	f381 8811 	msr	BASEPRI, r1
 8006a8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a8e:	48b7      	ldr	r0, [pc, #732]	@ (8006d6c <_VPrintTarget+0x2f8>)
 8006a90:	f7ff fc75 	bl	800637e <_PreparePacket>
 8006a94:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006a96:	4bb5      	ldr	r3, [pc, #724]	@ (8006d6c <_VPrintTarget+0x2f8>)
 8006a98:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006aba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 8183 	beq.w	8006dca <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006ac4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ac8:	2b25      	cmp	r3, #37	@ 0x25
 8006aca:	f040 8170 	bne.w	8006dae <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8006ade:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ae2:	3b23      	subs	r3, #35	@ 0x23
 8006ae4:	2b0d      	cmp	r3, #13
 8006ae6:	d83f      	bhi.n	8006b68 <_VPrintTarget+0xf4>
 8006ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8006af0 <_VPrintTarget+0x7c>)
 8006aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aee:	bf00      	nop
 8006af0:	08006b59 	.word	0x08006b59
 8006af4:	08006b69 	.word	0x08006b69
 8006af8:	08006b69 	.word	0x08006b69
 8006afc:	08006b69 	.word	0x08006b69
 8006b00:	08006b69 	.word	0x08006b69
 8006b04:	08006b69 	.word	0x08006b69
 8006b08:	08006b69 	.word	0x08006b69
 8006b0c:	08006b69 	.word	0x08006b69
 8006b10:	08006b49 	.word	0x08006b49
 8006b14:	08006b69 	.word	0x08006b69
 8006b18:	08006b29 	.word	0x08006b29
 8006b1c:	08006b69 	.word	0x08006b69
 8006b20:	08006b69 	.word	0x08006b69
 8006b24:	08006b39 	.word	0x08006b39
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006b28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b2a:	f043 0301 	orr.w	r3, r3, #1
 8006b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3301      	adds	r3, #1
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	e01a      	b.n	8006b6e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006b38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b3a:	f043 0302 	orr.w	r3, r3, #2
 8006b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3301      	adds	r3, #1
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	e012      	b.n	8006b6e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006b48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b4a:	f043 0304 	orr.w	r3, r3, #4
 8006b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3301      	adds	r3, #1
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	e00a      	b.n	8006b6e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006b58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b5a:	f043 0308 	orr.w	r3, r3, #8
 8006b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3301      	adds	r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	e002      	b.n	8006b6e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b6c:	bf00      	nop
        }
      } while (v);
 8006b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1b0      	bne.n	8006ad6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006b74:	2300      	movs	r3, #0
 8006b76:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006b80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b84:	2b2f      	cmp	r3, #47	@ 0x2f
 8006b86:	d912      	bls.n	8006bae <_VPrintTarget+0x13a>
 8006b88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b8c:	2b39      	cmp	r3, #57	@ 0x39
 8006b8e:	d80e      	bhi.n	8006bae <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3301      	adds	r3, #1
 8006b94:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006b96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ba6:	4413      	add	r3, r2
 8006ba8:	3b30      	subs	r3, #48	@ 0x30
 8006baa:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006bac:	e7e4      	b.n	8006b78 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8006bba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006bbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bc0:	d11d      	bne.n	8006bfe <_VPrintTarget+0x18a>
        sFormat++;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006bd0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006bd4:	2b2f      	cmp	r3, #47	@ 0x2f
 8006bd6:	d912      	bls.n	8006bfe <_VPrintTarget+0x18a>
 8006bd8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006bdc:	2b39      	cmp	r3, #57	@ 0x39
 8006bde:	d80e      	bhi.n	8006bfe <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3301      	adds	r3, #1
 8006be4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006be6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006be8:	4613      	mov	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006bf6:	4413      	add	r3, r2
 8006bf8:	3b30      	subs	r3, #48	@ 0x30
 8006bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8006bfc:	e7e4      	b.n	8006bc8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006c06:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c0a:	2b6c      	cmp	r3, #108	@ 0x6c
 8006c0c:	d003      	beq.n	8006c16 <_VPrintTarget+0x1a2>
 8006c0e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c12:	2b68      	cmp	r3, #104	@ 0x68
 8006c14:	d107      	bne.n	8006c26 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3301      	adds	r3, #1
 8006c22:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006c24:	e7ef      	b.n	8006c06 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006c26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c2a:	2b25      	cmp	r3, #37	@ 0x25
 8006c2c:	f000 80b3 	beq.w	8006d96 <_VPrintTarget+0x322>
 8006c30:	2b25      	cmp	r3, #37	@ 0x25
 8006c32:	f2c0 80b7 	blt.w	8006da4 <_VPrintTarget+0x330>
 8006c36:	2b78      	cmp	r3, #120	@ 0x78
 8006c38:	f300 80b4 	bgt.w	8006da4 <_VPrintTarget+0x330>
 8006c3c:	2b58      	cmp	r3, #88	@ 0x58
 8006c3e:	f2c0 80b1 	blt.w	8006da4 <_VPrintTarget+0x330>
 8006c42:	3b58      	subs	r3, #88	@ 0x58
 8006c44:	2b20      	cmp	r3, #32
 8006c46:	f200 80ad 	bhi.w	8006da4 <_VPrintTarget+0x330>
 8006c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c50 <_VPrintTarget+0x1dc>)
 8006c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c50:	08006d47 	.word	0x08006d47
 8006c54:	08006da5 	.word	0x08006da5
 8006c58:	08006da5 	.word	0x08006da5
 8006c5c:	08006da5 	.word	0x08006da5
 8006c60:	08006da5 	.word	0x08006da5
 8006c64:	08006da5 	.word	0x08006da5
 8006c68:	08006da5 	.word	0x08006da5
 8006c6c:	08006da5 	.word	0x08006da5
 8006c70:	08006da5 	.word	0x08006da5
 8006c74:	08006da5 	.word	0x08006da5
 8006c78:	08006da5 	.word	0x08006da5
 8006c7c:	08006cd5 	.word	0x08006cd5
 8006c80:	08006cfb 	.word	0x08006cfb
 8006c84:	08006da5 	.word	0x08006da5
 8006c88:	08006da5 	.word	0x08006da5
 8006c8c:	08006da5 	.word	0x08006da5
 8006c90:	08006da5 	.word	0x08006da5
 8006c94:	08006da5 	.word	0x08006da5
 8006c98:	08006da5 	.word	0x08006da5
 8006c9c:	08006da5 	.word	0x08006da5
 8006ca0:	08006da5 	.word	0x08006da5
 8006ca4:	08006da5 	.word	0x08006da5
 8006ca8:	08006da5 	.word	0x08006da5
 8006cac:	08006da5 	.word	0x08006da5
 8006cb0:	08006d71 	.word	0x08006d71
 8006cb4:	08006da5 	.word	0x08006da5
 8006cb8:	08006da5 	.word	0x08006da5
 8006cbc:	08006da5 	.word	0x08006da5
 8006cc0:	08006da5 	.word	0x08006da5
 8006cc4:	08006d21 	.word	0x08006d21
 8006cc8:	08006da5 	.word	0x08006da5
 8006ccc:	08006da5 	.word	0x08006da5
 8006cd0:	08006d47 	.word	0x08006d47
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	1d19      	adds	r1, r3, #4
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	6011      	str	r1, [r2, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006ce2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ce4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8006ce8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8006cec:	f107 0314 	add.w	r3, r7, #20
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff fd1c 	bl	8006730 <_StoreChar>
        break;
 8006cf8:	e055      	b.n	8006da6 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	1d19      	adds	r1, r3, #4
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	6011      	str	r1, [r2, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006d08:	f107 0014 	add.w	r0, r7, #20
 8006d0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d0e:	9301      	str	r3, [sp, #4]
 8006d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d16:	220a      	movs	r2, #10
 8006d18:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d1a:	f7ff fe1b 	bl	8006954 <_PrintInt>
        break;
 8006d1e:	e042      	b.n	8006da6 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	1d19      	adds	r1, r3, #4
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	6011      	str	r1, [r2, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006d2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d30:	f107 0014 	add.w	r0, r7, #20
 8006d34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d36:	9301      	str	r3, [sp, #4]
 8006d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d3e:	220a      	movs	r2, #10
 8006d40:	f7ff fd72 	bl	8006828 <_PrintUnsigned>
        break;
 8006d44:	e02f      	b.n	8006da6 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	1d19      	adds	r1, r3, #4
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	6011      	str	r1, [r2, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006d54:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d56:	f107 0014 	add.w	r0, r7, #20
 8006d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d64:	2210      	movs	r2, #16
 8006d66:	f7ff fd5f 	bl	8006828 <_PrintUnsigned>
        break;
 8006d6a:	e01c      	b.n	8006da6 <_VPrintTarget+0x332>
 8006d6c:	20014414 	.word	0x20014414
      case 'p':
        v = va_arg(*pParamList, int);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	1d19      	adds	r1, r3, #4
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	6011      	str	r1, [r2, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006d7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d80:	f107 0014 	add.w	r0, r7, #20
 8006d84:	2300      	movs	r3, #0
 8006d86:	9301      	str	r3, [sp, #4]
 8006d88:	2308      	movs	r3, #8
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	2308      	movs	r3, #8
 8006d8e:	2210      	movs	r2, #16
 8006d90:	f7ff fd4a 	bl	8006828 <_PrintUnsigned>
        break;
 8006d94:	e007      	b.n	8006da6 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006d96:	f107 0314 	add.w	r3, r7, #20
 8006d9a:	2125      	movs	r1, #37	@ 0x25
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7ff fcc7 	bl	8006730 <_StoreChar>
        break;
 8006da2:	e000      	b.n	8006da6 <_VPrintTarget+0x332>
      default:
        break;
 8006da4:	bf00      	nop
      }
      sFormat++;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3301      	adds	r3, #1
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	e007      	b.n	8006dbe <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006dae:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006db2:	f107 0314 	add.w	r3, r7, #20
 8006db6:	4611      	mov	r1, r2
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff fcb9 	bl	8006730 <_StoreChar>
    }
  } while (*sFormat);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f47f ae72 	bne.w	8006aac <_VPrintTarget+0x38>
 8006dc8:	e000      	b.n	8006dcc <_VPrintTarget+0x358>
      break;
 8006dca:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d041      	beq.n	8006e56 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006de2:	e00b      	b.n	8006dfc <_VPrintTarget+0x388>
 8006de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dea:	1c59      	adds	r1, r3, #1
 8006dec:	6439      	str	r1, [r7, #64]	@ 0x40
 8006dee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	701a      	strb	r2, [r3, #0]
 8006df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df8:	09db      	lsrs	r3, r3, #7
 8006dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e00:	d8f0      	bhi.n	8006de4 <_VPrintTarget+0x370>
 8006e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e10:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e16:	2300      	movs	r3, #0
 8006e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e1a:	e00b      	b.n	8006e34 <_VPrintTarget+0x3c0>
 8006e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e22:	1c59      	adds	r1, r3, #1
 8006e24:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e30:	09db      	lsrs	r3, r3, #7
 8006e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e36:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e38:	d8f0      	bhi.n	8006e1c <_VPrintTarget+0x3a8>
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006e40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e48:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	69b9      	ldr	r1, [r7, #24]
 8006e4e:	221a      	movs	r2, #26
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7ff fb85 	bl	8006560 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e58:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006e5c:	bf00      	nop
 8006e5e:	3758      	adds	r7, #88	@ 0x58
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006e72:	2300      	movs	r3, #0
 8006e74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006e78:	4917      	ldr	r1, [pc, #92]	@ (8006ed8 <SEGGER_SYSVIEW_Init+0x74>)
 8006e7a:	4818      	ldr	r0, [pc, #96]	@ (8006edc <SEGGER_SYSVIEW_Init+0x78>)
 8006e7c:	f7ff f93e 	bl	80060fc <SEGGER_RTT_AllocUpBuffer>
 8006e80:	4603      	mov	r3, r0
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	4b16      	ldr	r3, [pc, #88]	@ (8006ee0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006e86:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006e88:	4b15      	ldr	r3, [pc, #84]	@ (8006ee0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006e8a:	785a      	ldrb	r2, [r3, #1]
 8006e8c:	4b14      	ldr	r3, [pc, #80]	@ (8006ee0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006e8e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006e90:	4b13      	ldr	r3, [pc, #76]	@ (8006ee0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006e92:	7e1b      	ldrb	r3, [r3, #24]
 8006e94:	4618      	mov	r0, r3
 8006e96:	2300      	movs	r3, #0
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	2308      	movs	r3, #8
 8006e9c:	4a11      	ldr	r2, [pc, #68]	@ (8006ee4 <SEGGER_SYSVIEW_Init+0x80>)
 8006e9e:	490f      	ldr	r1, [pc, #60]	@ (8006edc <SEGGER_SYSVIEW_Init+0x78>)
 8006ea0:	f7ff f9b0 	bl	8006204 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee8 <SEGGER_SYSVIEW_Init+0x84>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a0c      	ldr	r2, [pc, #48]	@ (8006ee0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006eb0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8006ee0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006eb8:	4a09      	ldr	r2, [pc, #36]	@ (8006ee0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006ebe:	4a08      	ldr	r2, [pc, #32]	@ (8006ee0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006ec4:	4a06      	ldr	r2, [pc, #24]	@ (8006ee0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006eca:	4b05      	ldr	r3, [pc, #20]	@ (8006ee0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006ed0:	bf00      	nop
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	200133dc 	.word	0x200133dc
 8006edc:	08008068 	.word	0x08008068
 8006ee0:	200143e4 	.word	0x200143e4
 8006ee4:	200143dc 	.word	0x200143dc
 8006ee8:	e0001004 	.word	0xe0001004

08006eec <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006ef4:	4a04      	ldr	r2, [pc, #16]	@ (8006f08 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6113      	str	r3, [r2, #16]
}
 8006efa:	bf00      	nop
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	200143e4 	.word	0x200143e4

08006f0c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f14:	f3ef 8311 	mrs	r3, BASEPRI
 8006f18:	f04f 0120 	mov.w	r1, #32
 8006f1c:	f381 8811 	msr	BASEPRI, r1
 8006f20:	60fb      	str	r3, [r7, #12]
 8006f22:	4808      	ldr	r0, [pc, #32]	@ (8006f44 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006f24:	f7ff fa2b 	bl	800637e <_PreparePacket>
 8006f28:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	68b8      	ldr	r0, [r7, #8]
 8006f30:	f7ff fb16 	bl	8006560 <_SendPacket>
  RECORD_END();
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f383 8811 	msr	BASEPRI, r3
}
 8006f3a:	bf00      	nop
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20014414 	.word	0x20014414

08006f48 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b088      	sub	sp, #32
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f52:	f3ef 8311 	mrs	r3, BASEPRI
 8006f56:	f04f 0120 	mov.w	r1, #32
 8006f5a:	f381 8811 	msr	BASEPRI, r1
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	4816      	ldr	r0, [pc, #88]	@ (8006fbc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006f62:	f7ff fa0c 	bl	800637e <_PreparePacket>
 8006f66:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	61bb      	str	r3, [r7, #24]
 8006f74:	e00b      	b.n	8006f8e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	1c59      	adds	r1, r3, #1
 8006f7e:	61f9      	str	r1, [r7, #28]
 8006f80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	09db      	lsrs	r3, r3, #7
 8006f8c:	61bb      	str	r3, [r7, #24]
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f92:	d8f0      	bhi.n	8006f76 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	61fa      	str	r2, [r7, #28]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	b2d2      	uxtb	r2, r2
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	68f9      	ldr	r1, [r7, #12]
 8006fa8:	6938      	ldr	r0, [r7, #16]
 8006faa:	f7ff fad9 	bl	8006560 <_SendPacket>
  RECORD_END();
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f383 8811 	msr	BASEPRI, r3
}
 8006fb4:	bf00      	nop
 8006fb6:	3720      	adds	r7, #32
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	20014414 	.word	0x20014414

08006fc0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08c      	sub	sp, #48	@ 0x30
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006fcc:	f3ef 8311 	mrs	r3, BASEPRI
 8006fd0:	f04f 0120 	mov.w	r1, #32
 8006fd4:	f381 8811 	msr	BASEPRI, r1
 8006fd8:	61fb      	str	r3, [r7, #28]
 8006fda:	4825      	ldr	r0, [pc, #148]	@ (8007070 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006fdc:	f7ff f9cf 	bl	800637e <_PreparePacket>
 8006fe0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fee:	e00b      	b.n	8007008 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff6:	1c59      	adds	r1, r3, #1
 8006ff8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006ffa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ffe:	b2d2      	uxtb	r2, r2
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007004:	09db      	lsrs	r3, r3, #7
 8007006:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700a:	2b7f      	cmp	r3, #127	@ 0x7f
 800700c:	d8f0      	bhi.n	8006ff0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800700e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007014:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800701c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	627b      	str	r3, [r7, #36]	@ 0x24
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	623b      	str	r3, [r7, #32]
 8007026:	e00b      	b.n	8007040 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	b2da      	uxtb	r2, r3
 800702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702e:	1c59      	adds	r1, r3, #1
 8007030:	6279      	str	r1, [r7, #36]	@ 0x24
 8007032:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	09db      	lsrs	r3, r3, #7
 800703e:	623b      	str	r3, [r7, #32]
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	2b7f      	cmp	r3, #127	@ 0x7f
 8007044:	d8f0      	bhi.n	8007028 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	627a      	str	r2, [r7, #36]	@ 0x24
 800704c:	6a3a      	ldr	r2, [r7, #32]
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007054:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	6979      	ldr	r1, [r7, #20]
 800705a:	69b8      	ldr	r0, [r7, #24]
 800705c:	f7ff fa80 	bl	8006560 <_SendPacket>
  RECORD_END();
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	f383 8811 	msr	BASEPRI, r3
}
 8007066:	bf00      	nop
 8007068:	3730      	adds	r7, #48	@ 0x30
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20014414 	.word	0x20014414

08007074 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8007074:	b580      	push	{r7, lr}
 8007076:	b08e      	sub	sp, #56	@ 0x38
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8007082:	f3ef 8311 	mrs	r3, BASEPRI
 8007086:	f04f 0120 	mov.w	r1, #32
 800708a:	f381 8811 	msr	BASEPRI, r1
 800708e:	61fb      	str	r3, [r7, #28]
 8007090:	4832      	ldr	r0, [pc, #200]	@ (800715c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8007092:	f7ff f974 	bl	800637e <_PreparePacket>
 8007096:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80070a4:	e00b      	b.n	80070be <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80070a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ac:	1c59      	adds	r1, r3, #1
 80070ae:	6379      	str	r1, [r7, #52]	@ 0x34
 80070b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070b4:	b2d2      	uxtb	r2, r2
 80070b6:	701a      	strb	r2, [r3, #0]
 80070b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ba:	09db      	lsrs	r3, r3, #7
 80070bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80070be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80070c2:	d8f0      	bhi.n	80070a6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80070c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	637a      	str	r2, [r7, #52]	@ 0x34
 80070ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070cc:	b2d2      	uxtb	r2, r2
 80070ce:	701a      	strb	r2, [r3, #0]
 80070d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070dc:	e00b      	b.n	80070f6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80070de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e4:	1c59      	adds	r1, r3, #1
 80070e6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80070e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070ec:	b2d2      	uxtb	r2, r2
 80070ee:	701a      	strb	r2, [r3, #0]
 80070f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f2:	09db      	lsrs	r3, r3, #7
 80070f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80070fa:	d8f0      	bhi.n	80070de <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80070fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007102:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007104:	b2d2      	uxtb	r2, r2
 8007106:	701a      	strb	r2, [r3, #0]
 8007108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	623b      	str	r3, [r7, #32]
 8007114:	e00b      	b.n	800712e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	b2da      	uxtb	r2, r3
 800711a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711c:	1c59      	adds	r1, r3, #1
 800711e:	6279      	str	r1, [r7, #36]	@ 0x24
 8007120:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007124:	b2d2      	uxtb	r2, r2
 8007126:	701a      	strb	r2, [r3, #0]
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	09db      	lsrs	r3, r3, #7
 800712c:	623b      	str	r3, [r7, #32]
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	2b7f      	cmp	r3, #127	@ 0x7f
 8007132:	d8f0      	bhi.n	8007116 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8007134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007136:	1c5a      	adds	r2, r3, #1
 8007138:	627a      	str	r2, [r7, #36]	@ 0x24
 800713a:	6a3a      	ldr	r2, [r7, #32]
 800713c:	b2d2      	uxtb	r2, r2
 800713e:	701a      	strb	r2, [r3, #0]
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007142:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	6979      	ldr	r1, [r7, #20]
 8007148:	69b8      	ldr	r0, [r7, #24]
 800714a:	f7ff fa09 	bl	8006560 <_SendPacket>
  RECORD_END();
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	f383 8811 	msr	BASEPRI, r3
}
 8007154:	bf00      	nop
 8007156:	3738      	adds	r7, #56	@ 0x38
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	20014414 	.word	0x20014414

08007160 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007160:	b580      	push	{r7, lr}
 8007162:	b090      	sub	sp, #64	@ 0x40
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800716e:	f3ef 8311 	mrs	r3, BASEPRI
 8007172:	f04f 0120 	mov.w	r1, #32
 8007176:	f381 8811 	msr	BASEPRI, r1
 800717a:	61fb      	str	r3, [r7, #28]
 800717c:	4840      	ldr	r0, [pc, #256]	@ (8007280 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800717e:	f7ff f8fe 	bl	800637e <_PreparePacket>
 8007182:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007190:	e00b      	b.n	80071aa <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8007192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007194:	b2da      	uxtb	r2, r3
 8007196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007198:	1c59      	adds	r1, r3, #1
 800719a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800719c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071a0:	b2d2      	uxtb	r2, r2
 80071a2:	701a      	strb	r2, [r3, #0]
 80071a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a6:	09db      	lsrs	r3, r3, #7
 80071a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80071ae:	d8f0      	bhi.n	8007192 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80071b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80071b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071b8:	b2d2      	uxtb	r2, r2
 80071ba:	701a      	strb	r2, [r3, #0]
 80071bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80071c8:	e00b      	b.n	80071e2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80071ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d0:	1c59      	adds	r1, r3, #1
 80071d2:	6379      	str	r1, [r7, #52]	@ 0x34
 80071d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071d8:	b2d2      	uxtb	r2, r2
 80071da:	701a      	strb	r2, [r3, #0]
 80071dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071de:	09db      	lsrs	r3, r3, #7
 80071e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80071e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80071e6:	d8f0      	bhi.n	80071ca <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80071e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ea:	1c5a      	adds	r2, r3, #1
 80071ec:	637a      	str	r2, [r7, #52]	@ 0x34
 80071ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071f0:	b2d2      	uxtb	r2, r2
 80071f2:	701a      	strb	r2, [r3, #0]
 80071f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007200:	e00b      	b.n	800721a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8007202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007204:	b2da      	uxtb	r2, r3
 8007206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007208:	1c59      	adds	r1, r3, #1
 800720a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800720c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007210:	b2d2      	uxtb	r2, r2
 8007212:	701a      	strb	r2, [r3, #0]
 8007214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007216:	09db      	lsrs	r3, r3, #7
 8007218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800721a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721c:	2b7f      	cmp	r3, #127	@ 0x7f
 800721e:	d8f0      	bhi.n	8007202 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007228:	b2d2      	uxtb	r2, r2
 800722a:	701a      	strb	r2, [r3, #0]
 800722c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800722e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	627b      	str	r3, [r7, #36]	@ 0x24
 8007234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007236:	623b      	str	r3, [r7, #32]
 8007238:	e00b      	b.n	8007252 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	b2da      	uxtb	r2, r3
 800723e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007240:	1c59      	adds	r1, r3, #1
 8007242:	6279      	str	r1, [r7, #36]	@ 0x24
 8007244:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007248:	b2d2      	uxtb	r2, r2
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	09db      	lsrs	r3, r3, #7
 8007250:	623b      	str	r3, [r7, #32]
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	2b7f      	cmp	r3, #127	@ 0x7f
 8007256:	d8f0      	bhi.n	800723a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	627a      	str	r2, [r7, #36]	@ 0x24
 800725e:	6a3a      	ldr	r2, [r7, #32]
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007266:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	6979      	ldr	r1, [r7, #20]
 800726c:	69b8      	ldr	r0, [r7, #24]
 800726e:	f7ff f977 	bl	8006560 <_SendPacket>
  RECORD_END();
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	f383 8811 	msr	BASEPRI, r3
}
 8007278:	bf00      	nop
 800727a:	3740      	adds	r7, #64	@ 0x40
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	20014414 	.word	0x20014414

08007284 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007284:	b580      	push	{r7, lr}
 8007286:	b08c      	sub	sp, #48	@ 0x30
 8007288:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800728a:	4b59      	ldr	r3, [pc, #356]	@ (80073f0 <SEGGER_SYSVIEW_Start+0x16c>)
 800728c:	2201      	movs	r2, #1
 800728e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007290:	f3ef 8311 	mrs	r3, BASEPRI
 8007294:	f04f 0120 	mov.w	r1, #32
 8007298:	f381 8811 	msr	BASEPRI, r1
 800729c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800729e:	4b54      	ldr	r3, [pc, #336]	@ (80073f0 <SEGGER_SYSVIEW_Start+0x16c>)
 80072a0:	785b      	ldrb	r3, [r3, #1]
 80072a2:	220a      	movs	r2, #10
 80072a4:	4953      	ldr	r1, [pc, #332]	@ (80073f4 <SEGGER_SYSVIEW_Start+0x170>)
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7f8 ff92 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80072b2:	f7fe fbf7 	bl	8005aa4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80072b6:	200a      	movs	r0, #10
 80072b8:	f7ff fe28 	bl	8006f0c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80072bc:	f3ef 8311 	mrs	r3, BASEPRI
 80072c0:	f04f 0120 	mov.w	r1, #32
 80072c4:	f381 8811 	msr	BASEPRI, r1
 80072c8:	60bb      	str	r3, [r7, #8]
 80072ca:	484b      	ldr	r0, [pc, #300]	@ (80073f8 <SEGGER_SYSVIEW_Start+0x174>)
 80072cc:	f7ff f857 	bl	800637e <_PreparePacket>
 80072d0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072da:	4b45      	ldr	r3, [pc, #276]	@ (80073f0 <SEGGER_SYSVIEW_Start+0x16c>)
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072e0:	e00b      	b.n	80072fa <SEGGER_SYSVIEW_Start+0x76>
 80072e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e8:	1c59      	adds	r1, r3, #1
 80072ea:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80072ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072f0:	b2d2      	uxtb	r2, r2
 80072f2:	701a      	strb	r2, [r3, #0]
 80072f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f6:	09db      	lsrs	r3, r3, #7
 80072f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80072fe:	d8f0      	bhi.n	80072e2 <SEGGER_SYSVIEW_Start+0x5e>
 8007300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007306:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007308:	b2d2      	uxtb	r2, r2
 800730a:	701a      	strb	r2, [r3, #0]
 800730c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	627b      	str	r3, [r7, #36]	@ 0x24
 8007314:	4b36      	ldr	r3, [pc, #216]	@ (80073f0 <SEGGER_SYSVIEW_Start+0x16c>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	623b      	str	r3, [r7, #32]
 800731a:	e00b      	b.n	8007334 <SEGGER_SYSVIEW_Start+0xb0>
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	b2da      	uxtb	r2, r3
 8007320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007322:	1c59      	adds	r1, r3, #1
 8007324:	6279      	str	r1, [r7, #36]	@ 0x24
 8007326:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800732a:	b2d2      	uxtb	r2, r2
 800732c:	701a      	strb	r2, [r3, #0]
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	09db      	lsrs	r3, r3, #7
 8007332:	623b      	str	r3, [r7, #32]
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	2b7f      	cmp	r3, #127	@ 0x7f
 8007338:	d8f0      	bhi.n	800731c <SEGGER_SYSVIEW_Start+0x98>
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007340:	6a3a      	ldr	r2, [r7, #32]
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	701a      	strb	r2, [r3, #0]
 8007346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007348:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	61fb      	str	r3, [r7, #28]
 800734e:	4b28      	ldr	r3, [pc, #160]	@ (80073f0 <SEGGER_SYSVIEW_Start+0x16c>)
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	61bb      	str	r3, [r7, #24]
 8007354:	e00b      	b.n	800736e <SEGGER_SYSVIEW_Start+0xea>
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	b2da      	uxtb	r2, r3
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	1c59      	adds	r1, r3, #1
 800735e:	61f9      	str	r1, [r7, #28]
 8007360:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007364:	b2d2      	uxtb	r2, r2
 8007366:	701a      	strb	r2, [r3, #0]
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	09db      	lsrs	r3, r3, #7
 800736c:	61bb      	str	r3, [r7, #24]
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	2b7f      	cmp	r3, #127	@ 0x7f
 8007372:	d8f0      	bhi.n	8007356 <SEGGER_SYSVIEW_Start+0xd2>
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	61fa      	str	r2, [r7, #28]
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	b2d2      	uxtb	r2, r2
 800737e:	701a      	strb	r2, [r3, #0]
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	2300      	movs	r3, #0
 800738a:	613b      	str	r3, [r7, #16]
 800738c:	e00b      	b.n	80073a6 <SEGGER_SYSVIEW_Start+0x122>
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	b2da      	uxtb	r2, r3
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	1c59      	adds	r1, r3, #1
 8007396:	6179      	str	r1, [r7, #20]
 8007398:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800739c:	b2d2      	uxtb	r2, r2
 800739e:	701a      	strb	r2, [r3, #0]
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	09db      	lsrs	r3, r3, #7
 80073a4:	613b      	str	r3, [r7, #16]
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80073aa:	d8f0      	bhi.n	800738e <SEGGER_SYSVIEW_Start+0x10a>
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	617a      	str	r2, [r7, #20]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	b2d2      	uxtb	r2, r2
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80073bc:	2218      	movs	r2, #24
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff f8cd 	bl	8006560 <_SendPacket>
      RECORD_END();
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80073cc:	4b08      	ldr	r3, [pc, #32]	@ (80073f0 <SEGGER_SYSVIEW_Start+0x16c>)
 80073ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80073d4:	4b06      	ldr	r3, [pc, #24]	@ (80073f0 <SEGGER_SYSVIEW_Start+0x16c>)
 80073d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80073da:	f000 f9eb 	bl	80077b4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80073de:	f000 f9b1 	bl	8007744 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80073e2:	f000 fc83 	bl	8007cec <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80073e6:	bf00      	nop
 80073e8:	3730      	adds	r7, #48	@ 0x30
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	200143e4 	.word	0x200143e4
 80073f4:	08008094 	.word	0x08008094
 80073f8:	20014414 	.word	0x20014414

080073fc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007402:	f3ef 8311 	mrs	r3, BASEPRI
 8007406:	f04f 0120 	mov.w	r1, #32
 800740a:	f381 8811 	msr	BASEPRI, r1
 800740e:	607b      	str	r3, [r7, #4]
 8007410:	480b      	ldr	r0, [pc, #44]	@ (8007440 <SEGGER_SYSVIEW_Stop+0x44>)
 8007412:	f7fe ffb4 	bl	800637e <_PreparePacket>
 8007416:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007418:	4b0a      	ldr	r3, [pc, #40]	@ (8007444 <SEGGER_SYSVIEW_Stop+0x48>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d007      	beq.n	8007430 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007420:	220b      	movs	r2, #11
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6838      	ldr	r0, [r7, #0]
 8007426:	f7ff f89b 	bl	8006560 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800742a:	4b06      	ldr	r3, [pc, #24]	@ (8007444 <SEGGER_SYSVIEW_Stop+0x48>)
 800742c:	2200      	movs	r2, #0
 800742e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f383 8811 	msr	BASEPRI, r3
}
 8007436:	bf00      	nop
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20014414 	.word	0x20014414
 8007444:	200143e4 	.word	0x200143e4

08007448 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007448:	b580      	push	{r7, lr}
 800744a:	b08c      	sub	sp, #48	@ 0x30
 800744c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800744e:	f3ef 8311 	mrs	r3, BASEPRI
 8007452:	f04f 0120 	mov.w	r1, #32
 8007456:	f381 8811 	msr	BASEPRI, r1
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	4845      	ldr	r0, [pc, #276]	@ (8007574 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800745e:	f7fe ff8e 	bl	800637e <_PreparePacket>
 8007462:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800746c:	4b42      	ldr	r3, [pc, #264]	@ (8007578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007472:	e00b      	b.n	800748c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007476:	b2da      	uxtb	r2, r3
 8007478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747a:	1c59      	adds	r1, r3, #1
 800747c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800747e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007482:	b2d2      	uxtb	r2, r2
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	09db      	lsrs	r3, r3, #7
 800748a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800748c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007490:	d8f0      	bhi.n	8007474 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007498:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80074a6:	4b34      	ldr	r3, [pc, #208]	@ (8007578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	623b      	str	r3, [r7, #32]
 80074ac:	e00b      	b.n	80074c6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b4:	1c59      	adds	r1, r3, #1
 80074b6:	6279      	str	r1, [r7, #36]	@ 0x24
 80074b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074bc:	b2d2      	uxtb	r2, r2
 80074be:	701a      	strb	r2, [r3, #0]
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	09db      	lsrs	r3, r3, #7
 80074c4:	623b      	str	r3, [r7, #32]
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80074ca:	d8f0      	bhi.n	80074ae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80074cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80074d2:	6a3a      	ldr	r2, [r7, #32]
 80074d4:	b2d2      	uxtb	r2, r2
 80074d6:	701a      	strb	r2, [r3, #0]
 80074d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	61fb      	str	r3, [r7, #28]
 80074e0:	4b25      	ldr	r3, [pc, #148]	@ (8007578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	61bb      	str	r3, [r7, #24]
 80074e6:	e00b      	b.n	8007500 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	1c59      	adds	r1, r3, #1
 80074f0:	61f9      	str	r1, [r7, #28]
 80074f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074f6:	b2d2      	uxtb	r2, r2
 80074f8:	701a      	strb	r2, [r3, #0]
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	09db      	lsrs	r3, r3, #7
 80074fe:	61bb      	str	r3, [r7, #24]
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	2b7f      	cmp	r3, #127	@ 0x7f
 8007504:	d8f0      	bhi.n	80074e8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	1c5a      	adds	r2, r3, #1
 800750a:	61fa      	str	r2, [r7, #28]
 800750c:	69ba      	ldr	r2, [r7, #24]
 800750e:	b2d2      	uxtb	r2, r2
 8007510:	701a      	strb	r2, [r3, #0]
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	617b      	str	r3, [r7, #20]
 800751a:	2300      	movs	r3, #0
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	e00b      	b.n	8007538 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	b2da      	uxtb	r2, r3
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	1c59      	adds	r1, r3, #1
 8007528:	6179      	str	r1, [r7, #20]
 800752a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800752e:	b2d2      	uxtb	r2, r2
 8007530:	701a      	strb	r2, [r3, #0]
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	09db      	lsrs	r3, r3, #7
 8007536:	613b      	str	r3, [r7, #16]
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	2b7f      	cmp	r3, #127	@ 0x7f
 800753c:	d8f0      	bhi.n	8007520 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	617a      	str	r2, [r7, #20]
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	b2d2      	uxtb	r2, r2
 8007548:	701a      	strb	r2, [r3, #0]
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800754e:	2218      	movs	r2, #24
 8007550:	6879      	ldr	r1, [r7, #4]
 8007552:	68b8      	ldr	r0, [r7, #8]
 8007554:	f7ff f804 	bl	8006560 <_SendPacket>
  RECORD_END();
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800755e:	4b06      	ldr	r3, [pc, #24]	@ (8007578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007566:	4b04      	ldr	r3, [pc, #16]	@ (8007578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756a:	4798      	blx	r3
  }
}
 800756c:	bf00      	nop
 800756e:	3730      	adds	r7, #48	@ 0x30
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	20014414 	.word	0x20014414
 8007578:	200143e4 	.word	0x200143e4

0800757c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800757c:	b580      	push	{r7, lr}
 800757e:	b092      	sub	sp, #72	@ 0x48
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007584:	f3ef 8311 	mrs	r3, BASEPRI
 8007588:	f04f 0120 	mov.w	r1, #32
 800758c:	f381 8811 	msr	BASEPRI, r1
 8007590:	617b      	str	r3, [r7, #20]
 8007592:	486a      	ldr	r0, [pc, #424]	@ (800773c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007594:	f7fe fef3 	bl	800637e <_PreparePacket>
 8007598:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	4b66      	ldr	r3, [pc, #408]	@ (8007740 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80075ae:	e00b      	b.n	80075c8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80075b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075b6:	1c59      	adds	r1, r3, #1
 80075b8:	6479      	str	r1, [r7, #68]	@ 0x44
 80075ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075be:	b2d2      	uxtb	r2, r2
 80075c0:	701a      	strb	r2, [r3, #0]
 80075c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075c4:	09db      	lsrs	r3, r3, #7
 80075c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80075c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80075cc:	d8f0      	bhi.n	80075b0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80075ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075d0:	1c5a      	adds	r2, r3, #1
 80075d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80075d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075d6:	b2d2      	uxtb	r2, r2
 80075d8:	701a      	strb	r2, [r3, #0]
 80075da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075e8:	e00b      	b.n	8007602 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80075ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075f0:	1c59      	adds	r1, r3, #1
 80075f2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80075f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075f8:	b2d2      	uxtb	r2, r2
 80075fa:	701a      	strb	r2, [r3, #0]
 80075fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fe:	09db      	lsrs	r3, r3, #7
 8007600:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007604:	2b7f      	cmp	r3, #127	@ 0x7f
 8007606:	d8f0      	bhi.n	80075ea <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800760a:	1c5a      	adds	r2, r3, #1
 800760c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800760e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007610:	b2d2      	uxtb	r2, r2
 8007612:	701a      	strb	r2, [r3, #0]
 8007614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007616:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2220      	movs	r2, #32
 800761e:	4619      	mov	r1, r3
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f7fe fe5f 	bl	80062e4 <_EncodeStr>
 8007626:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007628:	2209      	movs	r2, #9
 800762a:	68f9      	ldr	r1, [r7, #12]
 800762c:	6938      	ldr	r0, [r7, #16]
 800762e:	f7fe ff97 	bl	8006560 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	637b      	str	r3, [r7, #52]	@ 0x34
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	4b40      	ldr	r3, [pc, #256]	@ (8007740 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	633b      	str	r3, [r7, #48]	@ 0x30
 8007646:	e00b      	b.n	8007660 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764a:	b2da      	uxtb	r2, r3
 800764c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764e:	1c59      	adds	r1, r3, #1
 8007650:	6379      	str	r1, [r7, #52]	@ 0x34
 8007652:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007656:	b2d2      	uxtb	r2, r2
 8007658:	701a      	strb	r2, [r3, #0]
 800765a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765c:	09db      	lsrs	r3, r3, #7
 800765e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007662:	2b7f      	cmp	r3, #127	@ 0x7f
 8007664:	d8f0      	bhi.n	8007648 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	637a      	str	r2, [r7, #52]	@ 0x34
 800766c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800766e:	b2d2      	uxtb	r2, r2
 8007670:	701a      	strb	r2, [r3, #0]
 8007672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007674:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007680:	e00b      	b.n	800769a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007684:	b2da      	uxtb	r2, r3
 8007686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007688:	1c59      	adds	r1, r3, #1
 800768a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800768c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007690:	b2d2      	uxtb	r2, r2
 8007692:	701a      	strb	r2, [r3, #0]
 8007694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007696:	09db      	lsrs	r3, r3, #7
 8007698:	62bb      	str	r3, [r7, #40]	@ 0x28
 800769a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769c:	2b7f      	cmp	r3, #127	@ 0x7f
 800769e:	d8f0      	bhi.n	8007682 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80076a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076a8:	b2d2      	uxtb	r2, r2
 80076aa:	701a      	strb	r2, [r3, #0]
 80076ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	623b      	str	r3, [r7, #32]
 80076ba:	e00b      	b.n	80076d4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c2:	1c59      	adds	r1, r3, #1
 80076c4:	6279      	str	r1, [r7, #36]	@ 0x24
 80076c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	09db      	lsrs	r3, r3, #7
 80076d2:	623b      	str	r3, [r7, #32]
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80076d8:	d8f0      	bhi.n	80076bc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	627a      	str	r2, [r7, #36]	@ 0x24
 80076e0:	6a3a      	ldr	r2, [r7, #32]
 80076e2:	b2d2      	uxtb	r2, r2
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	61fb      	str	r3, [r7, #28]
 80076ee:	2300      	movs	r3, #0
 80076f0:	61bb      	str	r3, [r7, #24]
 80076f2:	e00b      	b.n	800770c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	1c59      	adds	r1, r3, #1
 80076fc:	61f9      	str	r1, [r7, #28]
 80076fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007702:	b2d2      	uxtb	r2, r2
 8007704:	701a      	strb	r2, [r3, #0]
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	09db      	lsrs	r3, r3, #7
 800770a:	61bb      	str	r3, [r7, #24]
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007710:	d8f0      	bhi.n	80076f4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	61fa      	str	r2, [r7, #28]
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	b2d2      	uxtb	r2, r2
 800771c:	701a      	strb	r2, [r3, #0]
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007722:	2215      	movs	r2, #21
 8007724:	68f9      	ldr	r1, [r7, #12]
 8007726:	6938      	ldr	r0, [r7, #16]
 8007728:	f7fe ff1a 	bl	8006560 <_SendPacket>
  RECORD_END();
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f383 8811 	msr	BASEPRI, r3
}
 8007732:	bf00      	nop
 8007734:	3748      	adds	r7, #72	@ 0x48
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20014414 	.word	0x20014414
 8007740:	200143e4 	.word	0x200143e4

08007744 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007744:	b580      	push	{r7, lr}
 8007746:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007748:	4b07      	ldr	r3, [pc, #28]	@ (8007768 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d008      	beq.n	8007762 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007750:	4b05      	ldr	r3, [pc, #20]	@ (8007768 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800775a:	4b03      	ldr	r3, [pc, #12]	@ (8007768 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	4798      	blx	r3
  }
}
 8007762:	bf00      	nop
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	200143e4 	.word	0x200143e4

0800776c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007774:	f3ef 8311 	mrs	r3, BASEPRI
 8007778:	f04f 0120 	mov.w	r1, #32
 800777c:	f381 8811 	msr	BASEPRI, r1
 8007780:	617b      	str	r3, [r7, #20]
 8007782:	480b      	ldr	r0, [pc, #44]	@ (80077b0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007784:	f7fe fdfb 	bl	800637e <_PreparePacket>
 8007788:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800778a:	2280      	movs	r2, #128	@ 0x80
 800778c:	6879      	ldr	r1, [r7, #4]
 800778e:	6938      	ldr	r0, [r7, #16]
 8007790:	f7fe fda8 	bl	80062e4 <_EncodeStr>
 8007794:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007796:	220e      	movs	r2, #14
 8007798:	68f9      	ldr	r1, [r7, #12]
 800779a:	6938      	ldr	r0, [r7, #16]
 800779c:	f7fe fee0 	bl	8006560 <_SendPacket>
  RECORD_END();
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f383 8811 	msr	BASEPRI, r3
}
 80077a6:	bf00      	nop
 80077a8:	3718      	adds	r7, #24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	20014414 	.word	0x20014414

080077b4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80077b4:	b590      	push	{r4, r7, lr}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80077ba:	4b15      	ldr	r3, [pc, #84]	@ (8007810 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01a      	beq.n	80077f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80077c2:	4b13      	ldr	r3, [pc, #76]	@ (8007810 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d015      	beq.n	80077f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80077cc:	4b10      	ldr	r3, [pc, #64]	@ (8007810 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80077ce:	6a1b      	ldr	r3, [r3, #32]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4798      	blx	r3
 80077d4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80077d8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80077da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077de:	f04f 0200 	mov.w	r2, #0
 80077e2:	f04f 0300 	mov.w	r3, #0
 80077e6:	000a      	movs	r2, r1
 80077e8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80077ea:	4613      	mov	r3, r2
 80077ec:	461a      	mov	r2, r3
 80077ee:	4621      	mov	r1, r4
 80077f0:	200d      	movs	r0, #13
 80077f2:	f7ff fbe5 	bl	8006fc0 <SEGGER_SYSVIEW_RecordU32x2>
 80077f6:	e006      	b.n	8007806 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80077f8:	4b06      	ldr	r3, [pc, #24]	@ (8007814 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4619      	mov	r1, r3
 80077fe:	200c      	movs	r0, #12
 8007800:	f7ff fba2 	bl	8006f48 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	bd90      	pop	{r4, r7, pc}
 800780e:	bf00      	nop
 8007810:	200143e4 	.word	0x200143e4
 8007814:	e0001004 	.word	0xe0001004

08007818 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800781e:	f3ef 8311 	mrs	r3, BASEPRI
 8007822:	f04f 0120 	mov.w	r1, #32
 8007826:	f381 8811 	msr	BASEPRI, r1
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	4819      	ldr	r0, [pc, #100]	@ (8007894 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800782e:	f7fe fda6 	bl	800637e <_PreparePacket>
 8007832:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007838:	4b17      	ldr	r3, [pc, #92]	@ (8007898 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007840:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	617b      	str	r3, [r7, #20]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	613b      	str	r3, [r7, #16]
 800784a:	e00b      	b.n	8007864 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	b2da      	uxtb	r2, r3
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	1c59      	adds	r1, r3, #1
 8007854:	6179      	str	r1, [r7, #20]
 8007856:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800785a:	b2d2      	uxtb	r2, r2
 800785c:	701a      	strb	r2, [r3, #0]
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	09db      	lsrs	r3, r3, #7
 8007862:	613b      	str	r3, [r7, #16]
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	2b7f      	cmp	r3, #127	@ 0x7f
 8007868:	d8f0      	bhi.n	800784c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	617a      	str	r2, [r7, #20]
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	b2d2      	uxtb	r2, r2
 8007874:	701a      	strb	r2, [r3, #0]
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800787a:	2202      	movs	r2, #2
 800787c:	6879      	ldr	r1, [r7, #4]
 800787e:	68b8      	ldr	r0, [r7, #8]
 8007880:	f7fe fe6e 	bl	8006560 <_SendPacket>
  RECORD_END();
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f383 8811 	msr	BASEPRI, r3
}
 800788a:	bf00      	nop
 800788c:	3718      	adds	r7, #24
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20014414 	.word	0x20014414
 8007898:	e000ed04 	.word	0xe000ed04

0800789c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80078a2:	f3ef 8311 	mrs	r3, BASEPRI
 80078a6:	f04f 0120 	mov.w	r1, #32
 80078aa:	f381 8811 	msr	BASEPRI, r1
 80078ae:	607b      	str	r3, [r7, #4]
 80078b0:	4807      	ldr	r0, [pc, #28]	@ (80078d0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80078b2:	f7fe fd64 	bl	800637e <_PreparePacket>
 80078b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80078b8:	2203      	movs	r2, #3
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6838      	ldr	r0, [r7, #0]
 80078be:	f7fe fe4f 	bl	8006560 <_SendPacket>
  RECORD_END();
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f383 8811 	msr	BASEPRI, r3
}
 80078c8:	bf00      	nop
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	20014414 	.word	0x20014414

080078d4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80078da:	f3ef 8311 	mrs	r3, BASEPRI
 80078de:	f04f 0120 	mov.w	r1, #32
 80078e2:	f381 8811 	msr	BASEPRI, r1
 80078e6:	607b      	str	r3, [r7, #4]
 80078e8:	4807      	ldr	r0, [pc, #28]	@ (8007908 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80078ea:	f7fe fd48 	bl	800637e <_PreparePacket>
 80078ee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80078f0:	2212      	movs	r2, #18
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6838      	ldr	r0, [r7, #0]
 80078f6:	f7fe fe33 	bl	8006560 <_SendPacket>
  RECORD_END();
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f383 8811 	msr	BASEPRI, r3
}
 8007900:	bf00      	nop
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	20014414 	.word	0x20014414

0800790c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007912:	f3ef 8311 	mrs	r3, BASEPRI
 8007916:	f04f 0120 	mov.w	r1, #32
 800791a:	f381 8811 	msr	BASEPRI, r1
 800791e:	607b      	str	r3, [r7, #4]
 8007920:	4807      	ldr	r0, [pc, #28]	@ (8007940 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007922:	f7fe fd2c 	bl	800637e <_PreparePacket>
 8007926:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007928:	2211      	movs	r2, #17
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6838      	ldr	r0, [r7, #0]
 800792e:	f7fe fe17 	bl	8006560 <_SendPacket>
  RECORD_END();
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f383 8811 	msr	BASEPRI, r3
}
 8007938:	bf00      	nop
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	20014414 	.word	0x20014414

08007944 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007944:	b580      	push	{r7, lr}
 8007946:	b088      	sub	sp, #32
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800794c:	f3ef 8311 	mrs	r3, BASEPRI
 8007950:	f04f 0120 	mov.w	r1, #32
 8007954:	f381 8811 	msr	BASEPRI, r1
 8007958:	617b      	str	r3, [r7, #20]
 800795a:	4819      	ldr	r0, [pc, #100]	@ (80079c0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800795c:	f7fe fd0f 	bl	800637e <_PreparePacket>
 8007960:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007966:	4b17      	ldr	r3, [pc, #92]	@ (80079c4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	61fb      	str	r3, [r7, #28]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	61bb      	str	r3, [r7, #24]
 8007978:	e00b      	b.n	8007992 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	b2da      	uxtb	r2, r3
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	1c59      	adds	r1, r3, #1
 8007982:	61f9      	str	r1, [r7, #28]
 8007984:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007988:	b2d2      	uxtb	r2, r2
 800798a:	701a      	strb	r2, [r3, #0]
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	09db      	lsrs	r3, r3, #7
 8007990:	61bb      	str	r3, [r7, #24]
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	2b7f      	cmp	r3, #127	@ 0x7f
 8007996:	d8f0      	bhi.n	800797a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	61fa      	str	r2, [r7, #28]
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	b2d2      	uxtb	r2, r2
 80079a2:	701a      	strb	r2, [r3, #0]
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80079a8:	2208      	movs	r2, #8
 80079aa:	68f9      	ldr	r1, [r7, #12]
 80079ac:	6938      	ldr	r0, [r7, #16]
 80079ae:	f7fe fdd7 	bl	8006560 <_SendPacket>
  RECORD_END();
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f383 8811 	msr	BASEPRI, r3
}
 80079b8:	bf00      	nop
 80079ba:	3720      	adds	r7, #32
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20014414 	.word	0x20014414
 80079c4:	200143e4 	.word	0x200143e4

080079c8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b088      	sub	sp, #32
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80079d0:	f3ef 8311 	mrs	r3, BASEPRI
 80079d4:	f04f 0120 	mov.w	r1, #32
 80079d8:	f381 8811 	msr	BASEPRI, r1
 80079dc:	617b      	str	r3, [r7, #20]
 80079de:	4819      	ldr	r0, [pc, #100]	@ (8007a44 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80079e0:	f7fe fccd 	bl	800637e <_PreparePacket>
 80079e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80079ea:	4b17      	ldr	r3, [pc, #92]	@ (8007a48 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	61fb      	str	r3, [r7, #28]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	61bb      	str	r3, [r7, #24]
 80079fc:	e00b      	b.n	8007a16 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	1c59      	adds	r1, r3, #1
 8007a06:	61f9      	str	r1, [r7, #28]
 8007a08:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007a0c:	b2d2      	uxtb	r2, r2
 8007a0e:	701a      	strb	r2, [r3, #0]
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	09db      	lsrs	r3, r3, #7
 8007a14:	61bb      	str	r3, [r7, #24]
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a1a:	d8f0      	bhi.n	80079fe <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	1c5a      	adds	r2, r3, #1
 8007a20:	61fa      	str	r2, [r7, #28]
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	b2d2      	uxtb	r2, r2
 8007a26:	701a      	strb	r2, [r3, #0]
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007a2c:	2204      	movs	r2, #4
 8007a2e:	68f9      	ldr	r1, [r7, #12]
 8007a30:	6938      	ldr	r0, [r7, #16]
 8007a32:	f7fe fd95 	bl	8006560 <_SendPacket>
  RECORD_END();
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f383 8811 	msr	BASEPRI, r3
}
 8007a3c:	bf00      	nop
 8007a3e:	3720      	adds	r7, #32
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20014414 	.word	0x20014414
 8007a48:	200143e4 	.word	0x200143e4

08007a4c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b088      	sub	sp, #32
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007a54:	f3ef 8311 	mrs	r3, BASEPRI
 8007a58:	f04f 0120 	mov.w	r1, #32
 8007a5c:	f381 8811 	msr	BASEPRI, r1
 8007a60:	617b      	str	r3, [r7, #20]
 8007a62:	4819      	ldr	r0, [pc, #100]	@ (8007ac8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007a64:	f7fe fc8b 	bl	800637e <_PreparePacket>
 8007a68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007a6e:	4b17      	ldr	r3, [pc, #92]	@ (8007acc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	61fb      	str	r3, [r7, #28]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	61bb      	str	r3, [r7, #24]
 8007a80:	e00b      	b.n	8007a9a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	1c59      	adds	r1, r3, #1
 8007a8a:	61f9      	str	r1, [r7, #28]
 8007a8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007a90:	b2d2      	uxtb	r2, r2
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	09db      	lsrs	r3, r3, #7
 8007a98:	61bb      	str	r3, [r7, #24]
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a9e:	d8f0      	bhi.n	8007a82 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	1c5a      	adds	r2, r3, #1
 8007aa4:	61fa      	str	r2, [r7, #28]
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	b2d2      	uxtb	r2, r2
 8007aaa:	701a      	strb	r2, [r3, #0]
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007ab0:	2206      	movs	r2, #6
 8007ab2:	68f9      	ldr	r1, [r7, #12]
 8007ab4:	6938      	ldr	r0, [r7, #16]
 8007ab6:	f7fe fd53 	bl	8006560 <_SendPacket>
  RECORD_END();
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f383 8811 	msr	BASEPRI, r3
}
 8007ac0:	bf00      	nop
 8007ac2:	3720      	adds	r7, #32
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	20014414 	.word	0x20014414
 8007acc:	200143e4 	.word	0x200143e4

08007ad0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08a      	sub	sp, #40	@ 0x28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007ada:	f3ef 8311 	mrs	r3, BASEPRI
 8007ade:	f04f 0120 	mov.w	r1, #32
 8007ae2:	f381 8811 	msr	BASEPRI, r1
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	4827      	ldr	r0, [pc, #156]	@ (8007b88 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007aea:	f7fe fc48 	bl	800637e <_PreparePacket>
 8007aee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007af4:	4b25      	ldr	r3, [pc, #148]	@ (8007b8c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	623b      	str	r3, [r7, #32]
 8007b06:	e00b      	b.n	8007b20 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0e:	1c59      	adds	r1, r3, #1
 8007b10:	6279      	str	r1, [r7, #36]	@ 0x24
 8007b12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007b16:	b2d2      	uxtb	r2, r2
 8007b18:	701a      	strb	r2, [r3, #0]
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	09db      	lsrs	r3, r3, #7
 8007b1e:	623b      	str	r3, [r7, #32]
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b24:	d8f0      	bhi.n	8007b08 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b2c:	6a3a      	ldr	r2, [r7, #32]
 8007b2e:	b2d2      	uxtb	r2, r2
 8007b30:	701a      	strb	r2, [r3, #0]
 8007b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	61fb      	str	r3, [r7, #28]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	61bb      	str	r3, [r7, #24]
 8007b3e:	e00b      	b.n	8007b58 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	1c59      	adds	r1, r3, #1
 8007b48:	61f9      	str	r1, [r7, #28]
 8007b4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007b4e:	b2d2      	uxtb	r2, r2
 8007b50:	701a      	strb	r2, [r3, #0]
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	09db      	lsrs	r3, r3, #7
 8007b56:	61bb      	str	r3, [r7, #24]
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b5c:	d8f0      	bhi.n	8007b40 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	61fa      	str	r2, [r7, #28]
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	b2d2      	uxtb	r2, r2
 8007b68:	701a      	strb	r2, [r3, #0]
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007b6e:	2207      	movs	r2, #7
 8007b70:	68f9      	ldr	r1, [r7, #12]
 8007b72:	6938      	ldr	r0, [r7, #16]
 8007b74:	f7fe fcf4 	bl	8006560 <_SendPacket>
  RECORD_END();
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f383 8811 	msr	BASEPRI, r3
}
 8007b7e:	bf00      	nop
 8007b80:	3728      	adds	r7, #40	@ 0x28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20014414 	.word	0x20014414
 8007b8c:	200143e4 	.word	0x200143e4

08007b90 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007b98:	4b04      	ldr	r3, [pc, #16]	@ (8007bac <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	1ad3      	subs	r3, r2, r3
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	200143e4 	.word	0x200143e4

08007bb0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b08c      	sub	sp, #48	@ 0x30
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007bba:	4b3b      	ldr	r3, [pc, #236]	@ (8007ca8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d06d      	beq.n	8007c9e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007bc2:	4b39      	ldr	r3, [pc, #228]	@ (8007ca8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007bc8:	2300      	movs	r3, #0
 8007bca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007bcc:	e008      	b.n	8007be0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d007      	beq.n	8007bea <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bdc:	3301      	adds	r3, #1
 8007bde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007be0:	79fb      	ldrb	r3, [r7, #7]
 8007be2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d3f2      	bcc.n	8007bce <SEGGER_SYSVIEW_SendModule+0x1e>
 8007be8:	e000      	b.n	8007bec <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007bea:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d055      	beq.n	8007c9e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007bf2:	f3ef 8311 	mrs	r3, BASEPRI
 8007bf6:	f04f 0120 	mov.w	r1, #32
 8007bfa:	f381 8811 	msr	BASEPRI, r1
 8007bfe:	617b      	str	r3, [r7, #20]
 8007c00:	482a      	ldr	r0, [pc, #168]	@ (8007cac <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007c02:	f7fe fbbc 	bl	800637e <_PreparePacket>
 8007c06:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c10:	79fb      	ldrb	r3, [r7, #7]
 8007c12:	623b      	str	r3, [r7, #32]
 8007c14:	e00b      	b.n	8007c2e <SEGGER_SYSVIEW_SendModule+0x7e>
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1c:	1c59      	adds	r1, r3, #1
 8007c1e:	6279      	str	r1, [r7, #36]	@ 0x24
 8007c20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007c24:	b2d2      	uxtb	r2, r2
 8007c26:	701a      	strb	r2, [r3, #0]
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	09db      	lsrs	r3, r3, #7
 8007c2c:	623b      	str	r3, [r7, #32]
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c32:	d8f0      	bhi.n	8007c16 <SEGGER_SYSVIEW_SendModule+0x66>
 8007c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c3a:	6a3a      	ldr	r2, [r7, #32]
 8007c3c:	b2d2      	uxtb	r2, r2
 8007c3e:	701a      	strb	r2, [r3, #0]
 8007c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c42:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	61fb      	str	r3, [r7, #28]
 8007c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	61bb      	str	r3, [r7, #24]
 8007c4e:	e00b      	b.n	8007c68 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	1c59      	adds	r1, r3, #1
 8007c58:	61f9      	str	r1, [r7, #28]
 8007c5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007c5e:	b2d2      	uxtb	r2, r2
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	09db      	lsrs	r3, r3, #7
 8007c66:	61bb      	str	r3, [r7, #24]
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c6c:	d8f0      	bhi.n	8007c50 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	1c5a      	adds	r2, r3, #1
 8007c72:	61fa      	str	r2, [r7, #28]
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	701a      	strb	r2, [r3, #0]
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2280      	movs	r2, #128	@ 0x80
 8007c84:	4619      	mov	r1, r3
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f7fe fb2c 	bl	80062e4 <_EncodeStr>
 8007c8c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007c8e:	2216      	movs	r2, #22
 8007c90:	68f9      	ldr	r1, [r7, #12]
 8007c92:	6938      	ldr	r0, [r7, #16]
 8007c94:	f7fe fc64 	bl	8006560 <_SendPacket>
      RECORD_END();
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007c9e:	bf00      	nop
 8007ca0:	3730      	adds	r7, #48	@ 0x30
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	2001440c 	.word	0x2001440c
 8007cac:	20014414 	.word	0x20014414

08007cb0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00f      	beq.n	8007cde <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8007ce8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1f2      	bne.n	8007cc4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007cde:	bf00      	nop
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	2001440c 	.word	0x2001440c

08007cec <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007cf2:	f3ef 8311 	mrs	r3, BASEPRI
 8007cf6:	f04f 0120 	mov.w	r1, #32
 8007cfa:	f381 8811 	msr	BASEPRI, r1
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	4817      	ldr	r0, [pc, #92]	@ (8007d60 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007d02:	f7fe fb3c 	bl	800637e <_PreparePacket>
 8007d06:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	617b      	str	r3, [r7, #20]
 8007d10:	4b14      	ldr	r3, [pc, #80]	@ (8007d64 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	613b      	str	r3, [r7, #16]
 8007d16:	e00b      	b.n	8007d30 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	1c59      	adds	r1, r3, #1
 8007d20:	6179      	str	r1, [r7, #20]
 8007d22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007d26:	b2d2      	uxtb	r2, r2
 8007d28:	701a      	strb	r2, [r3, #0]
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	09db      	lsrs	r3, r3, #7
 8007d2e:	613b      	str	r3, [r7, #16]
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d34:	d8f0      	bhi.n	8007d18 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	617a      	str	r2, [r7, #20]
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	b2d2      	uxtb	r2, r2
 8007d40:	701a      	strb	r2, [r3, #0]
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007d46:	221b      	movs	r2, #27
 8007d48:	6879      	ldr	r1, [r7, #4]
 8007d4a:	68b8      	ldr	r0, [r7, #8]
 8007d4c:	f7fe fc08 	bl	8006560 <_SendPacket>
  RECORD_END();
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f383 8811 	msr	BASEPRI, r3
}
 8007d56:	bf00      	nop
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	20014414 	.word	0x20014414
 8007d64:	20014410 	.word	0x20014410

08007d68 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007d68:	b40f      	push	{r0, r1, r2, r3}
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007d70:	f107 0314 	add.w	r3, r7, #20
 8007d74:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007d76:	1d3b      	adds	r3, r7, #4
 8007d78:	461a      	mov	r2, r3
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	6938      	ldr	r0, [r7, #16]
 8007d7e:	f7fe fe79 	bl	8006a74 <_VPrintTarget>
  va_end(ParamList);
}
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d8c:	b004      	add	sp, #16
 8007d8e:	4770      	bx	lr

08007d90 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08a      	sub	sp, #40	@ 0x28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007d98:	f3ef 8311 	mrs	r3, BASEPRI
 8007d9c:	f04f 0120 	mov.w	r1, #32
 8007da0:	f381 8811 	msr	BASEPRI, r1
 8007da4:	617b      	str	r3, [r7, #20]
 8007da6:	4827      	ldr	r0, [pc, #156]	@ (8007e44 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007da8:	f7fe fae9 	bl	800637e <_PreparePacket>
 8007dac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007dae:	2280      	movs	r2, #128	@ 0x80
 8007db0:	6879      	ldr	r1, [r7, #4]
 8007db2:	6938      	ldr	r0, [r7, #16]
 8007db4:	f7fe fa96 	bl	80062e4 <_EncodeStr>
 8007db8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	623b      	str	r3, [r7, #32]
 8007dc2:	e00b      	b.n	8007ddc <SEGGER_SYSVIEW_Warn+0x4c>
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dca:	1c59      	adds	r1, r3, #1
 8007dcc:	6279      	str	r1, [r7, #36]	@ 0x24
 8007dce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	701a      	strb	r2, [r3, #0]
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	09db      	lsrs	r3, r3, #7
 8007dda:	623b      	str	r3, [r7, #32]
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	2b7f      	cmp	r3, #127	@ 0x7f
 8007de0:	d8f0      	bhi.n	8007dc4 <SEGGER_SYSVIEW_Warn+0x34>
 8007de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	627a      	str	r2, [r7, #36]	@ 0x24
 8007de8:	6a3a      	ldr	r2, [r7, #32]
 8007dea:	b2d2      	uxtb	r2, r2
 8007dec:	701a      	strb	r2, [r3, #0]
 8007dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	61fb      	str	r3, [r7, #28]
 8007df6:	2300      	movs	r3, #0
 8007df8:	61bb      	str	r3, [r7, #24]
 8007dfa:	e00b      	b.n	8007e14 <SEGGER_SYSVIEW_Warn+0x84>
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	1c59      	adds	r1, r3, #1
 8007e04:	61f9      	str	r1, [r7, #28]
 8007e06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007e0a:	b2d2      	uxtb	r2, r2
 8007e0c:	701a      	strb	r2, [r3, #0]
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	09db      	lsrs	r3, r3, #7
 8007e12:	61bb      	str	r3, [r7, #24]
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e18:	d8f0      	bhi.n	8007dfc <SEGGER_SYSVIEW_Warn+0x6c>
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	61fa      	str	r2, [r7, #28]
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	b2d2      	uxtb	r2, r2
 8007e24:	701a      	strb	r2, [r3, #0]
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007e2a:	221a      	movs	r2, #26
 8007e2c:	68f9      	ldr	r1, [r7, #12]
 8007e2e:	6938      	ldr	r0, [r7, #16]
 8007e30:	f7fe fb96 	bl	8006560 <_SendPacket>
  RECORD_END();
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f383 8811 	msr	BASEPRI, r3
}
 8007e3a:	bf00      	nop
 8007e3c:	3728      	adds	r7, #40	@ 0x28
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	20014414 	.word	0x20014414

08007e48 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007e4c:	4b13      	ldr	r3, [pc, #76]	@ (8007e9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e4e:	7e1b      	ldrb	r3, [r3, #24]
 8007e50:	4619      	mov	r1, r3
 8007e52:	4a13      	ldr	r2, [pc, #76]	@ (8007ea0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007e54:	460b      	mov	r3, r1
 8007e56:	005b      	lsls	r3, r3, #1
 8007e58:	440b      	add	r3, r1
 8007e5a:	00db      	lsls	r3, r3, #3
 8007e5c:	4413      	add	r3, r2
 8007e5e:	336c      	adds	r3, #108	@ 0x6c
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	4b0e      	ldr	r3, [pc, #56]	@ (8007e9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e64:	7e1b      	ldrb	r3, [r3, #24]
 8007e66:	4618      	mov	r0, r3
 8007e68:	490d      	ldr	r1, [pc, #52]	@ (8007ea0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	4403      	add	r3, r0
 8007e70:	00db      	lsls	r3, r3, #3
 8007e72:	440b      	add	r3, r1
 8007e74:	3370      	adds	r3, #112	@ 0x70
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d00b      	beq.n	8007e94 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007e7c:	4b07      	ldr	r3, [pc, #28]	@ (8007e9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e7e:	789b      	ldrb	r3, [r3, #2]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d107      	bne.n	8007e94 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007e84:	4b05      	ldr	r3, [pc, #20]	@ (8007e9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e86:	2201      	movs	r2, #1
 8007e88:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007e8a:	f7fe fa85 	bl	8006398 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007e8e:	4b03      	ldr	r3, [pc, #12]	@ (8007e9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007e94:	4b01      	ldr	r3, [pc, #4]	@ (8007e9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	200143e4 	.word	0x200143e4
 8007ea0:	20012f24 	.word	0x20012f24

08007ea4 <memcmp>:
 8007ea4:	b510      	push	{r4, lr}
 8007ea6:	3901      	subs	r1, #1
 8007ea8:	4402      	add	r2, r0
 8007eaa:	4290      	cmp	r0, r2
 8007eac:	d101      	bne.n	8007eb2 <memcmp+0xe>
 8007eae:	2000      	movs	r0, #0
 8007eb0:	e005      	b.n	8007ebe <memcmp+0x1a>
 8007eb2:	7803      	ldrb	r3, [r0, #0]
 8007eb4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007eb8:	42a3      	cmp	r3, r4
 8007eba:	d001      	beq.n	8007ec0 <memcmp+0x1c>
 8007ebc:	1b18      	subs	r0, r3, r4
 8007ebe:	bd10      	pop	{r4, pc}
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	e7f2      	b.n	8007eaa <memcmp+0x6>

08007ec4 <memset>:
 8007ec4:	4402      	add	r2, r0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d100      	bne.n	8007ece <memset+0xa>
 8007ecc:	4770      	bx	lr
 8007ece:	f803 1b01 	strb.w	r1, [r3], #1
 8007ed2:	e7f9      	b.n	8007ec8 <memset+0x4>

08007ed4 <__libc_init_array>:
 8007ed4:	b570      	push	{r4, r5, r6, lr}
 8007ed6:	4d0d      	ldr	r5, [pc, #52]	@ (8007f0c <__libc_init_array+0x38>)
 8007ed8:	4c0d      	ldr	r4, [pc, #52]	@ (8007f10 <__libc_init_array+0x3c>)
 8007eda:	1b64      	subs	r4, r4, r5
 8007edc:	10a4      	asrs	r4, r4, #2
 8007ede:	2600      	movs	r6, #0
 8007ee0:	42a6      	cmp	r6, r4
 8007ee2:	d109      	bne.n	8007ef8 <__libc_init_array+0x24>
 8007ee4:	4d0b      	ldr	r5, [pc, #44]	@ (8007f14 <__libc_init_array+0x40>)
 8007ee6:	4c0c      	ldr	r4, [pc, #48]	@ (8007f18 <__libc_init_array+0x44>)
 8007ee8:	f000 f826 	bl	8007f38 <_init>
 8007eec:	1b64      	subs	r4, r4, r5
 8007eee:	10a4      	asrs	r4, r4, #2
 8007ef0:	2600      	movs	r6, #0
 8007ef2:	42a6      	cmp	r6, r4
 8007ef4:	d105      	bne.n	8007f02 <__libc_init_array+0x2e>
 8007ef6:	bd70      	pop	{r4, r5, r6, pc}
 8007ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007efc:	4798      	blx	r3
 8007efe:	3601      	adds	r6, #1
 8007f00:	e7ee      	b.n	8007ee0 <__libc_init_array+0xc>
 8007f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f06:	4798      	blx	r3
 8007f08:	3601      	adds	r6, #1
 8007f0a:	e7f2      	b.n	8007ef2 <__libc_init_array+0x1e>
 8007f0c:	080080b8 	.word	0x080080b8
 8007f10:	080080b8 	.word	0x080080b8
 8007f14:	080080b8 	.word	0x080080b8
 8007f18:	080080bc 	.word	0x080080bc

08007f1c <memcpy>:
 8007f1c:	440a      	add	r2, r1
 8007f1e:	4291      	cmp	r1, r2
 8007f20:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f24:	d100      	bne.n	8007f28 <memcpy+0xc>
 8007f26:	4770      	bx	lr
 8007f28:	b510      	push	{r4, lr}
 8007f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f32:	4291      	cmp	r1, r2
 8007f34:	d1f9      	bne.n	8007f2a <memcpy+0xe>
 8007f36:	bd10      	pop	{r4, pc}

08007f38 <_init>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	bf00      	nop
 8007f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3e:	bc08      	pop	{r3}
 8007f40:	469e      	mov	lr, r3
 8007f42:	4770      	bx	lr

08007f44 <_fini>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	bf00      	nop
 8007f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4a:	bc08      	pop	{r3}
 8007f4c:	469e      	mov	lr, r3
 8007f4e:	4770      	bx	lr
